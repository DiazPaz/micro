

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Jun 17 10:07:20 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,space=0,delta=2
    11                           	psect	clrtext,global,class=CODE,space=0,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    15                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=2
    19                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=3
    22                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=3
    25                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=3
    26                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    36                           	dabs	1,0x7E,2
    37     0000                     
    38                           ; Generated 26/03/2025 GMT
    39                           ; 
    40                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72     0004                     fsr             equ	4
    73     0004                     fsr0            equ	4
    74     0000                     indf            equ	0
    75     0000                     indf0           equ	0
    76     0002                     pc              equ	2
    77     0002                     pcl             equ	2
    78     000A                     pclath          equ	10
    79     0003                     status          equ	3
    80     0000                     INDF            equ	0	;# 
    81     0001                     TMR0            equ	1	;# 
    82     0002                     PCL             equ	2	;# 
    83     0003                     STATUS          equ	3	;# 
    84     0004                     FSR             equ	4	;# 
    85     0005                     PORTA           equ	5	;# 
    86     0006                     PORTB           equ	6	;# 
    87     0007                     PORTC           equ	7	;# 
    88     0008                     PORTD           equ	8	;# 
    89     0009                     PORTE           equ	9	;# 
    90     000A                     PCLATH          equ	10	;# 
    91     000B                     INTCON          equ	11	;# 
    92     000C                     PIR1            equ	12	;# 
    93     000D                     PIR2            equ	13	;# 
    94     000E                     TMR1            equ	14	;# 
    95     000E                     TMR1L           equ	14	;# 
    96     000F                     TMR1H           equ	15	;# 
    97     0010                     T1CON           equ	16	;# 
    98     0011                     TMR2            equ	17	;# 
    99     0012                     T2CON           equ	18	;# 
   100     0013                     SSPBUF          equ	19	;# 
   101     0014                     SSPCON          equ	20	;# 
   102     0015                     CCPR1           equ	21	;# 
   103     0015                     CCPR1L          equ	21	;# 
   104     0016                     CCPR1H          equ	22	;# 
   105     0017                     CCP1CON         equ	23	;# 
   106     0018                     RCSTA           equ	24	;# 
   107     0019                     TXREG           equ	25	;# 
   108     001A                     RCREG           equ	26	;# 
   109     001B                     CCPR2           equ	27	;# 
   110     001B                     CCPR2L          equ	27	;# 
   111     001C                     CCPR2H          equ	28	;# 
   112     001D                     CCP2CON         equ	29	;# 
   113     001E                     ADRESH          equ	30	;# 
   114     001F                     ADCON0          equ	31	;# 
   115     0081                     OPTION_REG      equ	129	;# 
   116     0085                     TRISA           equ	133	;# 
   117     0086                     TRISB           equ	134	;# 
   118     0087                     TRISC           equ	135	;# 
   119     0088                     TRISD           equ	136	;# 
   120     0089                     TRISE           equ	137	;# 
   121     008C                     PIE1            equ	140	;# 
   122     008D                     PIE2            equ	141	;# 
   123     008E                     PCON            equ	142	;# 
   124     008F                     OSCCON          equ	143	;# 
   125     0090                     OSCTUNE         equ	144	;# 
   126     0091                     SSPCON2         equ	145	;# 
   127     0092                     PR2             equ	146	;# 
   128     0093                     SSPADD          equ	147	;# 
   129     0093                     SSPMSK          equ	147	;# 
   130     0093                     MSK             equ	147	;# 
   131     0094                     SSPSTAT         equ	148	;# 
   132     0095                     WPUB            equ	149	;# 
   133     0096                     IOCB            equ	150	;# 
   134     0097                     VRCON           equ	151	;# 
   135     0098                     TXSTA           equ	152	;# 
   136     0099                     SPBRG           equ	153	;# 
   137     009A                     SPBRGH          equ	154	;# 
   138     009B                     PWM1CON         equ	155	;# 
   139     009C                     ECCPAS          equ	156	;# 
   140     009D                     PSTRCON         equ	157	;# 
   141     009E                     ADRESL          equ	158	;# 
   142     009F                     ADCON1          equ	159	;# 
   143     0105                     WDTCON          equ	261	;# 
   144     0107                     CM1CON0         equ	263	;# 
   145     0108                     CM2CON0         equ	264	;# 
   146     0109                     CM2CON1         equ	265	;# 
   147     010C                     EEDATA          equ	268	;# 
   148     010C                     EEDAT           equ	268	;# 
   149     010D                     EEADR           equ	269	;# 
   150     010E                     EEDATH          equ	270	;# 
   151     010F                     EEADRH          equ	271	;# 
   152     0185                     SRCON           equ	389	;# 
   153     0187                     BAUDCTL         equ	391	;# 
   154     0188                     ANSEL           equ	392	;# 
   155     0189                     ANSELH          equ	393	;# 
   156     018C                     EECON1          equ	396	;# 
   157     018D                     EECON2          equ	397	;# 
   158     0000                     INDF            equ	0	;# 
   159     0001                     TMR0            equ	1	;# 
   160     0002                     PCL             equ	2	;# 
   161     0003                     STATUS          equ	3	;# 
   162     0004                     FSR             equ	4	;# 
   163     0005                     PORTA           equ	5	;# 
   164     0006                     PORTB           equ	6	;# 
   165     0007                     PORTC           equ	7	;# 
   166     0008                     PORTD           equ	8	;# 
   167     0009                     PORTE           equ	9	;# 
   168     000A                     PCLATH          equ	10	;# 
   169     000B                     INTCON          equ	11	;# 
   170     000C                     PIR1            equ	12	;# 
   171     000D                     PIR2            equ	13	;# 
   172     000E                     TMR1            equ	14	;# 
   173     000E                     TMR1L           equ	14	;# 
   174     000F                     TMR1H           equ	15	;# 
   175     0010                     T1CON           equ	16	;# 
   176     0011                     TMR2            equ	17	;# 
   177     0012                     T2CON           equ	18	;# 
   178     0013                     SSPBUF          equ	19	;# 
   179     0014                     SSPCON          equ	20	;# 
   180     0015                     CCPR1           equ	21	;# 
   181     0015                     CCPR1L          equ	21	;# 
   182     0016                     CCPR1H          equ	22	;# 
   183     0017                     CCP1CON         equ	23	;# 
   184     0018                     RCSTA           equ	24	;# 
   185     0019                     TXREG           equ	25	;# 
   186     001A                     RCREG           equ	26	;# 
   187     001B                     CCPR2           equ	27	;# 
   188     001B                     CCPR2L          equ	27	;# 
   189     001C                     CCPR2H          equ	28	;# 
   190     001D                     CCP2CON         equ	29	;# 
   191     001E                     ADRESH          equ	30	;# 
   192     001F                     ADCON0          equ	31	;# 
   193     0081                     OPTION_REG      equ	129	;# 
   194     0085                     TRISA           equ	133	;# 
   195     0086                     TRISB           equ	134	;# 
   196     0087                     TRISC           equ	135	;# 
   197     0088                     TRISD           equ	136	;# 
   198     0089                     TRISE           equ	137	;# 
   199     008C                     PIE1            equ	140	;# 
   200     008D                     PIE2            equ	141	;# 
   201     008E                     PCON            equ	142	;# 
   202     008F                     OSCCON          equ	143	;# 
   203     0090                     OSCTUNE         equ	144	;# 
   204     0091                     SSPCON2         equ	145	;# 
   205     0092                     PR2             equ	146	;# 
   206     0093                     SSPADD          equ	147	;# 
   207     0093                     SSPMSK          equ	147	;# 
   208     0093                     MSK             equ	147	;# 
   209     0094                     SSPSTAT         equ	148	;# 
   210     0095                     WPUB            equ	149	;# 
   211     0096                     IOCB            equ	150	;# 
   212     0097                     VRCON           equ	151	;# 
   213     0098                     TXSTA           equ	152	;# 
   214     0099                     SPBRG           equ	153	;# 
   215     009A                     SPBRGH          equ	154	;# 
   216     009B                     PWM1CON         equ	155	;# 
   217     009C                     ECCPAS          equ	156	;# 
   218     009D                     PSTRCON         equ	157	;# 
   219     009E                     ADRESL          equ	158	;# 
   220     009F                     ADCON1          equ	159	;# 
   221     0105                     WDTCON          equ	261	;# 
   222     0107                     CM1CON0         equ	263	;# 
   223     0108                     CM2CON0         equ	264	;# 
   224     0109                     CM2CON1         equ	265	;# 
   225     010C                     EEDATA          equ	268	;# 
   226     010C                     EEDAT           equ	268	;# 
   227     010D                     EEADR           equ	269	;# 
   228     010E                     EEDATH          equ	270	;# 
   229     010F                     EEADRH          equ	271	;# 
   230     0185                     SRCON           equ	389	;# 
   231     0187                     BAUDCTL         equ	391	;# 
   232     0188                     ANSEL           equ	392	;# 
   233     0189                     ANSELH          equ	393	;# 
   234     018C                     EECON1          equ	396	;# 
   235     018D                     EECON2          equ	397	;# 
   236     0000                     INDF            equ	0	;# 
   237     0001                     TMR0            equ	1	;# 
   238     0002                     PCL             equ	2	;# 
   239     0003                     STATUS          equ	3	;# 
   240     0004                     FSR             equ	4	;# 
   241     0005                     PORTA           equ	5	;# 
   242     0006                     PORTB           equ	6	;# 
   243     0007                     PORTC           equ	7	;# 
   244     0008                     PORTD           equ	8	;# 
   245     0009                     PORTE           equ	9	;# 
   246     000A                     PCLATH          equ	10	;# 
   247     000B                     INTCON          equ	11	;# 
   248     000C                     PIR1            equ	12	;# 
   249     000D                     PIR2            equ	13	;# 
   250     000E                     TMR1            equ	14	;# 
   251     000E                     TMR1L           equ	14	;# 
   252     000F                     TMR1H           equ	15	;# 
   253     0010                     T1CON           equ	16	;# 
   254     0011                     TMR2            equ	17	;# 
   255     0012                     T2CON           equ	18	;# 
   256     0013                     SSPBUF          equ	19	;# 
   257     0014                     SSPCON          equ	20	;# 
   258     0015                     CCPR1           equ	21	;# 
   259     0015                     CCPR1L          equ	21	;# 
   260     0016                     CCPR1H          equ	22	;# 
   261     0017                     CCP1CON         equ	23	;# 
   262     0018                     RCSTA           equ	24	;# 
   263     0019                     TXREG           equ	25	;# 
   264     001A                     RCREG           equ	26	;# 
   265     001B                     CCPR2           equ	27	;# 
   266     001B                     CCPR2L          equ	27	;# 
   267     001C                     CCPR2H          equ	28	;# 
   268     001D                     CCP2CON         equ	29	;# 
   269     001E                     ADRESH          equ	30	;# 
   270     001F                     ADCON0          equ	31	;# 
   271     0081                     OPTION_REG      equ	129	;# 
   272     0085                     TRISA           equ	133	;# 
   273     0086                     TRISB           equ	134	;# 
   274     0087                     TRISC           equ	135	;# 
   275     0088                     TRISD           equ	136	;# 
   276     0089                     TRISE           equ	137	;# 
   277     008C                     PIE1            equ	140	;# 
   278     008D                     PIE2            equ	141	;# 
   279     008E                     PCON            equ	142	;# 
   280     008F                     OSCCON          equ	143	;# 
   281     0090                     OSCTUNE         equ	144	;# 
   282     0091                     SSPCON2         equ	145	;# 
   283     0092                     PR2             equ	146	;# 
   284     0093                     SSPADD          equ	147	;# 
   285     0093                     SSPMSK          equ	147	;# 
   286     0093                     MSK             equ	147	;# 
   287     0094                     SSPSTAT         equ	148	;# 
   288     0095                     WPUB            equ	149	;# 
   289     0096                     IOCB            equ	150	;# 
   290     0097                     VRCON           equ	151	;# 
   291     0098                     TXSTA           equ	152	;# 
   292     0099                     SPBRG           equ	153	;# 
   293     009A                     SPBRGH          equ	154	;# 
   294     009B                     PWM1CON         equ	155	;# 
   295     009C                     ECCPAS          equ	156	;# 
   296     009D                     PSTRCON         equ	157	;# 
   297     009E                     ADRESL          equ	158	;# 
   298     009F                     ADCON1          equ	159	;# 
   299     0105                     WDTCON          equ	261	;# 
   300     0107                     CM1CON0         equ	263	;# 
   301     0108                     CM2CON0         equ	264	;# 
   302     0109                     CM2CON1         equ	265	;# 
   303     010C                     EEDATA          equ	268	;# 
   304     010C                     EEDAT           equ	268	;# 
   305     010D                     EEADR           equ	269	;# 
   306     010E                     EEDATH          equ	270	;# 
   307     010F                     EEADRH          equ	271	;# 
   308     0185                     SRCON           equ	389	;# 
   309     0187                     BAUDCTL         equ	391	;# 
   310     0188                     ANSEL           equ	392	;# 
   311     0189                     ANSELH          equ	393	;# 
   312     018C                     EECON1          equ	396	;# 
   313     018D                     EECON2          equ	397	;# 
   314                           
   315                           	psect	idataBANK0
   316     0F20                     __pidataBANK0:
   317                           
   318                           ;initializer for _lcd
   319     0F20  3407               	retlw	7
   320     0F21  3400               	retlw	0
   321     0F22  341A               	retlw	26
   322     0F23  342C               	retlw	44
   323     0F24  343E               	retlw	62
   324                           
   325                           ;initializer for _menu
   326     0F25  3401               	retlw	1
   327     0F26  3400               	retlw	0
   328                           
   329                           ;initializer for _channel
   330     0F27  3401               	retlw	1
   331     0F28  3400               	retlw	0
   332                           
   333                           ;initializer for _prevRB1
   334     0F29  3401               	retlw	1
   335                           
   336                           ;initializer for _prevRB0
   337     0F2A  3401               	retlw	1
   338     0005                     _PORTA          set	5
   339     0006                     _PORTBbits      set	6
   340     0006                     _PORTB          set	6
   341     001E                     _ADRESH         set	30
   342     001F                     _ADCON0         set	31
   343     0007                     _PORTC          set	7
   344     00F9                     _GO_nDONE       set	249
   345     0087                     _TRISC          set	135
   346     0085                     _TRISA          set	133
   347     0086                     _TRISB          set	134
   348     0081                     _OPTION_REG     set	129
   349     009E                     _ADRESL         set	158
   350     009F                     _ADCON1         set	159
   351     0189                     _ANSELH         set	393
   352     0188                     _ANSEL          set	392
   353                           
   354                           	psect	strings
   355     0003                     __pstrings:
   356     0003                     stringtab:
   357     0003                     __stringtab:
   358                           
   359                           ;	String table - string pointers are 1 byte each
   360     0003  1BFF               	btfsc	btemp+1,7
   361     0004  280D               	ljmp	stringcode
   362     0005  1383               	bcf	3,7
   363     0006  187F               	btfsc	btemp+1,0
   364     0007  1783               	bsf	3,7
   365     0008  0800               	movf	0,w
   366     0009  0A84               	incf	4,f
   367     000A  1903               	skipnz
   368     000B  0AFF               	incf	btemp+1,f
   369     000C  0008               	return
   370     000D                     stringcode:
   371     000D                     stringdir:
   372     000D  3000               	movlw	high stringdir
   373     000E  008A               	movwf	10
   374     000F  0804               	movf	4,w
   375     0010  0A84               	incf	4,f
   376     0011  0782               	addwf	2,f
   377     0012                     __stringbase:
   378     0012  3400               	retlw	0
   379     0013                     __end_of__stringtab:
   380     0013                     STR_3:
   381     0013  3450               	retlw	80	;'P'
   382     0014  346F               	retlw	111	;'o'
   383     0015  3472               	retlw	114	;'r'
   384     0016  3463               	retlw	99	;'c'
   385     0017  3465               	retlw	101	;'e'
   386     0018  346E               	retlw	110	;'n'
   387     0019  3474               	retlw	116	;'t'
   388     001A  3461               	retlw	97	;'a'
   389     001B  346A               	retlw	106	;'j'
   390     001C  3465               	retlw	101	;'e'
   391     001D  343A               	retlw	58	;':'
   392     001E  3420               	retlw	32	;' '
   393     001F  3400               	retlw	0
   394     0020                     STR_1:
   395     0020  3456               	retlw	86	;'V'
   396     0021  346F               	retlw	111	;'o'
   397     0022  346C               	retlw	108	;'l'
   398     0023  3474               	retlw	116	;'t'
   399     0024  3461               	retlw	97	;'a'
   400     0025  346A               	retlw	106	;'j'
   401     0026  3465               	retlw	101	;'e'
   402     0027  343A               	retlw	58	;':'
   403     0028  3420               	retlw	32	;' '
   404     0029  3400               	retlw	0
   405     002A                     STR_5:
   406     002A  344D               	retlw	77	;'M'
   407     002B  3469               	retlw	105	;'i'
   408     002C  346C               	retlw	108	;'l'
   409     002D  343A               	retlw	58	;':'
   410     002E  3420               	retlw	32	;' '
   411     002F  3400               	retlw	0
   412     0030                     STR_2:
   413     0030  3425               	retlw	37	;'%'
   414     0031  3475               	retlw	117	;'u'
   415     0032  342E               	retlw	46	;'.'
   416     0033  3425               	retlw	37	;'%'
   417     0034  3475               	retlw	117	;'u'
   418     0035  3400               	retlw	0
   419     0036                     STR_7:
   420     0036  3431               	retlw	49	;'1'
   421     0037  342E               	retlw	46	;'.'
   422     0038  3400               	retlw	0
   423     0039                     STR_8:
   424     0039  3432               	retlw	50	;'2'
   425     003A  342E               	retlw	46	;'.'
   426     003B  3400               	retlw	0
   427     003C                     STR_9:
   428     003C  3433               	retlw	51	;'3'
   429     003D  342E               	retlw	46	;'.'
   430     003E  3400               	retlw	0
   431     0030                     STR_4           equ	STR_2
   432     0033                     STR_6           equ	STR_2+3
   433                           
   434                           	psect	cinit
   435     07DE                     start_initialization:	
   436                           ; #config settings
   437                           
   438     07DE                     __initialization:
   439                           
   440                           ; Initialize objects allocated to BANK0
   441     07DE  1383               	bcf	3,7	;select IRP bank0
   442     07DF  306D               	movlw	low (__pdataBANK0+11)
   443     07E0  00FD               	movwf	btemp+-1
   444     07E1  300F               	movlw	high __pidataBANK0
   445     07E2  00FE               	movwf	btemp
   446     07E3  3020               	movlw	low __pidataBANK0
   447     07E4  00FF               	movwf	btemp+1
   448     07E5  3062               	movlw	low __pdataBANK0
   449     07E6  0084               	movwf	4
   450     07E7  120A  118A  2050  120A  118A  	fcall	init_ram0
   451                           
   452                           ; Clear objects allocated to BANK1
   453     07EC  30A0               	movlw	low __pbssBANK1
   454     07ED  0084               	movwf	4
   455     07EE  30D4               	movlw	low (__pbssBANK1+52)
   456     07EF  120A  158A  2718  120A  118A  	fcall	clear_ram0
   457                           
   458                           ; Clear objects allocated to BANK0
   459     07F4  304B               	movlw	low __pbssBANK0
   460     07F5  0084               	movwf	4
   461     07F6  3062               	movlw	low (__pbssBANK0+23)
   462     07F7  120A  158A  2718  120A  118A  	fcall	clear_ram0
   463     07FC                     end_of_initialization:	
   464                           ;End of C runtime variable initialization code
   465                           
   466     07FC                     __end_of__initialization:
   467     07FC  0183               	clrf	3
   468     07FD  120A  118A  2F02   	ljmp	_main	;jump to C main() function
   469                           
   470                           	psect	bssBANK0
   471     004B                     __pbssBANK0:
   472     004B                     _width:
   473     004B                     	ds	2
   474     004D                     _prec:
   475     004D                     	ds	2
   476     004F                     _part_dec:
   477     004F                     	ds	2
   478     0051                     _part_ent:
   479     0051                     	ds	2
   480     0053                     _voltaje:
   481     0053                     	ds	2
   482     0055                     _adc_result:
   483     0055                     	ds	2
   484     0057                     _flags:
   485     0057                     	ds	1
   486     0058                     _buffer1:
   487     0058                     	ds	10
   488                           
   489                           	psect	dataBANK0
   490     0062                     __pdataBANK0:
   491     0062                     _lcd:
   492     0062                     	ds	5
   493     0067                     _menu:
   494     0067                     	ds	2
   495     0069                     _channel:
   496     0069                     	ds	2
   497     006B                     _prevRB1:
   498     006B                     	ds	1
   499     006C                     _prevRB0:
   500     006C                     	ds	1
   501                           
   502                           	psect	bssBANK1
   503     00A0                     __pbssBANK1:
   504     00A0                     _dbuf:
   505     00A0                     	ds	32
   506     00C0                     _buffer3:
   507     00C0                     	ds	10
   508     00CA                     _buffer2:
   509     00CA                     	ds	10
   510                           
   511                           	psect	inittext
   512     004C                     init_fetch0:	
   513                           ;	Called with low address in FSR and high address in W
   514                           
   515     004C  087E               	movf	btemp,w
   516     004D  008A               	movwf	10
   517     004E  087F               	movf	btemp+1,w
   518     004F  0082               	movwf	2
   519     0050                     init_ram0:	
   520                           ;Called with:
   521                           ;	high address of idata address in btemp 
   522                           ;	low address of idata address in btemp+1 
   523                           ;	low address of data in FSR
   524                           ;	high address + 1 of data in btemp-1
   525                           
   526     0050  120A  118A  204C  120A  118A  	fcall	init_fetch0
   527     0055  0080               	movwf	0
   528     0056  0A84               	incf	4,f
   529     0057  0804               	movf	4,w
   530     0058  067D               	xorwf	btemp+-1,w
   531     0059  1903               	btfsc	3,2
   532     005A  3400               	retlw	0
   533     005B  0AFF               	incf	btemp+1,f
   534     005C  1903               	btfsc	3,2
   535     005D  0AFE               	incf	btemp,f
   536     005E  2850               	goto	init_ram0
   537                           
   538                           	psect	clrtext
   539     0F18                     clear_ram0:	
   540                           ;	Called with FSR containing the base address, and
   541                           ;	W with the last address+1
   542                           
   543     0F18  0064               	clrwdt	;clear the watchdog before getting into this loop
   544     0F19                     clrloop0:
   545     0F19  0180               	clrf	0	;clear RAM location pointed to by FSR
   546     0F1A  0A84               	incf	4,f	;increment pointer
   547     0F1B  0604               	xorwf	4,w	;XOR with final address
   548     0F1C  1903               	btfsc	3,2	;have we reached the end yet?
   549     0F1D  3400               	retlw	0	;all done for this memory range, return
   550     0F1E  0604               	xorwf	4,w	;XOR again to restore value
   551     0F1F  2F19               	goto	clrloop0	;do the next byte
   552                           
   553                           	psect	cstackCOMMON
   554     0070                     __pcstackCOMMON:
   555     0070                     ?_LCD_Write:
   556     0070                     ?_putch:	
   557                           ; 1 bytes @ 0x0
   558                           
   559     0070                     ?_ADC_init:	
   560                           ; 1 bytes @ 0x0
   561                           
   562     0070                     ?_LCD_Out:	
   563                           ; 1 bytes @ 0x0
   564                           
   565     0070                     ?_LCD_putc:	
   566                           ; 1 bytes @ 0x0
   567                           
   568     0070                     ?_fputc:	
   569                           ; 1 bytes @ 0x0
   570                           
   571     0070                     ?_ADC_read:	
   572                           ; 2 bytes @ 0x0
   573                           
   574     0070                     ?_main:	
   575                           ; 2 bytes @ 0x0
   576                           
   577     0070                     ?___lwdiv:	
   578                           ; 2 bytes @ 0x0
   579                           
   580     0070                     ?___lwmod:	
   581                           ; 2 bytes @ 0x0
   582                           
   583     0070                     ?___lmul:	
   584                           ; 2 bytes @ 0x0
   585                           
   586     0070                     putch@c:	
   587                           ; 4 bytes @ 0x0
   588                           
   589     0070                     ADC_read@ch:	
   590                           ; 1 bytes @ 0x0
   591                           
   592     0070                     ___lwdiv@divisor:	
   593                           ; 2 bytes @ 0x0
   594                           
   595     0070                     ___lwmod@divisor:	
   596                           ; 2 bytes @ 0x0
   597                           
   598     0070                     fputc@c:	
   599                           ; 2 bytes @ 0x0
   600                           
   601     0070                     ___lmul@multiplier:	
   602                           ; 2 bytes @ 0x0
   603                           
   604     0070                     ??_putch:	
   605                           ; 4 bytes @ 0x0
   606                           
   607     0070                     ??_ADC_init:	
   608                           ; 1 bytes @ 0x0
   609                           
   610     0070                     ??_LCD_Out:	
   611                           ; 1 bytes @ 0x0
   612                           
   613                           
   614                           ; 1 bytes @ 0x0
   615     0070                     	ds	2
   616     0072                     LCD_Out@c:
   617     0072                     ___lwdiv@dividend:	
   618                           ; 1 bytes @ 0x2
   619                           
   620     0072                     ___lwmod@dividend:	
   621                           ; 2 bytes @ 0x2
   622                           
   623     0072                     fputc@fp:	
   624                           ; 2 bytes @ 0x2
   625                           
   626     0072                     ??_ADC_read:	
   627                           ; 2 bytes @ 0x2
   628                           
   629                           
   630                           ; 1 bytes @ 0x2
   631     0072                     	ds	1
   632     0073                     ??_LCD_Write:
   633     0073                     ??_LCD_putc:	
   634                           ; 1 bytes @ 0x3
   635                           
   636                           
   637                           ; 1 bytes @ 0x3
   638     0073                     	ds	1
   639     0074                     ___lwmod@counter:
   640     0074                     ___lwdiv@quotient:	
   641                           ; 1 bytes @ 0x4
   642                           
   643     0074                     ___lmul@multiplicand:	
   644                           ; 2 bytes @ 0x4
   645                           
   646     0074                     ??_fputc:	
   647                           ; 4 bytes @ 0x4
   648                           
   649     0074                     ??___lwdiv:	
   650                           ; 1 bytes @ 0x4
   651                           
   652     0074                     ??___lwmod:	
   653                           ; 1 bytes @ 0x4
   654                           
   655                           
   656                           ; 1 bytes @ 0x4
   657     0074                     	ds	1
   658     0075                     LCD_Write@c:
   659     0075                     LCD_putc@c:	
   660                           ; 1 bytes @ 0x5
   661                           
   662                           
   663                           ; 1 bytes @ 0x5
   664     0075                     	ds	1
   665     0076                     ?_LCD_putrs:
   666     0076                     ?_LCD_Init:	
   667                           ; 1 bytes @ 0x6
   668                           
   669     0076                     ___lwdiv@counter:	
   670                           ; 1 bytes @ 0x6
   671                           
   672     0076                     LCD_putrs@a:	
   673                           ; 1 bytes @ 0x6
   674                           
   675     0076                     LCD_Init@display:	
   676                           ; 2 bytes @ 0x6
   677                           
   678                           
   679                           ; 5 bytes @ 0x6
   680     0076                     	ds	2
   681     0078                     ??_LCD_putrs:
   682     0078                     ??___lmul:	
   683                           ; 1 bytes @ 0x8
   684                           
   685                           
   686                           ; 1 bytes @ 0x8
   687     0078                     	ds	1
   688     0079                     ___lmul@product:
   689                           
   690                           ; 4 bytes @ 0x9
   691     0079                     	ds	2
   692     007B                     LCD_putrs@i:
   693     007B                     ??_LCD_Init:	
   694                           ; 2 bytes @ 0xB
   695                           
   696                           
   697                           ; 1 bytes @ 0xB
   698     007B                     	ds	2
   699     007D                     LCD_Init@cmd:
   700     007D                     vfprintf@cfmt:	
   701                           ; 1 bytes @ 0xD
   702                           
   703     007D                     ??_vfprintf:	
   704                           ; 1 bytes @ 0xD
   705                           
   706     007D                     ??___aldiv:	
   707                           ; 1 bytes @ 0xD
   708                           
   709                           
   710                           ; 1 bytes @ 0xD
   711     007D                     	ds	1
   712     007E                     ??_viewOpt:
   713                           
   714                           	psect	cstackBANK0
   715     0020                     __pcstackBANK0:	
   716                           ; 1 bytes @ 0xE
   717                           
   718     0020                     ?_vfpfcnvrt:
   719     0020                     ?___aldiv:	
   720                           ; 1 bytes @ 0x0
   721                           
   722     0020                     vfpfcnvrt@fp:	
   723                           ; 4 bytes @ 0x0
   724                           
   725     0020                     ___aldiv@divisor:	
   726                           ; 2 bytes @ 0x0
   727                           
   728                           
   729                           ; 4 bytes @ 0x0
   730     0020                     	ds	2
   731     0022                     vfpfcnvrt@fmt:
   732                           
   733                           ; 1 bytes @ 0x2
   734     0022                     	ds	1
   735     0023                     vfpfcnvrt@ap:
   736                           
   737                           ; 1 bytes @ 0x3
   738     0023                     	ds	1
   739     0024                     ___aldiv@dividend:
   740     0024                     ??_vfpfcnvrt:	
   741                           ; 4 bytes @ 0x4
   742                           
   743                           
   744                           ; 1 bytes @ 0x4
   745     0024                     	ds	2
   746     0026                     vfpfcnvrt@convarg:
   747                           
   748                           ; 4 bytes @ 0x6
   749     0026                     	ds	2
   750     0028                     ___aldiv@counter:
   751                           
   752                           ; 1 bytes @ 0x8
   753     0028                     	ds	1
   754     0029                     ___aldiv@sign:
   755                           
   756                           ; 1 bytes @ 0x9
   757     0029                     	ds	1
   758     002A                     vfpfcnvrt@cp:
   759     002A                     ___aldiv@quotient:	
   760                           ; 1 bytes @ 0xA
   761                           
   762                           
   763                           ; 4 bytes @ 0xA
   764     002A                     	ds	1
   765     002B                     vfpfcnvrt@c:
   766                           
   767                           ; 1 bytes @ 0xB
   768     002B                     	ds	1
   769     002C                     ?_vfprintf:
   770     002C                     vfprintf@fp:	
   771                           ; 2 bytes @ 0xC
   772                           
   773                           
   774                           ; 2 bytes @ 0xC
   775     002C                     	ds	2
   776     002E                     vfprintf@fmt:
   777                           
   778                           ; 1 bytes @ 0xE
   779     002E                     	ds	1
   780     002F                     vfprintf@ap:
   781                           
   782                           ; 1 bytes @ 0xF
   783     002F                     	ds	1
   784     0030                     ?_sprintf:
   785     0030                     sprintf@s:	
   786                           ; 2 bytes @ 0x10
   787                           
   788                           
   789                           ; 1 bytes @ 0x10
   790     0030                     	ds	1
   791     0031                     sprintf@fmt:
   792                           
   793                           ; 1 bytes @ 0x11
   794     0031                     	ds	5
   795     0036                     ??_sprintf:
   796                           
   797                           ; 1 bytes @ 0x16
   798     0036                     	ds	1
   799     0037                     sprintf@ap:
   800                           
   801                           ; 1 bytes @ 0x17
   802     0037                     	ds	1
   803     0038                     sprintf@f:
   804                           
   805                           ; 11 bytes @ 0x18
   806     0038                     	ds	11
   807     0043                     ?_volt:
   808     0043                     ?_porcentaje:	
   809                           ; 1 bytes @ 0x23
   810                           
   811     0043                     ?_mil:	
   812                           ; 1 bytes @ 0x23
   813                           
   814     0043                     volt@buffer:	
   815                           ; 1 bytes @ 0x23
   816                           
   817     0043                     porcentaje@buffer:	
   818                           ; 1 bytes @ 0x23
   819                           
   820     0043                     mil@buffer:	
   821                           ; 1 bytes @ 0x23
   822                           
   823                           
   824                           ; 1 bytes @ 0x23
   825     0043                     	ds	1
   826     0044                     ??_volt:
   827     0044                     ??_porcentaje:	
   828                           ; 1 bytes @ 0x24
   829                           
   830     0044                     ??_mil:	
   831                           ; 1 bytes @ 0x24
   832                           
   833                           
   834                           ; 1 bytes @ 0x24
   835     0044                     	ds	3
   836     0047                     ?_viewOpt:
   837     0047                     viewOpt@menuOpt:	
   838                           ; 1 bytes @ 0x27
   839                           
   840                           
   841                           ; 2 bytes @ 0x27
   842     0047                     	ds	2
   843     0049                     ??_main:
   844                           
   845                           ; 1 bytes @ 0x29
   846     0049                     	ds	2
   847                           
   848                           	psect	maintext
   849     0702                     __pmaintext:	
   850 ;;
   851 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   852 ;;
   853 ;; *************** function _main *****************
   854 ;; Defined at:
   855 ;;		line 107 in file "main.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  2  190[None  ] int 
   862 ;; Registers used:
   863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : B00/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   869 ;;      Params:         0       0       0       0       0
   870 ;;      Locals:         0       0       0       0       0
   871 ;;      Temps:          0       2       0       0       0
   872 ;;      Totals:         0       2       0       0       0
   873 ;;Total ram usage:        2 bytes
   874 ;; Hardware stack levels required when called: 7
   875 ;; This function calls:
   876 ;;		_ADC_init
   877 ;;		_ADC_read
   878 ;;		_LCD_Init
   879 ;;		_LCD_Write
   880 ;;		_LCD_putrs
   881 ;;		_viewOpt
   882 ;; This function is called by:
   883 ;;		Startup code after reset
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887     0702                     _main:	
   888                           ;psect for function _main
   889                           
   890     0702                     l1833:	
   891                           ;incstack = 0
   892                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   893                           
   894                           
   895                           ;main.c: 108:             case 3:
   896     0702  1683               	bsf	3,5	;RP0=1, select bank3
   897     0703  1703               	bsf	3,6	;RP1=1, select bank3
   898     0704  0189               	clrf	9	;volatile
   899     0705                     l1835:
   900                           
   901                           ;main.c: 109:                 LCD_putrs("3.");
   902     0705  307F               	movlw	127
   903     0706  1683               	bsf	3,5	;RP0=1, select bank1
   904     0707  1303               	bcf	3,6	;RP1=0, select bank1
   905     0708  0581               	andwf	1,f	;volatile
   906     0709                     l1837:
   907                           
   908                           ;main.c: 110:                 break;
   909     0709  3003               	movlw	3
   910     070A  0086               	movwf	6	;volatile
   911     070B                     l1839:
   912                           
   913                           ;main.c: 111:         }
   914     070B  1283               	bcf	3,5	;RP0=0, select bank0
   915     070C  1303               	bcf	3,6	;RP1=0, select bank0
   916     070D  0186               	clrf	6	;volatile
   917     070E                     l1841:
   918                           
   919                           ;main.c: 113: 
   920     070E  120A  118A  203F  120A  118A  	fcall	_ADC_init
   921     0713                     l1843:
   922                           
   923                           ;main.c: 114:         if(!PORTBbits.RB0 && prevRB0) {
   924     0713  3076               	movlw	LCD_Init@display& (0+255)
   925     0714  0084               	movwf	4
   926     0715  1283               	bcf	3,5	;RP0=0, select bank0
   927     0716  1303               	bcf	3,6	;RP1=0, select bank0
   928     0717  0862               	movf	_lcd,w
   929     0718  0080               	movwf	0
   930     0719  0A84               	incf	4,f
   931     071A  0863               	movf	_lcd+1,w
   932     071B  0080               	movwf	0
   933     071C  0A84               	incf	4,f
   934     071D  0864               	movf	_lcd+2,w
   935     071E  0080               	movwf	0
   936     071F  0A84               	incf	4,f
   937     0720  0865               	movf	_lcd+3,w
   938     0721  0080               	movwf	0
   939     0722  0A84               	incf	4,f
   940     0723  0866               	movf	_lcd+4,w
   941     0724  0080               	movwf	0
   942     0725  120A  118A  24D8  120A  118A  	fcall	_LCD_Init
   943     072A                     l1845:
   944     072A  3000               	movlw	0
   945     072B  120A  118A  2174  120A  118A  	fcall	_LCD_Write
   946     0730                     l1847:
   947     0730  3001               	movlw	1
   948     0731  120A  118A  2174  120A  118A  	fcall	_LCD_Write
   949     0736                     l1849:
   950     0736  3008               	movlw	8
   951     0737  120A  118A  2174  120A  118A  	fcall	_LCD_Write
   952     073C                     l1851:
   953     073C  3000               	movlw	0
   954     073D  120A  118A  2174  120A  118A  	fcall	_LCD_Write
   955     0742  2F61               	goto	l1867
   956     0743                     l1859:
   957                           
   958                           ;main.c: 122:             menu++;
   959     0743  3024               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   960     0744  00F6               	movwf	LCD_putrs@a
   961     0745  3080               	movlw	128
   962     0746  00F7               	movwf	LCD_putrs@a+1
   963     0747  120A  118A  205F  120A  118A  	fcall	_LCD_putrs
   964                           
   965                           ;main.c: 123:             if(menu > 3) menu = 1;
   966     074C  2F73               	goto	l213
   967     074D                     l1861:
   968                           
   969                           ;main.c: 125:         prevRB1 = PORTBbits.RB1;
   970     074D  3027               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   971     074E  00F6               	movwf	LCD_putrs@a
   972     074F  3080               	movlw	128
   973     0750  00F7               	movwf	LCD_putrs@a+1
   974     0751  120A  118A  205F  120A  118A  	fcall	_LCD_putrs
   975                           
   976                           ;main.c: 126: 
   977     0756  2F73               	goto	l213
   978     0757                     l1863:
   979                           
   980                           ;main.c: 128:         viewOpt(menu);
   981     0757  302A               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   982     0758  00F6               	movwf	LCD_putrs@a
   983     0759  3080               	movlw	128
   984     075A  00F7               	movwf	LCD_putrs@a+1
   985     075B  120A  118A  205F  120A  118A  	fcall	_LCD_putrs
   986                           
   987                           ;main.c: 129: 
   988     0760  2F73               	goto	l213
   989     0761                     l1867:
   990                           
   991                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   992                           ; Switch size 1, requested type "simple"
   993                           ; Number of cases is 1, Range of values is 0 to 0
   994                           ; switch strategies available:
   995                           ; Name         Instructions Cycles
   996                           ; simple_byte            4     3 (average)
   997                           ; direct_byte           11     8 (fixed)
   998                           ; jumptable            260     6 (fixed)
   999                           ;	Chosen strategy is simple_byte
  1000     0761  1283               	bcf	3,5	;RP0=0, select bank0
  1001     0762  1303               	bcf	3,6	;RP1=0, select bank0
  1002     0763  086A               	movf	_channel+1,w
  1003     0764  3A00               	xorlw	0	; case 0
  1004     0765  1903               	skipnz
  1005     0766  2F68               	goto	l1957
  1006     0767  2F73               	goto	l213
  1007     0768                     l1957:
  1008                           
  1009                           ; Switch size 1, requested type "simple"
  1010                           ; Number of cases is 3, Range of values is 1 to 3
  1011                           ; switch strategies available:
  1012                           ; Name         Instructions Cycles
  1013                           ; simple_byte           10     6 (average)
  1014                           ; direct_byte           20    11 (fixed)
  1015                           ; jumptable            263     9 (fixed)
  1016                           ;	Chosen strategy is simple_byte
  1017     0768  0869               	movf	_channel,w
  1018     0769  3A01               	xorlw	1	; case 1
  1019     076A  1903               	skipnz
  1020     076B  2F43               	goto	l1859
  1021     076C  3A03               	xorlw	3	; case 2
  1022     076D  1903               	skipnz
  1023     076E  2F4D               	goto	l1861
  1024     076F  3A01               	xorlw	1	; case 3
  1025     0770  1903               	skipnz
  1026     0771  2F57               	goto	l1863
  1027     0772  2F73               	goto	l213
  1028     0773                     l213:
  1029                           
  1030                           ;main.c: 133:     return 0;
  1031     0773  1283               	bcf	3,5	;RP0=0, select bank0
  1032     0774  1303               	bcf	3,6	;RP1=0, select bank0
  1033     0775  1806               	btfsc	6,0	;volatile
  1034     0776  2F78               	goto	u1451
  1035     0777  2F79               	goto	u1450
  1036     0778                     u1451:
  1037     0778  2F91               	goto	l1875
  1038     0779                     u1450:
  1039     0779                     l1869:
  1040     0779  086C               	movf	_prevRB0,w
  1041     077A  1903               	btfsc	3,2
  1042     077B  2F7D               	goto	u1461
  1043     077C  2F7E               	goto	u1460
  1044     077D                     u1461:
  1045     077D  2F91               	goto	l1875
  1046     077E                     u1460:
  1047     077E                     l1871:
  1048                           
  1049                           ;main.c: 134: }
  1050     077E  3001               	movlw	1
  1051     077F  07E9               	addwf	_channel,f
  1052     0780  1803               	skipnc
  1053     0781  0AEA               	incf	_channel+1,f
  1054     0782  3000               	movlw	0
  1055     0783  07EA               	addwf	_channel+1,f
  1056     0784  3000               	movlw	0
  1057     0785  026A               	subwf	_channel+1,w
  1058     0786  3004               	movlw	4
  1059     0787  1903               	skipnz
  1060     0788  0269               	subwf	_channel,w
  1061     0789  1C03               	skipc
  1062     078A  2F8C               	goto	u1471
  1063     078B  2F8D               	goto	u1470
  1064     078C                     u1471:
  1065     078C  2F91               	goto	l1875
  1066     078D                     u1470:
  1067     078D                     l1873:
  1068     078D  3001               	movlw	1
  1069     078E  00E9               	movwf	_channel
  1070     078F  3000               	movlw	0
  1071     0790  00EA               	movwf	_channel+1
  1072     0791                     l1875:
  1073     0791  0806               	movf	6,w	;volatile
  1074     0792  3901               	andlw	1
  1075     0793  00EC               	movwf	_prevRB0
  1076     0794                     l1877:
  1077     0794  1886               	btfsc	6,1	;volatile
  1078     0795  2F97               	goto	u1481
  1079     0796  2F98               	goto	u1480
  1080     0797                     u1481:
  1081     0797  2FB0               	goto	l1885
  1082     0798                     u1480:
  1083     0798                     l1879:
  1084     0798  086B               	movf	_prevRB1,w
  1085     0799  1903               	btfsc	3,2
  1086     079A  2F9C               	goto	u1491
  1087     079B  2F9D               	goto	u1490
  1088     079C                     u1491:
  1089     079C  2FB0               	goto	l1885
  1090     079D                     u1490:
  1091     079D                     l1881:
  1092     079D  3001               	movlw	1
  1093     079E  07E7               	addwf	_menu,f
  1094     079F  1803               	skipnc
  1095     07A0  0AE8               	incf	_menu+1,f
  1096     07A1  3000               	movlw	0
  1097     07A2  07E8               	addwf	_menu+1,f
  1098     07A3  3000               	movlw	0
  1099     07A4  0268               	subwf	_menu+1,w
  1100     07A5  3004               	movlw	4
  1101     07A6  1903               	skipnz
  1102     07A7  0267               	subwf	_menu,w
  1103     07A8  1C03               	skipc
  1104     07A9  2FAB               	goto	u1501
  1105     07AA  2FAC               	goto	u1500
  1106     07AB                     u1501:
  1107     07AB  2FB0               	goto	l1885
  1108     07AC                     u1500:
  1109     07AC                     l1883:
  1110     07AC  3001               	movlw	1
  1111     07AD  00E7               	movwf	_menu
  1112     07AE  3000               	movlw	0
  1113     07AF  00E8               	movwf	_menu+1
  1114     07B0                     l1885:
  1115     07B0  0C06               	rrf	6,w	;volatile
  1116     07B1  3901               	andlw	1
  1117     07B2  00EB               	movwf	_prevRB1
  1118     07B3                     l1887:
  1119     07B3  0869               	movf	_channel,w
  1120     07B4  3EFF               	addlw	255
  1121     07B5  00F0               	movwf	ADC_read@ch
  1122     07B6  086A               	movf	_channel+1,w
  1123     07B7  1803               	skipnc
  1124     07B8  3E01               	addlw	1
  1125     07B9  3EFF               	addlw	255
  1126     07BA  00F1               	movwf	ADC_read@ch+1
  1127     07BB  120A  158A  2773  120A  118A  	fcall	_ADC_read
  1128     07C0  0871               	movf	?_ADC_read+1,w
  1129     07C1  1283               	bcf	3,5	;RP0=0, select bank0
  1130     07C2  1303               	bcf	3,6	;RP1=0, select bank0
  1131     07C3  00D6               	movwf	_adc_result+1
  1132     07C4  0870               	movf	?_ADC_read,w
  1133     07C5  00D5               	movwf	_adc_result
  1134     07C6                     l1889:
  1135     07C6  0868               	movf	_menu+1,w
  1136     07C7  00C8               	movwf	viewOpt@menuOpt+1
  1137     07C8  0867               	movf	_menu,w
  1138     07C9  00C7               	movwf	viewOpt@menuOpt
  1139     07CA  120A  158A  279C  120A  118A  	fcall	_viewOpt
  1140     07CF                     l1891:
  1141     07CF  301A               	movlw	26
  1142     07D0  1283               	bcf	3,5	;RP0=0, select bank0
  1143     07D1  1303               	bcf	3,6	;RP1=0, select bank0
  1144     07D2  00CA               	movwf	??_main+1
  1145     07D3  30F7               	movlw	247
  1146     07D4  00C9               	movwf	??_main
  1147     07D5                     u1527:
  1148     07D5  0BC9               	decfsz	??_main,f
  1149     07D6  2FD5               	goto	u1527
  1150     07D7  0BCA               	decfsz	??_main+1,f
  1151     07D8  2FD5               	goto	u1527
  1152     07D9  2FDA               	nop2
  1153     07DA  2F2A               	goto	l1845
  1154     07DB  120A  118A  2800   	ljmp	start
  1155     07DE                     __end_of_main:
  1156                           
  1157                           	psect	text1
  1158     0F9C                     __ptext1:	
  1159 ;; *************** function _viewOpt *****************
  1160 ;; Defined at:
  1161 ;;		line 90 in file "main.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  menuOpt         2   39[BANK0 ] unsigned int 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;		None
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1175 ;;      Params:         0       2       0       0       0
  1176 ;;      Locals:         0       0       0       0       0
  1177 ;;      Temps:          0       0       0       0       0
  1178 ;;      Totals:         0       2       0       0       0
  1179 ;;Total ram usage:        2 bytes
  1180 ;; Hardware stack levels used: 1
  1181 ;; Hardware stack levels required when called: 6
  1182 ;; This function calls:
  1183 ;;		_mil
  1184 ;;		_porcentaje
  1185 ;;		_volt
  1186 ;; This function is called by:
  1187 ;;		_main
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191     0F9C                     _viewOpt:	
  1192                           ;psect for function _viewOpt
  1193                           
  1194     0F9C                     l1771:	
  1195                           ;incstack = 0
  1196                           ; Regs used in _viewOpt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1197                           
  1198                           
  1199                           ;main.c: 91:     TRISB = 0b00000011;
  1200     0F9C  2FB5               	goto	l1781
  1201     0F9D                     l1773:
  1202                           
  1203                           ;main.c: 93: 
  1204     0F9D  3058               	movlw	(low (_buffer1| 0))& (0+255)
  1205     0F9E  00C3               	movwf	volt@buffer
  1206     0F9F  120A  118A  2433  120A  158A  	fcall	_volt
  1207                           
  1208                           ;main.c: 94:     ADC_init();
  1209     0FA4  2FC7               	goto	l186
  1210     0FA5                     l1775:
  1211                           
  1212                           ;main.c: 96: 
  1213     0FA5  30CA               	movlw	(low (_buffer2| 0))& (0+255)
  1214     0FA6  00C3               	movwf	porcentaje@buffer
  1215     0FA7  120A  118A  238E  120A  158A  	fcall	_porcentaje
  1216                           
  1217                           ;main.c: 97:     while(1) {
  1218     0FAC  2FC7               	goto	l186
  1219     0FAD                     l1777:
  1220                           
  1221                           ;main.c: 99:         do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_
      +                          Write( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do { LCD_Write( (0xC0 + 0
      +                           & 0xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 2 ) { do {
      +                           LCD_Write( (0x94 + 0 & 0xF0) >> 4 ); LCD_Write( 0x94 + 0 & 0x0F); } while ( 0 ); } else
      +                           if ( 0 == 3 ) { do { LCD_Write( (0xD4 + 0 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 0 & 0x0F); 
      +                          } while ( 0 ); } } while ( 0 );
  1222     0FAD  30C0               	movlw	(low (_buffer3| 0))& (0+255)
  1223     0FAE  00C3               	movwf	mil@buffer
  1224     0FAF  120A  118A  2129  120A  158A  	fcall	_mil
  1225                           
  1226                           ;main.c: 100:         switch(channel)
  1227     0FB4  2FC7               	goto	l186
  1228     0FB5                     l1781:
  1229                           
  1230                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1231                           ; Switch size 1, requested type "simple"
  1232                           ; Number of cases is 1, Range of values is 0 to 0
  1233                           ; switch strategies available:
  1234                           ; Name         Instructions Cycles
  1235                           ; simple_byte            4     3 (average)
  1236                           ; direct_byte           11     8 (fixed)
  1237                           ; jumptable            260     6 (fixed)
  1238                           ;	Chosen strategy is simple_byte
  1239     0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  1240     0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  1241     0FB7  0848               	movf	viewOpt@menuOpt+1,w
  1242     0FB8  3A00               	xorlw	0	; case 0
  1243     0FB9  1903               	skipnz
  1244     0FBA  2FBC               	goto	l1959
  1245     0FBB  2FC7               	goto	l186
  1246     0FBC                     l1959:
  1247                           
  1248                           ; Switch size 1, requested type "simple"
  1249                           ; Number of cases is 3, Range of values is 1 to 3
  1250                           ; switch strategies available:
  1251                           ; Name         Instructions Cycles
  1252                           ; simple_byte           10     6 (average)
  1253                           ; direct_byte           20    11 (fixed)
  1254                           ; jumptable            263     9 (fixed)
  1255                           ;	Chosen strategy is simple_byte
  1256     0FBC  0847               	movf	viewOpt@menuOpt,w
  1257     0FBD  3A01               	xorlw	1	; case 1
  1258     0FBE  1903               	skipnz
  1259     0FBF  2F9D               	goto	l1773
  1260     0FC0  3A03               	xorlw	3	; case 2
  1261     0FC1  1903               	skipnz
  1262     0FC2  2FA5               	goto	l1775
  1263     0FC3  3A01               	xorlw	1	; case 3
  1264     0FC4  1903               	skipnz
  1265     0FC5  2FAD               	goto	l1777
  1266     0FC6  2FC7               	goto	l186
  1267     0FC7                     l186:
  1268     0FC7  0008               	return
  1269     0FC8                     __end_of_viewOpt:
  1270                           
  1271                           	psect	text2
  1272     0433                     __ptext2:	
  1273 ;; *************** function _volt *****************
  1274 ;; Defined at:
  1275 ;;		line 52 in file "main.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  buffer          1   35[BANK0 ] PTR unsigned char 
  1278 ;;		 -> buffer1(10), 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;		None
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1290 ;;      Params:         0       1       0       0       0
  1291 ;;      Locals:         0       0       0       0       0
  1292 ;;      Temps:          0       3       0       0       0
  1293 ;;      Totals:         0       4       0       0       0
  1294 ;;Total ram usage:        4 bytes
  1295 ;; Hardware stack levels used: 1
  1296 ;; Hardware stack levels required when called: 5
  1297 ;; This function calls:
  1298 ;;		_LCD_Write
  1299 ;;		_LCD_putrs
  1300 ;;		___aldiv
  1301 ;;		___lmul
  1302 ;;		___lwdiv
  1303 ;;		___lwmod
  1304 ;;		_sprintf
  1305 ;; This function is called by:
  1306 ;;		_viewOpt
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310     0433                     _volt:	
  1311                           ;psect for function _volt
  1312                           
  1313     0433                     l70:	
  1314                           ;incstack = 0
  1315                           ; Regs used in _volt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1316                           ;main.c: 53:     part_dec = voltaje % 100;
  1317                           
  1318     0433                     l1673:
  1319     0433  3008               	movlw	8
  1320     0434  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  1321     0439  3003               	movlw	3
  1322     043A  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  1323     043F                     l1681:
  1324                           
  1325                           ;main.c: 54: 
  1326     043F  300E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1327     0440  00F6               	movwf	LCD_putrs@a
  1328     0441  3080               	movlw	128
  1329     0442  00F7               	movwf	LCD_putrs@a+1
  1330     0443  120A  118A  205F  120A  118A  	fcall	_LCD_putrs
  1331     0448                     l1683:
  1332                           
  1333                           ;main.c: 56:     do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Writ
      +                          e( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0
      +                          xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 2 ) { do { LCD
      +                          _Write( (0x94 + 0 & 0xF0) >> 4 ); LCD_Write( 0x94 + 0 & 0x0F); } while ( 0 ); } else if 
      +                          ( 1 == 3 ) { do { LCD_Write( (0xD4 + 0 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 0 & 0x0F); } wh
      +                          ile ( 0 ); } } while ( 0 );
  1334     0448  3000               	movlw	0
  1335     0449  1283               	bcf	3,5	;RP0=0, select bank0
  1336     044A  1303               	bcf	3,6	;RP1=0, select bank0
  1337     044B  00A3               	movwf	___aldiv@divisor+3
  1338     044C  3000               	movlw	0
  1339     044D  00A2               	movwf	___aldiv@divisor+2
  1340     044E  3027               	movlw	39
  1341     044F  00A1               	movwf	___aldiv@divisor+1
  1342     0450  30F6               	movlw	246
  1343     0451  00A0               	movwf	___aldiv@divisor
  1344     0452  0855               	movf	_adc_result,w
  1345     0453  00F0               	movwf	___lmul@multiplier
  1346     0454  0856               	movf	_adc_result+1,w
  1347     0455  00F1               	movwf	___lmul@multiplier+1
  1348     0456  01F2               	clrf	___lmul@multiplier+2
  1349     0457  01F3               	clrf	___lmul@multiplier+3
  1350     0458  3000               	movlw	0
  1351     0459  00F7               	movwf	___lmul@multiplicand+3
  1352     045A  3000               	movlw	0
  1353     045B  00F6               	movwf	___lmul@multiplicand+2
  1354     045C  30C3               	movlw	195
  1355     045D  00F5               	movwf	___lmul@multiplicand+1
  1356     045E  3050               	movlw	80
  1357     045F  00F4               	movwf	___lmul@multiplicand
  1358     0460  120A  118A  20E3  120A  118A  	fcall	___lmul
  1359     0465  0873               	movf	?___lmul+3,w
  1360     0466  1283               	bcf	3,5	;RP0=0, select bank0
  1361     0467  1303               	bcf	3,6	;RP1=0, select bank0
  1362     0468  00A7               	movwf	___aldiv@dividend+3
  1363     0469  0872               	movf	?___lmul+2,w
  1364     046A  00A6               	movwf	___aldiv@dividend+2
  1365     046B  0871               	movf	?___lmul+1,w
  1366     046C  00A5               	movwf	___aldiv@dividend+1
  1367     046D  0870               	movf	?___lmul,w
  1368     046E  00A4               	movwf	___aldiv@dividend
  1369     046F  120A  118A  225B  120A  118A  	fcall	___aldiv
  1370     0474  1283               	bcf	3,5	;RP0=0, select bank0
  1371     0475  1303               	bcf	3,6	;RP1=0, select bank0
  1372     0476  0821               	movf	?___aldiv+1,w
  1373     0477  00D4               	movwf	_voltaje+1
  1374     0478  0820               	movf	?___aldiv,w
  1375     0479  00D3               	movwf	_voltaje
  1376     047A                     l1685:
  1377                           
  1378                           ;main.c: 57:     LCD_putrs(buffer);
  1379     047A  30E8               	movlw	232
  1380     047B  00F0               	movwf	___lwdiv@divisor
  1381     047C  3003               	movlw	3
  1382     047D  00F1               	movwf	___lwdiv@divisor+1
  1383     047E  0854               	movf	_voltaje+1,w
  1384     047F  00F3               	movwf	___lwdiv@dividend+1
  1385     0480  0853               	movf	_voltaje,w
  1386     0481  00F2               	movwf	___lwdiv@dividend
  1387     0482  120A  118A  20A1  120A  118A  	fcall	___lwdiv
  1388     0487  0871               	movf	?___lwdiv+1,w
  1389     0488  1283               	bcf	3,5	;RP0=0, select bank0
  1390     0489  1303               	bcf	3,6	;RP1=0, select bank0
  1391     048A  00D2               	movwf	_part_ent+1
  1392     048B  0870               	movf	?___lwdiv,w
  1393     048C  00D1               	movwf	_part_ent
  1394     048D                     l1687:
  1395                           
  1396                           ;main.c: 58:     _delay((unsigned long)((200)*(4000000/4000.0)));
  1397     048D  30E8               	movlw	232
  1398     048E  00F0               	movwf	___lwmod@divisor
  1399     048F  3003               	movlw	3
  1400     0490  00F1               	movwf	___lwmod@divisor+1
  1401     0491  0854               	movf	_voltaje+1,w
  1402     0492  00F3               	movwf	___lwmod@dividend+1
  1403     0493  0853               	movf	_voltaje,w
  1404     0494  00F2               	movwf	___lwmod@dividend
  1405     0495  120A  158A  27C8  120A  118A  	fcall	___lwmod
  1406     049A  0871               	movf	?___lwmod+1,w
  1407     049B  1283               	bcf	3,5	;RP0=0, select bank0
  1408     049C  1303               	bcf	3,6	;RP1=0, select bank0
  1409     049D  00D0               	movwf	_part_dec+1
  1410     049E  0870               	movf	?___lwmod,w
  1411     049F  00CF               	movwf	_part_dec
  1412     04A0                     l1689:
  1413                           
  1414                           ;main.c: 60: 
  1415     04A0  0843               	movf	volt@buffer,w
  1416     04A1  00B0               	movwf	sprintf@s
  1417     04A2  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1418     04A3  00B1               	movwf	sprintf@fmt
  1419     04A4  0852               	movf	_part_ent+1,w
  1420     04A5  00B3               	movwf	?_sprintf+3
  1421     04A6  0851               	movf	_part_ent,w
  1422     04A7  00B2               	movwf	?_sprintf+2
  1423     04A8  0850               	movf	_part_dec+1,w
  1424     04A9  00B5               	movwf	?_sprintf+5
  1425     04AA  084F               	movf	_part_dec,w
  1426     04AB  00B4               	movwf	?_sprintf+4
  1427     04AC  120A  158A  272B  120A  118A  	fcall	_sprintf
  1428     04B1                     l1693:
  1429     04B1  300C               	movlw	12
  1430     04B2  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  1431     04B7  3000               	movlw	0
  1432     04B8  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  1433     04BD                     l1699:
  1434                           
  1435                           ;main.c: 62:     do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 3 & 0xF0) >> 4 ); LCD_Writ
      +                          e( 0x80 + 3 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do { LCD_Write( (0xC0 + 3 & 0
      +                          xF0) >> 4 ); LCD_Write( 0xC0 + 3 & 0x0F); } while ( 0 ); } else if ( 0 == 2 ) { do { LCD
      +                          _Write( (0x94 + 3 & 0xF0) >> 4 ); LCD_Write( 0x94 + 3 & 0x0F); } while ( 0 ); } else if 
      +                          ( 0 == 3 ) { do { LCD_Write( (0xD4 + 3 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 3 & 0x0F); } wh
      +                          ile ( 0 ); } } while ( 0 );
  1436     04BD  1283               	bcf	3,5	;RP0=0, select bank0
  1437     04BE  1303               	bcf	3,6	;RP1=0, select bank0
  1438     04BF  0843               	movf	volt@buffer,w
  1439     04C0  00F6               	movwf	LCD_putrs@a
  1440     04C1  3000               	movlw	0
  1441     04C2  00F7               	movwf	LCD_putrs@a+1
  1442     04C3  120A  118A  205F  120A  118A  	fcall	_LCD_putrs
  1443     04C8                     l1701:
  1444                           
  1445                           ;main.c: 63:     LCD_putrs("Mil: ");
  1446     04C8  3002               	movlw	2
  1447     04C9  1283               	bcf	3,5	;RP0=0, select bank0
  1448     04CA  1303               	bcf	3,6	;RP1=0, select bank0
  1449     04CB  00C6               	movwf	??_volt+2
  1450     04CC  3004               	movlw	4
  1451     04CD  00C5               	movwf	??_volt+1
  1452     04CE  30B9               	movlw	185
  1453     04CF  00C4               	movwf	??_volt
  1454     04D0                     u1537:
  1455     04D0  0BC4               	decfsz	??_volt,f
  1456     04D1  2CD0               	goto	u1537
  1457     04D2  0BC5               	decfsz	??_volt+1,f
  1458     04D3  2CD0               	goto	u1537
  1459     04D4  0BC6               	decfsz	??_volt+2,f
  1460     04D5  2CD0               	goto	u1537
  1461     04D6  2CD7               	nop2
  1462     04D7                     l104:
  1463     04D7  0008               	return
  1464     04D8                     __end_of_volt:
  1465                           
  1466                           	psect	text3
  1467     038E                     __ptext3:	
  1468 ;; *************** function _porcentaje *****************
  1469 ;; Defined at:
  1470 ;;		line 66 in file "main.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  buffer          1   35[BANK0 ] PTR unsigned char 
  1473 ;;		 -> buffer2(10), 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1485 ;;      Params:         0       1       0       0       0
  1486 ;;      Locals:         0       0       0       0       0
  1487 ;;      Temps:          0       3       0       0       0
  1488 ;;      Totals:         0       4       0       0       0
  1489 ;;Total ram usage:        4 bytes
  1490 ;; Hardware stack levels used: 1
  1491 ;; Hardware stack levels required when called: 5
  1492 ;; This function calls:
  1493 ;;		_LCD_Write
  1494 ;;		_LCD_putrs
  1495 ;;		___aldiv
  1496 ;;		___lmul
  1497 ;;		___lwdiv
  1498 ;;		___lwmod
  1499 ;;		_sprintf
  1500 ;; This function is called by:
  1501 ;;		_viewOpt
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505     038E                     _porcentaje:	
  1506                           ;psect for function _porcentaje
  1507                           
  1508     038E                     l107:	
  1509                           ;incstack = 0
  1510                           ; Regs used in _porcentaje: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1511                           ;main.c: 67:     LCD_putrs(buffer);
  1512                           
  1513     038E                     l1703:
  1514     038E  3008               	movlw	8
  1515     038F  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  1516     0394  3003               	movlw	3
  1517     0395  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  1518     039A                     l1711:
  1519                           
  1520                           ;main.c: 68:     _delay((unsigned long)((200)*(4000000/4000.0)));
  1521     039A  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1522     039B  00F6               	movwf	LCD_putrs@a
  1523     039C  3080               	movlw	128
  1524     039D  00F7               	movwf	LCD_putrs@a+1
  1525     039E  120A  118A  205F  120A  118A  	fcall	_LCD_putrs
  1526     03A3                     l1713:
  1527                           
  1528                           ;main.c: 70: 
  1529     03A3  3000               	movlw	0
  1530     03A4  1283               	bcf	3,5	;RP0=0, select bank0
  1531     03A5  1303               	bcf	3,6	;RP1=0, select bank0
  1532     03A6  00A3               	movwf	___aldiv@divisor+3
  1533     03A7  3001               	movlw	1
  1534     03A8  00A2               	movwf	___aldiv@divisor+2
  1535     03A9  308F               	movlw	143
  1536     03AA  00A1               	movwf	___aldiv@divisor+1
  1537     03AB  309C               	movlw	156
  1538     03AC  00A0               	movwf	___aldiv@divisor
  1539     03AD  0855               	movf	_adc_result,w
  1540     03AE  00F0               	movwf	___lmul@multiplier
  1541     03AF  0856               	movf	_adc_result+1,w
  1542     03B0  00F1               	movwf	___lmul@multiplier+1
  1543     03B1  01F2               	clrf	___lmul@multiplier+2
  1544     03B2  01F3               	clrf	___lmul@multiplier+3
  1545     03B3  3000               	movlw	0
  1546     03B4  00F7               	movwf	___lmul@multiplicand+3
  1547     03B5  300F               	movlw	15
  1548     03B6  00F6               	movwf	___lmul@multiplicand+2
  1549     03B7  3042               	movlw	66
  1550     03B8  00F5               	movwf	___lmul@multiplicand+1
  1551     03B9  3040               	movlw	64
  1552     03BA  00F4               	movwf	___lmul@multiplicand
  1553     03BB  120A  118A  20E3  120A  118A  	fcall	___lmul
  1554     03C0  0873               	movf	?___lmul+3,w
  1555     03C1  1283               	bcf	3,5	;RP0=0, select bank0
  1556     03C2  1303               	bcf	3,6	;RP1=0, select bank0
  1557     03C3  00A7               	movwf	___aldiv@dividend+3
  1558     03C4  0872               	movf	?___lmul+2,w
  1559     03C5  00A6               	movwf	___aldiv@dividend+2
  1560     03C6  0871               	movf	?___lmul+1,w
  1561     03C7  00A5               	movwf	___aldiv@dividend+1
  1562     03C8  0870               	movf	?___lmul,w
  1563     03C9  00A4               	movwf	___aldiv@dividend
  1564     03CA  120A  118A  225B  120A  118A  	fcall	___aldiv
  1565     03CF  1283               	bcf	3,5	;RP0=0, select bank0
  1566     03D0  1303               	bcf	3,6	;RP1=0, select bank0
  1567     03D1  0821               	movf	?___aldiv+1,w
  1568     03D2  00D4               	movwf	_voltaje+1
  1569     03D3  0820               	movf	?___aldiv,w
  1570     03D4  00D3               	movwf	_voltaje
  1571     03D5                     l1715:
  1572                           
  1573                           ;main.c: 71: void viewOpt(unsigned int menuOpt) {
  1574     03D5  3064               	movlw	100
  1575     03D6  00F0               	movwf	___lwdiv@divisor
  1576     03D7  3000               	movlw	0
  1577     03D8  00F1               	movwf	___lwdiv@divisor+1
  1578     03D9  0854               	movf	_voltaje+1,w
  1579     03DA  00F3               	movwf	___lwdiv@dividend+1
  1580     03DB  0853               	movf	_voltaje,w
  1581     03DC  00F2               	movwf	___lwdiv@dividend
  1582     03DD  120A  118A  20A1  120A  118A  	fcall	___lwdiv
  1583     03E2  0871               	movf	?___lwdiv+1,w
  1584     03E3  1283               	bcf	3,5	;RP0=0, select bank0
  1585     03E4  1303               	bcf	3,6	;RP1=0, select bank0
  1586     03E5  00D2               	movwf	_part_ent+1
  1587     03E6  0870               	movf	?___lwdiv,w
  1588     03E7  00D1               	movwf	_part_ent
  1589     03E8                     l1717:
  1590                           
  1591                           ;main.c: 72:     switch(menuOpt) {
  1592     03E8  3064               	movlw	100
  1593     03E9  00F0               	movwf	___lwmod@divisor
  1594     03EA  3000               	movlw	0
  1595     03EB  00F1               	movwf	___lwmod@divisor+1
  1596     03EC  0854               	movf	_voltaje+1,w
  1597     03ED  00F3               	movwf	___lwmod@dividend+1
  1598     03EE  0853               	movf	_voltaje,w
  1599     03EF  00F2               	movwf	___lwmod@dividend
  1600     03F0  120A  158A  27C8  120A  118A  	fcall	___lwmod
  1601     03F5  0871               	movf	?___lwmod+1,w
  1602     03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1603     03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1604     03F8  00D0               	movwf	_part_dec+1
  1605     03F9  0870               	movf	?___lwmod,w
  1606     03FA  00CF               	movwf	_part_dec
  1607     03FB                     l1719:
  1608                           
  1609                           ;main.c: 74:             volt(buffer1);
  1610     03FB  0843               	movf	porcentaje@buffer,w
  1611     03FC  00B0               	movwf	sprintf@s
  1612     03FD  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1613     03FE  00B1               	movwf	sprintf@fmt
  1614     03FF  0852               	movf	_part_ent+1,w
  1615     0400  00B3               	movwf	?_sprintf+3
  1616     0401  0851               	movf	_part_ent,w
  1617     0402  00B2               	movwf	?_sprintf+2
  1618     0403  0850               	movf	_part_dec+1,w
  1619     0404  00B5               	movwf	?_sprintf+5
  1620     0405  084F               	movf	_part_dec,w
  1621     0406  00B4               	movwf	?_sprintf+4
  1622     0407  120A  158A  272B  120A  118A  	fcall	_sprintf
  1623     040C                     l1723:
  1624     040C  300C               	movlw	12
  1625     040D  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  1626     0412  3000               	movlw	0
  1627     0413  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  1628     0418                     l1729:
  1629                           
  1630                           ;main.c: 76:         case 2:
  1631     0418  1283               	bcf	3,5	;RP0=0, select bank0
  1632     0419  1303               	bcf	3,6	;RP1=0, select bank0
  1633     041A  0843               	movf	porcentaje@buffer,w
  1634     041B  00F6               	movwf	LCD_putrs@a
  1635     041C  3000               	movlw	0
  1636     041D  00F7               	movwf	LCD_putrs@a+1
  1637     041E  120A  118A  205F  120A  118A  	fcall	_LCD_putrs
  1638     0423                     l1731:
  1639                           
  1640                           ;main.c: 77:             porcentaje(buffer2);
  1641     0423  3002               	movlw	2
  1642     0424  1283               	bcf	3,5	;RP0=0, select bank0
  1643     0425  1303               	bcf	3,6	;RP1=0, select bank0
  1644     0426  00C6               	movwf	??_porcentaje+2
  1645     0427  3004               	movlw	4
  1646     0428  00C5               	movwf	??_porcentaje+1
  1647     0429  30B9               	movlw	185
  1648     042A  00C4               	movwf	??_porcentaje
  1649     042B                     u1547:
  1650     042B  0BC4               	decfsz	??_porcentaje,f
  1651     042C  2C2B               	goto	u1547
  1652     042D  0BC5               	decfsz	??_porcentaje+1,f
  1653     042E  2C2B               	goto	u1547
  1654     042F  0BC6               	decfsz	??_porcentaje+2,f
  1655     0430  2C2B               	goto	u1547
  1656     0431  2C32               	nop2
  1657     0432                     l141:
  1658     0432  0008               	return
  1659     0433                     __end_of_porcentaje:
  1660                           
  1661                           	psect	text4
  1662     00E3                     __ptext4:	
  1663 ;; *************** function ___lmul *****************
  1664 ;; Defined at:
  1665 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul32.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  multiplier      4    0[COMMON] unsigned long 
  1668 ;;  multiplicand    4    4[COMMON] unsigned long 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  product         4    9[COMMON] unsigned long 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  4    0[COMMON] unsigned long 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, status,0
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1680 ;;      Params:         8       0       0       0       0
  1681 ;;      Locals:         4       0       0       0       0
  1682 ;;      Temps:          1       0       0       0       0
  1683 ;;      Totals:        13       0       0       0       0
  1684 ;;Total ram usage:       13 bytes
  1685 ;; Hardware stack levels used: 1
  1686 ;; This function calls:
  1687 ;;		Nothing
  1688 ;; This function is called by:
  1689 ;;		_volt
  1690 ;;		_porcentaje
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694     00E3                     ___lmul:	
  1695                           ;psect for function ___lmul
  1696                           
  1697     00E3                     l1619:	
  1698                           ;incstack = 0
  1699                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1700                           
  1701     00E3  3000               	movlw	0
  1702     00E4  00FC               	movwf	___lmul@product+3
  1703     00E5  3000               	movlw	0
  1704     00E6  00FB               	movwf	___lmul@product+2
  1705     00E7  3000               	movlw	0
  1706     00E8  00FA               	movwf	___lmul@product+1
  1707     00E9  3000               	movlw	0
  1708     00EA  00F9               	movwf	___lmul@product
  1709     00EB                     l1621:
  1710     00EB  1C70               	btfss	___lmul@multiplier,0
  1711     00EC  28EE               	goto	u1241
  1712     00ED  28EF               	goto	u1240
  1713     00EE                     u1241:
  1714     00EE  2906               	goto	l1625
  1715     00EF                     u1240:
  1716     00EF                     l1623:
  1717     00EF  0874               	movf	___lmul@multiplicand,w
  1718     00F0  07F9               	addwf	___lmul@product,f
  1719     00F1  0875               	movf	___lmul@multiplicand+1,w
  1720     00F2  1103               	clrz
  1721     00F3  1803               	skipnc
  1722     00F4  3E01               	addlw	1
  1723     00F5  1903               	skipnz
  1724     00F6  28F8               	goto	u1251
  1725     00F7  07FA               	addwf	___lmul@product+1,f
  1726     00F8                     u1251:
  1727     00F8  0876               	movf	___lmul@multiplicand+2,w
  1728     00F9  1103               	clrz
  1729     00FA  1803               	skipnc
  1730     00FB  3E01               	addlw	1
  1731     00FC  1903               	skipnz
  1732     00FD  28FF               	goto	u1252
  1733     00FE  07FB               	addwf	___lmul@product+2,f
  1734     00FF                     u1252:
  1735     00FF  0877               	movf	___lmul@multiplicand+3,w
  1736     0100  1103               	clrz
  1737     0101  1803               	skipnc
  1738     0102  3E01               	addlw	1
  1739     0103  1903               	skipnz
  1740     0104  2906               	goto	u1253
  1741     0105  07FC               	addwf	___lmul@product+3,f
  1742     0106                     u1253:
  1743     0106                     l1625:
  1744     0106  3001               	movlw	1
  1745     0107  00F8               	movwf	??___lmul
  1746     0108                     u1265:
  1747     0108  1003               	clrc
  1748     0109  0DF4               	rlf	___lmul@multiplicand,f
  1749     010A  0DF5               	rlf	___lmul@multiplicand+1,f
  1750     010B  0DF6               	rlf	___lmul@multiplicand+2,f
  1751     010C  0DF7               	rlf	___lmul@multiplicand+3,f
  1752     010D  0BF8               	decfsz	??___lmul,f
  1753     010E  2908               	goto	u1265
  1754     010F                     l1627:
  1755     010F  3001               	movlw	1
  1756     0110                     u1275:
  1757     0110  1003               	clrc
  1758     0111  0CF3               	rrf	___lmul@multiplier+3,f
  1759     0112  0CF2               	rrf	___lmul@multiplier+2,f
  1760     0113  0CF1               	rrf	___lmul@multiplier+1,f
  1761     0114  0CF0               	rrf	___lmul@multiplier,f
  1762     0115  3EFF               	addlw	-1
  1763     0116  1D03               	skipz
  1764     0117  2910               	goto	u1275
  1765     0118  0873               	movf	___lmul@multiplier+3,w
  1766     0119  0472               	iorwf	___lmul@multiplier+2,w
  1767     011A  0471               	iorwf	___lmul@multiplier+1,w
  1768     011B  0470               	iorwf	___lmul@multiplier,w
  1769     011C  1D03               	skipz
  1770     011D  291F               	goto	u1281
  1771     011E  2920               	goto	u1280
  1772     011F                     u1281:
  1773     011F  28EB               	goto	l1621
  1774     0120                     u1280:
  1775     0120                     l1629:
  1776     0120  087C               	movf	___lmul@product+3,w
  1777     0121  00F3               	movwf	?___lmul+3
  1778     0122  087B               	movf	___lmul@product+2,w
  1779     0123  00F2               	movwf	?___lmul+2
  1780     0124  087A               	movf	___lmul@product+1,w
  1781     0125  00F1               	movwf	?___lmul+1
  1782     0126  0879               	movf	___lmul@product,w
  1783     0127  00F0               	movwf	?___lmul
  1784     0128                     l389:
  1785     0128  0008               	return
  1786     0129                     __end_of___lmul:
  1787                           
  1788                           	psect	text5
  1789     025B                     __ptext5:	
  1790 ;; *************** function ___aldiv *****************
  1791 ;; Defined at:
  1792 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\aldiv.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  divisor         4    0[BANK0 ] long 
  1795 ;;  dividend        4    4[BANK0 ] long 
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  quotient        4   10[BANK0 ] long 
  1798 ;;  sign            1    9[BANK0 ] unsigned char 
  1799 ;;  counter         1    8[BANK0 ] unsigned char 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  4    0[BANK0 ] long 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1809 ;;      Params:         0       8       0       0       0
  1810 ;;      Locals:         0       6       0       0       0
  1811 ;;      Temps:          1       0       0       0       0
  1812 ;;      Totals:         1      14       0       0       0
  1813 ;;Total ram usage:       15 bytes
  1814 ;; Hardware stack levels used: 1
  1815 ;; This function calls:
  1816 ;;		Nothing
  1817 ;; This function is called by:
  1818 ;;		_volt
  1819 ;;		_porcentaje
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823     025B                     ___aldiv:	
  1824                           ;psect for function ___aldiv
  1825                           
  1826     025B                     l1633:	
  1827                           ;incstack = 0
  1828                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1829                           
  1830     025B  1283               	bcf	3,5	;RP0=0, select bank0
  1831     025C  1303               	bcf	3,6	;RP1=0, select bank0
  1832     025D  01A9               	clrf	___aldiv@sign
  1833     025E                     l1635:
  1834     025E  1FA3               	btfss	___aldiv@divisor+3,7
  1835     025F  2A61               	goto	u1291
  1836     0260  2A62               	goto	u1290
  1837     0261                     u1291:
  1838     0261  2A6F               	goto	l440
  1839     0262                     u1290:
  1840     0262                     l1637:
  1841     0262  09A0               	comf	___aldiv@divisor,f
  1842     0263  09A1               	comf	___aldiv@divisor+1,f
  1843     0264  09A2               	comf	___aldiv@divisor+2,f
  1844     0265  09A3               	comf	___aldiv@divisor+3,f
  1845     0266  0AA0               	incf	___aldiv@divisor,f
  1846     0267  1903               	skipnz
  1847     0268  0AA1               	incf	___aldiv@divisor+1,f
  1848     0269  1903               	skipnz
  1849     026A  0AA2               	incf	___aldiv@divisor+2,f
  1850     026B  1903               	skipnz
  1851     026C  0AA3               	incf	___aldiv@divisor+3,f
  1852     026D  3001               	movlw	1
  1853     026E  00A9               	movwf	___aldiv@sign
  1854     026F                     l440:
  1855     026F  1FA7               	btfss	___aldiv@dividend+3,7
  1856     0270  2A72               	goto	u1301
  1857     0271  2A73               	goto	u1300
  1858     0272                     u1301:
  1859     0272  2A80               	goto	l1643
  1860     0273                     u1300:
  1861     0273                     l1639:
  1862     0273  09A4               	comf	___aldiv@dividend,f
  1863     0274  09A5               	comf	___aldiv@dividend+1,f
  1864     0275  09A6               	comf	___aldiv@dividend+2,f
  1865     0276  09A7               	comf	___aldiv@dividend+3,f
  1866     0277  0AA4               	incf	___aldiv@dividend,f
  1867     0278  1903               	skipnz
  1868     0279  0AA5               	incf	___aldiv@dividend+1,f
  1869     027A  1903               	skipnz
  1870     027B  0AA6               	incf	___aldiv@dividend+2,f
  1871     027C  1903               	skipnz
  1872     027D  0AA7               	incf	___aldiv@dividend+3,f
  1873     027E                     l1641:
  1874     027E  3001               	movlw	1
  1875     027F  06A9               	xorwf	___aldiv@sign,f
  1876     0280                     l1643:
  1877     0280  3000               	movlw	0
  1878     0281  00AD               	movwf	___aldiv@quotient+3
  1879     0282  3000               	movlw	0
  1880     0283  00AC               	movwf	___aldiv@quotient+2
  1881     0284  3000               	movlw	0
  1882     0285  00AB               	movwf	___aldiv@quotient+1
  1883     0286  3000               	movlw	0
  1884     0287  00AA               	movwf	___aldiv@quotient
  1885     0288                     l1645:
  1886     0288  0823               	movf	___aldiv@divisor+3,w
  1887     0289  0422               	iorwf	___aldiv@divisor+2,w
  1888     028A  0421               	iorwf	___aldiv@divisor+1,w
  1889     028B  0420               	iorwf	___aldiv@divisor,w
  1890     028C  1903               	skipnz
  1891     028D  2A8F               	goto	u1311
  1892     028E  2A90               	goto	u1310
  1893     028F                     u1311:
  1894     028F  2ADB               	goto	l1665
  1895     0290                     u1310:
  1896     0290                     l1647:
  1897     0290  3001               	movlw	1
  1898     0291  00A8               	movwf	___aldiv@counter
  1899     0292  2A9E               	goto	l1651
  1900     0293                     l1649:
  1901     0293  3001               	movlw	1
  1902     0294  00FD               	movwf	??___aldiv
  1903     0295                     u1325:
  1904     0295  1003               	clrc
  1905     0296  0DA0               	rlf	___aldiv@divisor,f
  1906     0297  0DA1               	rlf	___aldiv@divisor+1,f
  1907     0298  0DA2               	rlf	___aldiv@divisor+2,f
  1908     0299  0DA3               	rlf	___aldiv@divisor+3,f
  1909     029A  0BFD               	decfsz	??___aldiv,f
  1910     029B  2A95               	goto	u1325
  1911     029C  3001               	movlw	1
  1912     029D  07A8               	addwf	___aldiv@counter,f
  1913     029E                     l1651:
  1914     029E  1FA3               	btfss	___aldiv@divisor+3,7
  1915     029F  2AA1               	goto	u1331
  1916     02A0  2AA2               	goto	u1330
  1917     02A1                     u1331:
  1918     02A1  2A93               	goto	l1649
  1919     02A2                     u1330:
  1920     02A2                     l1653:
  1921     02A2  3001               	movlw	1
  1922     02A3  00FD               	movwf	??___aldiv
  1923     02A4                     u1345:
  1924     02A4  1003               	clrc
  1925     02A5  0DAA               	rlf	___aldiv@quotient,f
  1926     02A6  0DAB               	rlf	___aldiv@quotient+1,f
  1927     02A7  0DAC               	rlf	___aldiv@quotient+2,f
  1928     02A8  0DAD               	rlf	___aldiv@quotient+3,f
  1929     02A9  0BFD               	decfsz	??___aldiv,f
  1930     02AA  2AA4               	goto	u1345
  1931     02AB                     l1655:
  1932     02AB  0823               	movf	___aldiv@divisor+3,w
  1933     02AC  0227               	subwf	___aldiv@dividend+3,w
  1934     02AD  1D03               	skipz
  1935     02AE  2AB9               	goto	u1355
  1936     02AF  0822               	movf	___aldiv@divisor+2,w
  1937     02B0  0226               	subwf	___aldiv@dividend+2,w
  1938     02B1  1D03               	skipz
  1939     02B2  2AB9               	goto	u1355
  1940     02B3  0821               	movf	___aldiv@divisor+1,w
  1941     02B4  0225               	subwf	___aldiv@dividend+1,w
  1942     02B5  1D03               	skipz
  1943     02B6  2AB9               	goto	u1355
  1944     02B7  0820               	movf	___aldiv@divisor,w
  1945     02B8  0224               	subwf	___aldiv@dividend,w
  1946     02B9                     u1355:
  1947     02B9  1C03               	skipc
  1948     02BA  2ABC               	goto	u1351
  1949     02BB  2ABD               	goto	u1350
  1950     02BC                     u1351:
  1951     02BC  2ACC               	goto	l1661
  1952     02BD                     u1350:
  1953     02BD                     l1657:
  1954     02BD  0820               	movf	___aldiv@divisor,w
  1955     02BE  02A4               	subwf	___aldiv@dividend,f
  1956     02BF  0821               	movf	___aldiv@divisor+1,w
  1957     02C0  1C03               	skipc
  1958     02C1  0F21               	incfsz	___aldiv@divisor+1,w
  1959     02C2  02A5               	subwf	___aldiv@dividend+1,f
  1960     02C3  0822               	movf	___aldiv@divisor+2,w
  1961     02C4  1C03               	skipc
  1962     02C5  0F22               	incfsz	___aldiv@divisor+2,w
  1963     02C6  02A6               	subwf	___aldiv@dividend+2,f
  1964     02C7  0823               	movf	___aldiv@divisor+3,w
  1965     02C8  1C03               	skipc
  1966     02C9  0F23               	incfsz	___aldiv@divisor+3,w
  1967     02CA  02A7               	subwf	___aldiv@dividend+3,f
  1968     02CB                     l1659:
  1969     02CB  142A               	bsf	___aldiv@quotient,0
  1970     02CC                     l1661:
  1971     02CC  3001               	movlw	1
  1972     02CD                     u1365:
  1973     02CD  1003               	clrc
  1974     02CE  0CA3               	rrf	___aldiv@divisor+3,f
  1975     02CF  0CA2               	rrf	___aldiv@divisor+2,f
  1976     02D0  0CA1               	rrf	___aldiv@divisor+1,f
  1977     02D1  0CA0               	rrf	___aldiv@divisor,f
  1978     02D2  3EFF               	addlw	-1
  1979     02D3  1D03               	skipz
  1980     02D4  2ACD               	goto	u1365
  1981     02D5                     l1663:
  1982     02D5  3001               	movlw	1
  1983     02D6  02A8               	subwf	___aldiv@counter,f
  1984     02D7  1D03               	btfss	3,2
  1985     02D8  2ADA               	goto	u1371
  1986     02D9  2ADB               	goto	u1370
  1987     02DA                     u1371:
  1988     02DA  2AA2               	goto	l1653
  1989     02DB                     u1370:
  1990     02DB                     l1665:
  1991     02DB  0829               	movf	___aldiv@sign,w
  1992     02DC  1903               	btfsc	3,2
  1993     02DD  2ADF               	goto	u1381
  1994     02DE  2AE0               	goto	u1380
  1995     02DF                     u1381:
  1996     02DF  2AEB               	goto	l1669
  1997     02E0                     u1380:
  1998     02E0                     l1667:
  1999     02E0  09AA               	comf	___aldiv@quotient,f
  2000     02E1  09AB               	comf	___aldiv@quotient+1,f
  2001     02E2  09AC               	comf	___aldiv@quotient+2,f
  2002     02E3  09AD               	comf	___aldiv@quotient+3,f
  2003     02E4  0AAA               	incf	___aldiv@quotient,f
  2004     02E5  1903               	skipnz
  2005     02E6  0AAB               	incf	___aldiv@quotient+1,f
  2006     02E7  1903               	skipnz
  2007     02E8  0AAC               	incf	___aldiv@quotient+2,f
  2008     02E9  1903               	skipnz
  2009     02EA  0AAD               	incf	___aldiv@quotient+3,f
  2010     02EB                     l1669:
  2011     02EB  082D               	movf	___aldiv@quotient+3,w
  2012     02EC  00A3               	movwf	?___aldiv+3
  2013     02ED  082C               	movf	___aldiv@quotient+2,w
  2014     02EE  00A2               	movwf	?___aldiv+2
  2015     02EF  082B               	movf	___aldiv@quotient+1,w
  2016     02F0  00A1               	movwf	?___aldiv+1
  2017     02F1  082A               	movf	___aldiv@quotient,w
  2018     02F2  00A0               	movwf	?___aldiv
  2019     02F3                     l450:
  2020     02F3  0008               	return
  2021     02F4                     __end_of___aldiv:
  2022                           
  2023                           	psect	text6
  2024     0129                     __ptext6:	
  2025 ;; *************** function _mil *****************
  2026 ;; Defined at:
  2027 ;;		line 80 in file "main.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;  buffer          1   35[BANK0 ] PTR unsigned char 
  2030 ;;		 -> buffer3(10), 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2042 ;;      Params:         0       1       0       0       0
  2043 ;;      Locals:         0       0       0       0       0
  2044 ;;      Temps:          0       3       0       0       0
  2045 ;;      Totals:         0       4       0       0       0
  2046 ;;Total ram usage:        4 bytes
  2047 ;; Hardware stack levels used: 1
  2048 ;; Hardware stack levels required when called: 5
  2049 ;; This function calls:
  2050 ;;		_LCD_Write
  2051 ;;		_LCD_putrs
  2052 ;;		_sprintf
  2053 ;; This function is called by:
  2054 ;;		_viewOpt
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058     0129                     _mil:	
  2059                           ;psect for function _mil
  2060                           
  2061     0129                     l144:	
  2062                           ;incstack = 0
  2063                           ; Regs used in _mil: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2064                           ;main.c: 81:             break;
  2065                           
  2066     0129                     l1733:
  2067     0129  3008               	movlw	8
  2068     012A  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  2069     012F  3003               	movlw	3
  2070     0130  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  2071     0135                     l1741:
  2072                           
  2073                           ;main.c: 82:     }
  2074     0135  3018               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2075     0136  00F6               	movwf	LCD_putrs@a
  2076     0137  3080               	movlw	128
  2077     0138  00F7               	movwf	LCD_putrs@a+1
  2078     0139  120A  118A  205F  120A  118A  	fcall	_LCD_putrs
  2079     013E                     l1743:
  2080                           
  2081                           ;main.c: 84: 
  2082     013E  1283               	bcf	3,5	;RP0=0, select bank0
  2083     013F  1303               	bcf	3,6	;RP1=0, select bank0
  2084     0140  0843               	movf	mil@buffer,w
  2085     0141  00B0               	movwf	sprintf@s
  2086     0142  3021               	movlw	(low (((STR_2+3)-__stringbase)| (0+32768)))& (0+255)
  2087     0143  00B1               	movwf	sprintf@fmt
  2088     0144  0856               	movf	_adc_result+1,w
  2089     0145  00B3               	movwf	?_sprintf+3
  2090     0146  0855               	movf	_adc_result,w
  2091     0147  00B2               	movwf	?_sprintf+2
  2092     0148  120A  158A  272B  120A  118A  	fcall	_sprintf
  2093     014D                     l1747:
  2094     014D  300C               	movlw	12
  2095     014E  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  2096     0153  3000               	movlw	0
  2097     0154  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  2098     0159                     l1753:
  2099                           
  2100                           ;main.c: 86: 
  2101     0159  1283               	bcf	3,5	;RP0=0, select bank0
  2102     015A  1303               	bcf	3,6	;RP1=0, select bank0
  2103     015B  0843               	movf	mil@buffer,w
  2104     015C  00F6               	movwf	LCD_putrs@a
  2105     015D  3000               	movlw	0
  2106     015E  00F7               	movwf	LCD_putrs@a+1
  2107     015F  120A  118A  205F  120A  118A  	fcall	_LCD_putrs
  2108     0164                     l1755:
  2109                           
  2110                           ;main.c: 87: 
  2111     0164  3002               	movlw	2
  2112     0165  1283               	bcf	3,5	;RP0=0, select bank0
  2113     0166  1303               	bcf	3,6	;RP1=0, select bank0
  2114     0167  00C6               	movwf	??_mil+2
  2115     0168  3004               	movlw	4
  2116     0169  00C5               	movwf	??_mil+1
  2117     016A  30B9               	movlw	185
  2118     016B  00C4               	movwf	??_mil
  2119     016C                     u1557:
  2120     016C  0BC4               	decfsz	??_mil,f
  2121     016D  296C               	goto	u1557
  2122     016E  0BC5               	decfsz	??_mil+1,f
  2123     016F  296C               	goto	u1557
  2124     0170  0BC6               	decfsz	??_mil+2,f
  2125     0171  296C               	goto	u1557
  2126     0172  2973               	nop2
  2127     0173                     l178:
  2128     0173  0008               	return
  2129     0174                     __end_of_mil:
  2130                           
  2131                           	psect	text7
  2132     0F2B                     __ptext7:	
  2133 ;; *************** function _sprintf *****************
  2134 ;; Defined at:
  2135 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  s               1   16[BANK0 ] PTR unsigned char 
  2138 ;;		 -> buffer3(10), buffer2(10), buffer1(10), 
  2139 ;;  fmt             1   17[BANK0 ] PTR const unsigned char 
  2140 ;;		 -> STR_6(3), STR_4(6), STR_2(6), 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  f              11   24[BANK0 ] struct _IO_FILE
  2143 ;;  ret             2    0        int 
  2144 ;;  ap              1   23[BANK0 ] PTR void [1]
  2145 ;;		 -> ?_sprintf(2), 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  2   16[BANK0 ] int 
  2148 ;; Registers used:
  2149 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2155 ;;      Params:         0       6       0       0       0
  2156 ;;      Locals:         0      12       0       0       0
  2157 ;;      Temps:          0       1       0       0       0
  2158 ;;      Totals:         0      19       0       0       0
  2159 ;;Total ram usage:       19 bytes
  2160 ;; Hardware stack levels used: 1
  2161 ;; Hardware stack levels required when called: 4
  2162 ;; This function calls:
  2163 ;;		_vfprintf
  2164 ;; This function is called by:
  2165 ;;		_volt
  2166 ;;		_porcentaje
  2167 ;;		_mil
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171     0F2B                     _sprintf:	
  2172                           ;psect for function _sprintf
  2173                           
  2174     0F2B                     l1605:	
  2175                           ;incstack = 0
  2176                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2177                           
  2178     0F2B  3032               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2179     0F2C  1283               	bcf	3,5	;RP0=0, select bank0
  2180     0F2D  1303               	bcf	3,6	;RP1=0, select bank0
  2181     0F2E  00B7               	movwf	sprintf@ap
  2182     0F2F                     l1607:
  2183     0F2F  0830               	movf	sprintf@s,w
  2184     0F30  00B8               	movwf	sprintf@f
  2185     0F31  3000               	movlw	0
  2186     0F32  00B9               	movwf	sprintf@f+1
  2187     0F33                     l1609:
  2188     0F33  01BA               	clrf	sprintf@f+2
  2189     0F34  01BB               	clrf	sprintf@f+3
  2190     0F35                     l1611:
  2191     0F35  01C1               	clrf	sprintf@f+9
  2192     0F36  01C2               	clrf	sprintf@f+10
  2193     0F37                     l1613:
  2194     0F37  3038               	movlw	low sprintf@f
  2195     0F38  00AC               	movwf	vfprintf@fp
  2196     0F39  3000               	movlw	high sprintf@f
  2197     0F3A  00AD               	movwf	vfprintf@fp+1
  2198     0F3B  0831               	movf	sprintf@fmt,w
  2199     0F3C  00AE               	movwf	vfprintf@fmt
  2200     0F3D  3037               	movlw	(low (sprintf@ap| 0))& (0+255)
  2201     0F3E  00AF               	movwf	vfprintf@ap
  2202     0F3F  120A  158A  274E  120A  158A  	fcall	_vfprintf
  2203     0F44                     l1615:
  2204     0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2205     0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2206     0F46  083A               	movf	sprintf@f+2,w
  2207     0F47  0730               	addwf	sprintf@s,w
  2208     0F48  00B6               	movwf	??_sprintf
  2209     0F49  0836               	movf	??_sprintf,w
  2210     0F4A  0084               	movwf	4
  2211     0F4B  1383               	bcf	3,7	;select IRP bank0
  2212     0F4C  0180               	clrf	0
  2213     0F4D                     l838:
  2214     0F4D  0008               	return
  2215     0F4E                     __end_of_sprintf:
  2216                           
  2217                           	psect	text8
  2218     0F4E                     __ptext8:	
  2219 ;; *************** function _vfprintf *****************
  2220 ;; Defined at:
  2221 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  fp              2   12[BANK0 ] PTR struct _IO_FILE
  2224 ;;		 -> sprintf@f(11), 
  2225 ;;  fmt             1   14[BANK0 ] PTR const unsigned char 
  2226 ;;		 -> STR_6(3), STR_4(6), STR_2(6), 
  2227 ;;  ap              1   15[BANK0 ] PTR PTR void 
  2228 ;;		 -> sprintf@ap(1), 
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;  cfmt            1   13[COMMON] PTR unsigned char 
  2231 ;;		 -> STR_6(3), STR_4(6), STR_2(6), 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  2   12[BANK0 ] int 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2241 ;;      Params:         0       4       0       0       0
  2242 ;;      Locals:         1       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0
  2244 ;;      Totals:         1       4       0       0       0
  2245 ;;Total ram usage:        5 bytes
  2246 ;; Hardware stack levels used: 1
  2247 ;; Hardware stack levels required when called: 3
  2248 ;; This function calls:
  2249 ;;		_vfpfcnvrt
  2250 ;; This function is called by:
  2251 ;;		_sprintf
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255     0F4E                     _vfprintf:	
  2256                           ;psect for function _vfprintf
  2257                           
  2258     0F4E                     l1577:	
  2259                           ;incstack = 0
  2260                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2261                           
  2262                           
  2263                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2264     0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  2265     0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  2266     0F50  082E               	movf	vfprintf@fmt,w
  2267     0F51  00FD               	movwf	vfprintf@cfmt
  2268                           
  2269                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2270     0F52  2F62               	goto	l1581
  2271     0F53                     l1579:
  2272                           
  2273                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2274     0F53  1283               	bcf	3,5	;RP0=0, select bank0
  2275     0F54  1303               	bcf	3,6	;RP1=0, select bank0
  2276     0F55  082C               	movf	vfprintf@fp,w
  2277     0F56  00A0               	movwf	vfpfcnvrt@fp
  2278     0F57  082D               	movf	vfprintf@fp+1,w
  2279     0F58  00A1               	movwf	vfpfcnvrt@fp+1
  2280     0F59  307D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  2281     0F5A  00A2               	movwf	vfpfcnvrt@fmt
  2282     0F5B  082F               	movf	vfprintf@ap,w
  2283     0F5C  00A3               	movwf	vfpfcnvrt@ap
  2284     0F5D  120A  118A  263E  120A  158A  	fcall	_vfpfcnvrt
  2285     0F62                     l1581:
  2286                           
  2287                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2288     0F62  087D               	movf	vfprintf@cfmt,w
  2289     0F63  0084               	movwf	4
  2290     0F64  120A  118A  200D  120A  158A  	fcall	stringdir
  2291     0F69  3A00               	xorlw	0
  2292     0F6A  1D03               	skipz
  2293     0F6B  2F6D               	goto	u1171
  2294     0F6C  2F6E               	goto	u1170
  2295     0F6D                     u1171:
  2296     0F6D  2F53               	goto	l1579
  2297     0F6E                     u1170:
  2298     0F6E                     l1583:
  2299                           
  2300                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2301     0F6E  1283               	bcf	3,5	;RP0=0, select bank0
  2302     0F6F  1303               	bcf	3,6	;RP1=0, select bank0
  2303     0F70  01AC               	clrf	?_vfprintf
  2304     0F71  01AD               	clrf	?_vfprintf+1
  2305     0F72                     l882:
  2306     0F72  0008               	return
  2307     0F73                     __end_of_vfprintf:
  2308                           
  2309                           	psect	text9
  2310     063E                     __ptext9:	
  2311 ;; *************** function _vfpfcnvrt *****************
  2312 ;; Defined at:
  2313 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2316 ;;		 -> sprintf@f(11), 
  2317 ;;  fmt             1    2[BANK0 ] PTR PTR unsigned char 
  2318 ;;		 -> vfprintf@cfmt(1), 
  2319 ;;  ap              1    3[BANK0 ] PTR PTR void 
  2320 ;;		 -> sprintf@ap(1), 
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  convarg         4    6[BANK0 ] struct .
  2323 ;;  c               1   11[BANK0 ] unsigned char 
  2324 ;;  cp              1   10[BANK0 ] PTR unsigned char 
  2325 ;;		 -> STR_6(3), STR_4(6), STR_2(6), 
  2326 ;;  done            1    0        _Bool 
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  1    wreg      void 
  2329 ;; Registers used:
  2330 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2336 ;;      Params:         0       4       0       0       0
  2337 ;;      Locals:         0       6       0       0       0
  2338 ;;      Temps:          0       2       0       0       0
  2339 ;;      Totals:         0      12       0       0       0
  2340 ;;Total ram usage:       12 bytes
  2341 ;; Hardware stack levels used: 1
  2342 ;; Hardware stack levels required when called: 2
  2343 ;; This function calls:
  2344 ;;		___lwdiv
  2345 ;;		___lwmod
  2346 ;;		_fputc
  2347 ;; This function is called by:
  2348 ;;		_vfprintf
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352     063E                     _vfpfcnvrt:	
  2353                           ;psect for function _vfpfcnvrt
  2354                           
  2355     063E                     l1517:	
  2356                           ;incstack = 0
  2357                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2358                           
  2359                           
  2360                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2361     063E  1283               	bcf	3,5	;RP0=0, select bank0
  2362     063F  1303               	bcf	3,6	;RP1=0, select bank0
  2363     0640  0822               	movf	vfpfcnvrt@fmt,w
  2364     0641  0084               	movwf	4
  2365     0642  0800               	movf	0,w
  2366     0643  0084               	movwf	4
  2367     0644  120A  118A  200D  120A  118A  	fcall	stringdir
  2368     0649  3A25               	xorlw	37
  2369     064A  1D03               	skipz
  2370     064B  2E4D               	goto	u1061
  2371     064C  2E4E               	goto	u1060
  2372     064D                     u1061:
  2373     064D  2EE8               	goto	l1555
  2374     064E                     u1060:
  2375     064E                     l1519:
  2376                           
  2377                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2378     064E  0822               	movf	vfpfcnvrt@fmt,w
  2379     064F  0084               	movwf	4
  2380     0650  3001               	movlw	1
  2381     0651  0780               	addwf	0,f
  2382     0652                     l1521:
  2383                           
  2384                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2385     0652  01CB               	clrf	_width
  2386     0653  01CC               	clrf	_width+1
  2387     0654  3000               	movlw	0
  2388     0655  00D7               	movwf	_flags
  2389     0656                     l1523:
  2390                           
  2391                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2392     0656  30FF               	movlw	255
  2393     0657  00CD               	movwf	_prec
  2394     0658  30FF               	movlw	255
  2395     0659  00CE               	movwf	_prec+1
  2396     065A                     l1525:
  2397                           
  2398                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  2399     065A  0822               	movf	vfpfcnvrt@fmt,w
  2400     065B  0084               	movwf	4
  2401     065C  0800               	movf	0,w
  2402     065D  00AA               	movwf	vfpfcnvrt@cp
  2403     065E                     l1527:
  2404     065E  082A               	movf	vfpfcnvrt@cp,w
  2405     065F  0084               	movwf	4
  2406     0660  120A  118A  200D  120A  118A  	fcall	stringdir
  2407     0665  3A75               	xorlw	117
  2408     0666  1D03               	skipz
  2409     0667  2E69               	goto	u1071
  2410     0668  2E6A               	goto	u1070
  2411     0669                     u1071:
  2412     0669  2EE1               	goto	l1551
  2413     066A                     u1070:
  2414     066A                     l1529:
  2415                           
  2416                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  2417     066A  0823               	movf	vfpfcnvrt@ap,w
  2418     066B  0084               	movwf	4
  2419     066C  1383               	bcf	3,7	;select IRP bank0
  2420     066D  0800               	movf	0,w
  2421     066E  00FF               	movwf	btemp+1
  2422     066F  3002               	movlw	2
  2423     0670  0780               	addwf	0,f
  2424     0671  087F               	movf	btemp+1,w
  2425     0672  0084               	movwf	4
  2426     0673  0800               	movf	0,w
  2427     0674  00A6               	movwf	vfpfcnvrt@convarg
  2428     0675  0A84               	incf	4,f
  2429     0676  0800               	movf	0,w
  2430     0677  00A7               	movwf	vfpfcnvrt@convarg+1
  2431     0678                     l1531:
  2432                           
  2433                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  2434     0678  0822               	movf	vfpfcnvrt@fmt,w
  2435     0679  0084               	movwf	4
  2436     067A  082A               	movf	vfpfcnvrt@cp,w
  2437     067B  3E01               	addlw	1
  2438     067C  0080               	movwf	0
  2439                           
  2440                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  2441     067D  2ED6               	goto	l1549
  2442     067E                     l867:	
  2443                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1523:     case 'u
      +                          ':
  2444                           
  2445                           
  2446                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  2447     067E  3020               	movlw	32
  2448     067F  00AB               	movwf	vfpfcnvrt@c
  2449     0680                     l1533:
  2450                           
  2451                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  2452     0680  3001               	movlw	1
  2453     0681  02AB               	subwf	vfpfcnvrt@c,f
  2454     0682  082B               	movf	vfpfcnvrt@c,w
  2455     0683  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2456     0684  0084               	movwf	4
  2457     0685  300A               	movlw	10
  2458     0686  00F0               	movwf	___lwmod@divisor
  2459     0687  3000               	movlw	0
  2460     0688  00F1               	movwf	___lwmod@divisor+1
  2461     0689  0827               	movf	vfpfcnvrt@convarg+1,w
  2462     068A  00F3               	movwf	___lwmod@dividend+1
  2463     068B  0826               	movf	vfpfcnvrt@convarg,w
  2464     068C  00F2               	movwf	___lwmod@dividend
  2465     068D  120A  158A  27C8  120A  118A  	fcall	___lwmod
  2466     0692  0870               	movf	?___lwmod,w
  2467     0693  3E30               	addlw	48
  2468     0694  1383               	bcf	3,7	;select IRP bank1
  2469     0695  0080               	movwf	0
  2470     0696                     l1535:
  2471                           
  2472                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  2473     0696  300A               	movlw	10
  2474     0697  00F0               	movwf	___lwdiv@divisor
  2475     0698  3000               	movlw	0
  2476     0699  00F1               	movwf	___lwdiv@divisor+1
  2477     069A  1283               	bcf	3,5	;RP0=0, select bank0
  2478     069B  1303               	bcf	3,6	;RP1=0, select bank0
  2479     069C  0827               	movf	vfpfcnvrt@convarg+1,w
  2480     069D  00F3               	movwf	___lwdiv@dividend+1
  2481     069E  0826               	movf	vfpfcnvrt@convarg,w
  2482     069F  00F2               	movwf	___lwdiv@dividend
  2483     06A0  120A  118A  20A1  120A  118A  	fcall	___lwdiv
  2484     06A5  0871               	movf	?___lwdiv+1,w
  2485     06A6  1283               	bcf	3,5	;RP0=0, select bank0
  2486     06A7  1303               	bcf	3,6	;RP1=0, select bank0
  2487     06A8  00A7               	movwf	vfpfcnvrt@convarg+1
  2488     06A9  0870               	movf	?___lwdiv,w
  2489     06AA  00A6               	movwf	vfpfcnvrt@convarg
  2490     06AB                     l1537:
  2491                           
  2492                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  2493     06AB  0826               	movf	vfpfcnvrt@convarg,w
  2494     06AC  0427               	iorwf	vfpfcnvrt@convarg+1,w
  2495     06AD  1903               	btfsc	3,2
  2496     06AE  2EB0               	goto	u1081
  2497     06AF  2EB1               	goto	u1080
  2498     06B0                     u1081:
  2499     06B0  2ECF               	goto	l1545
  2500     06B1                     u1080:
  2501     06B1                     l1539:
  2502     06B1  082B               	movf	vfpfcnvrt@c,w
  2503     06B2  1D03               	btfss	3,2
  2504     06B3  2EB5               	goto	u1091
  2505     06B4  2EB6               	goto	u1090
  2506     06B5                     u1091:
  2507     06B5  2E80               	goto	l1533
  2508     06B6                     u1090:
  2509     06B6  2ECF               	goto	l1545
  2510     06B7                     l1541:
  2511                           
  2512                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  2513     06B7  082B               	movf	vfpfcnvrt@c,w
  2514     06B8  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2515     06B9  0084               	movwf	4
  2516     06BA  1383               	bcf	3,7	;select IRP bank1
  2517     06BB  0800               	movf	0,w
  2518     06BC  00A4               	movwf	??_vfpfcnvrt
  2519     06BD  01A5               	clrf	??_vfpfcnvrt+1
  2520     06BE  0824               	movf	??_vfpfcnvrt,w
  2521     06BF  00F0               	movwf	fputc@c
  2522     06C0  0825               	movf	??_vfpfcnvrt+1,w
  2523     06C1  00F1               	movwf	fputc@c+1
  2524     06C2  0820               	movf	vfpfcnvrt@fp,w
  2525     06C3  00F2               	movwf	fputc@fp
  2526     06C4  0821               	movf	vfpfcnvrt@fp+1,w
  2527     06C5  00F3               	movwf	fputc@fp+1
  2528     06C6  120A  118A  22F4  120A  118A  	fcall	_fputc
  2529     06CB                     l1543:
  2530     06CB  3001               	movlw	1
  2531     06CC  1283               	bcf	3,5	;RP0=0, select bank0
  2532     06CD  1303               	bcf	3,6	;RP1=0, select bank0
  2533     06CE  07AB               	addwf	vfpfcnvrt@c,f
  2534     06CF                     l1545:
  2535                           
  2536                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  2537     06CF  3020               	movlw	32
  2538     06D0  062B               	xorwf	vfpfcnvrt@c,w
  2539     06D1  1D03               	btfss	3,2
  2540     06D2  2ED4               	goto	u1101
  2541     06D3  2ED5               	goto	u1100
  2542     06D4                     u1101:
  2543     06D4  2EB7               	goto	l1541
  2544     06D5                     u1100:
  2545     06D5  2F01               	goto	l875
  2546     06D6                     l1549:
  2547     06D6  082A               	movf	vfpfcnvrt@cp,w
  2548     06D7  0084               	movwf	4
  2549     06D8  120A  118A  200D  120A  118A  	fcall	stringdir
  2550                           
  2551                           ; Switch size 1, requested type "simple"
  2552                           ; Number of cases is 1, Range of values is 117 to 117
  2553                           ; switch strategies available:
  2554                           ; Name         Instructions Cycles
  2555                           ; simple_byte            4     3 (average)
  2556                           ; direct_byte           14    11 (fixed)
  2557                           ; jumptable            263     9 (fixed)
  2558                           ;	Chosen strategy is simple_byte
  2559     06DD  3A75               	xorlw	117	; case 117
  2560     06DE  1903               	skipnz
  2561     06DF  2E7E               	goto	l867
  2562     06E0  2EE1               	goto	l1551
  2563     06E1                     l1551:
  2564                           
  2565                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2566     06E1  1283               	bcf	3,5	;RP0=0, select bank0
  2567     06E2  1303               	bcf	3,6	;RP1=0, select bank0
  2568     06E3  0822               	movf	vfpfcnvrt@fmt,w
  2569     06E4  0084               	movwf	4
  2570     06E5  3001               	movlw	1
  2571     06E6  0780               	addwf	0,f
  2572     06E7  2F01               	goto	l875
  2573     06E8                     l1555:
  2574                           
  2575                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2576     06E8  0822               	movf	vfpfcnvrt@fmt,w
  2577     06E9  0084               	movwf	4
  2578     06EA  0800               	movf	0,w
  2579     06EB  0084               	movwf	4
  2580     06EC  120A  118A  200D  120A  118A  	fcall	stringdir
  2581     06F1  00A4               	movwf	??_vfpfcnvrt
  2582     06F2  01A5               	clrf	??_vfpfcnvrt+1
  2583     06F3  0824               	movf	??_vfpfcnvrt,w
  2584     06F4  00F0               	movwf	fputc@c
  2585     06F5  0825               	movf	??_vfpfcnvrt+1,w
  2586     06F6  00F1               	movwf	fputc@c+1
  2587     06F7  0820               	movf	vfpfcnvrt@fp,w
  2588     06F8  00F2               	movwf	fputc@fp
  2589     06F9  0821               	movf	vfpfcnvrt@fp+1,w
  2590     06FA  00F3               	movwf	fputc@fp+1
  2591     06FB  120A  118A  22F4  120A  118A  	fcall	_fputc
  2592     0700  2EE1               	goto	l1551
  2593     0701                     l875:
  2594     0701  0008               	return
  2595     0702                     __end_of_vfpfcnvrt:
  2596                           
  2597                           	psect	text10
  2598     02F4                     __ptext10:	
  2599 ;; *************** function _fputc *****************
  2600 ;; Defined at:
  2601 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  c               2    0[COMMON] int 
  2604 ;;  fp              2    2[COMMON] PTR struct _IO_FILE
  2605 ;;		 -> sprintf@f(11), 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;		None
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  2    0[COMMON] int 
  2610 ;; Registers used:
  2611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2617 ;;      Params:         4       0       0       0       0
  2618 ;;      Locals:         0       0       0       0       0
  2619 ;;      Temps:          9       0       0       0       0
  2620 ;;      Totals:        13       0       0       0       0
  2621 ;;Total ram usage:       13 bytes
  2622 ;; Hardware stack levels used: 1
  2623 ;; Hardware stack levels required when called: 1
  2624 ;; This function calls:
  2625 ;;		_putch
  2626 ;; This function is called by:
  2627 ;;		_vfpfcnvrt
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631     02F4                     _fputc:	
  2632                           ;psect for function _fputc
  2633                           
  2634     02F4                     l1479:	
  2635                           ;incstack = 0
  2636                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2637                           
  2638     02F4  0872               	movf	fputc@fp,w
  2639     02F5  0473               	iorwf	fputc@fp+1,w
  2640     02F6  1903               	btfsc	3,2
  2641     02F7  2AF9               	goto	u891
  2642     02F8  2AFA               	goto	u890
  2643     02F9                     u891:
  2644     02F9  2B00               	goto	l1483
  2645     02FA                     u890:
  2646     02FA                     l1481:
  2647     02FA  0872               	movf	fputc@fp,w
  2648     02FB  0473               	iorwf	fputc@fp+1,w
  2649     02FC  1D03               	btfss	3,2
  2650     02FD  2AFF               	goto	u901
  2651     02FE  2B00               	goto	u900
  2652     02FF                     u901:
  2653     02FF  2B07               	goto	l1485
  2654     0300                     u900:
  2655     0300                     l1483:
  2656     0300  0870               	movf	fputc@c,w
  2657     0301  120A  158A  2717  120A  118A  	fcall	_putch
  2658     0306  2B8D               	goto	l894
  2659     0307                     l1485:
  2660     0307  0872               	movf	fputc@fp,w
  2661     0308  3E09               	addlw	9
  2662     0309  00F4               	movwf	??_fputc
  2663     030A  0873               	movf	fputc@fp+1,w
  2664     030B  1803               	skipnc
  2665     030C  3E01               	addlw	1
  2666     030D  3E00               	addlw	0
  2667     030E  00F5               	movwf	??_fputc+1
  2668     030F  0874               	movf	??_fputc,w
  2669     0310  0084               	movwf	4
  2670     0311  1783               	bsf	3,7
  2671     0312  1C75               	btfss	??_fputc+1,0
  2672     0313  1383               	bcf	3,7
  2673     0314  0800               	movf	0,w
  2674     0315  00F6               	movwf	??_fputc+2
  2675     0316  0A84               	incf	4,f
  2676     0317  0800               	movf	0,w
  2677     0318  00F7               	movwf	??_fputc+3
  2678     0319  0876               	movf	??_fputc+2,w
  2679     031A  0477               	iorwf	??_fputc+3,w
  2680     031B  1903               	btfsc	3,2
  2681     031C  2B1E               	goto	u911
  2682     031D  2B1F               	goto	u910
  2683     031E                     u911:
  2684     031E  2B51               	goto	l1489
  2685     031F                     u910:
  2686     031F                     l1487:
  2687     031F  0872               	movf	fputc@fp,w
  2688     0320  3E09               	addlw	9
  2689     0321  00F4               	movwf	??_fputc
  2690     0322  0873               	movf	fputc@fp+1,w
  2691     0323  1803               	skipnc
  2692     0324  3E01               	addlw	1
  2693     0325  3E00               	addlw	0
  2694     0326  00F5               	movwf	??_fputc+1
  2695     0327  0874               	movf	??_fputc,w
  2696     0328  0084               	movwf	4
  2697     0329  1783               	bsf	3,7
  2698     032A  1C75               	btfss	??_fputc+1,0
  2699     032B  1383               	bcf	3,7
  2700     032C  0800               	movf	0,w
  2701     032D  00F6               	movwf	??_fputc+2
  2702     032E  0A84               	incf	4,f
  2703     032F  0800               	movf	0,w
  2704     0330  00F7               	movwf	??_fputc+3
  2705     0331  0872               	movf	fputc@fp,w
  2706     0332  3E02               	addlw	2
  2707     0333  00F8               	movwf	??_fputc+4
  2708     0334  0873               	movf	fputc@fp+1,w
  2709     0335  1803               	skipnc
  2710     0336  3E01               	addlw	1
  2711     0337  3E00               	addlw	0
  2712     0338  00F9               	movwf	??_fputc+5
  2713     0339  0878               	movf	??_fputc+4,w
  2714     033A  0084               	movwf	4
  2715     033B  1783               	bsf	3,7
  2716     033C  1C79               	btfss	??_fputc+5,0
  2717     033D  1383               	bcf	3,7
  2718     033E  0800               	movf	0,w
  2719     033F  00FA               	movwf	??_fputc+6
  2720     0340  0A84               	incf	4,f
  2721     0341  0800               	movf	0,w
  2722     0342  00FB               	movwf	??_fputc+7
  2723     0343  087B               	movf	??_fputc+7,w
  2724     0344  3A80               	xorlw	128
  2725     0345  00FC               	movwf	??_fputc+8
  2726     0346  0877               	movf	??_fputc+3,w
  2727     0347  3A80               	xorlw	128
  2728     0348  027C               	subwf	??_fputc+8,w
  2729     0349  1D03               	skipz
  2730     034A  2B4D               	goto	u925
  2731     034B  0876               	movf	??_fputc+2,w
  2732     034C  027A               	subwf	??_fputc+6,w
  2733     034D                     u925:
  2734     034D  1803               	skipnc
  2735     034E  2B50               	goto	u921
  2736     034F  2B51               	goto	u920
  2737     0350                     u921:
  2738     0350  2B8D               	goto	l894
  2739     0351                     u920:
  2740     0351                     l1489:
  2741     0351  0872               	movf	fputc@fp,w
  2742     0352  0084               	movwf	4
  2743     0353  1783               	bsf	3,7
  2744     0354  1C73               	btfss	fputc@fp+1,0
  2745     0355  1383               	bcf	3,7
  2746     0356  0800               	movf	0,w
  2747     0357  00F4               	movwf	??_fputc
  2748     0358  0A84               	incf	4,f
  2749     0359  0800               	movf	0,w
  2750     035A  00F5               	movwf	??_fputc+1
  2751     035B  0872               	movf	fputc@fp,w
  2752     035C  3E02               	addlw	2
  2753     035D  00F6               	movwf	??_fputc+2
  2754     035E  0873               	movf	fputc@fp+1,w
  2755     035F  1803               	skipnc
  2756     0360  3E01               	addlw	1
  2757     0361  3E00               	addlw	0
  2758     0362  00F7               	movwf	??_fputc+3
  2759     0363  0876               	movf	??_fputc+2,w
  2760     0364  0084               	movwf	4
  2761     0365  1783               	bsf	3,7
  2762     0366  1C77               	btfss	??_fputc+3,0
  2763     0367  1383               	bcf	3,7
  2764     0368  0800               	movf	0,w
  2765     0369  0774               	addwf	??_fputc,w
  2766     036A  00F9               	movwf	??_fputc+5
  2767     036B  0875               	movf	??_fputc+1,w
  2768     036C  00F8               	movwf	??_fputc+4
  2769     036D  1803               	skipnc
  2770     036E  0AF8               	incf	??_fputc+4,f
  2771     036F  1F80               	btfss	0,7
  2772     0370  2B72               	goto	u930
  2773     0371  03F8               	decf	??_fputc+4,f
  2774     0372                     u930:
  2775     0372  0878               	movf	??_fputc+4,w
  2776     0373  00FA               	movwf	??_fputc+6
  2777     0374  0879               	movf	??_fputc+5,w
  2778     0375  0084               	movwf	4
  2779     0376  1783               	bsf	3,7
  2780     0377  1C7A               	btfss	??_fputc+6,0
  2781     0378  1383               	bcf	3,7
  2782     0379  0870               	movf	fputc@c,w
  2783     037A  0080               	movwf	0
  2784     037B  0872               	movf	fputc@fp,w
  2785     037C  3E02               	addlw	2
  2786     037D  00F4               	movwf	??_fputc
  2787     037E  0873               	movf	fputc@fp+1,w
  2788     037F  1803               	skipnc
  2789     0380  3E01               	addlw	1
  2790     0381  3E00               	addlw	0
  2791     0382  00F5               	movwf	??_fputc+1
  2792     0383  0874               	movf	??_fputc,w
  2793     0384  0084               	movwf	4
  2794     0385  1783               	bsf	3,7
  2795     0386  1C75               	btfss	??_fputc+1,0
  2796     0387  1383               	bcf	3,7
  2797     0388  3001               	movlw	1
  2798     0389  0780               	addwf	0,f
  2799     038A  0A84               	incf	4,f
  2800     038B  1803               	skipnc
  2801     038C  0A80               	incf	0,f
  2802     038D                     l894:
  2803     038D  0008               	return
  2804     038E                     __end_of_fputc:
  2805                           
  2806                           	psect	text11
  2807     0F17                     __ptext11:	
  2808 ;; *************** function _putch *****************
  2809 ;; Defined at:
  2810 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  c               1    wreg     unsigned char 
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;  c               1    0[COMMON] unsigned char 
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2824 ;;      Params:         0       0       0       0       0
  2825 ;;      Locals:         0       0       0       0       0
  2826 ;;      Temps:          0       0       0       0       0
  2827 ;;      Totals:         0       0       0       0       0
  2828 ;;Total ram usage:        0 bytes
  2829 ;; Hardware stack levels used: 1
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		_fputc
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837     0F17                     _putch:	
  2838                           ;psect for function _putch
  2839                           
  2840     0F17                     l905:	
  2841                           ;incstack = 0
  2842                           ; Regs used in _putch: [wreg]
  2843                           
  2844     0F17  0008               	return
  2845     0F18                     __end_of_putch:
  2846                           
  2847                           	psect	text12
  2848     0FC8                     __ptext12:	
  2849 ;; *************** function ___lwmod *****************
  2850 ;; Defined at:
  2851 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  divisor         2    0[COMMON] unsigned int 
  2854 ;;  dividend        2    2[COMMON] unsigned int 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  counter         1    4[COMMON] unsigned char 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  2    0[COMMON] unsigned int 
  2859 ;; Registers used:
  2860 ;;		wreg, status,2, status,0
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2866 ;;      Params:         4       0       0       0       0
  2867 ;;      Locals:         1       0       0       0       0
  2868 ;;      Temps:          0       0       0       0       0
  2869 ;;      Totals:         5       0       0       0       0
  2870 ;;Total ram usage:        5 bytes
  2871 ;; Hardware stack levels used: 1
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_volt
  2876 ;;		_porcentaje
  2877 ;;		_vfpfcnvrt
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881     0FC8                     ___lwmod:	
  2882                           ;psect for function ___lwmod
  2883                           
  2884     0FC8                     l1457:	
  2885                           ;incstack = 0
  2886                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2887                           
  2888     0FC8  0870               	movf	___lwmod@divisor,w
  2889     0FC9  0471               	iorwf	___lwmod@divisor+1,w
  2890     0FCA  1903               	btfsc	3,2
  2891     0FCB  2FCD               	goto	u831
  2892     0FCC  2FCE               	goto	u830
  2893     0FCD                     u831:
  2894     0FCD  2FFB               	goto	l1475
  2895     0FCE                     u830:
  2896     0FCE                     l1459:
  2897     0FCE  3001               	movlw	1
  2898     0FCF  00F4               	movwf	___lwmod@counter
  2899     0FD0  2FDA               	goto	l1465
  2900     0FD1                     l1461:
  2901     0FD1  3001               	movlw	1
  2902     0FD2                     u845:
  2903     0FD2  1003               	clrc
  2904     0FD3  0DF0               	rlf	___lwmod@divisor,f
  2905     0FD4  0DF1               	rlf	___lwmod@divisor+1,f
  2906     0FD5  3EFF               	addlw	-1
  2907     0FD6  1D03               	skipz
  2908     0FD7  2FD2               	goto	u845
  2909     0FD8                     l1463:
  2910     0FD8  3001               	movlw	1
  2911     0FD9  07F4               	addwf	___lwmod@counter,f
  2912     0FDA                     l1465:
  2913     0FDA  1FF1               	btfss	___lwmod@divisor+1,7
  2914     0FDB  2FDD               	goto	u851
  2915     0FDC  2FDE               	goto	u850
  2916     0FDD                     u851:
  2917     0FDD  2FD1               	goto	l1461
  2918     0FDE                     u850:
  2919     0FDE                     l1467:
  2920     0FDE  0871               	movf	___lwmod@divisor+1,w
  2921     0FDF  0273               	subwf	___lwmod@dividend+1,w
  2922     0FE0  1D03               	skipz
  2923     0FE1  2FE4               	goto	u865
  2924     0FE2  0870               	movf	___lwmod@divisor,w
  2925     0FE3  0272               	subwf	___lwmod@dividend,w
  2926     0FE4                     u865:
  2927     0FE4  1C03               	skipc
  2928     0FE5  2FE7               	goto	u861
  2929     0FE6  2FE8               	goto	u860
  2930     0FE7                     u861:
  2931     0FE7  2FEE               	goto	l1471
  2932     0FE8                     u860:
  2933     0FE8                     l1469:
  2934     0FE8  0870               	movf	___lwmod@divisor,w
  2935     0FE9  02F2               	subwf	___lwmod@dividend,f
  2936     0FEA  0871               	movf	___lwmod@divisor+1,w
  2937     0FEB  1C03               	skipc
  2938     0FEC  03F3               	decf	___lwmod@dividend+1,f
  2939     0FED  02F3               	subwf	___lwmod@dividend+1,f
  2940     0FEE                     l1471:
  2941     0FEE  3001               	movlw	1
  2942     0FEF                     u875:
  2943     0FEF  1003               	clrc
  2944     0FF0  0CF1               	rrf	___lwmod@divisor+1,f
  2945     0FF1  0CF0               	rrf	___lwmod@divisor,f
  2946     0FF2  3EFF               	addlw	-1
  2947     0FF3  1D03               	skipz
  2948     0FF4  2FEF               	goto	u875
  2949     0FF5                     l1473:
  2950     0FF5  3001               	movlw	1
  2951     0FF6  02F4               	subwf	___lwmod@counter,f
  2952     0FF7  1D03               	btfss	3,2
  2953     0FF8  2FFA               	goto	u881
  2954     0FF9  2FFB               	goto	u880
  2955     0FFA                     u881:
  2956     0FFA  2FDE               	goto	l1467
  2957     0FFB                     u880:
  2958     0FFB                     l1475:
  2959     0FFB  0873               	movf	___lwmod@dividend+1,w
  2960     0FFC  00F1               	movwf	?___lwmod+1
  2961     0FFD  0872               	movf	___lwmod@dividend,w
  2962     0FFE  00F0               	movwf	?___lwmod
  2963     0FFF                     l665:
  2964     0FFF  0008               	return
  2965     1000                     __end_of___lwmod:
  2966                           
  2967                           	psect	text13
  2968     00A1                     __ptext13:	
  2969 ;; *************** function ___lwdiv *****************
  2970 ;; Defined at:
  2971 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  divisor         2    0[COMMON] unsigned int 
  2974 ;;  dividend        2    2[COMMON] unsigned int 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  quotient        2    4[COMMON] unsigned int 
  2977 ;;  counter         1    6[COMMON] unsigned char 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  2    0[COMMON] unsigned int 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2, status,0
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2987 ;;      Params:         4       0       0       0       0
  2988 ;;      Locals:         3       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0
  2990 ;;      Totals:         7       0       0       0       0
  2991 ;;Total ram usage:        7 bytes
  2992 ;; Hardware stack levels used: 1
  2993 ;; This function calls:
  2994 ;;		Nothing
  2995 ;; This function is called by:
  2996 ;;		_volt
  2997 ;;		_porcentaje
  2998 ;;		_vfpfcnvrt
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002     00A1                     ___lwdiv:	
  3003                           ;psect for function ___lwdiv
  3004                           
  3005     00A1                     l1431:	
  3006                           ;incstack = 0
  3007                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3008                           
  3009     00A1  01F4               	clrf	___lwdiv@quotient
  3010     00A2  01F5               	clrf	___lwdiv@quotient+1
  3011     00A3                     l1433:
  3012     00A3  0870               	movf	___lwdiv@divisor,w
  3013     00A4  0471               	iorwf	___lwdiv@divisor+1,w
  3014     00A5  1903               	btfsc	3,2
  3015     00A6  28A8               	goto	u761
  3016     00A7  28A9               	goto	u760
  3017     00A8                     u761:
  3018     00A8  28DE               	goto	l1453
  3019     00A9                     u760:
  3020     00A9                     l1435:
  3021     00A9  3001               	movlw	1
  3022     00AA  00F6               	movwf	___lwdiv@counter
  3023     00AB  28B5               	goto	l1441
  3024     00AC                     l1437:
  3025     00AC  3001               	movlw	1
  3026     00AD                     u775:
  3027     00AD  1003               	clrc
  3028     00AE  0DF0               	rlf	___lwdiv@divisor,f
  3029     00AF  0DF1               	rlf	___lwdiv@divisor+1,f
  3030     00B0  3EFF               	addlw	-1
  3031     00B1  1D03               	skipz
  3032     00B2  28AD               	goto	u775
  3033     00B3                     l1439:
  3034     00B3  3001               	movlw	1
  3035     00B4  07F6               	addwf	___lwdiv@counter,f
  3036     00B5                     l1441:
  3037     00B5  1FF1               	btfss	___lwdiv@divisor+1,7
  3038     00B6  28B8               	goto	u781
  3039     00B7  28B9               	goto	u780
  3040     00B8                     u781:
  3041     00B8  28AC               	goto	l1437
  3042     00B9                     u780:
  3043     00B9                     l1443:
  3044     00B9  3001               	movlw	1
  3045     00BA                     u795:
  3046     00BA  1003               	clrc
  3047     00BB  0DF4               	rlf	___lwdiv@quotient,f
  3048     00BC  0DF5               	rlf	___lwdiv@quotient+1,f
  3049     00BD  3EFF               	addlw	-1
  3050     00BE  1D03               	skipz
  3051     00BF  28BA               	goto	u795
  3052     00C0  0871               	movf	___lwdiv@divisor+1,w
  3053     00C1  0273               	subwf	___lwdiv@dividend+1,w
  3054     00C2  1D03               	skipz
  3055     00C3  28C6               	goto	u805
  3056     00C4  0870               	movf	___lwdiv@divisor,w
  3057     00C5  0272               	subwf	___lwdiv@dividend,w
  3058     00C6                     u805:
  3059     00C6  1C03               	skipc
  3060     00C7  28C9               	goto	u801
  3061     00C8  28CA               	goto	u800
  3062     00C9                     u801:
  3063     00C9  28D1               	goto	l1449
  3064     00CA                     u800:
  3065     00CA                     l1445:
  3066     00CA  0870               	movf	___lwdiv@divisor,w
  3067     00CB  02F2               	subwf	___lwdiv@dividend,f
  3068     00CC  0871               	movf	___lwdiv@divisor+1,w
  3069     00CD  1C03               	skipc
  3070     00CE  03F3               	decf	___lwdiv@dividend+1,f
  3071     00CF  02F3               	subwf	___lwdiv@dividend+1,f
  3072     00D0                     l1447:
  3073     00D0  1474               	bsf	___lwdiv@quotient,0
  3074     00D1                     l1449:
  3075     00D1  3001               	movlw	1
  3076     00D2                     u815:
  3077     00D2  1003               	clrc
  3078     00D3  0CF1               	rrf	___lwdiv@divisor+1,f
  3079     00D4  0CF0               	rrf	___lwdiv@divisor,f
  3080     00D5  3EFF               	addlw	-1
  3081     00D6  1D03               	skipz
  3082     00D7  28D2               	goto	u815
  3083     00D8                     l1451:
  3084     00D8  3001               	movlw	1
  3085     00D9  02F6               	subwf	___lwdiv@counter,f
  3086     00DA  1D03               	btfss	3,2
  3087     00DB  28DD               	goto	u821
  3088     00DC  28DE               	goto	u820
  3089     00DD                     u821:
  3090     00DD  28B9               	goto	l1443
  3091     00DE                     u820:
  3092     00DE                     l1453:
  3093     00DE  0875               	movf	___lwdiv@quotient+1,w
  3094     00DF  00F1               	movwf	?___lwdiv+1
  3095     00E0  0874               	movf	___lwdiv@quotient,w
  3096     00E1  00F0               	movwf	?___lwdiv
  3097     00E2                     l655:
  3098     00E2  0008               	return
  3099     00E3                     __end_of___lwdiv:
  3100                           
  3101                           	psect	text14
  3102     005F                     __ptext14:	
  3103 ;; *************** function _LCD_putrs *****************
  3104 ;; Defined at:
  3105 ;;		line 136 in file "lcd.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  a               2    6[COMMON] PTR const unsigned char 
  3108 ;;		 -> STR_9(3), STR_8(3), STR_7(3), buffer3(10), 
  3109 ;;		 -> buffer2(10), buffer1(10), STR_5(6), STR_3(13), 
  3110 ;;		 -> STR_1(10), 
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  i               2   11[COMMON] int 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      void 
  3115 ;; Registers used:
  3116 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3122 ;;      Params:         2       0       0       0       0
  3123 ;;      Locals:         2       0       0       0       0
  3124 ;;      Temps:          3       0       0       0       0
  3125 ;;      Totals:         7       0       0       0       0
  3126 ;;Total ram usage:        7 bytes
  3127 ;; Hardware stack levels used: 1
  3128 ;; Hardware stack levels required when called: 2
  3129 ;; This function calls:
  3130 ;;		_LCD_putc
  3131 ;; This function is called by:
  3132 ;;		_volt
  3133 ;;		_porcentaje
  3134 ;;		_mil
  3135 ;;		_main
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139     005F                     _LCD_putrs:	
  3140                           ;psect for function _LCD_putrs
  3141                           
  3142     005F                     l1597:	
  3143                           ;incstack = 0
  3144                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3145                           
  3146                           
  3147                           ;lcd.c: 138:     for ( int i = 0; a[i] != '\0'; ++i ) {
  3148     005F  01FB               	clrf	LCD_putrs@i
  3149     0060  01FC               	clrf	LCD_putrs@i+1
  3150     0061  2884               	goto	l1603
  3151     0062                     l1599:
  3152                           
  3153                           ;lcd.c: 139:         LCD_putc(a[i]);
  3154     0062  087B               	movf	LCD_putrs@i,w
  3155     0063  0776               	addwf	LCD_putrs@a,w
  3156     0064  00F9               	movwf	??_LCD_putrs+1
  3157     0065  0877               	movf	LCD_putrs@a+1,w
  3158     0066  00F8               	movwf	??_LCD_putrs
  3159     0067  1803               	skipnc
  3160     0068  0AF8               	incf	??_LCD_putrs,f
  3161     0069  1FFB               	btfss	LCD_putrs@i,7
  3162     006A  286C               	goto	u1210
  3163     006B  03F8               	decf	??_LCD_putrs,f
  3164     006C                     u1210:
  3165     006C  0878               	movf	??_LCD_putrs,w
  3166     006D  00FA               	movwf	??_LCD_putrs+2
  3167     006E  087A               	movf	??_LCD_putrs+2,w
  3168     006F  1283               	bcf	3,5	;RP0=0, select bank0
  3169     0070  1303               	bcf	3,6	;RP1=0, select bank0
  3170     0071  00FF               	movwf	btemp+1
  3171     0072  0879               	movf	??_LCD_putrs+1,w
  3172     0073  0084               	movwf	4
  3173     0074  120A  118A  2003  120A  118A  	fcall	stringtab
  3174     0079  120A  118A  21C9  120A  118A  	fcall	_LCD_putc
  3175     007E                     l1601:
  3176                           
  3177                           ;lcd.c: 140:     }
  3178     007E  3001               	movlw	1
  3179     007F  07FB               	addwf	LCD_putrs@i,f
  3180     0080  1803               	skipnc
  3181     0081  0AFC               	incf	LCD_putrs@i+1,f
  3182     0082  3000               	movlw	0
  3183     0083  07FC               	addwf	LCD_putrs@i+1,f
  3184     0084                     l1603:
  3185     0084  087B               	movf	LCD_putrs@i,w
  3186     0085  0776               	addwf	LCD_putrs@a,w
  3187     0086  00F9               	movwf	??_LCD_putrs+1
  3188     0087  0877               	movf	LCD_putrs@a+1,w
  3189     0088  00F8               	movwf	??_LCD_putrs
  3190     0089  1803               	skipnc
  3191     008A  0AF8               	incf	??_LCD_putrs,f
  3192     008B  1FFB               	btfss	LCD_putrs@i,7
  3193     008C  288E               	goto	u1220
  3194     008D  03F8               	decf	??_LCD_putrs,f
  3195     008E                     u1220:
  3196     008E  0878               	movf	??_LCD_putrs,w
  3197     008F  00FA               	movwf	??_LCD_putrs+2
  3198     0090  087A               	movf	??_LCD_putrs+2,w
  3199     0091  1283               	bcf	3,5	;RP0=0, select bank0
  3200     0092  1303               	bcf	3,6	;RP1=0, select bank0
  3201     0093  00FF               	movwf	btemp+1
  3202     0094  0879               	movf	??_LCD_putrs+1,w
  3203     0095  0084               	movwf	4
  3204     0096  120A  118A  2003  120A  118A  	fcall	stringtab
  3205     009B  3A00               	xorlw	0
  3206     009C  1D03               	skipz
  3207     009D  289F               	goto	u1231
  3208     009E  28A0               	goto	u1230
  3209     009F                     u1231:
  3210     009F  2862               	goto	l1599
  3211     00A0                     u1230:
  3212     00A0                     l289:
  3213     00A0  0008               	return
  3214     00A1                     __end_of_LCD_putrs:
  3215                           
  3216                           	psect	text15
  3217     01C9                     __ptext15:	
  3218 ;; *************** function _LCD_putc *****************
  3219 ;; Defined at:
  3220 ;;		line 111 in file "lcd.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  c               1    wreg     unsigned char 
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  c               1    5[COMMON] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3234 ;;      Params:         0       0       0       0       0
  3235 ;;      Locals:         1       0       0       0       0
  3236 ;;      Temps:          2       0       0       0       0
  3237 ;;      Totals:         3       0       0       0       0
  3238 ;;Total ram usage:        3 bytes
  3239 ;; Hardware stack levels used: 1
  3240 ;; Hardware stack levels required when called: 1
  3241 ;; This function calls:
  3242 ;;		_LCD_Out
  3243 ;; This function is called by:
  3244 ;;		_LCD_putrs
  3245 ;;		_LCD_puts
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249     01C9                     _LCD_putc:	
  3250                           ;psect for function _LCD_putc
  3251                           
  3252                           
  3253                           ;incstack = 0
  3254                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3255                           ;LCD_putc@c stored from wreg
  3256     01C9  00F5               	movwf	LCD_putc@c
  3257     01CA                     l1561:
  3258                           
  3259                           ;lcd.c: 113:    *(lcd.PORT) |= 1 << lcd.RS;
  3260     01CA  1283               	bcf	3,5	;RP0=0, select bank0
  3261     01CB  1303               	bcf	3,6	;RP1=0, select bank0
  3262     01CC  0862               	movf	_lcd,w
  3263     01CD  0084               	movwf	4
  3264     01CE  1783               	bsf	3,7
  3265     01CF  1C63               	btfss	_lcd+1,0
  3266     01D0  1383               	bcf	3,7
  3267     01D1  3001               	movlw	1
  3268     01D2  00F3               	movwf	??_LCD_putc
  3269     01D3  0864               	movf	_lcd+2,w
  3270     01D4  3907               	andlw	7
  3271     01D5  3E01               	addlw	1
  3272     01D6  29D9               	goto	u1114
  3273     01D7                     u1115:
  3274     01D7  1003               	clrc
  3275     01D8  0DF3               	rlf	??_LCD_putc,f
  3276     01D9                     u1114:
  3277     01D9  3EFF               	addlw	-1
  3278     01DA  1D03               	skipz
  3279     01DB  29D7               	goto	u1115
  3280     01DC  0873               	movf	??_LCD_putc,w
  3281     01DD  0480               	iorwf	0,f
  3282     01DE                     l1563:
  3283                           
  3284                           ;lcd.c: 114:     LCD_Out((c & 0xF0) >> 4);
  3285     01DE  0875               	movf	LCD_putc@c,w
  3286     01DF  00F3               	movwf	??_LCD_putc
  3287     01E0  3004               	movlw	4
  3288     01E1                     u1125:
  3289     01E1  1003               	clrc
  3290     01E2  0CF3               	rrf	??_LCD_putc,f
  3291     01E3  3EFF               	addlw	-1
  3292     01E4  1D03               	skipz
  3293     01E5  29E1               	goto	u1125
  3294     01E6  0873               	movf	??_LCD_putc,w
  3295     01E7  390F               	andlw	15
  3296     01E8  120A  118A  2584  120A  118A  	fcall	_LCD_Out
  3297     01ED                     l1565:
  3298                           
  3299                           ;lcd.c: 116:     *(lcd.PORT) |= 1 << lcd.EN;
  3300     01ED  1283               	bcf	3,5	;RP0=0, select bank0
  3301     01EE  1303               	bcf	3,6	;RP1=0, select bank0
  3302     01EF  0862               	movf	_lcd,w
  3303     01F0  0084               	movwf	4
  3304     01F1  1783               	bsf	3,7
  3305     01F2  1C63               	btfss	_lcd+1,0
  3306     01F3  1383               	bcf	3,7
  3307     01F4  3001               	movlw	1
  3308     01F5  00F3               	movwf	??_LCD_putc
  3309     01F6  0C64               	rrf	_lcd+2,w
  3310     01F7  00F4               	movwf	??_LCD_putc+1
  3311     01F8  0CF4               	rrf	??_LCD_putc+1,f
  3312     01F9  0C74               	rrf	??_LCD_putc+1,w
  3313     01FA  3907               	andlw	7
  3314     01FB  3E01               	addlw	1
  3315     01FC  29FF               	goto	u1134
  3316     01FD                     u1135:
  3317     01FD  1003               	clrc
  3318     01FE  0DF3               	rlf	??_LCD_putc,f
  3319     01FF                     u1134:
  3320     01FF  3EFF               	addlw	-1
  3321     0200  1D03               	skipz
  3322     0201  29FD               	goto	u1135
  3323     0202  0873               	movf	??_LCD_putc,w
  3324     0203  0480               	iorwf	0,f
  3325     0204                     l1567:
  3326                           
  3327                           ;lcd.c: 117:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3328     0204  300D               	movlw	13
  3329     0205  00F3               	movwf	??_LCD_putc
  3330     0206                     u1567:
  3331     0206  0BF3               	decfsz	??_LCD_putc,f
  3332     0207  2A06               	goto	u1567
  3333     0208                     l1569:
  3334                           
  3335                           ;lcd.c: 118:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3336     0208  1283               	bcf	3,5	;RP0=0, select bank0
  3337     0209  1303               	bcf	3,6	;RP1=0, select bank0
  3338     020A  0862               	movf	_lcd,w
  3339     020B  0084               	movwf	4
  3340     020C  1783               	bsf	3,7
  3341     020D  1C63               	btfss	_lcd+1,0
  3342     020E  1383               	bcf	3,7
  3343     020F  3001               	movlw	1
  3344     0210  00F3               	movwf	??_LCD_putc
  3345     0211  0C64               	rrf	_lcd+2,w
  3346     0212  00F4               	movwf	??_LCD_putc+1
  3347     0213  0CF4               	rrf	??_LCD_putc+1,f
  3348     0214  0C74               	rrf	??_LCD_putc+1,w
  3349     0215  3907               	andlw	7
  3350     0216  3E01               	addlw	1
  3351     0217  2A1A               	goto	u1144
  3352     0218                     u1145:
  3353     0218  1003               	clrc
  3354     0219  0DF3               	rlf	??_LCD_putc,f
  3355     021A                     u1144:
  3356     021A  3EFF               	addlw	-1
  3357     021B  1D03               	skipz
  3358     021C  2A18               	goto	u1145
  3359     021D  0873               	movf	??_LCD_putc,w
  3360     021E  3AFF               	xorlw	255
  3361     021F  0580               	andwf	0,f
  3362     0220                     l1571:
  3363                           
  3364                           ;lcd.c: 120:     LCD_Out(c & 0x0F);
  3365     0220  0875               	movf	LCD_putc@c,w
  3366     0221  390F               	andlw	15
  3367     0222  120A  118A  2584  120A  118A  	fcall	_LCD_Out
  3368     0227                     l1573:
  3369                           
  3370                           ;lcd.c: 122:     *(lcd.PORT) |= 1 << lcd.EN;
  3371     0227  1283               	bcf	3,5	;RP0=0, select bank0
  3372     0228  1303               	bcf	3,6	;RP1=0, select bank0
  3373     0229  0862               	movf	_lcd,w
  3374     022A  0084               	movwf	4
  3375     022B  1783               	bsf	3,7
  3376     022C  1C63               	btfss	_lcd+1,0
  3377     022D  1383               	bcf	3,7
  3378     022E  3001               	movlw	1
  3379     022F  00F3               	movwf	??_LCD_putc
  3380     0230  0C64               	rrf	_lcd+2,w
  3381     0231  00F4               	movwf	??_LCD_putc+1
  3382     0232  0CF4               	rrf	??_LCD_putc+1,f
  3383     0233  0C74               	rrf	??_LCD_putc+1,w
  3384     0234  3907               	andlw	7
  3385     0235  3E01               	addlw	1
  3386     0236  2A39               	goto	u1154
  3387     0237                     u1155:
  3388     0237  1003               	clrc
  3389     0238  0DF3               	rlf	??_LCD_putc,f
  3390     0239                     u1154:
  3391     0239  3EFF               	addlw	-1
  3392     023A  1D03               	skipz
  3393     023B  2A37               	goto	u1155
  3394     023C  0873               	movf	??_LCD_putc,w
  3395     023D  0480               	iorwf	0,f
  3396                           
  3397                           ;lcd.c: 123:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3398     023E  300D               	movlw	13
  3399     023F  00F3               	movwf	??_LCD_putc
  3400     0240                     u1577:
  3401     0240  0BF3               	decfsz	??_LCD_putc,f
  3402     0241  2A40               	goto	u1577
  3403     0242                     l1575:
  3404                           
  3405                           ;lcd.c: 124:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3406     0242  1283               	bcf	3,5	;RP0=0, select bank0
  3407     0243  1303               	bcf	3,6	;RP1=0, select bank0
  3408     0244  0862               	movf	_lcd,w
  3409     0245  0084               	movwf	4
  3410     0246  1783               	bsf	3,7
  3411     0247  1C63               	btfss	_lcd+1,0
  3412     0248  1383               	bcf	3,7
  3413     0249  3001               	movlw	1
  3414     024A  00F3               	movwf	??_LCD_putc
  3415     024B  0C64               	rrf	_lcd+2,w
  3416     024C  00F4               	movwf	??_LCD_putc+1
  3417     024D  0CF4               	rrf	??_LCD_putc+1,f
  3418     024E  0C74               	rrf	??_LCD_putc+1,w
  3419     024F  3907               	andlw	7
  3420     0250  3E01               	addlw	1
  3421     0251  2A54               	goto	u1164
  3422     0252                     u1165:
  3423     0252  1003               	clrc
  3424     0253  0DF3               	rlf	??_LCD_putc,f
  3425     0254                     u1164:
  3426     0254  3EFF               	addlw	-1
  3427     0255  1D03               	skipz
  3428     0256  2A52               	goto	u1165
  3429     0257  0873               	movf	??_LCD_putc,w
  3430     0258  3AFF               	xorlw	255
  3431     0259  0580               	andwf	0,f
  3432     025A                     l277:
  3433     025A  0008               	return
  3434     025B                     __end_of_LCD_putc:
  3435                           
  3436                           	psect	text16
  3437     04D8                     __ptext16:	
  3438 ;; *************** function _LCD_Init *****************
  3439 ;; Defined at:
  3440 ;;		line 53 in file "lcd.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  display         5    6[COMMON] struct .
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  cmd             1   13[COMMON] unsigned char 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      _Bool 
  3447 ;; Registers used:
  3448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3454 ;;      Params:         5       0       0       0       0
  3455 ;;      Locals:         1       0       0       0       0
  3456 ;;      Temps:          2       0       0       0       0
  3457 ;;      Totals:         8       0       0       0       0
  3458 ;;Total ram usage:        8 bytes
  3459 ;; Hardware stack levels used: 1
  3460 ;; Hardware stack levels required when called: 2
  3461 ;; This function calls:
  3462 ;;		_LCD_Write
  3463 ;; This function is called by:
  3464 ;;		_main
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468     04D8                     _LCD_Init:	
  3469                           ;psect for function _LCD_Init
  3470                           
  3471     04D8                     l1787:	
  3472                           ;incstack = 0
  3473                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3474                           
  3475                           
  3476                           ;lcd.c: 55:     lcd = display;
  3477     04D8  3062               	movlw	_lcd& (0+255)
  3478     04D9  0084               	movwf	4
  3479     04DA  0876               	movf	LCD_Init@display,w
  3480     04DB  1383               	bcf	3,7	;select IRP bank0
  3481     04DC  0080               	movwf	0
  3482     04DD  0A84               	incf	4,f
  3483     04DE  0877               	movf	LCD_Init@display+1,w
  3484     04DF  0080               	movwf	0
  3485     04E0  0A84               	incf	4,f
  3486     04E1  0878               	movf	LCD_Init@display+2,w
  3487     04E2  0080               	movwf	0
  3488     04E3  0A84               	incf	4,f
  3489     04E4  0879               	movf	LCD_Init@display+3,w
  3490     04E5  0080               	movwf	0
  3491     04E6  0A84               	incf	4,f
  3492     04E7  087A               	movf	LCD_Init@display+4,w
  3493     04E8  0080               	movwf	0
  3494     04E9                     l1789:
  3495                           
  3496                           ;lcd.c: 64:     if ( lcd.PORT == &PORTA ) {
  3497     04E9  3000               	movlw	0
  3498     04EA  1283               	bcf	3,5	;RP0=0, select bank0
  3499     04EB  1303               	bcf	3,6	;RP1=0, select bank0
  3500     04EC  0663               	xorwf	_lcd+1,w
  3501     04ED  1D03               	skipz
  3502     04EE  2CF1               	goto	u1415
  3503     04EF  3005               	movlw	5
  3504     04F0  0662               	xorwf	_lcd,w
  3505     04F1                     u1415:
  3506     04F1  1D03               	skipz
  3507     04F2  2CF4               	goto	u1411
  3508     04F3  2CF5               	goto	u1410
  3509     04F4                     u1411:
  3510     04F4  2CF9               	goto	l1793
  3511     04F5                     u1410:
  3512     04F5                     l1791:
  3513                           
  3514                           ;lcd.c: 65:         TRISA = 0x00;
  3515     04F5  1683               	bsf	3,5	;RP0=1, select bank1
  3516     04F6  1303               	bcf	3,6	;RP1=0, select bank1
  3517     04F7  0185               	clrf	5	;volatile
  3518                           
  3519                           ;lcd.c: 66:     }
  3520     04F8  2D14               	goto	l1801
  3521     04F9                     l1793:
  3522     04F9  3000               	movlw	0
  3523     04FA  0663               	xorwf	_lcd+1,w
  3524     04FB  1D03               	skipz
  3525     04FC  2CFF               	goto	u1425
  3526     04FD  3006               	movlw	6
  3527     04FE  0662               	xorwf	_lcd,w
  3528     04FF                     u1425:
  3529     04FF  1D03               	skipz
  3530     0500  2D02               	goto	u1421
  3531     0501  2D03               	goto	u1420
  3532     0502                     u1421:
  3533     0502  2D07               	goto	l1797
  3534     0503                     u1420:
  3535     0503                     l1795:
  3536                           
  3537                           ;lcd.c: 68:         TRISB = 0x00;
  3538     0503  1683               	bsf	3,5	;RP0=1, select bank1
  3539     0504  1303               	bcf	3,6	;RP1=0, select bank1
  3540     0505  0186               	clrf	6	;volatile
  3541                           
  3542                           ;lcd.c: 69:     }
  3543     0506  2D14               	goto	l1801
  3544     0507                     l1797:
  3545     0507  3000               	movlw	0
  3546     0508  0663               	xorwf	_lcd+1,w
  3547     0509  1D03               	skipz
  3548     050A  2D0D               	goto	u1435
  3549     050B  3007               	movlw	7
  3550     050C  0662               	xorwf	_lcd,w
  3551     050D                     u1435:
  3552     050D  1D03               	skipz
  3553     050E  2D10               	goto	u1431
  3554     050F  2D11               	goto	u1430
  3555     0510                     u1431:
  3556     0510  2D83               	goto	l261
  3557     0511                     u1430:
  3558     0511                     l1799:
  3559                           
  3560                           ;lcd.c: 71:         TRISC = 0x00;
  3561     0511  1683               	bsf	3,5	;RP0=1, select bank1
  3562     0512  1303               	bcf	3,6	;RP1=0, select bank1
  3563     0513  0187               	clrf	7	;volatile
  3564     0514                     l1801:	
  3565                           ;lcd.c: 72:     }
  3566                           
  3567                           
  3568                           ;lcd.c: 86:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3569     0514  301A               	movlw	26
  3570     0515  00FC               	movwf	??_LCD_Init+1
  3571     0516  30F8               	movlw	248
  3572     0517  00FB               	movwf	??_LCD_Init
  3573     0518                     u1587:
  3574     0518  0BFB               	decfsz	??_LCD_Init,f
  3575     0519  2D18               	goto	u1587
  3576     051A  0BFC               	decfsz	??_LCD_Init+1,f
  3577     051B  2D18               	goto	u1587
  3578     051C  0000               	nop
  3579     051D                     l1803:
  3580                           
  3581                           ;lcd.c: 89:     LCD_Write(0x03);
  3582     051D  3003               	movlw	3
  3583     051E  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3584     0523                     l1805:
  3585                           
  3586                           ;lcd.c: 90:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3587     0523  3007               	movlw	7
  3588     0524  00FC               	movwf	??_LCD_Init+1
  3589     0525  307D               	movlw	125
  3590     0526  00FB               	movwf	??_LCD_Init
  3591     0527                     u1597:
  3592     0527  0BFB               	decfsz	??_LCD_Init,f
  3593     0528  2D27               	goto	u1597
  3594     0529  0BFC               	decfsz	??_LCD_Init+1,f
  3595     052A  2D27               	goto	u1597
  3596                           
  3597                           ;lcd.c: 91:     LCD_Write(0x03);
  3598     052B  3003               	movlw	3
  3599     052C  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3600     0531                     l1807:
  3601                           
  3602                           ;lcd.c: 92:     _delay((unsigned long)((16)*(4000000/4000.0)));
  3603     0531  3015               	movlw	21
  3604     0532  00FC               	movwf	??_LCD_Init+1
  3605     0533  30C6               	movlw	198
  3606     0534  00FB               	movwf	??_LCD_Init
  3607     0535                     u1607:
  3608     0535  0BFB               	decfsz	??_LCD_Init,f
  3609     0536  2D35               	goto	u1607
  3610     0537  0BFC               	decfsz	??_LCD_Init+1,f
  3611     0538  2D35               	goto	u1607
  3612     0539  0000               	nop
  3613     053A                     l1809:
  3614                           
  3615                           ;lcd.c: 93:     LCD_Write(0x03);
  3616     053A  3003               	movlw	3
  3617     053B  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3618     0540                     l1811:
  3619                           
  3620                           ;lcd.c: 96:     LCD_Write(0x02);
  3621     0540  3002               	movlw	2
  3622     0541  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3623     0546                     l1813:
  3624     0546  3002               	movlw	2
  3625     0547  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3626     054C                     l1815:
  3627     054C  3008               	movlw	8
  3628     054D  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3629     0552                     l1817:
  3630     0552  3000               	movlw	0
  3631     0553  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3632     0558                     l1819:
  3633     0558  3006               	movlw	6
  3634     0559  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3635     055E                     l1821:
  3636     055E  3008               	movlw	8
  3637     055F  00FD               	movwf	LCD_Init@cmd
  3638     0560                     l1823:
  3639     0560  157D               	bsf	LCD_Init@cmd,2
  3640     0561                     l1829:
  3641     0561  087D               	movf	LCD_Init@cmd,w
  3642     0562  00FB               	movwf	??_LCD_Init
  3643     0563  3004               	movlw	4
  3644     0564                     u1445:
  3645     0564  1003               	clrc
  3646     0565  0CFB               	rrf	??_LCD_Init,f
  3647     0566  3EFF               	addlw	-1
  3648     0567  1D03               	skipz
  3649     0568  2D64               	goto	u1445
  3650     0569  087B               	movf	??_LCD_Init,w
  3651     056A  390F               	andlw	15
  3652     056B  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3653     0570  087D               	movf	LCD_Init@cmd,w
  3654     0571  390F               	andlw	15
  3655     0572  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3656     0577                     l273:	
  3657                           ;lcd.c: 106:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  3658                           
  3659     0577  3000               	movlw	0
  3660     0578  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3661     057D  3001               	movlw	1
  3662     057E  120A  118A  2174  120A  118A  	fcall	_LCD_Write
  3663     0583                     l261:
  3664     0583  0008               	return
  3665     0584                     __end_of_LCD_Init:
  3666                           
  3667                           	psect	text17
  3668     0174                     __ptext17:	
  3669 ;; *************** function _LCD_Write *****************
  3670 ;; Defined at:
  3671 ;;		line 42 in file "lcd.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  c               1    wreg     unsigned char 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  c               1    5[COMMON] unsigned char 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3685 ;;      Params:         0       0       0       0       0
  3686 ;;      Locals:         1       0       0       0       0
  3687 ;;      Temps:          2       0       0       0       0
  3688 ;;      Totals:         3       0       0       0       0
  3689 ;;Total ram usage:        3 bytes
  3690 ;; Hardware stack levels used: 1
  3691 ;; Hardware stack levels required when called: 1
  3692 ;; This function calls:
  3693 ;;		_LCD_Out
  3694 ;; This function is called by:
  3695 ;;		_volt
  3696 ;;		_porcentaje
  3697 ;;		_mil
  3698 ;;		_main
  3699 ;;		_LCD_Init
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703     0174                     _LCD_Write:	
  3704                           ;psect for function _LCD_Write
  3705                           
  3706                           
  3707                           ;incstack = 0
  3708                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3709                           ;LCD_Write@c stored from wreg
  3710     0174  00F5               	movwf	LCD_Write@c
  3711     0175                     l1587:
  3712                           
  3713                           ;lcd.c: 44:     *(lcd.PORT) &= ~(1 << lcd.RS);
  3714     0175  1283               	bcf	3,5	;RP0=0, select bank0
  3715     0176  1303               	bcf	3,6	;RP1=0, select bank0
  3716     0177  0862               	movf	_lcd,w
  3717     0178  0084               	movwf	4
  3718     0179  1783               	bsf	3,7
  3719     017A  1C63               	btfss	_lcd+1,0
  3720     017B  1383               	bcf	3,7
  3721     017C  3001               	movlw	1
  3722     017D  00F3               	movwf	??_LCD_Write
  3723     017E  0864               	movf	_lcd+2,w
  3724     017F  3907               	andlw	7
  3725     0180  3E01               	addlw	1
  3726     0181  2984               	goto	u1184
  3727     0182                     u1185:
  3728     0182  1003               	clrc
  3729     0183  0DF3               	rlf	??_LCD_Write,f
  3730     0184                     u1184:
  3731     0184  3EFF               	addlw	-1
  3732     0185  1D03               	skipz
  3733     0186  2982               	goto	u1185
  3734     0187  0873               	movf	??_LCD_Write,w
  3735     0188  3AFF               	xorlw	255
  3736     0189  0580               	andwf	0,f
  3737     018A                     l1589:
  3738                           
  3739                           ;lcd.c: 45:     LCD_Out(c);
  3740     018A  0875               	movf	LCD_Write@c,w
  3741     018B  120A  118A  2584  120A  118A  	fcall	_LCD_Out
  3742     0190                     l1591:
  3743                           
  3744                           ;lcd.c: 47:     *(lcd.PORT) |= 1 << lcd.EN;
  3745     0190  1283               	bcf	3,5	;RP0=0, select bank0
  3746     0191  1303               	bcf	3,6	;RP1=0, select bank0
  3747     0192  0862               	movf	_lcd,w
  3748     0193  0084               	movwf	4
  3749     0194  1783               	bsf	3,7
  3750     0195  1C63               	btfss	_lcd+1,0
  3751     0196  1383               	bcf	3,7
  3752     0197  3001               	movlw	1
  3753     0198  00F3               	movwf	??_LCD_Write
  3754     0199  0C64               	rrf	_lcd+2,w
  3755     019A  00F4               	movwf	??_LCD_Write+1
  3756     019B  0CF4               	rrf	??_LCD_Write+1,f
  3757     019C  0C74               	rrf	??_LCD_Write+1,w
  3758     019D  3907               	andlw	7
  3759     019E  3E01               	addlw	1
  3760     019F  29A2               	goto	u1194
  3761     01A0                     u1195:
  3762     01A0  1003               	clrc
  3763     01A1  0DF3               	rlf	??_LCD_Write,f
  3764     01A2                     u1194:
  3765     01A2  3EFF               	addlw	-1
  3766     01A3  1D03               	skipz
  3767     01A4  29A0               	goto	u1195
  3768     01A5  0873               	movf	??_LCD_Write,w
  3769     01A6  0480               	iorwf	0,f
  3770     01A7                     l1593:
  3771                           
  3772                           ;lcd.c: 48:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3773     01A7  3006               	movlw	6
  3774     01A8  00F4               	movwf	??_LCD_Write+1
  3775     01A9  3030               	movlw	48
  3776     01AA  00F3               	movwf	??_LCD_Write
  3777     01AB                     u1617:
  3778     01AB  0BF3               	decfsz	??_LCD_Write,f
  3779     01AC  29AB               	goto	u1617
  3780     01AD  0BF4               	decfsz	??_LCD_Write+1,f
  3781     01AE  29AB               	goto	u1617
  3782     01AF  0000               	nop
  3783     01B0                     l1595:
  3784                           
  3785                           ;lcd.c: 49:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3786     01B0  1283               	bcf	3,5	;RP0=0, select bank0
  3787     01B1  1303               	bcf	3,6	;RP1=0, select bank0
  3788     01B2  0862               	movf	_lcd,w
  3789     01B3  0084               	movwf	4
  3790     01B4  1783               	bsf	3,7
  3791     01B5  1C63               	btfss	_lcd+1,0
  3792     01B6  1383               	bcf	3,7
  3793     01B7  3001               	movlw	1
  3794     01B8  00F3               	movwf	??_LCD_Write
  3795     01B9  0C64               	rrf	_lcd+2,w
  3796     01BA  00F4               	movwf	??_LCD_Write+1
  3797     01BB  0CF4               	rrf	??_LCD_Write+1,f
  3798     01BC  0C74               	rrf	??_LCD_Write+1,w
  3799     01BD  3907               	andlw	7
  3800     01BE  3E01               	addlw	1
  3801     01BF  29C2               	goto	u1204
  3802     01C0                     u1205:
  3803     01C0  1003               	clrc
  3804     01C1  0DF3               	rlf	??_LCD_Write,f
  3805     01C2                     u1204:
  3806     01C2  3EFF               	addlw	-1
  3807     01C3  1D03               	skipz
  3808     01C4  29C0               	goto	u1205
  3809     01C5  0873               	movf	??_LCD_Write,w
  3810     01C6  3AFF               	xorlw	255
  3811     01C7  0580               	andwf	0,f
  3812     01C8                     l252:
  3813     01C8  0008               	return
  3814     01C9                     __end_of_LCD_Write:
  3815                           
  3816                           	psect	text18
  3817     0584                     __ptext18:	
  3818 ;; *************** function _LCD_Out *****************
  3819 ;; Defined at:
  3820 ;;		line 10 in file "lcd.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  c               1    wreg     unsigned char 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  c               1    2[COMMON] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3834 ;;      Params:         0       0       0       0       0
  3835 ;;      Locals:         1       0       0       0       0
  3836 ;;      Temps:          2       0       0       0       0
  3837 ;;      Totals:         3       0       0       0       0
  3838 ;;Total ram usage:        3 bytes
  3839 ;; Hardware stack levels used: 1
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_LCD_Write
  3844 ;;		_LCD_putc
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848     0584                     _LCD_Out:	
  3849                           ;psect for function _LCD_Out
  3850                           
  3851                           
  3852                           ;incstack = 0
  3853                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  3854                           ;LCD_Out@c stored from wreg
  3855     0584  00F2               	movwf	LCD_Out@c
  3856     0585                     l1493:
  3857                           
  3858                           ;lcd.c: 12:     if ( c & 1 ){
  3859     0585  1C72               	btfss	LCD_Out@c,0
  3860     0586  2D88               	goto	u941
  3861     0587  2D89               	goto	u940
  3862     0588                     u941:
  3863     0588  2D9E               	goto	l1497
  3864     0589                     u940:
  3865     0589                     l1495:
  3866                           
  3867                           ;lcd.c: 13:         *(lcd.PORT) |= 1 << lcd.D4;
  3868     0589  1283               	bcf	3,5	;RP0=0, select bank0
  3869     058A  1303               	bcf	3,6	;RP1=0, select bank0
  3870     058B  0862               	movf	_lcd,w
  3871     058C  0084               	movwf	4
  3872     058D  1783               	bsf	3,7
  3873     058E  1C63               	btfss	_lcd+1,0
  3874     058F  1383               	bcf	3,7
  3875     0590  3001               	movlw	1
  3876     0591  00F0               	movwf	??_LCD_Out
  3877     0592  0865               	movf	_lcd+3,w
  3878     0593  3907               	andlw	7
  3879     0594  3E01               	addlw	1
  3880     0595  2D98               	goto	u954
  3881     0596                     u955:
  3882     0596  1003               	clrc
  3883     0597  0DF0               	rlf	??_LCD_Out,f
  3884     0598                     u954:
  3885     0598  3EFF               	addlw	-1
  3886     0599  1D03               	skipz
  3887     059A  2D96               	goto	u955
  3888     059B  0870               	movf	??_LCD_Out,w
  3889     059C  0480               	iorwf	0,f
  3890                           
  3891                           ;lcd.c: 14:     }
  3892     059D  2DB3               	goto	l1499
  3893     059E                     l1497:
  3894                           
  3895                           ;lcd.c: 16:          *(lcd.PORT) &= ~(1 << lcd.D4);
  3896     059E  1283               	bcf	3,5	;RP0=0, select bank0
  3897     059F  1303               	bcf	3,6	;RP1=0, select bank0
  3898     05A0  0862               	movf	_lcd,w
  3899     05A1  0084               	movwf	4
  3900     05A2  1783               	bsf	3,7
  3901     05A3  1C63               	btfss	_lcd+1,0
  3902     05A4  1383               	bcf	3,7
  3903     05A5  3001               	movlw	1
  3904     05A6  00F0               	movwf	??_LCD_Out
  3905     05A7  0865               	movf	_lcd+3,w
  3906     05A8  3907               	andlw	7
  3907     05A9  3E01               	addlw	1
  3908     05AA  2DAD               	goto	u964
  3909     05AB                     u965:
  3910     05AB  1003               	clrc
  3911     05AC  0DF0               	rlf	??_LCD_Out,f
  3912     05AD                     u964:
  3913     05AD  3EFF               	addlw	-1
  3914     05AE  1D03               	skipz
  3915     05AF  2DAB               	goto	u965
  3916     05B0  0870               	movf	??_LCD_Out,w
  3917     05B1  3AFF               	xorlw	255
  3918     05B2  0580               	andwf	0,f
  3919     05B3                     l1499:
  3920                           
  3921                           ;lcd.c: 19:     if ( c & 2 ) {
  3922     05B3  1CF2               	btfss	LCD_Out@c,1
  3923     05B4  2DB6               	goto	u971
  3924     05B5  2DB7               	goto	u970
  3925     05B6                     u971:
  3926     05B6  2DCD               	goto	l1503
  3927     05B7                     u970:
  3928     05B7                     l1501:
  3929                           
  3930                           ;lcd.c: 20:         *(lcd.PORT) |= 1 << lcd.D5;
  3931     05B7  0862               	movf	_lcd,w
  3932     05B8  0084               	movwf	4
  3933     05B9  1783               	bsf	3,7
  3934     05BA  1C63               	btfss	_lcd+1,0
  3935     05BB  1383               	bcf	3,7
  3936     05BC  3001               	movlw	1
  3937     05BD  00F0               	movwf	??_LCD_Out
  3938     05BE  0C65               	rrf	_lcd+3,w
  3939     05BF  00F1               	movwf	??_LCD_Out+1
  3940     05C0  0CF1               	rrf	??_LCD_Out+1,f
  3941     05C1  0C71               	rrf	??_LCD_Out+1,w
  3942     05C2  3907               	andlw	7
  3943     05C3  3E01               	addlw	1
  3944     05C4  2DC7               	goto	u984
  3945     05C5                     u985:
  3946     05C5  1003               	clrc
  3947     05C6  0DF0               	rlf	??_LCD_Out,f
  3948     05C7                     u984:
  3949     05C7  3EFF               	addlw	-1
  3950     05C8  1D03               	skipz
  3951     05C9  2DC5               	goto	u985
  3952     05CA  0870               	movf	??_LCD_Out,w
  3953     05CB  0480               	iorwf	0,f
  3954                           
  3955                           ;lcd.c: 21:     }
  3956     05CC  2DE3               	goto	l1505
  3957     05CD                     l1503:
  3958                           
  3959                           ;lcd.c: 23:         *(lcd.PORT) &= ~(1 << lcd.D5);
  3960     05CD  0862               	movf	_lcd,w
  3961     05CE  0084               	movwf	4
  3962     05CF  1783               	bsf	3,7
  3963     05D0  1C63               	btfss	_lcd+1,0
  3964     05D1  1383               	bcf	3,7
  3965     05D2  3001               	movlw	1
  3966     05D3  00F0               	movwf	??_LCD_Out
  3967     05D4  0C65               	rrf	_lcd+3,w
  3968     05D5  00F1               	movwf	??_LCD_Out+1
  3969     05D6  0CF1               	rrf	??_LCD_Out+1,f
  3970     05D7  0C71               	rrf	??_LCD_Out+1,w
  3971     05D8  3907               	andlw	7
  3972     05D9  3E01               	addlw	1
  3973     05DA  2DDD               	goto	u994
  3974     05DB                     u995:
  3975     05DB  1003               	clrc
  3976     05DC  0DF0               	rlf	??_LCD_Out,f
  3977     05DD                     u994:
  3978     05DD  3EFF               	addlw	-1
  3979     05DE  1D03               	skipz
  3980     05DF  2DDB               	goto	u995
  3981     05E0  0870               	movf	??_LCD_Out,w
  3982     05E1  3AFF               	xorlw	255
  3983     05E2  0580               	andwf	0,f
  3984     05E3                     l1505:
  3985                           
  3986                           ;lcd.c: 26:     if ( c & 4 ) {
  3987     05E3  1D72               	btfss	LCD_Out@c,2
  3988     05E4  2DE6               	goto	u1001
  3989     05E5  2DE7               	goto	u1000
  3990     05E6                     u1001:
  3991     05E6  2DFA               	goto	l1509
  3992     05E7                     u1000:
  3993     05E7                     l1507:
  3994                           
  3995                           ;lcd.c: 27:         *(lcd.PORT) |= 1 << lcd.D6;
  3996     05E7  0862               	movf	_lcd,w
  3997     05E8  0084               	movwf	4
  3998     05E9  1783               	bsf	3,7
  3999     05EA  1C63               	btfss	_lcd+1,0
  4000     05EB  1383               	bcf	3,7
  4001     05EC  3001               	movlw	1
  4002     05ED  00F0               	movwf	??_LCD_Out
  4003     05EE  0866               	movf	_lcd+4,w
  4004     05EF  3907               	andlw	7
  4005     05F0  3E01               	addlw	1
  4006     05F1  2DF4               	goto	u1014
  4007     05F2                     u1015:
  4008     05F2  1003               	clrc
  4009     05F3  0DF0               	rlf	??_LCD_Out,f
  4010     05F4                     u1014:
  4011     05F4  3EFF               	addlw	-1
  4012     05F5  1D03               	skipz
  4013     05F6  2DF2               	goto	u1015
  4014     05F7  0870               	movf	??_LCD_Out,w
  4015     05F8  0480               	iorwf	0,f
  4016                           
  4017                           ;lcd.c: 28:     }
  4018     05F9  2E0D               	goto	l1511
  4019     05FA                     l1509:
  4020                           
  4021                           ;lcd.c: 30:         *(lcd.PORT) &= ~(1 << lcd.D6);
  4022     05FA  0862               	movf	_lcd,w
  4023     05FB  0084               	movwf	4
  4024     05FC  1783               	bsf	3,7
  4025     05FD  1C63               	btfss	_lcd+1,0
  4026     05FE  1383               	bcf	3,7
  4027     05FF  3001               	movlw	1
  4028     0600  00F0               	movwf	??_LCD_Out
  4029     0601  0866               	movf	_lcd+4,w
  4030     0602  3907               	andlw	7
  4031     0603  3E01               	addlw	1
  4032     0604  2E07               	goto	u1024
  4033     0605                     u1025:
  4034     0605  1003               	clrc
  4035     0606  0DF0               	rlf	??_LCD_Out,f
  4036     0607                     u1024:
  4037     0607  3EFF               	addlw	-1
  4038     0608  1D03               	skipz
  4039     0609  2E05               	goto	u1025
  4040     060A  0870               	movf	??_LCD_Out,w
  4041     060B  3AFF               	xorlw	255
  4042     060C  0580               	andwf	0,f
  4043     060D                     l1511:
  4044                           
  4045                           ;lcd.c: 33:     if ( c & 8 ) {
  4046     060D  1DF2               	btfss	LCD_Out@c,3
  4047     060E  2E10               	goto	u1031
  4048     060F  2E11               	goto	u1030
  4049     0610                     u1031:
  4050     0610  2E27               	goto	l1515
  4051     0611                     u1030:
  4052     0611                     l1513:
  4053                           
  4054                           ;lcd.c: 34:          *(lcd.PORT) |= 1 << lcd.D7;
  4055     0611  0862               	movf	_lcd,w
  4056     0612  0084               	movwf	4
  4057     0613  1783               	bsf	3,7
  4058     0614  1C63               	btfss	_lcd+1,0
  4059     0615  1383               	bcf	3,7
  4060     0616  3001               	movlw	1
  4061     0617  00F0               	movwf	??_LCD_Out
  4062     0618  0C66               	rrf	_lcd+4,w
  4063     0619  00F1               	movwf	??_LCD_Out+1
  4064     061A  0CF1               	rrf	??_LCD_Out+1,f
  4065     061B  0C71               	rrf	??_LCD_Out+1,w
  4066     061C  3907               	andlw	7
  4067     061D  3E01               	addlw	1
  4068     061E  2E21               	goto	u1044
  4069     061F                     u1045:
  4070     061F  1003               	clrc
  4071     0620  0DF0               	rlf	??_LCD_Out,f
  4072     0621                     u1044:
  4073     0621  3EFF               	addlw	-1
  4074     0622  1D03               	skipz
  4075     0623  2E1F               	goto	u1045
  4076     0624  0870               	movf	??_LCD_Out,w
  4077     0625  0480               	iorwf	0,f
  4078                           
  4079                           ;lcd.c: 35:     }
  4080     0626  2E3D               	goto	l249
  4081     0627                     l1515:
  4082                           
  4083                           ;lcd.c: 37:          *(lcd.PORT) &= ~(1 << lcd.D7);
  4084     0627  0862               	movf	_lcd,w
  4085     0628  0084               	movwf	4
  4086     0629  1783               	bsf	3,7
  4087     062A  1C63               	btfss	_lcd+1,0
  4088     062B  1383               	bcf	3,7
  4089     062C  3001               	movlw	1
  4090     062D  00F0               	movwf	??_LCD_Out
  4091     062E  0C66               	rrf	_lcd+4,w
  4092     062F  00F1               	movwf	??_LCD_Out+1
  4093     0630  0CF1               	rrf	??_LCD_Out+1,f
  4094     0631  0C71               	rrf	??_LCD_Out+1,w
  4095     0632  3907               	andlw	7
  4096     0633  3E01               	addlw	1
  4097     0634  2E37               	goto	u1054
  4098     0635                     u1055:
  4099     0635  1003               	clrc
  4100     0636  0DF0               	rlf	??_LCD_Out,f
  4101     0637                     u1054:
  4102     0637  3EFF               	addlw	-1
  4103     0638  1D03               	skipz
  4104     0639  2E35               	goto	u1055
  4105     063A  0870               	movf	??_LCD_Out,w
  4106     063B  3AFF               	xorlw	255
  4107     063C  0580               	andwf	0,f
  4108     063D                     l249:
  4109     063D  0008               	return
  4110     063E                     __end_of_LCD_Out:
  4111                           
  4112                           	psect	text19
  4113     0F73                     __ptext19:	
  4114 ;; *************** function _ADC_read *****************
  4115 ;; Defined at:
  4116 ;;		line 42 in file "main.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  ch              2    0[COMMON] unsigned int 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  2    0[COMMON] unsigned int 
  4123 ;; Registers used:
  4124 ;;		wreg, status,2, status,0
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4130 ;;      Params:         2       0       0       0       0
  4131 ;;      Locals:         0       0       0       0       0
  4132 ;;      Temps:          2       0       0       0       0
  4133 ;;      Totals:         4       0       0       0       0
  4134 ;;Total ram usage:        4 bytes
  4135 ;; Hardware stack levels used: 1
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143     0F73                     _ADC_read:	
  4144                           ;psect for function _ADC_read
  4145                           
  4146     0F73                     l1759:	
  4147                           ;incstack = 0
  4148                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4149                           
  4150                           
  4151                           ;main.c: 43:     LCD_putrs(buffer);
  4152     0F73  2F74               	nop2	;2 cycle nop
  4153     0F74  2F75               	nop2	;2 cycle nop
  4154     0F75  0000               	nop
  4155     0F76                     l1761:
  4156                           
  4157                           ;main.c: 44:     _delay((unsigned long)((200)*(4000000/4000.0)));
  4158     0F76  3083               	movlw	131
  4159     0F77  1283               	bcf	3,5	;RP0=0, select bank0
  4160     0F78  1303               	bcf	3,6	;RP1=0, select bank0
  4161     0F79  059F               	andwf	31,f	;volatile
  4162                           
  4163                           ;main.c: 45: }
  4164     0F7A  0870               	movf	ADC_read@ch,w	;volatile
  4165     0F7B  00F2               	movwf	??_ADC_read
  4166     0F7C  3001               	movlw	1
  4167     0F7D                     u1395:
  4168     0F7D  1003               	clrc
  4169     0F7E  0DF2               	rlf	??_ADC_read,f
  4170     0F7F  3EFF               	addlw	-1
  4171     0F80  1D03               	skipz
  4172     0F81  2F7D               	goto	u1395
  4173     0F82  1003               	clrc
  4174     0F83  0D72               	rlf	??_ADC_read,w
  4175     0F84  049F               	iorwf	31,f	;volatile
  4176     0F85                     l1763:
  4177                           
  4178                           ;main.c: 46: 
  4179     0F85  3003               	movlw	3
  4180     0F86  00F3               	movwf	??_ADC_read+1
  4181     0F87  3097               	movlw	151
  4182     0F88  00F2               	movwf	??_ADC_read
  4183     0F89                     u1627:
  4184     0F89  0BF2               	decfsz	??_ADC_read,f
  4185     0F8A  2F89               	goto	u1627
  4186     0F8B  0BF3               	decfsz	??_ADC_read+1,f
  4187     0F8C  2F89               	goto	u1627
  4188     0F8D  2F8E               	nop2
  4189     0F8E                     l1765:
  4190                           
  4191                           ;main.c: 47: void porcentaje(char buffer[]) {
  4192     0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  4193     0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  4194     0F90  149F               	bsf	31,1	;volatile
  4195     0F91                     l64:	
  4196                           ;main.c: 48:     do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 3 & 0xF0) >> 4 ); LCD_Writ
      +                          e( 0x80 + 3 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do { LCD_Write( (0xC0 + 3 & 0
      +                          xF0) >> 4 ); LCD_Write( 0xC0 + 3 & 0x0F); } while ( 0 ); } else if ( 0 == 2 ) { do { LCD
      +                          _Write( (0x94 + 3 & 0xF0) >> 4 ); LCD_Write( 0x94 + 3 & 0x0F); } while ( 0 ); } else if 
      +                          ( 0 == 3 ) { do { LCD_Write( (0xD4 + 3 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 3 & 0x0F); } wh
      +                          ile ( 0 ); } } while ( 0 );
  4197                           
  4198     0F91  189F               	btfsc	31,1	;volatile
  4199     0F92  2F94               	goto	u1401
  4200     0F93  2F95               	goto	u1400
  4201     0F94                     u1401:
  4202     0F94  2F91               	goto	l64
  4203     0F95                     u1400:
  4204     0F95                     l1767:
  4205                           
  4206                           ;main.c: 49:     LCD_putrs("Porcentaje: ");
  4207     0F95  081E               	movf	30,w	;volatile
  4208     0F96  00F1               	movwf	?_ADC_read+1
  4209     0F97  1683               	bsf	3,5	;RP0=1, select bank1
  4210     0F98  1303               	bcf	3,6	;RP1=0, select bank1
  4211     0F99  081E               	movf	30,w	;volatile
  4212     0F9A  00F0               	movwf	?_ADC_read
  4213     0F9B                     l67:
  4214     0F9B  0008               	return
  4215     0F9C                     __end_of_ADC_read:
  4216                           
  4217                           	psect	text20
  4218     003F                     __ptext20:	
  4219 ;; *************** function _ADC_init *****************
  4220 ;; Defined at:
  4221 ;;		line 36 in file "main.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;		None
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;		None
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  1    wreg      void 
  4228 ;; Registers used:
  4229 ;;		None
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4235 ;;      Params:         0       0       0       0       0
  4236 ;;      Locals:         0       0       0       0       0
  4237 ;;      Temps:          0       0       0       0       0
  4238 ;;      Totals:         0       0       0       0       0
  4239 ;;Total ram usage:        0 bytes
  4240 ;; Hardware stack levels used: 1
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_main
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248     003F                     _ADC_init:	
  4249                           ;psect for function _ADC_init
  4250                           
  4251     003F                     l1757:	
  4252                           ;incstack = 0
  4253                           ; Regs used in _ADC_init: []
  4254                           
  4255                           
  4256                           ;main.c: 37:     voltaje = (adc_result * 50000) / 10230;
  4257     003F  3007               	movlw	7
  4258     0040  1683               	bsf	3,5	;RP0=1, select bank3
  4259     0041  1703               	bsf	3,6	;RP1=1, select bank3
  4260     0042  0088               	movwf	8	;volatile
  4261                           
  4262                           ;main.c: 38:     part_ent = voltaje / 1000;
  4263     0043  3001               	movlw	1
  4264     0044  1283               	bcf	3,5	;RP0=0, select bank0
  4265     0045  1303               	bcf	3,6	;RP1=0, select bank0
  4266     0046  009F               	movwf	31	;volatile
  4267                           
  4268                           ;main.c: 39:     part_dec = voltaje % 1000;
  4269     0047  3080               	movlw	128
  4270     0048  1683               	bsf	3,5	;RP0=1, select bank1
  4271     0049  1303               	bcf	3,6	;RP1=0, select bank1
  4272     004A  009F               	movwf	31	;volatile
  4273     004B                     l61:
  4274     004B  0008               	return
  4275     004C                     __end_of_ADC_init:
  4276     0002                     ___latbits      equ	2
  4277     007E                     btemp           set	126	;btemp
  4278     007E                     wtemp0          set	126
  4279                           
  4280                           	psect	config
  4281                           
  4282                           ;Config register CONFIG1 @ 0x2007
  4283                           ;	Oscillator Selection bits
  4284                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  4285                           ;	Watchdog Timer Enable bit
  4286                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4287                           ;	Power-up Timer Enable bit
  4288                           ;	PWRTE = OFF, PWRT disabled
  4289                           ;	RE3/MCLR pin function select bit
  4290                           ;	MCLRE = 0x1, unprogrammed default
  4291                           ;	Code Protection bit
  4292                           ;	CP = OFF, Program memory code protection is disabled
  4293                           ;	Data Code Protection bit
  4294                           ;	CPD = OFF, Data memory code protection is disabled
  4295                           ;	Brown Out Reset Selection bits
  4296                           ;	BOREN = ON, BOR enabled
  4297                           ;	Internal External Switchover bit
  4298                           ;	IESO = 0x1, unprogrammed default
  4299                           ;	Fail-Safe Clock Monitor Enabled bit
  4300                           ;	FCMEN = 0x1, unprogrammed default
  4301                           ;	Low Voltage Programming Enable bit
  4302                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4303                           ;	In-Circuit Debugger Mode bit
  4304                           ;	DEBUG = 0x1, unprogrammed default
  4305     2007                     	org	8199
  4306     2007  2FF1               	dw	12273
  4307                           
  4308                           ;Config register CONFIG2 @ 0x2008
  4309                           ;	Brown-out Reset Selection bit
  4310                           ;	BOR4V = 0x1, unprogrammed default
  4311                           ;	Flash Program Memory Self Write Enable bits
  4312                           ;	WRT = OFF, Write protection off
  4313     2008                     	org	8200
  4314     2008  3FFF               	dw	16383

Data Sizes:
    Strings     44
    Constant    0
    Data        11
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     43      77
    BANK1            80      0      52
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    display$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> buffer1(BANK0[10]), buffer2(BANK1[10]), buffer3(BANK1[10]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> buffer1(BANK0[10]), buffer2(BANK1[10]), buffer3(BANK1[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    lcd$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    LCD_putrs@a	PTR const unsigned char  size(2) Largest target is 13
		 -> buffer1(BANK0[10]), buffer2(BANK1[10]), buffer3(BANK1[10]), STR_1(CODE[10]), 
		 -> STR_3(CODE[13]), STR_5(CODE[6]), STR_7(CODE[3]), STR_8(CODE[3]), 
		 -> STR_9(CODE[3]), 

    mil@buffer	PTR unsigned char  size(1) Largest target is 10
		 -> buffer3(BANK1[10]), 

    porcentaje@buffer	PTR unsigned char  size(1) Largest target is 10
		 -> buffer2(BANK1[10]), 

    S22$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    S629$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> buffer1(BANK0[10]), buffer2(BANK1[10]), buffer3(BANK1[10]), 

    S629$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), STR_6(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> buffer1(BANK0[10]), buffer2(BANK1[10]), buffer3(BANK1[10]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), STR_6(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMMON[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), STR_6(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), STR_6(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    volt@buffer	PTR unsigned char  size(1) Largest target is 10
		 -> buffer1(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _volt->___aldiv
    _porcentaje->___aldiv
    ___aldiv->___lmul
    _sprintf->_vfprintf
    _vfpfcnvrt->_fputc
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out

Critical Paths under _main in BANK0

    _main->_viewOpt
    _viewOpt->_mil
    _viewOpt->_porcentaje
    _viewOpt->_volt
    _volt->_sprintf
    _porcentaje->_sprintf
    _mil->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7558
                                             41 BANK0      2     2      0
                           _ADC_init
                           _ADC_read
                           _LCD_Init
                          _LCD_Write
                          _LCD_putrs
                            _viewOpt
 ---------------------------------------------------------------------------------
 (1) _viewOpt                                              2     0      2    6901
                                             39 BANK0      2     0      2
                                _mil
                         _porcentaje
                               _volt
 ---------------------------------------------------------------------------------
 (2) _volt                                                 4     3      1    2537
                                             35 BANK0      4     3      1
                          _LCD_Write
                          _LCD_putrs
                            ___aldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _porcentaje                                           4     3      1    2537
                                             35 BANK0      4     3      1
                          _LCD_Write
                          _LCD_putrs
                            ___aldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8      96
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     304
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _mil                                                  4     3      1    1804
                                             35 BANK0      4     3      1
                          _LCD_Write
                          _LCD_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    15      6    1341
                                             16 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             5     1      4    1136
                                             13 COMMON     1     1      0
                                             12 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           13     9      4    1011
                                              0 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                               13     9      4     230
                                              0 COMMON    13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     165
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     168
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) _LCD_putrs                                            7     5      2     273
                                              6 COMMON     7     5      2
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (4) _LCD_putc                                             3     3      0     174
                                              3 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     216
                                              6 COMMON     8     3      5
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            3     3      0     145
                                              3 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (5) _LCD_Out                                              3     3      0     116
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_read
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   _viewOpt
     _mil
       _LCD_Write
       _LCD_putrs
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___lwdiv
             ___lwmod
             _fputc
               _putch
     _porcentaje
       _LCD_Write
       _LCD_putrs
       ___aldiv
         ___lmul (ARG)
       ___lmul
       ___lwdiv
       ___lwmod
       _sprintf
     _volt
       _LCD_Write
       _LCD_putrs
       ___aldiv
       ___lmul
       ___lwdiv
       ___lwmod
       _sprintf

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      52     65.0%
BITBANK1            80      0       0      0.0%
BANK0               80     43      77     96.2%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     142      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Jun 17 10:07:20 2025

                      pc 0002                       l61 004B                       l70 0433  
                     l64 0F91                       l67 0F9B                       fsr 0004  
                    l104 04D7                      l107 038E                      l141 0432  
                    l213 0773                      l144 0129                      l252 01C8  
                    l261 0583                      l440 026F                      l249 063D  
                    l273 0577                      l178 0173                      l450 02F3  
                    l186 0FC7                      l277 025A                      l289 00A0  
                    l389 0128                      l655 00E2                      l665 0FFF  
                    l905 0F17                      l838 0F4D                      l882 0F72  
                    l875 0701                      l867 067E                      l894 038D  
                    u800 00CA                      u801 00C9                      u820 00DE  
                    u900 0300                      u821 00DD                      u805 00C6  
                    u901 02FF                      u830 0FCE                      u910 031F  
                    u815 00D2                      u831 0FCD                      u911 031E  
                    u760 00A9                      u920 0351                      u761 00A8  
                    u921 0350                      u850 0FDE                      u930 0372  
                    u851 0FDD                      u940 0589                      u780 00B9  
                    u860 0FE8                      u941 0588                      u781 00B8  
                    u861 0FE7                      u845 0FD2                      u925 034D  
                    u775 00AD                      u880 0FFB                      u881 0FFA  
                    u865 0FE4                      u970 05B7                      u954 0598  
                    u890 02FA                      u971 05B6                      u955 0596  
                    u795 00BA                      u875 0FEF                      u891 02F9  
                    u964 05AD                      u965 05AB                      u984 05C7  
                    u985 05C5                      u994 05DD                      u995 05DB  
        LCD_Init@display 0076                      _lcd 0062                      _mil 0129  
                    fsr0 0004                      indf 0000          __end_of_LCD_Out 063E  
                   l1501 05B7                     l1511 060D                     l1503 05CD  
                   l1431 00A1                     l1513 0611                     l1505 05E3  
                   l1601 007E                     l1441 00B5                     l1433 00A3  
                   l1521 0652                     l1515 0627                     l1507 05E7  
                   l1603 0084                     l1451 00D8                     l1443 00B9  
                   l1435 00A9                     l1531 0678                     l1523 0656  
                   l1611 0F35                     l1509 05FA                     l1445 00CA  
                   l1437 00AC                     l1453 00DE                     l1461 0FD1  
                   l1541 06B7                     l1533 0680                     l1525 065A  
                   l1517 063E                     l1613 0F37                     l1605 0F2B  
                   l1621 00EB                     l1701 04C8                     l1447 00D0  
                   l1439 00B3                     l1471 0FEE                     l1463 0FD8  
                   l1543 06CB                     l1535 0696                     l1551 06E1  
                   l1527 065E                     l1519 064E                     l1615 0F44  
                   l1607 0F2F                     l1623 00EF                     l1711 039A  
                   l1703 038E                     l1801 0514                     l1561 01CA  
                   l1449 00D1                     l1473 0FF5                     l1465 0FDA  
                   l1457 0FC8                     l1481 02FA                     l1545 06CF  
                   l1537 06AB                     l1529 066A                     l1609 0F33  
                   l1641 027E                     l1633 025B                     l1625 0106  
                   l1713 03A3                     l1811 0540                     l1803 051D  
                   l1571 0220                     l1563 01DE                     l1467 0FDE  
                   l1459 0FCE                     l1475 0FFB                     l1483 0300  
                   l1539 06B1                     l1555 06E8                     l1651 029E  
                   l1643 0280                     l1635 025E                     l1627 010F  
                   l1619 00E3                     l1731 0423                     l1723 040C  
                   l1715 03D5                     l1493 0585                     l1821 055E  
                   l1813 0546                     l1805 0523                     l1573 0227  
                   l1565 01ED                     l1469 0FE8                     l1485 0307  
                   l1549 06D6                     l1581 0F62                     l1741 0135  
                   l1733 0129                     l1661 02CC                     l1653 02A2  
                   l1645 0288                     l1637 0262                     l1629 0120  
                   l1717 03E8                     l1495 0589                     l1591 0190  
                   l1823 0560                     l1815 054C                     l1807 0531  
                   l1575 0242                     l1567 0204                     l1487 031F  
                   l1479 02F4                     l1583 0F6E                     l1743 013E  
                   l1663 02D5                     l1655 02AB                     l1647 0290  
                   l1639 0273                     l1719 03FB                     l1761 0F76  
                   l1497 059E                     l1593 01A7                     l1817 0552  
                   l1809 053A                     l1569 0208                     l1489 0351  
                   l1577 0F4E                     l1753 0159                     l1657 02BD  
                   l1649 0293                     l1665 02DB                     l1729 0418  
                   l1681 043F                     l1673 0433                     l1841 070E  
                   l1833 0702                     l1763 0F85                     l1499 05B3  
                   l1595 01B0                     l1587 0175                     l1819 0558  
                   l1579 0F53                     l1755 0164                     l1747 014D  
                   l1667 02E0                     l1659 02CB                     l1683 0448  
                   l1771 0F9C                     l1851 073C                     l1843 0713  
                   l1835 0705                     l1757 003F                     l1765 0F8E  
                   l1589 018A                     l1829 0561                     l1597 005F  
                   l1669 02EB                     l1693 04B1                     l1685 047A  
                   l1773 0F9D                     l1781 0FB5                     l1861 074D  
                   l1845 072A                     l1837 0709                     l1767 0F95  
                   l1759 0F73                     l1791 04F5                     l1599 0062  
                   l1687 048D                     l1775 0FA5                     l1871 077E  
                   l1863 0757                     l1847 0730                     l1839 070B  
                   l1793 04F9                     l1689 04A0                     l1777 0FAD  
                   l1881 079D                     l1873 078D                     l1849 0736  
                   l1795 0503                     l1787 04D8                     l1699 04BD  
                   l1891 07CF                     l1883 07AC                     l1875 0791  
                   l1859 0743                     l1867 0761                     l1797 0507  
                   l1789 04E9                     l1885 07B0                     l1877 0794  
                   l1869 0779                     l1957 0768                     l1799 0511  
                   l1959 0FBC                     l1887 07B3                     l1879 0798  
                   l1889 07C6                     ?_mil 0043                     STR_1 0020  
                   STR_2 0030                     STR_3 0013                     STR_4 0030  
                   STR_5 002A                     STR_6 0033                     STR_7 0036  
                   STR_8 0039                     STR_9 003C                     u1000 05E7  
                   u1001 05E6                     u1100 06D5                     u1101 06D4  
                   u1030 0611                     u1014 05F4                     u1031 0610  
                   u1015 05F2                     u1024 0607                     u1025 0605  
                   u1114 01D9                     u1210 006C                     u1115 01D7  
                   u1044 0621                     u1204 01C2                     u1220 008E  
                   u1060 064E                     u1300 0273                     u1045 061F  
                   u1205 01C0                     u1125 01E1                     u1061 064D  
                   u1301 0272                     u1054 0637                     u1134 01FF  
                   u1230 00A0                     u1070 066A                     u1310 0290  
                   u1055 0635                     u1135 01FD                     u1231 009F  
                   u1071 0669                     u1311 028F                     u1400 0F95  
                   u1144 021A                     u1080 06B1                     u1240 00EF  
                   u1401 0F94                     u1145 0218                     u1081 06B0  
                   u1241 00EE                     u1410 04F5                     u1154 0239  
                   u1090 06B6                     u1170 0F6E                     u1330 02A2  
                   u1411 04F4                     u1155 0237                     u1091 06B5  
                   u1171 0F6D                     u1331 02A1                     u1251 00F8  
                   u1420 0503                     u1164 0254                     u1252 00FF  
                   u1500 07AC                     u1421 0502                     u1165 0252  
                   u1325 0295                     u1253 0106                     u1501 07AB  
                   u1430 0511                     u1350 02BD                     u1431 0510  
                   u1415 04F1                     u1351 02BC                     u1184 0184  
                   u1280 0120                     u1185 0182                     u1425 04FF  
                   u1345 02A4                     u1281 011F                     u1265 0108  
                   u1194 01A2                     u1370 02DB                     u1290 0262  
                   u1450 0779                     u1195 01A0                     u1435 050D  
                   u1371 02DA                     u1355 02B9                     u1291 0261  
                   u1275 0110                     u1451 0778                     u1380 02E0  
                   u1460 077E                     u1445 0564                     u1381 02DF  
                   u1365 02CD                     u1461 077D                     u1470 078D  
                   u1607 0535                     u1527 07D5                     u1471 078C  
                   u1480 0798                     u1617 01AB                     u1537 04D0  
                   u1481 0797                     u1490 079D                     u1627 0F89  
                   u1395 0F7D                     u1547 042B                     u1491 079C  
                   u1557 016C                     u1567 0206                     u1577 0240  
                   u1587 0518                     u1597 0527                     _dbuf 00A0  
                   _main 0702                     _menu 0067                     _prec 004D  
                   btemp 007E                     _volt 0433                     start 0000  
       __end_of_ADC_init 004C         __end_of_ADC_read 0F9C              LCD_Init@cmd 007D  
                  ??_mil 0044         __end_of_LCD_Init 0584         __end_of_LCD_putc 025B  
        __end_of___aldiv 02F4                    ?_main 0070                    _ANSEL 0188  
                  ?_volt 0043          __end_of___lwdiv 00E3          __end_of___lwmod 1000  
           vfpfcnvrt@fmt 0022                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087      ___lmul@multiplicand 0074                    _flags 0057  
                  _fputc 02F4                    _width 004B                    _putch 0F17  
                  pclath 000A          __end_of_viewOpt 0FC8                    status 0003  
                  wtemp0 007E          __end_of_sprintf 0F4E          __initialization 07DE  
           __end_of_main 07DE             __end_of_volt 04D8                   ??_main 0049  
                 ??_volt 0044                ??_LCD_Out 0070        __end_of_LCD_Write 01C9  
      __end_of_LCD_putrs 00A1                   _ADCON0 001F                   _ADCON1 009F  
                 ?_fputc 0070                   _ADRESH 001E                   _ADRESL 009E  
                 ?_putch 0070                   _ANSELH 0189           viewOpt@menuOpt 0047  
           vfprintf@cfmt 007D                   ___lmul 00E3                ??___aldiv 007D  
              ??___lwdiv 0074                ??___lwmod 0074                   fputc@c 0070  
              ?_ADC_init 0070                ?_ADC_read 0070                ??_viewOpt 007E  
                 putch@c 0070         __end_of_vfprintf 0F73                ??_sprintf 0036  
__end_of__initialization 07FC                ?_LCD_Init 0076                ?_LCD_putc 0070  
         __pcstackCOMMON 0070             __pidataBANK0 0F20            __end_of_fputc 038E  
             _adc_result 0055            __end_of_putch 0F18                LCD_putc@c 0075  
             ??_ADC_init 0070               ??_ADC_read 0072                  ??_fputc 0074  
                ??_putch 0070               __pbssBANK0 004B               __pbssBANK1 00A0  
             ??_LCD_Init 007B               ??_LCD_putc 0073               __pmaintext 0702  
                ?___lmul 0070           ___lmul@product 0079                  _LCD_Out 0584  
             __stringtab 0003               ADC_read@ch 0070                  ___aldiv 025B  
                ___lwdiv 00A1                  ___lwmod 0FC8                ?_vfprintf 002C  
                _channel 0069                  __ptext1 0F9C                  __ptext2 0433  
                __ptext3 038E                  __ptext4 00E3                  __ptext5 025B  
                __ptext6 0129                  __ptext7 0F2B                  __ptext8 0F4E  
                __ptext9 063E                  _buffer1 0058                  _buffer2 00CA  
                _buffer3 00C0         ___aldiv@dividend 0024                  _prevRB0 006C  
                _prevRB1 006B                  _viewOpt 0F9C                  _sprintf 0F2B  
                clrloop0 0F19                  _voltaje 0053                _LCD_Write 0174  
   end_of_initialization 07FC                _LCD_putrs 005F                  fputc@fp 0072  
      __end_of_vfpfcnvrt 0702         ___aldiv@quotient 002A         vfpfcnvrt@convarg 0026  
             ??_vfprintf 007D               _porcentaje 038E                _PORTBbits 0006  
             ?_LCD_Write 0070               ?_LCD_putrs 0076           __end_of___lmul 0129  
            vfpfcnvrt@ap 0023              vfpfcnvrt@cp 002A              vfpfcnvrt@fp 0020  
             LCD_Write@c 0075      start_initialization 07DE              __end_of_mil 0174  
             LCD_putrs@a 0076               LCD_putrs@i 007B              vfprintf@fmt 002E  
               ??___lmul 0078               init_fetch0 004C              __pdataBANK0 0062  
            ?_porcentaje 0043                 ?_LCD_Out 0070                ___latbits 0002  
          __pcstackBANK0 0020                 LCD_Out@c 0072              ??_LCD_Write 0073  
            ??_LCD_putrs 0078         ___lwdiv@dividend 0072                 ?___aldiv 0020  
               ?___lwdiv 0070                 ?___lwmod 0070                __pstrings 0003  
               _ADC_init 003F                 _ADC_read 0F73                 ?_viewOpt 0047  
       ___lwdiv@quotient 0074                 ?_sprintf 0030          ___aldiv@divisor 0020  
        ___aldiv@counter 0028                 _LCD_Init 04D8                clear_ram0 0F18  
               _LCD_putc 01C9                 _GO_nDONE 00F9                _vfpfcnvrt 063E  
            __stringbase 0012               vfpfcnvrt@c 002B                mil@buffer 0043  
      ___lmul@multiplier 0070               vfprintf@ap 002F               vfprintf@fp 002C  
             ?_vfpfcnvrt 0020               volt@buffer 0043       __end_of__stringtab 0013  
             sprintf@fmt 0031          ___lwdiv@divisor 0070          ___lwdiv@counter 0076  
               __ptext10 02F4                 __ptext11 0F17                 __ptext20 003F  
               __ptext12 0FC8                 __ptext13 00A1                 __ptext14 005F  
               __ptext15 01C9                 __ptext16 04D8                 __ptext17 0174  
               __ptext18 0584                 __ptext19 0F73                 _part_dec 004F  
               _part_ent 0051                 _vfprintf 0F4E             ??_porcentaje 0044  
               init_ram0 0050                sprintf@ap 0037         ___lwmod@dividend 0072  
     __end_of_porcentaje 0433                stringcode 000D         porcentaje@buffer 0043  
            ??_vfpfcnvrt 0024               _OPTION_REG 0081                 sprintf@f 0038  
               sprintf@s 0030          ___lwmod@divisor 0070          ___lwmod@counter 0074  
               stringdir 000D                 stringtab 0003             ___aldiv@sign 0029  
