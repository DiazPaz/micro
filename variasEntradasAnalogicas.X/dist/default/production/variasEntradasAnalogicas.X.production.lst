

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Jun 16 16:37:50 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,space=0,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    14                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=3
    15                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=3
    18                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=3
    19                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=2
    20                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=2
    21                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    31                           	dabs	1,0x7E,2
    32     0000                     
    33                           ; Generated 26/03/2025 GMT
    34                           ; 
    35                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F887 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67     0004                     fsr             equ	4
    68     0004                     fsr0            equ	4
    69     0000                     indf            equ	0
    70     0000                     indf0           equ	0
    71     0002                     pc              equ	2
    72     0002                     pcl             equ	2
    73     000A                     pclath          equ	10
    74     0003                     status          equ	3
    75     0000                     INDF            equ	0	;# 
    76     0001                     TMR0            equ	1	;# 
    77     0002                     PCL             equ	2	;# 
    78     0003                     STATUS          equ	3	;# 
    79     0004                     FSR             equ	4	;# 
    80     0005                     PORTA           equ	5	;# 
    81     0006                     PORTB           equ	6	;# 
    82     0007                     PORTC           equ	7	;# 
    83     0008                     PORTD           equ	8	;# 
    84     0009                     PORTE           equ	9	;# 
    85     000A                     PCLATH          equ	10	;# 
    86     000B                     INTCON          equ	11	;# 
    87     000C                     PIR1            equ	12	;# 
    88     000D                     PIR2            equ	13	;# 
    89     000E                     TMR1            equ	14	;# 
    90     000E                     TMR1L           equ	14	;# 
    91     000F                     TMR1H           equ	15	;# 
    92     0010                     T1CON           equ	16	;# 
    93     0011                     TMR2            equ	17	;# 
    94     0012                     T2CON           equ	18	;# 
    95     0013                     SSPBUF          equ	19	;# 
    96     0014                     SSPCON          equ	20	;# 
    97     0015                     CCPR1           equ	21	;# 
    98     0015                     CCPR1L          equ	21	;# 
    99     0016                     CCPR1H          equ	22	;# 
   100     0017                     CCP1CON         equ	23	;# 
   101     0018                     RCSTA           equ	24	;# 
   102     0019                     TXREG           equ	25	;# 
   103     001A                     RCREG           equ	26	;# 
   104     001B                     CCPR2           equ	27	;# 
   105     001B                     CCPR2L          equ	27	;# 
   106     001C                     CCPR2H          equ	28	;# 
   107     001D                     CCP2CON         equ	29	;# 
   108     001E                     ADRESH          equ	30	;# 
   109     001F                     ADCON0          equ	31	;# 
   110     0081                     OPTION_REG      equ	129	;# 
   111     0085                     TRISA           equ	133	;# 
   112     0086                     TRISB           equ	134	;# 
   113     0087                     TRISC           equ	135	;# 
   114     0088                     TRISD           equ	136	;# 
   115     0089                     TRISE           equ	137	;# 
   116     008C                     PIE1            equ	140	;# 
   117     008D                     PIE2            equ	141	;# 
   118     008E                     PCON            equ	142	;# 
   119     008F                     OSCCON          equ	143	;# 
   120     0090                     OSCTUNE         equ	144	;# 
   121     0091                     SSPCON2         equ	145	;# 
   122     0092                     PR2             equ	146	;# 
   123     0093                     SSPADD          equ	147	;# 
   124     0093                     SSPMSK          equ	147	;# 
   125     0093                     MSK             equ	147	;# 
   126     0094                     SSPSTAT         equ	148	;# 
   127     0095                     WPUB            equ	149	;# 
   128     0096                     IOCB            equ	150	;# 
   129     0097                     VRCON           equ	151	;# 
   130     0098                     TXSTA           equ	152	;# 
   131     0099                     SPBRG           equ	153	;# 
   132     009A                     SPBRGH          equ	154	;# 
   133     009B                     PWM1CON         equ	155	;# 
   134     009C                     ECCPAS          equ	156	;# 
   135     009D                     PSTRCON         equ	157	;# 
   136     009E                     ADRESL          equ	158	;# 
   137     009F                     ADCON1          equ	159	;# 
   138     0105                     WDTCON          equ	261	;# 
   139     0107                     CM1CON0         equ	263	;# 
   140     0108                     CM2CON0         equ	264	;# 
   141     0109                     CM2CON1         equ	265	;# 
   142     010C                     EEDATA          equ	268	;# 
   143     010C                     EEDAT           equ	268	;# 
   144     010D                     EEADR           equ	269	;# 
   145     010E                     EEDATH          equ	270	;# 
   146     010F                     EEADRH          equ	271	;# 
   147     0185                     SRCON           equ	389	;# 
   148     0187                     BAUDCTL         equ	391	;# 
   149     0188                     ANSEL           equ	392	;# 
   150     0189                     ANSELH          equ	393	;# 
   151     018C                     EECON1          equ	396	;# 
   152     018D                     EECON2          equ	397	;# 
   153     0000                     INDF            equ	0	;# 
   154     0001                     TMR0            equ	1	;# 
   155     0002                     PCL             equ	2	;# 
   156     0003                     STATUS          equ	3	;# 
   157     0004                     FSR             equ	4	;# 
   158     0005                     PORTA           equ	5	;# 
   159     0006                     PORTB           equ	6	;# 
   160     0007                     PORTC           equ	7	;# 
   161     0008                     PORTD           equ	8	;# 
   162     0009                     PORTE           equ	9	;# 
   163     000A                     PCLATH          equ	10	;# 
   164     000B                     INTCON          equ	11	;# 
   165     000C                     PIR1            equ	12	;# 
   166     000D                     PIR2            equ	13	;# 
   167     000E                     TMR1            equ	14	;# 
   168     000E                     TMR1L           equ	14	;# 
   169     000F                     TMR1H           equ	15	;# 
   170     0010                     T1CON           equ	16	;# 
   171     0011                     TMR2            equ	17	;# 
   172     0012                     T2CON           equ	18	;# 
   173     0013                     SSPBUF          equ	19	;# 
   174     0014                     SSPCON          equ	20	;# 
   175     0015                     CCPR1           equ	21	;# 
   176     0015                     CCPR1L          equ	21	;# 
   177     0016                     CCPR1H          equ	22	;# 
   178     0017                     CCP1CON         equ	23	;# 
   179     0018                     RCSTA           equ	24	;# 
   180     0019                     TXREG           equ	25	;# 
   181     001A                     RCREG           equ	26	;# 
   182     001B                     CCPR2           equ	27	;# 
   183     001B                     CCPR2L          equ	27	;# 
   184     001C                     CCPR2H          equ	28	;# 
   185     001D                     CCP2CON         equ	29	;# 
   186     001E                     ADRESH          equ	30	;# 
   187     001F                     ADCON0          equ	31	;# 
   188     0081                     OPTION_REG      equ	129	;# 
   189     0085                     TRISA           equ	133	;# 
   190     0086                     TRISB           equ	134	;# 
   191     0087                     TRISC           equ	135	;# 
   192     0088                     TRISD           equ	136	;# 
   193     0089                     TRISE           equ	137	;# 
   194     008C                     PIE1            equ	140	;# 
   195     008D                     PIE2            equ	141	;# 
   196     008E                     PCON            equ	142	;# 
   197     008F                     OSCCON          equ	143	;# 
   198     0090                     OSCTUNE         equ	144	;# 
   199     0091                     SSPCON2         equ	145	;# 
   200     0092                     PR2             equ	146	;# 
   201     0093                     SSPADD          equ	147	;# 
   202     0093                     SSPMSK          equ	147	;# 
   203     0093                     MSK             equ	147	;# 
   204     0094                     SSPSTAT         equ	148	;# 
   205     0095                     WPUB            equ	149	;# 
   206     0096                     IOCB            equ	150	;# 
   207     0097                     VRCON           equ	151	;# 
   208     0098                     TXSTA           equ	152	;# 
   209     0099                     SPBRG           equ	153	;# 
   210     009A                     SPBRGH          equ	154	;# 
   211     009B                     PWM1CON         equ	155	;# 
   212     009C                     ECCPAS          equ	156	;# 
   213     009D                     PSTRCON         equ	157	;# 
   214     009E                     ADRESL          equ	158	;# 
   215     009F                     ADCON1          equ	159	;# 
   216     0105                     WDTCON          equ	261	;# 
   217     0107                     CM1CON0         equ	263	;# 
   218     0108                     CM2CON0         equ	264	;# 
   219     0109                     CM2CON1         equ	265	;# 
   220     010C                     EEDATA          equ	268	;# 
   221     010C                     EEDAT           equ	268	;# 
   222     010D                     EEADR           equ	269	;# 
   223     010E                     EEDATH          equ	270	;# 
   224     010F                     EEADRH          equ	271	;# 
   225     0185                     SRCON           equ	389	;# 
   226     0187                     BAUDCTL         equ	391	;# 
   227     0188                     ANSEL           equ	392	;# 
   228     0189                     ANSELH          equ	393	;# 
   229     018C                     EECON1          equ	396	;# 
   230     018D                     EECON2          equ	397	;# 
   231     0000                     INDF            equ	0	;# 
   232     0001                     TMR0            equ	1	;# 
   233     0002                     PCL             equ	2	;# 
   234     0003                     STATUS          equ	3	;# 
   235     0004                     FSR             equ	4	;# 
   236     0005                     PORTA           equ	5	;# 
   237     0006                     PORTB           equ	6	;# 
   238     0007                     PORTC           equ	7	;# 
   239     0008                     PORTD           equ	8	;# 
   240     0009                     PORTE           equ	9	;# 
   241     000A                     PCLATH          equ	10	;# 
   242     000B                     INTCON          equ	11	;# 
   243     000C                     PIR1            equ	12	;# 
   244     000D                     PIR2            equ	13	;# 
   245     000E                     TMR1            equ	14	;# 
   246     000E                     TMR1L           equ	14	;# 
   247     000F                     TMR1H           equ	15	;# 
   248     0010                     T1CON           equ	16	;# 
   249     0011                     TMR2            equ	17	;# 
   250     0012                     T2CON           equ	18	;# 
   251     0013                     SSPBUF          equ	19	;# 
   252     0014                     SSPCON          equ	20	;# 
   253     0015                     CCPR1           equ	21	;# 
   254     0015                     CCPR1L          equ	21	;# 
   255     0016                     CCPR1H          equ	22	;# 
   256     0017                     CCP1CON         equ	23	;# 
   257     0018                     RCSTA           equ	24	;# 
   258     0019                     TXREG           equ	25	;# 
   259     001A                     RCREG           equ	26	;# 
   260     001B                     CCPR2           equ	27	;# 
   261     001B                     CCPR2L          equ	27	;# 
   262     001C                     CCPR2H          equ	28	;# 
   263     001D                     CCP2CON         equ	29	;# 
   264     001E                     ADRESH          equ	30	;# 
   265     001F                     ADCON0          equ	31	;# 
   266     0081                     OPTION_REG      equ	129	;# 
   267     0085                     TRISA           equ	133	;# 
   268     0086                     TRISB           equ	134	;# 
   269     0087                     TRISC           equ	135	;# 
   270     0088                     TRISD           equ	136	;# 
   271     0089                     TRISE           equ	137	;# 
   272     008C                     PIE1            equ	140	;# 
   273     008D                     PIE2            equ	141	;# 
   274     008E                     PCON            equ	142	;# 
   275     008F                     OSCCON          equ	143	;# 
   276     0090                     OSCTUNE         equ	144	;# 
   277     0091                     SSPCON2         equ	145	;# 
   278     0092                     PR2             equ	146	;# 
   279     0093                     SSPADD          equ	147	;# 
   280     0093                     SSPMSK          equ	147	;# 
   281     0093                     MSK             equ	147	;# 
   282     0094                     SSPSTAT         equ	148	;# 
   283     0095                     WPUB            equ	149	;# 
   284     0096                     IOCB            equ	150	;# 
   285     0097                     VRCON           equ	151	;# 
   286     0098                     TXSTA           equ	152	;# 
   287     0099                     SPBRG           equ	153	;# 
   288     009A                     SPBRGH          equ	154	;# 
   289     009B                     PWM1CON         equ	155	;# 
   290     009C                     ECCPAS          equ	156	;# 
   291     009D                     PSTRCON         equ	157	;# 
   292     009E                     ADRESL          equ	158	;# 
   293     009F                     ADCON1          equ	159	;# 
   294     0105                     WDTCON          equ	261	;# 
   295     0107                     CM1CON0         equ	263	;# 
   296     0108                     CM2CON0         equ	264	;# 
   297     0109                     CM2CON1         equ	265	;# 
   298     010C                     EEDATA          equ	268	;# 
   299     010C                     EEDAT           equ	268	;# 
   300     010D                     EEADR           equ	269	;# 
   301     010E                     EEDATH          equ	270	;# 
   302     010F                     EEADRH          equ	271	;# 
   303     0185                     SRCON           equ	389	;# 
   304     0187                     BAUDCTL         equ	391	;# 
   305     0188                     ANSEL           equ	392	;# 
   306     0189                     ANSELH          equ	393	;# 
   307     018C                     EECON1          equ	396	;# 
   308     018D                     EECON2          equ	397	;# 
   309                           
   310                           	psect	idataBANK1
   311     008D                     __pidataBANK1:
   312                           
   313                           ;initializer for _lcd
   314     008D  3407               	retlw	7
   315     008E  3400               	retlw	0
   316     008F  341A               	retlw	26
   317     0090  342C               	retlw	44
   318     0091  343E               	retlw	62
   319     0006                     _PORTB          set	6
   320     0005                     _PORTA          set	5
   321     001E                     _ADRESH         set	30
   322     001F                     _ADCON0         set	31
   323     0007                     _PORTC          set	7
   324     00F9                     _GO_nDONE       set	249
   325     0087                     _TRISC          set	135
   326     0086                     _TRISB          set	134
   327     0085                     _TRISA          set	133
   328     009E                     _ADRESL         set	158
   329     009F                     _ADCON1         set	159
   330     0189                     _ANSELH         set	393
   331     0188                     _ANSEL          set	392
   332                           
   333                           	psect	strings
   334     0003                     __pstrings:
   335     0003                     stringtab:
   336     0003                     __stringtab:
   337                           
   338                           ;	String table - string pointers are 1 byte each
   339     0003  1BFF               	btfsc	btemp+1,7
   340     0004  280D               	ljmp	stringcode
   341     0005  1383               	bcf	3,7
   342     0006  187F               	btfsc	btemp+1,0
   343     0007  1783               	bsf	3,7
   344     0008  0800               	movf	0,w
   345     0009  0A84               	incf	4,f
   346     000A  1903               	skipnz
   347     000B  0AFF               	incf	btemp+1,f
   348     000C  0008               	return
   349     000D                     stringcode:
   350     000D                     stringdir:
   351     000D  3000               	movlw	high stringdir
   352     000E  008A               	movwf	10
   353     000F  0804               	movf	4,w
   354     0010  0A84               	incf	4,f
   355     0011  0782               	addwf	2,f
   356     0012                     __stringbase:
   357     0012  3400               	retlw	0
   358     0013                     __end_of__stringtab:
   359     0013                     STR_1:
   360     0013  3456               	retlw	86	;'V'
   361     0014  346F               	retlw	111	;'o'
   362     0015  346C               	retlw	108	;'l'
   363     0016  3474               	retlw	116	;'t'
   364     0017  3461               	retlw	97	;'a'
   365     0018  346A               	retlw	106	;'j'
   366     0019  3465               	retlw	101	;'e'
   367     001A  3420               	retlw	32	;' '
   368     001B  3431               	retlw	49	;'1'
   369     001C  343A               	retlw	58	;':'
   370     001D  3420               	retlw	32	;' '
   371     001E  3400               	retlw	0
   372     001F                     STR_3:
   373     001F  3456               	retlw	86	;'V'
   374     0020  346F               	retlw	111	;'o'
   375     0021  346C               	retlw	108	;'l'
   376     0022  3474               	retlw	116	;'t'
   377     0023  3461               	retlw	97	;'a'
   378     0024  346A               	retlw	106	;'j'
   379     0025  3465               	retlw	101	;'e'
   380     0026  3420               	retlw	32	;' '
   381     0027  3432               	retlw	50	;'2'
   382     0028  343A               	retlw	58	;':'
   383     0029  3420               	retlw	32	;' '
   384     002A  3400               	retlw	0
   385     002B                     STR_2:
   386     002B  3425               	retlw	37	;'%'
   387     002C  3475               	retlw	117	;'u'
   388     002D  342E               	retlw	46	;'.'
   389     002E  3425               	retlw	37	;'%'
   390     002F  3475               	retlw	117	;'u'
   391     0030  3400               	retlw	0
   392     002B                     STR_4           equ	STR_2
   393                           
   394                           	psect	cinit
   395     07CE                     start_initialization:	
   396                           ; #config settings
   397                           
   398     07CE                     __initialization:
   399                           
   400                           ; Initialize objects allocated to BANK1
   401     07CE  1683               	bsf	3,5	;RP0=1, select bank1
   402     07CF  1303               	bcf	3,6	;RP1=0, select bank1
   403     07D0  120A  118A  208D  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   404     07D5  00C2               	movwf	__pdataBANK1& (0+127)
   405     07D6  120A  118A  208E  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   406     07DB  00C3               	movwf	(__pdataBANK1+1)& (0+127)
   407     07DC  120A  118A  208F  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   408     07E1  00C4               	movwf	(__pdataBANK1+2)& (0+127)
   409     07E2  120A  118A  2090  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   410     07E7  00C5               	movwf	(__pdataBANK1+3)& (0+127)
   411     07E8  120A  118A  2091  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
   412     07ED  00C6               	movwf	(__pdataBANK1+4)& (0+127)
   413                           
   414                           ; Clear objects allocated to BANK1
   415     07EE  1383               	bcf	3,7	;select IRP bank0
   416     07EF  30A0               	movlw	low __pbssBANK1
   417     07F0  0084               	movwf	4
   418     07F1  30C2               	movlw	low (__pbssBANK1+34)
   419     07F2  120A  118A  2092  120A  118A  	fcall	clear_ram0
   420                           
   421                           ; Clear objects allocated to BANK0
   422     07F7  1283               	bcf	3,5	;RP0=0, select bank0
   423     07F8  1303               	bcf	3,6	;RP1=0, select bank0
   424     07F9  01ED               	clrf	__pbssBANK0& (0+127)
   425     07FA  01EE               	clrf	(__pbssBANK0+1)& (0+127)
   426     07FB  01EF               	clrf	(__pbssBANK0+2)& (0+127)
   427     07FC                     end_of_initialization:	
   428                           ;End of C runtime variable initialization code
   429                           
   430     07FC                     __end_of__initialization:
   431     07FC  0183               	clrf	3
   432     07FD  120A  118A  2E5E   	ljmp	_main	;jump to C main() function
   433                           
   434                           	psect	bssBANK0
   435     006D                     __pbssBANK0:
   436     006D                     _prec:
   437     006D                     	ds	2
   438     006F                     _flags:
   439     006F                     	ds	1
   440                           
   441                           	psect	bssBANK1
   442     00A0                     __pbssBANK1:
   443     00A0                     _dbuf:
   444     00A0                     	ds	32
   445     00C0                     _width:
   446     00C0                     	ds	2
   447                           
   448                           	psect	dataBANK1
   449     00C2                     __pdataBANK1:
   450     00C2                     _lcd:
   451     00C2                     	ds	5
   452                           
   453                           	psect	clrtext
   454     0092                     clear_ram0:	
   455                           ;	Called with FSR containing the base address, and
   456                           ;	W with the last address+1
   457                           
   458     0092  0064               	clrwdt	;clear the watchdog before getting into this loop
   459     0093                     clrloop0:
   460     0093  0180               	clrf	0	;clear RAM location pointed to by FSR
   461     0094  0A84               	incf	4,f	;increment pointer
   462     0095  0604               	xorwf	4,w	;XOR with final address
   463     0096  1903               	btfsc	3,2	;have we reached the end yet?
   464     0097  3400               	retlw	0	;all done for this memory range, return
   465     0098  0604               	xorwf	4,w	;XOR again to restore value
   466     0099  2893               	goto	clrloop0	;do the next byte
   467                           
   468                           	psect	cstackCOMMON
   469     0070                     __pcstackCOMMON:
   470     0070                     ?_LCD_Write:
   471     0070                     ?_putch:	
   472                           ; 1 bytes @ 0x0
   473                           
   474     0070                     ?_ADC_init:	
   475                           ; 1 bytes @ 0x0
   476                           
   477     0070                     ?_LCD_Out:	
   478                           ; 1 bytes @ 0x0
   479                           
   480     0070                     ?_LCD_putc:	
   481                           ; 1 bytes @ 0x0
   482                           
   483     0070                     ?_fputc:	
   484                           ; 1 bytes @ 0x0
   485                           
   486     0070                     ?_ADC_read:	
   487                           ; 2 bytes @ 0x0
   488                           
   489     0070                     ?___lwdiv:	
   490                           ; 2 bytes @ 0x0
   491                           
   492     0070                     ?___lwmod:	
   493                           ; 2 bytes @ 0x0
   494                           
   495     0070                     ?___lmul:	
   496                           ; 2 bytes @ 0x0
   497                           
   498     0070                     putch@c:	
   499                           ; 4 bytes @ 0x0
   500                           
   501     0070                     ___lwdiv@divisor:	
   502                           ; 1 bytes @ 0x0
   503                           
   504     0070                     ___lwmod@divisor:	
   505                           ; 2 bytes @ 0x0
   506                           
   507     0070                     fputc@c:	
   508                           ; 2 bytes @ 0x0
   509                           
   510     0070                     ___lmul@multiplier:	
   511                           ; 2 bytes @ 0x0
   512                           
   513     0070                     ??_putch:	
   514                           ; 4 bytes @ 0x0
   515                           
   516     0070                     ??_ADC_init:	
   517                           ; 1 bytes @ 0x0
   518                           
   519     0070                     ??_LCD_Out:	
   520                           ; 1 bytes @ 0x0
   521                           
   522                           
   523                           ; 1 bytes @ 0x0
   524     0070                     	ds	2
   525     0072                     LCD_Out@c:
   526     0072                     ___lwdiv@dividend:	
   527                           ; 1 bytes @ 0x2
   528                           
   529     0072                     ___lwmod@dividend:	
   530                           ; 2 bytes @ 0x2
   531                           
   532     0072                     fputc@fp:	
   533                           ; 2 bytes @ 0x2
   534                           
   535     0072                     ??_ADC_read:	
   536                           ; 2 bytes @ 0x2
   537                           
   538                           
   539                           ; 1 bytes @ 0x2
   540     0072                     	ds	1
   541     0073                     ??_LCD_Write:
   542     0073                     ??_LCD_putc:	
   543                           ; 1 bytes @ 0x3
   544                           
   545                           
   546                           ; 1 bytes @ 0x3
   547     0073                     	ds	1
   548     0074                     ADC_read@channel:
   549     0074                     ___lwmod@counter:	
   550                           ; 1 bytes @ 0x4
   551                           
   552     0074                     ___lwdiv@quotient:	
   553                           ; 1 bytes @ 0x4
   554                           
   555     0074                     ___lmul@multiplicand:	
   556                           ; 2 bytes @ 0x4
   557                           
   558     0074                     ??_fputc:	
   559                           ; 4 bytes @ 0x4
   560                           
   561     0074                     ??___lwdiv:	
   562                           ; 1 bytes @ 0x4
   563                           
   564     0074                     ??___lwmod:	
   565                           ; 1 bytes @ 0x4
   566                           
   567                           
   568                           ; 1 bytes @ 0x4
   569     0074                     	ds	1
   570     0075                     LCD_Write@c:
   571     0075                     LCD_putc@c:	
   572                           ; 1 bytes @ 0x5
   573                           
   574                           
   575                           ; 1 bytes @ 0x5
   576     0075                     	ds	1
   577     0076                     ?_LCD_Init:
   578     0076                     ?_LCD_putrs:	
   579                           ; 1 bytes @ 0x6
   580                           
   581     0076                     ___lwdiv@counter:	
   582                           ; 1 bytes @ 0x6
   583                           
   584     0076                     LCD_putrs@a:	
   585                           ; 1 bytes @ 0x6
   586                           
   587     0076                     LCD_Init@display:	
   588                           ; 2 bytes @ 0x6
   589                           
   590                           
   591                           ; 5 bytes @ 0x6
   592     0076                     	ds	2
   593     0078                     ??_LCD_putrs:
   594     0078                     ??___lmul:	
   595                           ; 1 bytes @ 0x8
   596                           
   597                           
   598                           ; 1 bytes @ 0x8
   599     0078                     	ds	1
   600     0079                     ___lmul@product:
   601                           
   602                           ; 4 bytes @ 0x9
   603     0079                     	ds	2
   604     007B                     LCD_putrs@i:
   605     007B                     ??_LCD_Init:	
   606                           ; 2 bytes @ 0xB
   607                           
   608                           
   609                           ; 1 bytes @ 0xB
   610     007B                     	ds	2
   611     007D                     LCD_Init@cmd:
   612     007D                     vfprintf@cfmt:	
   613                           ; 1 bytes @ 0xD
   614                           
   615     007D                     ??_vfprintf:	
   616                           ; 1 bytes @ 0xD
   617                           
   618     007D                     ??___aldiv:	
   619                           ; 1 bytes @ 0xD
   620                           
   621                           
   622                           ; 1 bytes @ 0xD
   623     007D                     	ds	1
   624                           
   625                           	psect	cstackBANK0
   626     0020                     __pcstackBANK0:
   627     0020                     ?_vfpfcnvrt:
   628     0020                     ?___aldiv:	
   629                           ; 1 bytes @ 0x0
   630                           
   631     0020                     vfpfcnvrt@fp:	
   632                           ; 4 bytes @ 0x0
   633                           
   634     0020                     ___aldiv@divisor:	
   635                           ; 2 bytes @ 0x0
   636                           
   637                           
   638                           ; 4 bytes @ 0x0
   639     0020                     	ds	2
   640     0022                     vfpfcnvrt@fmt:
   641                           
   642                           ; 1 bytes @ 0x2
   643     0022                     	ds	1
   644     0023                     vfpfcnvrt@ap:
   645                           
   646                           ; 1 bytes @ 0x3
   647     0023                     	ds	1
   648     0024                     ___aldiv@dividend:
   649     0024                     ??_vfpfcnvrt:	
   650                           ; 4 bytes @ 0x4
   651                           
   652                           
   653                           ; 1 bytes @ 0x4
   654     0024                     	ds	2
   655     0026                     vfpfcnvrt@convarg:
   656                           
   657                           ; 4 bytes @ 0x6
   658     0026                     	ds	2
   659     0028                     ___aldiv@counter:
   660                           
   661                           ; 1 bytes @ 0x8
   662     0028                     	ds	1
   663     0029                     ___aldiv@sign:
   664                           
   665                           ; 1 bytes @ 0x9
   666     0029                     	ds	1
   667     002A                     vfpfcnvrt@cp:
   668     002A                     ___aldiv@quotient:	
   669                           ; 1 bytes @ 0xA
   670                           
   671                           
   672                           ; 4 bytes @ 0xA
   673     002A                     	ds	1
   674     002B                     vfpfcnvrt@c:
   675                           
   676                           ; 1 bytes @ 0xB
   677     002B                     	ds	1
   678     002C                     ?_vfprintf:
   679     002C                     vfprintf@fp:	
   680                           ; 2 bytes @ 0xC
   681                           
   682                           
   683                           ; 2 bytes @ 0xC
   684     002C                     	ds	2
   685     002E                     vfprintf@fmt:
   686                           
   687                           ; 1 bytes @ 0xE
   688     002E                     	ds	1
   689     002F                     vfprintf@ap:
   690                           
   691                           ; 1 bytes @ 0xF
   692     002F                     	ds	1
   693     0030                     ?_sprintf:
   694     0030                     sprintf@s:	
   695                           ; 2 bytes @ 0x10
   696                           
   697                           
   698                           ; 1 bytes @ 0x10
   699     0030                     	ds	1
   700     0031                     sprintf@fmt:
   701                           
   702                           ; 1 bytes @ 0x11
   703     0031                     	ds	5
   704     0036                     ??_sprintf:
   705                           
   706                           ; 1 bytes @ 0x16
   707     0036                     	ds	1
   708     0037                     sprintf@ap:
   709                           
   710                           ; 1 bytes @ 0x17
   711     0037                     	ds	1
   712     0038                     sprintf@f:
   713                           
   714                           ; 11 bytes @ 0x18
   715     0038                     	ds	11
   716     0043                     ?_main:
   717     0043                     main@argc:	
   718                           ; 2 bytes @ 0x23
   719                           
   720                           
   721                           ; 2 bytes @ 0x23
   722     0043                     	ds	2
   723     0045                     main@argv:
   724                           
   725                           ; 2 bytes @ 0x25
   726     0045                     	ds	2
   727     0047                     ??_main:
   728                           
   729                           ; 1 bytes @ 0x27
   730     0047                     	ds	2
   731     0049                     main@buffer1:
   732                           
   733                           ; 10 bytes @ 0x29
   734     0049                     	ds	10
   735     0053                     main@buffer2:
   736                           
   737                           ; 10 bytes @ 0x33
   738     0053                     	ds	10
   739     005D                     main@adc_result1:
   740                           
   741                           ; 2 bytes @ 0x3D
   742     005D                     	ds	2
   743     005F                     main@ent1:
   744                           
   745                           ; 2 bytes @ 0x3F
   746     005F                     	ds	2
   747     0061                     main@dec1:
   748                           
   749                           ; 2 bytes @ 0x41
   750     0061                     	ds	2
   751     0063                     main@adc_result2:
   752                           
   753                           ; 2 bytes @ 0x43
   754     0063                     	ds	2
   755     0065                     main@ent2:
   756                           
   757                           ; 2 bytes @ 0x45
   758     0065                     	ds	2
   759     0067                     main@dec2:
   760                           
   761                           ; 2 bytes @ 0x47
   762     0067                     	ds	2
   763     0069                     main@volt1:
   764                           
   765                           ; 2 bytes @ 0x49
   766     0069                     	ds	2
   767     006B                     main@volt2:
   768                           
   769                           ; 2 bytes @ 0x4B
   770     006B                     	ds	2
   771                           
   772                           	psect	maintext
   773     065E                     __pmaintext:	
   774 ;;
   775 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   776 ;;
   777 ;; *************** function _main *****************
   778 ;; Defined at:
   779 ;;		line 38 in file "main.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  argc            2   35[BANK0 ] int 
   782 ;;  argv            2   37[BANK0 ] PTR PTR unsigned char 
   783 ;; Auto vars:     Size  Location     Type
   784 ;;  volt2           2   75[BANK0 ] unsigned int 
   785 ;;  volt1           2   73[BANK0 ] unsigned int 
   786 ;;  dec2            2   71[BANK0 ] unsigned int 
   787 ;;  ent2            2   69[BANK0 ] unsigned int 
   788 ;;  adc_result2     2   67[BANK0 ] unsigned int 
   789 ;;  dec1            2   65[BANK0 ] unsigned int 
   790 ;;  ent1            2   63[BANK0 ] unsigned int 
   791 ;;  adc_result1     2   61[BANK0 ] unsigned int 
   792 ;;  buffer2        10   51[BANK0 ] unsigned char [10]
   793 ;;  buffer1        10   41[BANK0 ] unsigned char [10]
   794 ;; Return value:  Size  Location     Type
   795 ;;                  2   35[BANK0 ] int 
   796 ;; Registers used:
   797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   798 ;; Tracked objects:
   799 ;;		On entry : B00/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   803 ;;      Params:         0       4       0       0       0
   804 ;;      Locals:         0      36       0       0       0
   805 ;;      Temps:          0       2       0       0       0
   806 ;;      Totals:         0      42       0       0       0
   807 ;;Total ram usage:       42 bytes
   808 ;; Hardware stack levels required when called: 5
   809 ;; This function calls:
   810 ;;		_ADC_init
   811 ;;		_ADC_read
   812 ;;		_LCD_Init
   813 ;;		_LCD_Write
   814 ;;		_LCD_putrs
   815 ;;		___aldiv
   816 ;;		___lmul
   817 ;;		___lwdiv
   818 ;;		___lwmod
   819 ;;		_sprintf
   820 ;; This function is called by:
   821 ;;		Startup code after reset
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825     065E                     _main:	
   826                           ;psect for function _main
   827                           
   828     065E                     l1498:	
   829                           ;incstack = 0
   830                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   831                           
   832                           
   833                           ;main.c: 38:         sprintf(buffer1, "%u.%u",ent1,dec1);;main.c: 39:         LCD_putrs(
      +                          buffer1);;main.c: 40: ;main.c: 41:         do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 
      +                          0 & 0xF0) >> 4 ); LCD_Write( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do 
      +                          { LCD_Write( (0xC0 + 0 & 0xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } els
      +                          e if ( 1 == 2 ) { do { LCD_Write( (0x94 + 0 & 0xF0) >> 4 ); LCD_Write( 0x94 + 0 & 0x0F);
      +                           } while ( 0 ); } else if ( 1 == 3 ) { do { LCD_Write( (0xD4 + 0 & 0xF0) >> 4 ); LCD_Wri
      +                          te( 0xD4 + 0 & 0x0F); } while ( 0 ); } } while ( 0 );
   834     065E  120A  118A  209A  120A  118A  	fcall	_ADC_init
   835     0663                     l1500:
   836                           
   837                           ;main.c: 42:         LCD_putrs("Voltaje 2: ");
   838     0663  3076               	movlw	LCD_Init@display& (0+255)
   839     0664  0084               	movwf	4
   840     0665  1683               	bsf	3,5	;RP0=1, select bank1
   841     0666  1303               	bcf	3,6	;RP1=0, select bank1
   842     0667  0842               	movf	_lcd^(0+128),w
   843     0668  0080               	movwf	0
   844     0669  0A84               	incf	4,f
   845     066A  0843               	movf	(_lcd^(0+128)+1),w
   846     066B  0080               	movwf	0
   847     066C  0A84               	incf	4,f
   848     066D  0844               	movf	(_lcd^(0+128)+2),w
   849     066E  0080               	movwf	0
   850     066F  0A84               	incf	4,f
   851     0670  0845               	movf	(_lcd^(0+128)+3),w
   852     0671  0080               	movwf	0
   853     0672  0A84               	incf	4,f
   854     0673  0846               	movf	(_lcd^(0+128)+4),w
   855     0674  0080               	movwf	0
   856     0675  120A  118A  2436  120A  118A  	fcall	_LCD_Init
   857     067A                     l1502:
   858     067A  3000               	movlw	0
   859     067B  120A  118A  221C  120A  118A  	fcall	_LCD_Write
   860     0680                     l1504:
   861     0680  3001               	movlw	1
   862     0681  120A  118A  221C  120A  118A  	fcall	_LCD_Write
   863     0686                     l1506:
   864     0686  3008               	movlw	8
   865     0687  120A  118A  221C  120A  118A  	fcall	_LCD_Write
   866     068C                     l1508:
   867     068C  3000               	movlw	0
   868     068D  120A  118A  221C  120A  118A  	fcall	_LCD_Write
   869     0692                     l1516:
   870                           
   871                           ;main.c: 47:         unsigned int dec2 = volt2 % 10000;
   872     0692  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   873     0693  00F6               	movwf	LCD_putrs@a
   874     0694  3080               	movlw	128
   875     0695  00F7               	movwf	LCD_putrs@a+1
   876     0696  120A  118A  2152  120A  118A  	fcall	_LCD_putrs
   877     069B                     l1518:
   878     069B  3008               	movlw	8
   879     069C  120A  118A  221C  120A  118A  	fcall	_LCD_Write
   880     06A1                     l1520:
   881     06A1  300B               	movlw	11
   882     06A2  120A  118A  221C  120A  118A  	fcall	_LCD_Write
   883     06A7                     l1528:
   884                           
   885                           ;main.c: 50: 
   886     06A7  3000               	movlw	0
   887     06A8  120A  118A  20F0  120A  118A  	fcall	_ADC_read
   888     06AD  0871               	movf	?_ADC_read+1,w
   889     06AE  1283               	bcf	3,5	;RP0=0, select bank0
   890     06AF  1303               	bcf	3,6	;RP1=0, select bank0
   891     06B0  00DE               	movwf	main@adc_result1+1
   892     06B1  0870               	movf	?_ADC_read,w
   893     06B2  00DD               	movwf	main@adc_result1
   894     06B3                     l1530:
   895                           
   896                           ;main.c: 51:         _delay((unsigned long)((100)*(4000000/4000.0)));
   897     06B3  3000               	movlw	0
   898     06B4  00A3               	movwf	___aldiv@divisor+3
   899     06B5  3000               	movlw	0
   900     06B6  00A2               	movwf	___aldiv@divisor+2
   901     06B7  3003               	movlw	3
   902     06B8  00A1               	movwf	___aldiv@divisor+1
   903     06B9  30FF               	movlw	255
   904     06BA  00A0               	movwf	___aldiv@divisor
   905     06BB  085D               	movf	main@adc_result1,w
   906     06BC  00F0               	movwf	___lmul@multiplier
   907     06BD  085E               	movf	main@adc_result1+1,w
   908     06BE  00F1               	movwf	___lmul@multiplier+1
   909     06BF  01F2               	clrf	___lmul@multiplier+2
   910     06C0  01F3               	clrf	___lmul@multiplier+3
   911     06C1  3000               	movlw	0
   912     06C2  00F7               	movwf	___lmul@multiplicand+3
   913     06C3  3000               	movlw	0
   914     06C4  00F6               	movwf	___lmul@multiplicand+2
   915     06C5  30C3               	movlw	195
   916     06C6  00F5               	movwf	___lmul@multiplicand+1
   917     06C7  3050               	movlw	80
   918     06C8  00F4               	movwf	___lmul@multiplicand
   919     06C9  120A  118A  21D6  120A  118A  	fcall	___lmul
   920     06CE  0873               	movf	?___lmul+3,w
   921     06CF  1283               	bcf	3,5	;RP0=0, select bank0
   922     06D0  1303               	bcf	3,6	;RP1=0, select bank0
   923     06D1  00A7               	movwf	___aldiv@dividend+3
   924     06D2  0872               	movf	?___lmul+2,w
   925     06D3  00A6               	movwf	___aldiv@dividend+2
   926     06D4  0871               	movf	?___lmul+1,w
   927     06D5  00A5               	movwf	___aldiv@dividend+1
   928     06D6  0870               	movf	?___lmul,w
   929     06D7  00A4               	movwf	___aldiv@dividend
   930     06D8  120A  118A  2303  120A  118A  	fcall	___aldiv
   931     06DD  1283               	bcf	3,5	;RP0=0, select bank0
   932     06DE  1303               	bcf	3,6	;RP1=0, select bank0
   933     06DF  0821               	movf	?___aldiv+1,w
   934     06E0  00EA               	movwf	main@volt1+1
   935     06E1  0820               	movf	?___aldiv,w
   936     06E2  00E9               	movwf	main@volt1
   937     06E3                     l1532:
   938                           
   939                           ;main.c: 52:     }
   940     06E3  3010               	movlw	16
   941     06E4  00F0               	movwf	___lwdiv@divisor
   942     06E5  3027               	movlw	39
   943     06E6  00F1               	movwf	___lwdiv@divisor+1
   944     06E7  086A               	movf	main@volt1+1,w
   945     06E8  00F3               	movwf	___lwdiv@dividend+1
   946     06E9  0869               	movf	main@volt1,w
   947     06EA  00F2               	movwf	___lwdiv@dividend
   948     06EB  120A  118A  2194  120A  118A  	fcall	___lwdiv
   949     06F0  0871               	movf	?___lwdiv+1,w
   950     06F1  1283               	bcf	3,5	;RP0=0, select bank0
   951     06F2  1303               	bcf	3,6	;RP1=0, select bank0
   952     06F3  00E0               	movwf	main@ent1+1
   953     06F4  0870               	movf	?___lwdiv,w
   954     06F5  00DF               	movwf	main@ent1
   955     06F6                     l1534:
   956                           
   957                           ;main.c: 53:     return (0);
   958     06F6  3010               	movlw	16
   959     06F7  00F0               	movwf	___lwmod@divisor
   960     06F8  3027               	movlw	39
   961     06F9  00F1               	movwf	___lwmod@divisor+1
   962     06FA  086A               	movf	main@volt1+1,w
   963     06FB  00F3               	movwf	___lwmod@dividend+1
   964     06FC  0869               	movf	main@volt1,w
   965     06FD  00F2               	movwf	___lwmod@dividend
   966     06FE  120A  118A  211A  120A  118A  	fcall	___lwmod
   967     0703  0871               	movf	?___lwmod+1,w
   968     0704  1283               	bcf	3,5	;RP0=0, select bank0
   969     0705  1303               	bcf	3,6	;RP1=0, select bank0
   970     0706  00E2               	movwf	main@dec1+1
   971     0707  0870               	movf	?___lwmod,w
   972     0708  00E1               	movwf	main@dec1
   973     0709                     l1536:
   974                           
   975                           ;main.c: 54: }
   976     0709  3049               	movlw	(low (main@buffer1| 0))& (0+255)
   977     070A  00B0               	movwf	sprintf@s
   978     070B  3019               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   979     070C  00B1               	movwf	sprintf@fmt
   980     070D  0860               	movf	main@ent1+1,w
   981     070E  00B3               	movwf	?_sprintf+3
   982     070F  085F               	movf	main@ent1,w
   983     0710  00B2               	movwf	?_sprintf+2
   984     0711  0862               	movf	main@dec1+1,w
   985     0712  00B5               	movwf	?_sprintf+5
   986     0713  0861               	movf	main@dec1,w
   987     0714  00B4               	movwf	?_sprintf+4
   988     0715  120A  118A  20A8  120A  118A  	fcall	_sprintf
   989     071A                     l1538:
   990     071A  3049               	movlw	(low (main@buffer1| 0))& (0+255)
   991     071B  00F6               	movwf	LCD_putrs@a
   992     071C  3000               	movlw	0
   993     071D  00F7               	movwf	LCD_putrs@a+1
   994     071E  120A  118A  2152  120A  118A  	fcall	_LCD_putrs
   995     0723                     l1542:
   996     0723  300C               	movlw	12
   997     0724  120A  118A  221C  120A  118A  	fcall	_LCD_Write
   998     0729  3000               	movlw	0
   999     072A  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  1000     072F                     l1548:
  1001     072F  300D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1002     0730  00F6               	movwf	LCD_putrs@a
  1003     0731  3080               	movlw	128
  1004     0732  00F7               	movwf	LCD_putrs@a+1
  1005     0733  120A  118A  2152  120A  118A  	fcall	_LCD_putrs
  1006     0738                     l1552:
  1007     0738  300C               	movlw	12
  1008     0739  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  1009     073E  300B               	movlw	11
  1010     073F  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  1011     0744                     l1558:
  1012     0744  3001               	movlw	1
  1013     0745  120A  118A  20F0  120A  118A  	fcall	_ADC_read
  1014     074A  0871               	movf	?_ADC_read+1,w
  1015     074B  1283               	bcf	3,5	;RP0=0, select bank0
  1016     074C  1303               	bcf	3,6	;RP1=0, select bank0
  1017     074D  00E4               	movwf	main@adc_result2+1
  1018     074E  0870               	movf	?_ADC_read,w
  1019     074F  00E3               	movwf	main@adc_result2
  1020     0750                     l1560:
  1021     0750  3000               	movlw	0
  1022     0751  00A3               	movwf	___aldiv@divisor+3
  1023     0752  3000               	movlw	0
  1024     0753  00A2               	movwf	___aldiv@divisor+2
  1025     0754  3003               	movlw	3
  1026     0755  00A1               	movwf	___aldiv@divisor+1
  1027     0756  30FF               	movlw	255
  1028     0757  00A0               	movwf	___aldiv@divisor
  1029     0758  0863               	movf	main@adc_result2,w
  1030     0759  00F0               	movwf	___lmul@multiplier
  1031     075A  0864               	movf	main@adc_result2+1,w
  1032     075B  00F1               	movwf	___lmul@multiplier+1
  1033     075C  01F2               	clrf	___lmul@multiplier+2
  1034     075D  01F3               	clrf	___lmul@multiplier+3
  1035     075E  3000               	movlw	0
  1036     075F  00F7               	movwf	___lmul@multiplicand+3
  1037     0760  3000               	movlw	0
  1038     0761  00F6               	movwf	___lmul@multiplicand+2
  1039     0762  30C3               	movlw	195
  1040     0763  00F5               	movwf	___lmul@multiplicand+1
  1041     0764  3050               	movlw	80
  1042     0765  00F4               	movwf	___lmul@multiplicand
  1043     0766  120A  118A  21D6  120A  118A  	fcall	___lmul
  1044     076B  0873               	movf	?___lmul+3,w
  1045     076C  1283               	bcf	3,5	;RP0=0, select bank0
  1046     076D  1303               	bcf	3,6	;RP1=0, select bank0
  1047     076E  00A7               	movwf	___aldiv@dividend+3
  1048     076F  0872               	movf	?___lmul+2,w
  1049     0770  00A6               	movwf	___aldiv@dividend+2
  1050     0771  0871               	movf	?___lmul+1,w
  1051     0772  00A5               	movwf	___aldiv@dividend+1
  1052     0773  0870               	movf	?___lmul,w
  1053     0774  00A4               	movwf	___aldiv@dividend
  1054     0775  120A  118A  2303  120A  118A  	fcall	___aldiv
  1055     077A  1283               	bcf	3,5	;RP0=0, select bank0
  1056     077B  1303               	bcf	3,6	;RP1=0, select bank0
  1057     077C  0821               	movf	?___aldiv+1,w
  1058     077D  00EC               	movwf	main@volt2+1
  1059     077E  0820               	movf	?___aldiv,w
  1060     077F  00EB               	movwf	main@volt2
  1061     0780                     l1562:
  1062     0780  3010               	movlw	16
  1063     0781  00F0               	movwf	___lwdiv@divisor
  1064     0782  3027               	movlw	39
  1065     0783  00F1               	movwf	___lwdiv@divisor+1
  1066     0784  086C               	movf	main@volt2+1,w
  1067     0785  00F3               	movwf	___lwdiv@dividend+1
  1068     0786  086B               	movf	main@volt2,w
  1069     0787  00F2               	movwf	___lwdiv@dividend
  1070     0788  120A  118A  2194  120A  118A  	fcall	___lwdiv
  1071     078D  0871               	movf	?___lwdiv+1,w
  1072     078E  1283               	bcf	3,5	;RP0=0, select bank0
  1073     078F  1303               	bcf	3,6	;RP1=0, select bank0
  1074     0790  00E6               	movwf	main@ent2+1
  1075     0791  0870               	movf	?___lwdiv,w
  1076     0792  00E5               	movwf	main@ent2
  1077     0793                     l1564:
  1078     0793  3010               	movlw	16
  1079     0794  00F0               	movwf	___lwmod@divisor
  1080     0795  3027               	movlw	39
  1081     0796  00F1               	movwf	___lwmod@divisor+1
  1082     0797  086C               	movf	main@volt2+1,w
  1083     0798  00F3               	movwf	___lwmod@dividend+1
  1084     0799  086B               	movf	main@volt2,w
  1085     079A  00F2               	movwf	___lwmod@dividend
  1086     079B  120A  118A  211A  120A  118A  	fcall	___lwmod
  1087     07A0  0871               	movf	?___lwmod+1,w
  1088     07A1  1283               	bcf	3,5	;RP0=0, select bank0
  1089     07A2  1303               	bcf	3,6	;RP1=0, select bank0
  1090     07A3  00E8               	movwf	main@dec2+1
  1091     07A4  0870               	movf	?___lwmod,w
  1092     07A5  00E7               	movwf	main@dec2
  1093     07A6                     l1566:
  1094     07A6  3053               	movlw	(low (main@buffer2| 0))& (0+255)
  1095     07A7  00B0               	movwf	sprintf@s
  1096     07A8  3019               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1097     07A9  00B1               	movwf	sprintf@fmt
  1098     07AA  0866               	movf	main@ent2+1,w
  1099     07AB  00B3               	movwf	?_sprintf+3
  1100     07AC  0865               	movf	main@ent2,w
  1101     07AD  00B2               	movwf	?_sprintf+2
  1102     07AE  0868               	movf	main@dec2+1,w
  1103     07AF  00B5               	movwf	?_sprintf+5
  1104     07B0  0867               	movf	main@dec2,w
  1105     07B1  00B4               	movwf	?_sprintf+4
  1106     07B2  120A  118A  20A8  120A  118A  	fcall	_sprintf
  1107     07B7                     l1568:
  1108     07B7  3053               	movlw	(low (main@buffer2| 0))& (0+255)
  1109     07B8  00F6               	movwf	LCD_putrs@a
  1110     07B9  3000               	movlw	0
  1111     07BA  00F7               	movwf	LCD_putrs@a+1
  1112     07BB  120A  118A  2152  120A  118A  	fcall	_LCD_putrs
  1113     07C0                     l1570:
  1114     07C0  3082               	movlw	130
  1115     07C1  1283               	bcf	3,5	;RP0=0, select bank0
  1116     07C2  1303               	bcf	3,6	;RP1=0, select bank0
  1117     07C3  00C8               	movwf	??_main+1
  1118     07C4  30DD               	movlw	221
  1119     07C5  00C7               	movwf	??_main
  1120     07C6                     u1417:
  1121     07C6  0BC7               	decfsz	??_main,f
  1122     07C7  2FC6               	goto	u1417
  1123     07C8  0BC8               	decfsz	??_main+1,f
  1124     07C9  2FC6               	goto	u1417
  1125     07CA  2E7A               	goto	l1502
  1126     07CB  120A  118A  2800   	ljmp	start
  1127     07CE                     __end_of_main:
  1128                           
  1129                           	psect	text1
  1130     00A8                     __ptext1:	
  1131 ;; *************** function _sprintf *****************
  1132 ;; Defined at:
  1133 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;  s               1   16[BANK0 ] PTR unsigned char 
  1136 ;;		 -> main@buffer2(10), main@buffer1(10), 
  1137 ;;  fmt             1   17[BANK0 ] PTR const unsigned char 
  1138 ;;		 -> STR_4(6), STR_2(6), 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  f              11   24[BANK0 ] struct _IO_FILE
  1141 ;;  ret             2    0        int 
  1142 ;;  ap              1   23[BANK0 ] PTR void [1]
  1143 ;;		 -> ?_sprintf(2), 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  2   16[BANK0 ] int 
  1146 ;; Registers used:
  1147 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1153 ;;      Params:         0       6       0       0       0
  1154 ;;      Locals:         0      12       0       0       0
  1155 ;;      Temps:          0       1       0       0       0
  1156 ;;      Totals:         0      19       0       0       0
  1157 ;;Total ram usage:       19 bytes
  1158 ;; Hardware stack levels used: 1
  1159 ;; Hardware stack levels required when called: 4
  1160 ;; This function calls:
  1161 ;;		_vfprintf
  1162 ;; This function is called by:
  1163 ;;		_main
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167     00A8                     _sprintf:	
  1168                           ;psect for function _sprintf
  1169                           
  1170     00A8                     l1430:	
  1171                           ;incstack = 0
  1172                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1173                           
  1174     00A8  3032               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1175     00A9  1283               	bcf	3,5	;RP0=0, select bank0
  1176     00AA  1303               	bcf	3,6	;RP1=0, select bank0
  1177     00AB  00B7               	movwf	sprintf@ap
  1178     00AC                     l1432:
  1179     00AC  0830               	movf	sprintf@s,w
  1180     00AD  00B8               	movwf	sprintf@f
  1181     00AE  3000               	movlw	0
  1182     00AF  00B9               	movwf	sprintf@f+1
  1183     00B0                     l1434:
  1184     00B0  01BA               	clrf	sprintf@f+2
  1185     00B1  01BB               	clrf	sprintf@f+3
  1186     00B2                     l1436:
  1187     00B2  01C1               	clrf	sprintf@f+9
  1188     00B3  01C2               	clrf	sprintf@f+10
  1189     00B4                     l1438:
  1190     00B4  3038               	movlw	low sprintf@f
  1191     00B5  00AC               	movwf	vfprintf@fp
  1192     00B6  3000               	movlw	high sprintf@f
  1193     00B7  00AD               	movwf	vfprintf@fp+1
  1194     00B8  0831               	movf	sprintf@fmt,w
  1195     00B9  00AE               	movwf	vfprintf@fmt
  1196     00BA  3037               	movlw	(low (sprintf@ap| 0))& (0+255)
  1197     00BB  00AF               	movwf	vfprintf@ap
  1198     00BC  120A  118A  20CB  120A  118A  	fcall	_vfprintf
  1199     00C1                     l1440:
  1200     00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1201     00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1202     00C3  083A               	movf	sprintf@f+2,w
  1203     00C4  0730               	addwf	sprintf@s,w
  1204     00C5  00B6               	movwf	??_sprintf
  1205     00C6  0836               	movf	??_sprintf,w
  1206     00C7  0084               	movwf	4
  1207     00C8  1383               	bcf	3,7	;select IRP bank0
  1208     00C9  0180               	clrf	0
  1209     00CA                     l731:
  1210     00CA  0008               	return
  1211     00CB                     __end_of_sprintf:
  1212                           
  1213                           	psect	text2
  1214     00CB                     __ptext2:	
  1215 ;; *************** function _vfprintf *****************
  1216 ;; Defined at:
  1217 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  fp              2   12[BANK0 ] PTR struct _IO_FILE
  1220 ;;		 -> sprintf@f(11), 
  1221 ;;  fmt             1   14[BANK0 ] PTR const unsigned char 
  1222 ;;		 -> STR_4(6), STR_2(6), 
  1223 ;;  ap              1   15[BANK0 ] PTR PTR void 
  1224 ;;		 -> sprintf@ap(1), 
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  cfmt            1   13[COMMON] PTR unsigned char 
  1227 ;;		 -> STR_4(6), STR_2(6), 
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  2   12[BANK0 ] int 
  1230 ;; Registers used:
  1231 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1237 ;;      Params:         0       4       0       0       0
  1238 ;;      Locals:         1       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0
  1240 ;;      Totals:         1       4       0       0       0
  1241 ;;Total ram usage:        5 bytes
  1242 ;; Hardware stack levels used: 1
  1243 ;; Hardware stack levels required when called: 3
  1244 ;; This function calls:
  1245 ;;		_vfpfcnvrt
  1246 ;; This function is called by:
  1247 ;;		_sprintf
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251     00CB                     _vfprintf:	
  1252                           ;psect for function _vfprintf
  1253                           
  1254     00CB                     l1346:	
  1255                           ;incstack = 0
  1256                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1257                           
  1258                           
  1259                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1260     00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1261     00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1262     00CD  082E               	movf	vfprintf@fmt,w
  1263     00CE  00FD               	movwf	vfprintf@cfmt
  1264                           
  1265                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1266     00CF  28DF               	goto	l1350
  1267     00D0                     l1348:
  1268                           
  1269                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1270     00D0  1283               	bcf	3,5	;RP0=0, select bank0
  1271     00D1  1303               	bcf	3,6	;RP1=0, select bank0
  1272     00D2  082C               	movf	vfprintf@fp,w
  1273     00D3  00A0               	movwf	vfpfcnvrt@fp
  1274     00D4  082D               	movf	vfprintf@fp+1,w
  1275     00D5  00A1               	movwf	vfpfcnvrt@fp+1
  1276     00D6  307D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1277     00D7  00A2               	movwf	vfpfcnvrt@fmt
  1278     00D8  082F               	movf	vfprintf@ap,w
  1279     00D9  00A3               	movwf	vfpfcnvrt@ap
  1280     00DA  120A  118A  2596  120A  118A  	fcall	_vfpfcnvrt
  1281     00DF                     l1350:
  1282                           
  1283                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1284     00DF  087D               	movf	vfprintf@cfmt,w
  1285     00E0  0084               	movwf	4
  1286     00E1  120A  118A  200D  120A  118A  	fcall	stringdir
  1287     00E6  3A00               	xorlw	0
  1288     00E7  1D03               	skipz
  1289     00E8  28EA               	goto	u1151
  1290     00E9  28EB               	goto	u1150
  1291     00EA                     u1151:
  1292     00EA  28D0               	goto	l1348
  1293     00EB                     u1150:
  1294     00EB                     l1352:
  1295                           
  1296                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1297     00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1298     00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1299     00ED  01AC               	clrf	?_vfprintf
  1300     00EE  01AD               	clrf	?_vfprintf+1
  1301     00EF                     l775:
  1302     00EF  0008               	return
  1303     00F0                     __end_of_vfprintf:
  1304                           
  1305                           	psect	text3
  1306     0596                     __ptext3:	
  1307 ;; *************** function _vfpfcnvrt *****************
  1308 ;; Defined at:
  1309 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  1312 ;;		 -> sprintf@f(11), 
  1313 ;;  fmt             1    2[BANK0 ] PTR PTR unsigned char 
  1314 ;;		 -> vfprintf@cfmt(1), 
  1315 ;;  ap              1    3[BANK0 ] PTR PTR void 
  1316 ;;		 -> sprintf@ap(1), 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  convarg         4    6[BANK0 ] struct .
  1319 ;;  c               1   11[BANK0 ] unsigned char 
  1320 ;;  cp              1   10[BANK0 ] PTR unsigned char 
  1321 ;;		 -> STR_4(6), STR_2(6), 
  1322 ;;  done            1    0        _Bool 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1332 ;;      Params:         0       4       0       0       0
  1333 ;;      Locals:         0       6       0       0       0
  1334 ;;      Temps:          0       2       0       0       0
  1335 ;;      Totals:         0      12       0       0       0
  1336 ;;Total ram usage:       12 bytes
  1337 ;; Hardware stack levels used: 1
  1338 ;; Hardware stack levels required when called: 2
  1339 ;; This function calls:
  1340 ;;		___lwdiv
  1341 ;;		___lwmod
  1342 ;;		_fputc
  1343 ;; This function is called by:
  1344 ;;		_vfprintf
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348     0596                     _vfpfcnvrt:	
  1349                           ;psect for function _vfpfcnvrt
  1350                           
  1351     0596                     l1276:	
  1352                           ;incstack = 0
  1353                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1354                           
  1355                           
  1356                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1357     0596  1283               	bcf	3,5	;RP0=0, select bank0
  1358     0597  1303               	bcf	3,6	;RP1=0, select bank0
  1359     0598  0822               	movf	vfpfcnvrt@fmt,w
  1360     0599  0084               	movwf	4
  1361     059A  0800               	movf	0,w
  1362     059B  0084               	movwf	4
  1363     059C  120A  118A  200D  120A  118A  	fcall	stringdir
  1364     05A1  3A25               	xorlw	37
  1365     05A2  1D03               	skipz
  1366     05A3  2DA5               	goto	u1011
  1367     05A4  2DA6               	goto	u1010
  1368     05A5                     u1011:
  1369     05A5  2E44               	goto	l1314
  1370     05A6                     u1010:
  1371     05A6                     l1278:
  1372                           
  1373                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1374     05A6  0822               	movf	vfpfcnvrt@fmt,w
  1375     05A7  0084               	movwf	4
  1376     05A8  3001               	movlw	1
  1377     05A9  0780               	addwf	0,f
  1378     05AA                     l1280:
  1379                           
  1380                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1381     05AA  1683               	bsf	3,5	;RP0=1, select bank1
  1382     05AB  1303               	bcf	3,6	;RP1=0, select bank1
  1383     05AC  01C0               	clrf	_width^(0+128)
  1384     05AD  01C1               	clrf	(_width+1)^(0+128)
  1385     05AE  3000               	movlw	0
  1386     05AF  1283               	bcf	3,5	;RP0=0, select bank0
  1387     05B0  1303               	bcf	3,6	;RP1=0, select bank0
  1388     05B1  00EF               	movwf	_flags
  1389     05B2                     l1282:
  1390                           
  1391                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1392     05B2  30FF               	movlw	255
  1393     05B3  00ED               	movwf	_prec
  1394     05B4  30FF               	movlw	255
  1395     05B5  00EE               	movwf	_prec+1
  1396     05B6                     l1284:
  1397                           
  1398                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  1399     05B6  0822               	movf	vfpfcnvrt@fmt,w
  1400     05B7  0084               	movwf	4
  1401     05B8  0800               	movf	0,w
  1402     05B9  00AA               	movwf	vfpfcnvrt@cp
  1403     05BA                     l1286:
  1404     05BA  082A               	movf	vfpfcnvrt@cp,w
  1405     05BB  0084               	movwf	4
  1406     05BC  120A  118A  200D  120A  118A  	fcall	stringdir
  1407     05C1  3A75               	xorlw	117
  1408     05C2  1D03               	skipz
  1409     05C3  2DC5               	goto	u1021
  1410     05C4  2DC6               	goto	u1020
  1411     05C5                     u1021:
  1412     05C5  2E3D               	goto	l1310
  1413     05C6                     u1020:
  1414     05C6                     l1288:
  1415                           
  1416                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1417     05C6  0823               	movf	vfpfcnvrt@ap,w
  1418     05C7  0084               	movwf	4
  1419     05C8  1383               	bcf	3,7	;select IRP bank0
  1420     05C9  0800               	movf	0,w
  1421     05CA  00FF               	movwf	btemp+1
  1422     05CB  3002               	movlw	2
  1423     05CC  0780               	addwf	0,f
  1424     05CD  087F               	movf	btemp+1,w
  1425     05CE  0084               	movwf	4
  1426     05CF  0800               	movf	0,w
  1427     05D0  00A6               	movwf	vfpfcnvrt@convarg
  1428     05D1  0A84               	incf	4,f
  1429     05D2  0800               	movf	0,w
  1430     05D3  00A7               	movwf	vfpfcnvrt@convarg+1
  1431     05D4                     l1290:
  1432                           
  1433                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1434     05D4  0822               	movf	vfpfcnvrt@fmt,w
  1435     05D5  0084               	movwf	4
  1436     05D6  082A               	movf	vfpfcnvrt@cp,w
  1437     05D7  3E01               	addlw	1
  1438     05D8  0080               	movwf	0
  1439                           
  1440                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1441     05D9  2E32               	goto	l1308
  1442     05DA                     l760:	
  1443                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1523:     case 'u
      +                          ':
  1444                           
  1445                           
  1446                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  1447     05DA  3020               	movlw	32
  1448     05DB  00AB               	movwf	vfpfcnvrt@c
  1449     05DC                     l1292:
  1450                           
  1451                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  1452     05DC  3001               	movlw	1
  1453     05DD  02AB               	subwf	vfpfcnvrt@c,f
  1454     05DE  082B               	movf	vfpfcnvrt@c,w
  1455     05DF  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1456     05E0  0084               	movwf	4
  1457     05E1  300A               	movlw	10
  1458     05E2  00F0               	movwf	___lwmod@divisor
  1459     05E3  3000               	movlw	0
  1460     05E4  00F1               	movwf	___lwmod@divisor+1
  1461     05E5  0827               	movf	vfpfcnvrt@convarg+1,w
  1462     05E6  00F3               	movwf	___lwmod@dividend+1
  1463     05E7  0826               	movf	vfpfcnvrt@convarg,w
  1464     05E8  00F2               	movwf	___lwmod@dividend
  1465     05E9  120A  118A  211A  120A  118A  	fcall	___lwmod
  1466     05EE  0870               	movf	?___lwmod,w
  1467     05EF  3E30               	addlw	48
  1468     05F0  1383               	bcf	3,7	;select IRP bank1
  1469     05F1  0080               	movwf	0
  1470     05F2                     l1294:
  1471                           
  1472                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  1473     05F2  300A               	movlw	10
  1474     05F3  00F0               	movwf	___lwdiv@divisor
  1475     05F4  3000               	movlw	0
  1476     05F5  00F1               	movwf	___lwdiv@divisor+1
  1477     05F6  1283               	bcf	3,5	;RP0=0, select bank0
  1478     05F7  1303               	bcf	3,6	;RP1=0, select bank0
  1479     05F8  0827               	movf	vfpfcnvrt@convarg+1,w
  1480     05F9  00F3               	movwf	___lwdiv@dividend+1
  1481     05FA  0826               	movf	vfpfcnvrt@convarg,w
  1482     05FB  00F2               	movwf	___lwdiv@dividend
  1483     05FC  120A  118A  2194  120A  118A  	fcall	___lwdiv
  1484     0601  0871               	movf	?___lwdiv+1,w
  1485     0602  1283               	bcf	3,5	;RP0=0, select bank0
  1486     0603  1303               	bcf	3,6	;RP1=0, select bank0
  1487     0604  00A7               	movwf	vfpfcnvrt@convarg+1
  1488     0605  0870               	movf	?___lwdiv,w
  1489     0606  00A6               	movwf	vfpfcnvrt@convarg
  1490     0607                     l1296:
  1491                           
  1492                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  1493     0607  0826               	movf	vfpfcnvrt@convarg,w
  1494     0608  0427               	iorwf	vfpfcnvrt@convarg+1,w
  1495     0609  1903               	btfsc	3,2
  1496     060A  2E0C               	goto	u1031
  1497     060B  2E0D               	goto	u1030
  1498     060C                     u1031:
  1499     060C  2E2B               	goto	l1304
  1500     060D                     u1030:
  1501     060D                     l1298:
  1502     060D  082B               	movf	vfpfcnvrt@c,w
  1503     060E  1D03               	btfss	3,2
  1504     060F  2E11               	goto	u1041
  1505     0610  2E12               	goto	u1040
  1506     0611                     u1041:
  1507     0611  2DDC               	goto	l1292
  1508     0612                     u1040:
  1509     0612  2E2B               	goto	l1304
  1510     0613                     l1300:
  1511                           
  1512                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  1513     0613  082B               	movf	vfpfcnvrt@c,w
  1514     0614  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1515     0615  0084               	movwf	4
  1516     0616  1383               	bcf	3,7	;select IRP bank1
  1517     0617  0800               	movf	0,w
  1518     0618  00A4               	movwf	??_vfpfcnvrt
  1519     0619  01A5               	clrf	??_vfpfcnvrt+1
  1520     061A  0824               	movf	??_vfpfcnvrt,w
  1521     061B  00F0               	movwf	fputc@c
  1522     061C  0825               	movf	??_vfpfcnvrt+1,w
  1523     061D  00F1               	movwf	fputc@c+1
  1524     061E  0820               	movf	vfpfcnvrt@fp,w
  1525     061F  00F2               	movwf	fputc@fp
  1526     0620  0821               	movf	vfpfcnvrt@fp+1,w
  1527     0621  00F3               	movwf	fputc@fp+1
  1528     0622  120A  118A  239C  120A  118A  	fcall	_fputc
  1529     0627                     l1302:
  1530     0627  3001               	movlw	1
  1531     0628  1283               	bcf	3,5	;RP0=0, select bank0
  1532     0629  1303               	bcf	3,6	;RP1=0, select bank0
  1533     062A  07AB               	addwf	vfpfcnvrt@c,f
  1534     062B                     l1304:
  1535                           
  1536                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  1537     062B  3020               	movlw	32
  1538     062C  062B               	xorwf	vfpfcnvrt@c,w
  1539     062D  1D03               	btfss	3,2
  1540     062E  2E30               	goto	u1051
  1541     062F  2E31               	goto	u1050
  1542     0630                     u1051:
  1543     0630  2E13               	goto	l1300
  1544     0631                     u1050:
  1545     0631  2E5D               	goto	l768
  1546     0632                     l1308:
  1547     0632  082A               	movf	vfpfcnvrt@cp,w
  1548     0633  0084               	movwf	4
  1549     0634  120A  118A  200D  120A  118A  	fcall	stringdir
  1550                           
  1551                           ; Switch size 1, requested type "simple"
  1552                           ; Number of cases is 1, Range of values is 117 to 117
  1553                           ; switch strategies available:
  1554                           ; Name         Instructions Cycles
  1555                           ; simple_byte            4     3 (average)
  1556                           ; direct_byte           14    11 (fixed)
  1557                           ; jumptable            263     9 (fixed)
  1558                           ;	Chosen strategy is simple_byte
  1559     0639  3A75               	xorlw	117	; case 117
  1560     063A  1903               	skipnz
  1561     063B  2DDA               	goto	l760
  1562     063C  2E3D               	goto	l1310
  1563     063D                     l1310:
  1564                           
  1565                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1566     063D  1283               	bcf	3,5	;RP0=0, select bank0
  1567     063E  1303               	bcf	3,6	;RP1=0, select bank0
  1568     063F  0822               	movf	vfpfcnvrt@fmt,w
  1569     0640  0084               	movwf	4
  1570     0641  3001               	movlw	1
  1571     0642  0780               	addwf	0,f
  1572     0643  2E5D               	goto	l768
  1573     0644                     l1314:
  1574                           
  1575                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1576     0644  0822               	movf	vfpfcnvrt@fmt,w
  1577     0645  0084               	movwf	4
  1578     0646  0800               	movf	0,w
  1579     0647  0084               	movwf	4
  1580     0648  120A  118A  200D  120A  118A  	fcall	stringdir
  1581     064D  00A4               	movwf	??_vfpfcnvrt
  1582     064E  01A5               	clrf	??_vfpfcnvrt+1
  1583     064F  0824               	movf	??_vfpfcnvrt,w
  1584     0650  00F0               	movwf	fputc@c
  1585     0651  0825               	movf	??_vfpfcnvrt+1,w
  1586     0652  00F1               	movwf	fputc@c+1
  1587     0653  0820               	movf	vfpfcnvrt@fp,w
  1588     0654  00F2               	movwf	fputc@fp
  1589     0655  0821               	movf	vfpfcnvrt@fp+1,w
  1590     0656  00F3               	movwf	fputc@fp+1
  1591     0657  120A  118A  239C  120A  118A  	fcall	_fputc
  1592     065C  2E3D               	goto	l1310
  1593     065D                     l768:
  1594     065D  0008               	return
  1595     065E                     __end_of_vfpfcnvrt:
  1596                           
  1597                           	psect	text4
  1598     039C                     __ptext4:	
  1599 ;; *************** function _fputc *****************
  1600 ;; Defined at:
  1601 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  c               2    0[COMMON] int 
  1604 ;;  fp              2    2[COMMON] PTR struct _IO_FILE
  1605 ;;		 -> sprintf@f(11), 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  2    0[COMMON] int 
  1610 ;; Registers used:
  1611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1617 ;;      Params:         4       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0
  1619 ;;      Temps:          9       0       0       0       0
  1620 ;;      Totals:        13       0       0       0       0
  1621 ;;Total ram usage:       13 bytes
  1622 ;; Hardware stack levels used: 1
  1623 ;; Hardware stack levels required when called: 1
  1624 ;; This function calls:
  1625 ;;		_putch
  1626 ;; This function is called by:
  1627 ;;		_vfpfcnvrt
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631     039C                     _fputc:	
  1632                           ;psect for function _fputc
  1633                           
  1634     039C                     l1238:	
  1635                           ;incstack = 0
  1636                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1637                           
  1638     039C  0872               	movf	fputc@fp,w
  1639     039D  0473               	iorwf	fputc@fp+1,w
  1640     039E  1903               	btfsc	3,2
  1641     039F  2BA1               	goto	u841
  1642     03A0  2BA2               	goto	u840
  1643     03A1                     u841:
  1644     03A1  2BA8               	goto	l1242
  1645     03A2                     u840:
  1646     03A2                     l1240:
  1647     03A2  0872               	movf	fputc@fp,w
  1648     03A3  0473               	iorwf	fputc@fp+1,w
  1649     03A4  1D03               	btfss	3,2
  1650     03A5  2BA7               	goto	u851
  1651     03A6  2BA8               	goto	u850
  1652     03A7                     u851:
  1653     03A7  2BAF               	goto	l1244
  1654     03A8                     u850:
  1655     03A8                     l1242:
  1656     03A8  0870               	movf	fputc@c,w
  1657     03A9  120A  118A  208C  120A  118A  	fcall	_putch
  1658     03AE  2C35               	goto	l787
  1659     03AF                     l1244:
  1660     03AF  0872               	movf	fputc@fp,w
  1661     03B0  3E09               	addlw	9
  1662     03B1  00F4               	movwf	??_fputc
  1663     03B2  0873               	movf	fputc@fp+1,w
  1664     03B3  1803               	skipnc
  1665     03B4  3E01               	addlw	1
  1666     03B5  3E00               	addlw	0
  1667     03B6  00F5               	movwf	??_fputc+1
  1668     03B7  0874               	movf	??_fputc,w
  1669     03B8  0084               	movwf	4
  1670     03B9  1783               	bsf	3,7
  1671     03BA  1C75               	btfss	??_fputc+1,0
  1672     03BB  1383               	bcf	3,7
  1673     03BC  0800               	movf	0,w
  1674     03BD  00F6               	movwf	??_fputc+2
  1675     03BE  0A84               	incf	4,f
  1676     03BF  0800               	movf	0,w
  1677     03C0  00F7               	movwf	??_fputc+3
  1678     03C1  0876               	movf	??_fputc+2,w
  1679     03C2  0477               	iorwf	??_fputc+3,w
  1680     03C3  1903               	btfsc	3,2
  1681     03C4  2BC6               	goto	u861
  1682     03C5  2BC7               	goto	u860
  1683     03C6                     u861:
  1684     03C6  2BF9               	goto	l1248
  1685     03C7                     u860:
  1686     03C7                     l1246:
  1687     03C7  0872               	movf	fputc@fp,w
  1688     03C8  3E09               	addlw	9
  1689     03C9  00F4               	movwf	??_fputc
  1690     03CA  0873               	movf	fputc@fp+1,w
  1691     03CB  1803               	skipnc
  1692     03CC  3E01               	addlw	1
  1693     03CD  3E00               	addlw	0
  1694     03CE  00F5               	movwf	??_fputc+1
  1695     03CF  0874               	movf	??_fputc,w
  1696     03D0  0084               	movwf	4
  1697     03D1  1783               	bsf	3,7
  1698     03D2  1C75               	btfss	??_fputc+1,0
  1699     03D3  1383               	bcf	3,7
  1700     03D4  0800               	movf	0,w
  1701     03D5  00F6               	movwf	??_fputc+2
  1702     03D6  0A84               	incf	4,f
  1703     03D7  0800               	movf	0,w
  1704     03D8  00F7               	movwf	??_fputc+3
  1705     03D9  0872               	movf	fputc@fp,w
  1706     03DA  3E02               	addlw	2
  1707     03DB  00F8               	movwf	??_fputc+4
  1708     03DC  0873               	movf	fputc@fp+1,w
  1709     03DD  1803               	skipnc
  1710     03DE  3E01               	addlw	1
  1711     03DF  3E00               	addlw	0
  1712     03E0  00F9               	movwf	??_fputc+5
  1713     03E1  0878               	movf	??_fputc+4,w
  1714     03E2  0084               	movwf	4
  1715     03E3  1783               	bsf	3,7
  1716     03E4  1C79               	btfss	??_fputc+5,0
  1717     03E5  1383               	bcf	3,7
  1718     03E6  0800               	movf	0,w
  1719     03E7  00FA               	movwf	??_fputc+6
  1720     03E8  0A84               	incf	4,f
  1721     03E9  0800               	movf	0,w
  1722     03EA  00FB               	movwf	??_fputc+7
  1723     03EB  087B               	movf	??_fputc+7,w
  1724     03EC  3A80               	xorlw	128
  1725     03ED  00FC               	movwf	??_fputc+8
  1726     03EE  0877               	movf	??_fputc+3,w
  1727     03EF  3A80               	xorlw	128
  1728     03F0  027C               	subwf	??_fputc+8,w
  1729     03F1  1D03               	skipz
  1730     03F2  2BF5               	goto	u875
  1731     03F3  0876               	movf	??_fputc+2,w
  1732     03F4  027A               	subwf	??_fputc+6,w
  1733     03F5                     u875:
  1734     03F5  1803               	skipnc
  1735     03F6  2BF8               	goto	u871
  1736     03F7  2BF9               	goto	u870
  1737     03F8                     u871:
  1738     03F8  2C35               	goto	l787
  1739     03F9                     u870:
  1740     03F9                     l1248:
  1741     03F9  0872               	movf	fputc@fp,w
  1742     03FA  0084               	movwf	4
  1743     03FB  1783               	bsf	3,7
  1744     03FC  1C73               	btfss	fputc@fp+1,0
  1745     03FD  1383               	bcf	3,7
  1746     03FE  0800               	movf	0,w
  1747     03FF  00F4               	movwf	??_fputc
  1748     0400  0A84               	incf	4,f
  1749     0401  0800               	movf	0,w
  1750     0402  00F5               	movwf	??_fputc+1
  1751     0403  0872               	movf	fputc@fp,w
  1752     0404  3E02               	addlw	2
  1753     0405  00F6               	movwf	??_fputc+2
  1754     0406  0873               	movf	fputc@fp+1,w
  1755     0407  1803               	skipnc
  1756     0408  3E01               	addlw	1
  1757     0409  3E00               	addlw	0
  1758     040A  00F7               	movwf	??_fputc+3
  1759     040B  0876               	movf	??_fputc+2,w
  1760     040C  0084               	movwf	4
  1761     040D  1783               	bsf	3,7
  1762     040E  1C77               	btfss	??_fputc+3,0
  1763     040F  1383               	bcf	3,7
  1764     0410  0800               	movf	0,w
  1765     0411  0774               	addwf	??_fputc,w
  1766     0412  00F9               	movwf	??_fputc+5
  1767     0413  0875               	movf	??_fputc+1,w
  1768     0414  00F8               	movwf	??_fputc+4
  1769     0415  1803               	skipnc
  1770     0416  0AF8               	incf	??_fputc+4,f
  1771     0417  1F80               	btfss	0,7
  1772     0418  2C1A               	goto	u880
  1773     0419  03F8               	decf	??_fputc+4,f
  1774     041A                     u880:
  1775     041A  0878               	movf	??_fputc+4,w
  1776     041B  00FA               	movwf	??_fputc+6
  1777     041C  0879               	movf	??_fputc+5,w
  1778     041D  0084               	movwf	4
  1779     041E  1783               	bsf	3,7
  1780     041F  1C7A               	btfss	??_fputc+6,0
  1781     0420  1383               	bcf	3,7
  1782     0421  0870               	movf	fputc@c,w
  1783     0422  0080               	movwf	0
  1784     0423  0872               	movf	fputc@fp,w
  1785     0424  3E02               	addlw	2
  1786     0425  00F4               	movwf	??_fputc
  1787     0426  0873               	movf	fputc@fp+1,w
  1788     0427  1803               	skipnc
  1789     0428  3E01               	addlw	1
  1790     0429  3E00               	addlw	0
  1791     042A  00F5               	movwf	??_fputc+1
  1792     042B  0874               	movf	??_fputc,w
  1793     042C  0084               	movwf	4
  1794     042D  1783               	bsf	3,7
  1795     042E  1C75               	btfss	??_fputc+1,0
  1796     042F  1383               	bcf	3,7
  1797     0430  3001               	movlw	1
  1798     0431  0780               	addwf	0,f
  1799     0432  0A84               	incf	4,f
  1800     0433  1803               	skipnc
  1801     0434  0A80               	incf	0,f
  1802     0435                     l787:
  1803     0435  0008               	return
  1804     0436                     __end_of_fputc:
  1805                           
  1806                           	psect	text5
  1807     008C                     __ptext5:	
  1808 ;; *************** function _putch *****************
  1809 ;; Defined at:
  1810 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  c               1    wreg     unsigned char 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;  c               1    0[COMMON] unsigned char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		wreg
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1824 ;;      Params:         0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0
  1827 ;;      Totals:         0       0       0       0       0
  1828 ;;Total ram usage:        0 bytes
  1829 ;; Hardware stack levels used: 1
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_fputc
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837     008C                     _putch:	
  1838                           ;psect for function _putch
  1839                           
  1840     008C                     l798:	
  1841                           ;incstack = 0
  1842                           ; Regs used in _putch: [wreg]
  1843                           
  1844     008C  0008               	return
  1845     008D                     __end_of_putch:
  1846                           
  1847                           	psect	text6
  1848     011A                     __ptext6:	
  1849 ;; *************** function ___lwmod *****************
  1850 ;; Defined at:
  1851 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  divisor         2    0[COMMON] unsigned int 
  1854 ;;  dividend        2    2[COMMON] unsigned int 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  counter         1    4[COMMON] unsigned char 
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  2    0[COMMON] unsigned int 
  1859 ;; Registers used:
  1860 ;;		wreg, status,2, status,0
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1866 ;;      Params:         4       0       0       0       0
  1867 ;;      Locals:         1       0       0       0       0
  1868 ;;      Temps:          0       0       0       0       0
  1869 ;;      Totals:         5       0       0       0       0
  1870 ;;Total ram usage:        5 bytes
  1871 ;; Hardware stack levels used: 1
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_main
  1876 ;;		_vfpfcnvrt
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880     011A                     ___lwmod:	
  1881                           ;psect for function ___lwmod
  1882                           
  1883     011A                     l1216:	
  1884                           ;incstack = 0
  1885                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1886                           
  1887     011A  0870               	movf	___lwmod@divisor,w
  1888     011B  0471               	iorwf	___lwmod@divisor+1,w
  1889     011C  1903               	btfsc	3,2
  1890     011D  291F               	goto	u781
  1891     011E  2920               	goto	u780
  1892     011F                     u781:
  1893     011F  294D               	goto	l1234
  1894     0120                     u780:
  1895     0120                     l1218:
  1896     0120  3001               	movlw	1
  1897     0121  00F4               	movwf	___lwmod@counter
  1898     0122  292C               	goto	l1224
  1899     0123                     l1220:
  1900     0123  3001               	movlw	1
  1901     0124                     u795:
  1902     0124  1003               	clrc
  1903     0125  0DF0               	rlf	___lwmod@divisor,f
  1904     0126  0DF1               	rlf	___lwmod@divisor+1,f
  1905     0127  3EFF               	addlw	-1
  1906     0128  1D03               	skipz
  1907     0129  2924               	goto	u795
  1908     012A                     l1222:
  1909     012A  3001               	movlw	1
  1910     012B  07F4               	addwf	___lwmod@counter,f
  1911     012C                     l1224:
  1912     012C  1FF1               	btfss	___lwmod@divisor+1,7
  1913     012D  292F               	goto	u801
  1914     012E  2930               	goto	u800
  1915     012F                     u801:
  1916     012F  2923               	goto	l1220
  1917     0130                     u800:
  1918     0130                     l1226:
  1919     0130  0871               	movf	___lwmod@divisor+1,w
  1920     0131  0273               	subwf	___lwmod@dividend+1,w
  1921     0132  1D03               	skipz
  1922     0133  2936               	goto	u815
  1923     0134  0870               	movf	___lwmod@divisor,w
  1924     0135  0272               	subwf	___lwmod@dividend,w
  1925     0136                     u815:
  1926     0136  1C03               	skipc
  1927     0137  2939               	goto	u811
  1928     0138  293A               	goto	u810
  1929     0139                     u811:
  1930     0139  2940               	goto	l1230
  1931     013A                     u810:
  1932     013A                     l1228:
  1933     013A  0870               	movf	___lwmod@divisor,w
  1934     013B  02F2               	subwf	___lwmod@dividend,f
  1935     013C  0871               	movf	___lwmod@divisor+1,w
  1936     013D  1C03               	skipc
  1937     013E  03F3               	decf	___lwmod@dividend+1,f
  1938     013F  02F3               	subwf	___lwmod@dividend+1,f
  1939     0140                     l1230:
  1940     0140  3001               	movlw	1
  1941     0141                     u825:
  1942     0141  1003               	clrc
  1943     0142  0CF1               	rrf	___lwmod@divisor+1,f
  1944     0143  0CF0               	rrf	___lwmod@divisor,f
  1945     0144  3EFF               	addlw	-1
  1946     0145  1D03               	skipz
  1947     0146  2941               	goto	u825
  1948     0147                     l1232:
  1949     0147  3001               	movlw	1
  1950     0148  02F4               	subwf	___lwmod@counter,f
  1951     0149  1D03               	btfss	3,2
  1952     014A  294C               	goto	u831
  1953     014B  294D               	goto	u830
  1954     014C                     u831:
  1955     014C  2930               	goto	l1226
  1956     014D                     u830:
  1957     014D                     l1234:
  1958     014D  0873               	movf	___lwmod@dividend+1,w
  1959     014E  00F1               	movwf	?___lwmod+1
  1960     014F  0872               	movf	___lwmod@dividend,w
  1961     0150  00F0               	movwf	?___lwmod
  1962     0151                     l558:
  1963     0151  0008               	return
  1964     0152                     __end_of___lwmod:
  1965                           
  1966                           	psect	text7
  1967     0194                     __ptext7:	
  1968 ;; *************** function ___lwdiv *****************
  1969 ;; Defined at:
  1970 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  divisor         2    0[COMMON] unsigned int 
  1973 ;;  dividend        2    2[COMMON] unsigned int 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  quotient        2    4[COMMON] unsigned int 
  1976 ;;  counter         1    6[COMMON] unsigned char 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  2    0[COMMON] unsigned int 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1986 ;;      Params:         4       0       0       0       0
  1987 ;;      Locals:         3       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0
  1989 ;;      Totals:         7       0       0       0       0
  1990 ;;Total ram usage:        7 bytes
  1991 ;; Hardware stack levels used: 1
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_main
  1996 ;;		_vfpfcnvrt
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000     0194                     ___lwdiv:	
  2001                           ;psect for function ___lwdiv
  2002                           
  2003     0194                     l1190:	
  2004                           ;incstack = 0
  2005                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2006                           
  2007     0194  01F4               	clrf	___lwdiv@quotient
  2008     0195  01F5               	clrf	___lwdiv@quotient+1
  2009     0196                     l1192:
  2010     0196  0870               	movf	___lwdiv@divisor,w
  2011     0197  0471               	iorwf	___lwdiv@divisor+1,w
  2012     0198  1903               	btfsc	3,2
  2013     0199  299B               	goto	u711
  2014     019A  299C               	goto	u710
  2015     019B                     u711:
  2016     019B  29D1               	goto	l1212
  2017     019C                     u710:
  2018     019C                     l1194:
  2019     019C  3001               	movlw	1
  2020     019D  00F6               	movwf	___lwdiv@counter
  2021     019E  29A8               	goto	l1200
  2022     019F                     l1196:
  2023     019F  3001               	movlw	1
  2024     01A0                     u725:
  2025     01A0  1003               	clrc
  2026     01A1  0DF0               	rlf	___lwdiv@divisor,f
  2027     01A2  0DF1               	rlf	___lwdiv@divisor+1,f
  2028     01A3  3EFF               	addlw	-1
  2029     01A4  1D03               	skipz
  2030     01A5  29A0               	goto	u725
  2031     01A6                     l1198:
  2032     01A6  3001               	movlw	1
  2033     01A7  07F6               	addwf	___lwdiv@counter,f
  2034     01A8                     l1200:
  2035     01A8  1FF1               	btfss	___lwdiv@divisor+1,7
  2036     01A9  29AB               	goto	u731
  2037     01AA  29AC               	goto	u730
  2038     01AB                     u731:
  2039     01AB  299F               	goto	l1196
  2040     01AC                     u730:
  2041     01AC                     l1202:
  2042     01AC  3001               	movlw	1
  2043     01AD                     u745:
  2044     01AD  1003               	clrc
  2045     01AE  0DF4               	rlf	___lwdiv@quotient,f
  2046     01AF  0DF5               	rlf	___lwdiv@quotient+1,f
  2047     01B0  3EFF               	addlw	-1
  2048     01B1  1D03               	skipz
  2049     01B2  29AD               	goto	u745
  2050     01B3  0871               	movf	___lwdiv@divisor+1,w
  2051     01B4  0273               	subwf	___lwdiv@dividend+1,w
  2052     01B5  1D03               	skipz
  2053     01B6  29B9               	goto	u755
  2054     01B7  0870               	movf	___lwdiv@divisor,w
  2055     01B8  0272               	subwf	___lwdiv@dividend,w
  2056     01B9                     u755:
  2057     01B9  1C03               	skipc
  2058     01BA  29BC               	goto	u751
  2059     01BB  29BD               	goto	u750
  2060     01BC                     u751:
  2061     01BC  29C4               	goto	l1208
  2062     01BD                     u750:
  2063     01BD                     l1204:
  2064     01BD  0870               	movf	___lwdiv@divisor,w
  2065     01BE  02F2               	subwf	___lwdiv@dividend,f
  2066     01BF  0871               	movf	___lwdiv@divisor+1,w
  2067     01C0  1C03               	skipc
  2068     01C1  03F3               	decf	___lwdiv@dividend+1,f
  2069     01C2  02F3               	subwf	___lwdiv@dividend+1,f
  2070     01C3                     l1206:
  2071     01C3  1474               	bsf	___lwdiv@quotient,0
  2072     01C4                     l1208:
  2073     01C4  3001               	movlw	1
  2074     01C5                     u765:
  2075     01C5  1003               	clrc
  2076     01C6  0CF1               	rrf	___lwdiv@divisor+1,f
  2077     01C7  0CF0               	rrf	___lwdiv@divisor,f
  2078     01C8  3EFF               	addlw	-1
  2079     01C9  1D03               	skipz
  2080     01CA  29C5               	goto	u765
  2081     01CB                     l1210:
  2082     01CB  3001               	movlw	1
  2083     01CC  02F6               	subwf	___lwdiv@counter,f
  2084     01CD  1D03               	btfss	3,2
  2085     01CE  29D0               	goto	u771
  2086     01CF  29D1               	goto	u770
  2087     01D0                     u771:
  2088     01D0  29AC               	goto	l1202
  2089     01D1                     u770:
  2090     01D1                     l1212:
  2091     01D1  0875               	movf	___lwdiv@quotient+1,w
  2092     01D2  00F1               	movwf	?___lwdiv+1
  2093     01D3  0874               	movf	___lwdiv@quotient,w
  2094     01D4  00F0               	movwf	?___lwdiv
  2095     01D5                     l548:
  2096     01D5  0008               	return
  2097     01D6                     __end_of___lwdiv:
  2098                           
  2099                           	psect	text8
  2100     01D6                     __ptext8:	
  2101 ;; *************** function ___lmul *****************
  2102 ;; Defined at:
  2103 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul32.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  multiplier      4    0[COMMON] unsigned long 
  2106 ;;  multiplicand    4    4[COMMON] unsigned long 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  product         4    9[COMMON] unsigned long 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  4    0[COMMON] unsigned long 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2118 ;;      Params:         8       0       0       0       0
  2119 ;;      Locals:         4       0       0       0       0
  2120 ;;      Temps:          1       0       0       0       0
  2121 ;;      Totals:        13       0       0       0       0
  2122 ;;Total ram usage:       13 bytes
  2123 ;; Hardware stack levels used: 1
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_main
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131     01D6                     ___lmul:	
  2132                           ;psect for function ___lmul
  2133                           
  2134     01D6                     l1444:	
  2135                           ;incstack = 0
  2136                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2137                           
  2138     01D6  3000               	movlw	0
  2139     01D7  00FC               	movwf	___lmul@product+3
  2140     01D8  3000               	movlw	0
  2141     01D9  00FB               	movwf	___lmul@product+2
  2142     01DA  3000               	movlw	0
  2143     01DB  00FA               	movwf	___lmul@product+1
  2144     01DC  3000               	movlw	0
  2145     01DD  00F9               	movwf	___lmul@product
  2146     01DE                     l1446:
  2147     01DE  1C70               	btfss	___lmul@multiplier,0
  2148     01DF  29E1               	goto	u1251
  2149     01E0  29E2               	goto	u1250
  2150     01E1                     u1251:
  2151     01E1  29F9               	goto	l1450
  2152     01E2                     u1250:
  2153     01E2                     l1448:
  2154     01E2  0874               	movf	___lmul@multiplicand,w
  2155     01E3  07F9               	addwf	___lmul@product,f
  2156     01E4  0875               	movf	___lmul@multiplicand+1,w
  2157     01E5  1103               	clrz
  2158     01E6  1803               	skipnc
  2159     01E7  3E01               	addlw	1
  2160     01E8  1903               	skipnz
  2161     01E9  29EB               	goto	u1261
  2162     01EA  07FA               	addwf	___lmul@product+1,f
  2163     01EB                     u1261:
  2164     01EB  0876               	movf	___lmul@multiplicand+2,w
  2165     01EC  1103               	clrz
  2166     01ED  1803               	skipnc
  2167     01EE  3E01               	addlw	1
  2168     01EF  1903               	skipnz
  2169     01F0  29F2               	goto	u1262
  2170     01F1  07FB               	addwf	___lmul@product+2,f
  2171     01F2                     u1262:
  2172     01F2  0877               	movf	___lmul@multiplicand+3,w
  2173     01F3  1103               	clrz
  2174     01F4  1803               	skipnc
  2175     01F5  3E01               	addlw	1
  2176     01F6  1903               	skipnz
  2177     01F7  29F9               	goto	u1263
  2178     01F8  07FC               	addwf	___lmul@product+3,f
  2179     01F9                     u1263:
  2180     01F9                     l1450:
  2181     01F9  3001               	movlw	1
  2182     01FA  00F8               	movwf	??___lmul
  2183     01FB                     u1275:
  2184     01FB  1003               	clrc
  2185     01FC  0DF4               	rlf	___lmul@multiplicand,f
  2186     01FD  0DF5               	rlf	___lmul@multiplicand+1,f
  2187     01FE  0DF6               	rlf	___lmul@multiplicand+2,f
  2188     01FF  0DF7               	rlf	___lmul@multiplicand+3,f
  2189     0200  0BF8               	decfsz	??___lmul,f
  2190     0201  29FB               	goto	u1275
  2191     0202                     l1452:
  2192     0202  3001               	movlw	1
  2193     0203                     u1285:
  2194     0203  1003               	clrc
  2195     0204  0CF3               	rrf	___lmul@multiplier+3,f
  2196     0205  0CF2               	rrf	___lmul@multiplier+2,f
  2197     0206  0CF1               	rrf	___lmul@multiplier+1,f
  2198     0207  0CF0               	rrf	___lmul@multiplier,f
  2199     0208  3EFF               	addlw	-1
  2200     0209  1D03               	skipz
  2201     020A  2A03               	goto	u1285
  2202     020B  0873               	movf	___lmul@multiplier+3,w
  2203     020C  0472               	iorwf	___lmul@multiplier+2,w
  2204     020D  0471               	iorwf	___lmul@multiplier+1,w
  2205     020E  0470               	iorwf	___lmul@multiplier,w
  2206     020F  1D03               	skipz
  2207     0210  2A12               	goto	u1291
  2208     0211  2A13               	goto	u1290
  2209     0212                     u1291:
  2210     0212  29DE               	goto	l1446
  2211     0213                     u1290:
  2212     0213                     l1454:
  2213     0213  087C               	movf	___lmul@product+3,w
  2214     0214  00F3               	movwf	?___lmul+3
  2215     0215  087B               	movf	___lmul@product+2,w
  2216     0216  00F2               	movwf	?___lmul+2
  2217     0217  087A               	movf	___lmul@product+1,w
  2218     0218  00F1               	movwf	?___lmul+1
  2219     0219  0879               	movf	___lmul@product,w
  2220     021A  00F0               	movwf	?___lmul
  2221     021B                     l282:
  2222     021B  0008               	return
  2223     021C                     __end_of___lmul:
  2224                           
  2225                           	psect	text9
  2226     0303                     __ptext9:	
  2227 ;; *************** function ___aldiv *****************
  2228 ;; Defined at:
  2229 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\aldiv.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  divisor         4    0[BANK0 ] long 
  2232 ;;  dividend        4    4[BANK0 ] long 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  quotient        4   10[BANK0 ] long 
  2235 ;;  sign            1    9[BANK0 ] unsigned char 
  2236 ;;  counter         1    8[BANK0 ] unsigned char 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  4    0[BANK0 ] long 
  2239 ;; Registers used:
  2240 ;;		wreg, status,2, status,0
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2246 ;;      Params:         0       8       0       0       0
  2247 ;;      Locals:         0       6       0       0       0
  2248 ;;      Temps:          1       0       0       0       0
  2249 ;;      Totals:         1      14       0       0       0
  2250 ;;Total ram usage:       15 bytes
  2251 ;; Hardware stack levels used: 1
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_main
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259     0303                     ___aldiv:	
  2260                           ;psect for function ___aldiv
  2261                           
  2262     0303                     l1458:	
  2263                           ;incstack = 0
  2264                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2265                           
  2266     0303  1283               	bcf	3,5	;RP0=0, select bank0
  2267     0304  1303               	bcf	3,6	;RP1=0, select bank0
  2268     0305  01A9               	clrf	___aldiv@sign
  2269     0306                     l1460:
  2270     0306  1FA3               	btfss	___aldiv@divisor+3,7
  2271     0307  2B09               	goto	u1301
  2272     0308  2B0A               	goto	u1300
  2273     0309                     u1301:
  2274     0309  2B17               	goto	l333
  2275     030A                     u1300:
  2276     030A                     l1462:
  2277     030A  09A0               	comf	___aldiv@divisor,f
  2278     030B  09A1               	comf	___aldiv@divisor+1,f
  2279     030C  09A2               	comf	___aldiv@divisor+2,f
  2280     030D  09A3               	comf	___aldiv@divisor+3,f
  2281     030E  0AA0               	incf	___aldiv@divisor,f
  2282     030F  1903               	skipnz
  2283     0310  0AA1               	incf	___aldiv@divisor+1,f
  2284     0311  1903               	skipnz
  2285     0312  0AA2               	incf	___aldiv@divisor+2,f
  2286     0313  1903               	skipnz
  2287     0314  0AA3               	incf	___aldiv@divisor+3,f
  2288     0315  3001               	movlw	1
  2289     0316  00A9               	movwf	___aldiv@sign
  2290     0317                     l333:
  2291     0317  1FA7               	btfss	___aldiv@dividend+3,7
  2292     0318  2B1A               	goto	u1311
  2293     0319  2B1B               	goto	u1310
  2294     031A                     u1311:
  2295     031A  2B28               	goto	l1468
  2296     031B                     u1310:
  2297     031B                     l1464:
  2298     031B  09A4               	comf	___aldiv@dividend,f
  2299     031C  09A5               	comf	___aldiv@dividend+1,f
  2300     031D  09A6               	comf	___aldiv@dividend+2,f
  2301     031E  09A7               	comf	___aldiv@dividend+3,f
  2302     031F  0AA4               	incf	___aldiv@dividend,f
  2303     0320  1903               	skipnz
  2304     0321  0AA5               	incf	___aldiv@dividend+1,f
  2305     0322  1903               	skipnz
  2306     0323  0AA6               	incf	___aldiv@dividend+2,f
  2307     0324  1903               	skipnz
  2308     0325  0AA7               	incf	___aldiv@dividend+3,f
  2309     0326                     l1466:
  2310     0326  3001               	movlw	1
  2311     0327  06A9               	xorwf	___aldiv@sign,f
  2312     0328                     l1468:
  2313     0328  3000               	movlw	0
  2314     0329  00AD               	movwf	___aldiv@quotient+3
  2315     032A  3000               	movlw	0
  2316     032B  00AC               	movwf	___aldiv@quotient+2
  2317     032C  3000               	movlw	0
  2318     032D  00AB               	movwf	___aldiv@quotient+1
  2319     032E  3000               	movlw	0
  2320     032F  00AA               	movwf	___aldiv@quotient
  2321     0330                     l1470:
  2322     0330  0823               	movf	___aldiv@divisor+3,w
  2323     0331  0422               	iorwf	___aldiv@divisor+2,w
  2324     0332  0421               	iorwf	___aldiv@divisor+1,w
  2325     0333  0420               	iorwf	___aldiv@divisor,w
  2326     0334  1903               	skipnz
  2327     0335  2B37               	goto	u1321
  2328     0336  2B38               	goto	u1320
  2329     0337                     u1321:
  2330     0337  2B83               	goto	l1490
  2331     0338                     u1320:
  2332     0338                     l1472:
  2333     0338  3001               	movlw	1
  2334     0339  00A8               	movwf	___aldiv@counter
  2335     033A  2B46               	goto	l1476
  2336     033B                     l1474:
  2337     033B  3001               	movlw	1
  2338     033C  00FD               	movwf	??___aldiv
  2339     033D                     u1335:
  2340     033D  1003               	clrc
  2341     033E  0DA0               	rlf	___aldiv@divisor,f
  2342     033F  0DA1               	rlf	___aldiv@divisor+1,f
  2343     0340  0DA2               	rlf	___aldiv@divisor+2,f
  2344     0341  0DA3               	rlf	___aldiv@divisor+3,f
  2345     0342  0BFD               	decfsz	??___aldiv,f
  2346     0343  2B3D               	goto	u1335
  2347     0344  3001               	movlw	1
  2348     0345  07A8               	addwf	___aldiv@counter,f
  2349     0346                     l1476:
  2350     0346  1FA3               	btfss	___aldiv@divisor+3,7
  2351     0347  2B49               	goto	u1341
  2352     0348  2B4A               	goto	u1340
  2353     0349                     u1341:
  2354     0349  2B3B               	goto	l1474
  2355     034A                     u1340:
  2356     034A                     l1478:
  2357     034A  3001               	movlw	1
  2358     034B  00FD               	movwf	??___aldiv
  2359     034C                     u1355:
  2360     034C  1003               	clrc
  2361     034D  0DAA               	rlf	___aldiv@quotient,f
  2362     034E  0DAB               	rlf	___aldiv@quotient+1,f
  2363     034F  0DAC               	rlf	___aldiv@quotient+2,f
  2364     0350  0DAD               	rlf	___aldiv@quotient+3,f
  2365     0351  0BFD               	decfsz	??___aldiv,f
  2366     0352  2B4C               	goto	u1355
  2367     0353                     l1480:
  2368     0353  0823               	movf	___aldiv@divisor+3,w
  2369     0354  0227               	subwf	___aldiv@dividend+3,w
  2370     0355  1D03               	skipz
  2371     0356  2B61               	goto	u1365
  2372     0357  0822               	movf	___aldiv@divisor+2,w
  2373     0358  0226               	subwf	___aldiv@dividend+2,w
  2374     0359  1D03               	skipz
  2375     035A  2B61               	goto	u1365
  2376     035B  0821               	movf	___aldiv@divisor+1,w
  2377     035C  0225               	subwf	___aldiv@dividend+1,w
  2378     035D  1D03               	skipz
  2379     035E  2B61               	goto	u1365
  2380     035F  0820               	movf	___aldiv@divisor,w
  2381     0360  0224               	subwf	___aldiv@dividend,w
  2382     0361                     u1365:
  2383     0361  1C03               	skipc
  2384     0362  2B64               	goto	u1361
  2385     0363  2B65               	goto	u1360
  2386     0364                     u1361:
  2387     0364  2B74               	goto	l1486
  2388     0365                     u1360:
  2389     0365                     l1482:
  2390     0365  0820               	movf	___aldiv@divisor,w
  2391     0366  02A4               	subwf	___aldiv@dividend,f
  2392     0367  0821               	movf	___aldiv@divisor+1,w
  2393     0368  1C03               	skipc
  2394     0369  0F21               	incfsz	___aldiv@divisor+1,w
  2395     036A  02A5               	subwf	___aldiv@dividend+1,f
  2396     036B  0822               	movf	___aldiv@divisor+2,w
  2397     036C  1C03               	skipc
  2398     036D  0F22               	incfsz	___aldiv@divisor+2,w
  2399     036E  02A6               	subwf	___aldiv@dividend+2,f
  2400     036F  0823               	movf	___aldiv@divisor+3,w
  2401     0370  1C03               	skipc
  2402     0371  0F23               	incfsz	___aldiv@divisor+3,w
  2403     0372  02A7               	subwf	___aldiv@dividend+3,f
  2404     0373                     l1484:
  2405     0373  142A               	bsf	___aldiv@quotient,0
  2406     0374                     l1486:
  2407     0374  3001               	movlw	1
  2408     0375                     u1375:
  2409     0375  1003               	clrc
  2410     0376  0CA3               	rrf	___aldiv@divisor+3,f
  2411     0377  0CA2               	rrf	___aldiv@divisor+2,f
  2412     0378  0CA1               	rrf	___aldiv@divisor+1,f
  2413     0379  0CA0               	rrf	___aldiv@divisor,f
  2414     037A  3EFF               	addlw	-1
  2415     037B  1D03               	skipz
  2416     037C  2B75               	goto	u1375
  2417     037D                     l1488:
  2418     037D  3001               	movlw	1
  2419     037E  02A8               	subwf	___aldiv@counter,f
  2420     037F  1D03               	btfss	3,2
  2421     0380  2B82               	goto	u1381
  2422     0381  2B83               	goto	u1380
  2423     0382                     u1381:
  2424     0382  2B4A               	goto	l1478
  2425     0383                     u1380:
  2426     0383                     l1490:
  2427     0383  0829               	movf	___aldiv@sign,w
  2428     0384  1903               	btfsc	3,2
  2429     0385  2B87               	goto	u1391
  2430     0386  2B88               	goto	u1390
  2431     0387                     u1391:
  2432     0387  2B93               	goto	l1494
  2433     0388                     u1390:
  2434     0388                     l1492:
  2435     0388  09AA               	comf	___aldiv@quotient,f
  2436     0389  09AB               	comf	___aldiv@quotient+1,f
  2437     038A  09AC               	comf	___aldiv@quotient+2,f
  2438     038B  09AD               	comf	___aldiv@quotient+3,f
  2439     038C  0AAA               	incf	___aldiv@quotient,f
  2440     038D  1903               	skipnz
  2441     038E  0AAB               	incf	___aldiv@quotient+1,f
  2442     038F  1903               	skipnz
  2443     0390  0AAC               	incf	___aldiv@quotient+2,f
  2444     0391  1903               	skipnz
  2445     0392  0AAD               	incf	___aldiv@quotient+3,f
  2446     0393                     l1494:
  2447     0393  082D               	movf	___aldiv@quotient+3,w
  2448     0394  00A3               	movwf	?___aldiv+3
  2449     0395  082C               	movf	___aldiv@quotient+2,w
  2450     0396  00A2               	movwf	?___aldiv+2
  2451     0397  082B               	movf	___aldiv@quotient+1,w
  2452     0398  00A1               	movwf	?___aldiv+1
  2453     0399  082A               	movf	___aldiv@quotient,w
  2454     039A  00A0               	movwf	?___aldiv
  2455     039B                     l343:
  2456     039B  0008               	return
  2457     039C                     __end_of___aldiv:
  2458                           
  2459                           	psect	text10
  2460     0152                     __ptext10:	
  2461 ;; *************** function _LCD_putrs *****************
  2462 ;; Defined at:
  2463 ;;		line 136 in file "lcd.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  a               2    6[COMMON] PTR const unsigned char 
  2466 ;;		 -> main@buffer2(10), STR_3(12), main@buffer1(10), STR_1(12), 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  i               2   11[COMMON] int 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2478 ;;      Params:         2       0       0       0       0
  2479 ;;      Locals:         2       0       0       0       0
  2480 ;;      Temps:          3       0       0       0       0
  2481 ;;      Totals:         7       0       0       0       0
  2482 ;;Total ram usage:        7 bytes
  2483 ;; Hardware stack levels used: 1
  2484 ;; Hardware stack levels required when called: 2
  2485 ;; This function calls:
  2486 ;;		_LCD_putc
  2487 ;; This function is called by:
  2488 ;;		_main
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492     0152                     _LCD_putrs:	
  2493                           ;psect for function _LCD_putrs
  2494                           
  2495     0152                     l1422:	
  2496                           ;incstack = 0
  2497                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2498                           
  2499                           
  2500                           ;lcd.c: 138:     for ( int i = 0; a[i] != '\0'; ++i ) {
  2501     0152  01FB               	clrf	LCD_putrs@i
  2502     0153  01FC               	clrf	LCD_putrs@i+1
  2503     0154  2977               	goto	l1428
  2504     0155                     l1424:
  2505                           
  2506                           ;lcd.c: 139:         LCD_putc(a[i]);
  2507     0155  087B               	movf	LCD_putrs@i,w
  2508     0156  0776               	addwf	LCD_putrs@a,w
  2509     0157  00F9               	movwf	??_LCD_putrs+1
  2510     0158  0877               	movf	LCD_putrs@a+1,w
  2511     0159  00F8               	movwf	??_LCD_putrs
  2512     015A  1803               	skipnc
  2513     015B  0AF8               	incf	??_LCD_putrs,f
  2514     015C  1FFB               	btfss	LCD_putrs@i,7
  2515     015D  295F               	goto	u1220
  2516     015E  03F8               	decf	??_LCD_putrs,f
  2517     015F                     u1220:
  2518     015F  0878               	movf	??_LCD_putrs,w
  2519     0160  00FA               	movwf	??_LCD_putrs+2
  2520     0161  087A               	movf	??_LCD_putrs+2,w
  2521     0162  1283               	bcf	3,5	;RP0=0, select bank0
  2522     0163  1303               	bcf	3,6	;RP1=0, select bank0
  2523     0164  00FF               	movwf	btemp+1
  2524     0165  0879               	movf	??_LCD_putrs+1,w
  2525     0166  0084               	movwf	4
  2526     0167  120A  118A  2003  120A  118A  	fcall	stringtab
  2527     016C  120A  118A  2271  120A  118A  	fcall	_LCD_putc
  2528     0171                     l1426:
  2529                           
  2530                           ;lcd.c: 140:     }
  2531     0171  3001               	movlw	1
  2532     0172  07FB               	addwf	LCD_putrs@i,f
  2533     0173  1803               	skipnc
  2534     0174  0AFC               	incf	LCD_putrs@i+1,f
  2535     0175  3000               	movlw	0
  2536     0176  07FC               	addwf	LCD_putrs@i+1,f
  2537     0177                     l1428:
  2538     0177  087B               	movf	LCD_putrs@i,w
  2539     0178  0776               	addwf	LCD_putrs@a,w
  2540     0179  00F9               	movwf	??_LCD_putrs+1
  2541     017A  0877               	movf	LCD_putrs@a+1,w
  2542     017B  00F8               	movwf	??_LCD_putrs
  2543     017C  1803               	skipnc
  2544     017D  0AF8               	incf	??_LCD_putrs,f
  2545     017E  1FFB               	btfss	LCD_putrs@i,7
  2546     017F  2981               	goto	u1230
  2547     0180  03F8               	decf	??_LCD_putrs,f
  2548     0181                     u1230:
  2549     0181  0878               	movf	??_LCD_putrs,w
  2550     0182  00FA               	movwf	??_LCD_putrs+2
  2551     0183  087A               	movf	??_LCD_putrs+2,w
  2552     0184  1283               	bcf	3,5	;RP0=0, select bank0
  2553     0185  1303               	bcf	3,6	;RP1=0, select bank0
  2554     0186  00FF               	movwf	btemp+1
  2555     0187  0879               	movf	??_LCD_putrs+1,w
  2556     0188  0084               	movwf	4
  2557     0189  120A  118A  2003  120A  118A  	fcall	stringtab
  2558     018E  3A00               	xorlw	0
  2559     018F  1D03               	skipz
  2560     0190  2992               	goto	u1241
  2561     0191  2993               	goto	u1240
  2562     0192                     u1241:
  2563     0192  2955               	goto	l1424
  2564     0193                     u1240:
  2565     0193                     l182:
  2566     0193  0008               	return
  2567     0194                     __end_of_LCD_putrs:
  2568                           
  2569                           	psect	text11
  2570     0271                     __ptext11:	
  2571 ;; *************** function _LCD_putc *****************
  2572 ;; Defined at:
  2573 ;;		line 111 in file "lcd.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  c               1    wreg     unsigned char 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;  c               1    5[COMMON] unsigned char 
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2587 ;;      Params:         0       0       0       0       0
  2588 ;;      Locals:         1       0       0       0       0
  2589 ;;      Temps:          2       0       0       0       0
  2590 ;;      Totals:         3       0       0       0       0
  2591 ;;Total ram usage:        3 bytes
  2592 ;; Hardware stack levels used: 1
  2593 ;; Hardware stack levels required when called: 1
  2594 ;; This function calls:
  2595 ;;		_LCD_Out
  2596 ;; This function is called by:
  2597 ;;		_LCD_putrs
  2598 ;;		_LCD_puts
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602     0271                     _LCD_putc:	
  2603                           ;psect for function _LCD_putc
  2604                           
  2605                           
  2606                           ;incstack = 0
  2607                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2608                           ;LCD_putc@c stored from wreg
  2609     0271  00F5               	movwf	LCD_putc@c
  2610     0272                     l1330:
  2611                           
  2612                           ;lcd.c: 113:    *(lcd.PORT) |= 1 << lcd.RS;
  2613     0272  1683               	bsf	3,5	;RP0=1, select bank1
  2614     0273  1303               	bcf	3,6	;RP1=0, select bank1
  2615     0274  0842               	movf	_lcd^(0+128),w
  2616     0275  0084               	movwf	4
  2617     0276  1783               	bsf	3,7
  2618     0277  1C43               	btfss	(_lcd+1)^(0+128),0
  2619     0278  1383               	bcf	3,7
  2620     0279  3001               	movlw	1
  2621     027A  00F3               	movwf	??_LCD_putc
  2622     027B  0844               	movf	(_lcd^(0+128)+2),w
  2623     027C  3907               	andlw	7
  2624     027D  3E01               	addlw	1
  2625     027E  2A81               	goto	u1094
  2626     027F                     u1095:
  2627     027F  1003               	clrc
  2628     0280  0DF3               	rlf	??_LCD_putc,f
  2629     0281                     u1094:
  2630     0281  3EFF               	addlw	-1
  2631     0282  1D03               	skipz
  2632     0283  2A7F               	goto	u1095
  2633     0284  0873               	movf	??_LCD_putc,w
  2634     0285  0480               	iorwf	0,f
  2635     0286                     l1332:
  2636                           
  2637                           ;lcd.c: 114:     LCD_Out((c & 0xF0) >> 4);
  2638     0286  0875               	movf	LCD_putc@c,w
  2639     0287  00F3               	movwf	??_LCD_putc
  2640     0288  3004               	movlw	4
  2641     0289                     u1105:
  2642     0289  1003               	clrc
  2643     028A  0CF3               	rrf	??_LCD_putc,f
  2644     028B  3EFF               	addlw	-1
  2645     028C  1D03               	skipz
  2646     028D  2A89               	goto	u1105
  2647     028E  0873               	movf	??_LCD_putc,w
  2648     028F  390F               	andlw	15
  2649     0290  120A  118A  24DC  120A  118A  	fcall	_LCD_Out
  2650     0295                     l1334:
  2651                           
  2652                           ;lcd.c: 116:     *(lcd.PORT) |= 1 << lcd.EN;
  2653     0295  1683               	bsf	3,5	;RP0=1, select bank1
  2654     0296  1303               	bcf	3,6	;RP1=0, select bank1
  2655     0297  0842               	movf	_lcd^(0+128),w
  2656     0298  0084               	movwf	4
  2657     0299  1783               	bsf	3,7
  2658     029A  1C43               	btfss	(_lcd+1)^(0+128),0
  2659     029B  1383               	bcf	3,7
  2660     029C  3001               	movlw	1
  2661     029D  00F3               	movwf	??_LCD_putc
  2662     029E  0C44               	rrf	(_lcd^(0+128)+2),w
  2663     029F  00F4               	movwf	??_LCD_putc+1
  2664     02A0  0CF4               	rrf	??_LCD_putc+1,f
  2665     02A1  0C74               	rrf	??_LCD_putc+1,w
  2666     02A2  3907               	andlw	7
  2667     02A3  3E01               	addlw	1
  2668     02A4  2AA7               	goto	u1114
  2669     02A5                     u1115:
  2670     02A5  1003               	clrc
  2671     02A6  0DF3               	rlf	??_LCD_putc,f
  2672     02A7                     u1114:
  2673     02A7  3EFF               	addlw	-1
  2674     02A8  1D03               	skipz
  2675     02A9  2AA5               	goto	u1115
  2676     02AA  0873               	movf	??_LCD_putc,w
  2677     02AB  0480               	iorwf	0,f
  2678     02AC                     l1336:
  2679                           
  2680                           ;lcd.c: 117:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2681     02AC  300D               	movlw	13
  2682     02AD  00F3               	movwf	??_LCD_putc
  2683     02AE                     u1427:
  2684     02AE  0BF3               	decfsz	??_LCD_putc,f
  2685     02AF  2AAE               	goto	u1427
  2686     02B0                     l1338:
  2687                           
  2688                           ;lcd.c: 118:     *(lcd.PORT) &= ~(1 << lcd.EN);
  2689     02B0  1683               	bsf	3,5	;RP0=1, select bank1
  2690     02B1  1303               	bcf	3,6	;RP1=0, select bank1
  2691     02B2  0842               	movf	_lcd^(0+128),w
  2692     02B3  0084               	movwf	4
  2693     02B4  1783               	bsf	3,7
  2694     02B5  1C43               	btfss	(_lcd+1)^(0+128),0
  2695     02B6  1383               	bcf	3,7
  2696     02B7  3001               	movlw	1
  2697     02B8  00F3               	movwf	??_LCD_putc
  2698     02B9  0C44               	rrf	(_lcd^(0+128)+2),w
  2699     02BA  00F4               	movwf	??_LCD_putc+1
  2700     02BB  0CF4               	rrf	??_LCD_putc+1,f
  2701     02BC  0C74               	rrf	??_LCD_putc+1,w
  2702     02BD  3907               	andlw	7
  2703     02BE  3E01               	addlw	1
  2704     02BF  2AC2               	goto	u1124
  2705     02C0                     u1125:
  2706     02C0  1003               	clrc
  2707     02C1  0DF3               	rlf	??_LCD_putc,f
  2708     02C2                     u1124:
  2709     02C2  3EFF               	addlw	-1
  2710     02C3  1D03               	skipz
  2711     02C4  2AC0               	goto	u1125
  2712     02C5  0873               	movf	??_LCD_putc,w
  2713     02C6  3AFF               	xorlw	255
  2714     02C7  0580               	andwf	0,f
  2715     02C8                     l1340:
  2716                           
  2717                           ;lcd.c: 120:     LCD_Out(c & 0x0F);
  2718     02C8  0875               	movf	LCD_putc@c,w
  2719     02C9  390F               	andlw	15
  2720     02CA  120A  118A  24DC  120A  118A  	fcall	_LCD_Out
  2721     02CF                     l1342:
  2722                           
  2723                           ;lcd.c: 122:     *(lcd.PORT) |= 1 << lcd.EN;
  2724     02CF  1683               	bsf	3,5	;RP0=1, select bank1
  2725     02D0  1303               	bcf	3,6	;RP1=0, select bank1
  2726     02D1  0842               	movf	_lcd^(0+128),w
  2727     02D2  0084               	movwf	4
  2728     02D3  1783               	bsf	3,7
  2729     02D4  1C43               	btfss	(_lcd+1)^(0+128),0
  2730     02D5  1383               	bcf	3,7
  2731     02D6  3001               	movlw	1
  2732     02D7  00F3               	movwf	??_LCD_putc
  2733     02D8  0C44               	rrf	(_lcd^(0+128)+2),w
  2734     02D9  00F4               	movwf	??_LCD_putc+1
  2735     02DA  0CF4               	rrf	??_LCD_putc+1,f
  2736     02DB  0C74               	rrf	??_LCD_putc+1,w
  2737     02DC  3907               	andlw	7
  2738     02DD  3E01               	addlw	1
  2739     02DE  2AE1               	goto	u1134
  2740     02DF                     u1135:
  2741     02DF  1003               	clrc
  2742     02E0  0DF3               	rlf	??_LCD_putc,f
  2743     02E1                     u1134:
  2744     02E1  3EFF               	addlw	-1
  2745     02E2  1D03               	skipz
  2746     02E3  2ADF               	goto	u1135
  2747     02E4  0873               	movf	??_LCD_putc,w
  2748     02E5  0480               	iorwf	0,f
  2749                           
  2750                           ;lcd.c: 123:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2751     02E6  300D               	movlw	13
  2752     02E7  00F3               	movwf	??_LCD_putc
  2753     02E8                     u1437:
  2754     02E8  0BF3               	decfsz	??_LCD_putc,f
  2755     02E9  2AE8               	goto	u1437
  2756     02EA                     l1344:
  2757                           
  2758                           ;lcd.c: 124:     *(lcd.PORT) &= ~(1 << lcd.EN);
  2759     02EA  1683               	bsf	3,5	;RP0=1, select bank1
  2760     02EB  1303               	bcf	3,6	;RP1=0, select bank1
  2761     02EC  0842               	movf	_lcd^(0+128),w
  2762     02ED  0084               	movwf	4
  2763     02EE  1783               	bsf	3,7
  2764     02EF  1C43               	btfss	(_lcd+1)^(0+128),0
  2765     02F0  1383               	bcf	3,7
  2766     02F1  3001               	movlw	1
  2767     02F2  00F3               	movwf	??_LCD_putc
  2768     02F3  0C44               	rrf	(_lcd^(0+128)+2),w
  2769     02F4  00F4               	movwf	??_LCD_putc+1
  2770     02F5  0CF4               	rrf	??_LCD_putc+1,f
  2771     02F6  0C74               	rrf	??_LCD_putc+1,w
  2772     02F7  3907               	andlw	7
  2773     02F8  3E01               	addlw	1
  2774     02F9  2AFC               	goto	u1144
  2775     02FA                     u1145:
  2776     02FA  1003               	clrc
  2777     02FB  0DF3               	rlf	??_LCD_putc,f
  2778     02FC                     u1144:
  2779     02FC  3EFF               	addlw	-1
  2780     02FD  1D03               	skipz
  2781     02FE  2AFA               	goto	u1145
  2782     02FF  0873               	movf	??_LCD_putc,w
  2783     0300  3AFF               	xorlw	255
  2784     0301  0580               	andwf	0,f
  2785     0302                     l170:
  2786     0302  0008               	return
  2787     0303                     __end_of_LCD_putc:
  2788                           
  2789                           	psect	text12
  2790     0436                     __ptext12:	
  2791 ;; *************** function _LCD_Init *****************
  2792 ;; Defined at:
  2793 ;;		line 53 in file "lcd.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  display         5    6[COMMON] struct .
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  cmd             1   13[COMMON] unsigned char 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      _Bool 
  2800 ;; Registers used:
  2801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2807 ;;      Params:         5       0       0       0       0
  2808 ;;      Locals:         1       0       0       0       0
  2809 ;;      Temps:          2       0       0       0       0
  2810 ;;      Totals:         8       0       0       0       0
  2811 ;;Total ram usage:        8 bytes
  2812 ;; Hardware stack levels used: 1
  2813 ;; Hardware stack levels required when called: 2
  2814 ;; This function calls:
  2815 ;;		_LCD_Write
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821     0436                     _LCD_Init:	
  2822                           ;psect for function _LCD_Init
  2823                           
  2824     0436                     l1376:	
  2825                           ;incstack = 0
  2826                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2827                           
  2828                           
  2829                           ;lcd.c: 55:     lcd = display;
  2830     0436  30C2               	movlw	_lcd& (0+255)
  2831     0437  0084               	movwf	4
  2832     0438  0876               	movf	LCD_Init@display,w
  2833     0439  1383               	bcf	3,7	;select IRP bank1
  2834     043A  0080               	movwf	0
  2835     043B  0A84               	incf	4,f
  2836     043C  0877               	movf	LCD_Init@display+1,w
  2837     043D  0080               	movwf	0
  2838     043E  0A84               	incf	4,f
  2839     043F  0878               	movf	LCD_Init@display+2,w
  2840     0440  0080               	movwf	0
  2841     0441  0A84               	incf	4,f
  2842     0442  0879               	movf	LCD_Init@display+3,w
  2843     0443  0080               	movwf	0
  2844     0444  0A84               	incf	4,f
  2845     0445  087A               	movf	LCD_Init@display+4,w
  2846     0446  0080               	movwf	0
  2847     0447                     l1378:
  2848                           
  2849                           ;lcd.c: 64:     if ( lcd.PORT == &PORTA ) {
  2850     0447  3000               	movlw	0
  2851     0448  1683               	bsf	3,5	;RP0=1, select bank1
  2852     0449  1303               	bcf	3,6	;RP1=0, select bank1
  2853     044A  0643               	xorwf	(_lcd+1)^(0+128),w
  2854     044B  1D03               	skipz
  2855     044C  2C4F               	goto	u1185
  2856     044D  3005               	movlw	5
  2857     044E  0642               	xorwf	_lcd^(0+128),w
  2858     044F                     u1185:
  2859     044F  1D03               	skipz
  2860     0450  2C52               	goto	u1181
  2861     0451  2C53               	goto	u1180
  2862     0452                     u1181:
  2863     0452  2C55               	goto	l1382
  2864     0453                     u1180:
  2865     0453                     l1380:
  2866                           
  2867                           ;lcd.c: 65:         TRISA = 0x00;
  2868     0453  0185               	clrf	5	;volatile
  2869                           
  2870                           ;lcd.c: 66:     }
  2871     0454  2C6C               	goto	l1390
  2872     0455                     l1382:
  2873     0455  3000               	movlw	0
  2874     0456  0643               	xorwf	(_lcd+1)^(0+128),w
  2875     0457  1D03               	skipz
  2876     0458  2C5B               	goto	u1195
  2877     0459  3006               	movlw	6
  2878     045A  0642               	xorwf	_lcd^(0+128),w
  2879     045B                     u1195:
  2880     045B  1D03               	skipz
  2881     045C  2C5E               	goto	u1191
  2882     045D  2C5F               	goto	u1190
  2883     045E                     u1191:
  2884     045E  2C61               	goto	l1386
  2885     045F                     u1190:
  2886     045F                     l1384:
  2887                           
  2888                           ;lcd.c: 68:         TRISB = 0x00;
  2889     045F  0186               	clrf	6	;volatile
  2890                           
  2891                           ;lcd.c: 69:     }
  2892     0460  2C6C               	goto	l1390
  2893     0461                     l1386:
  2894     0461  3000               	movlw	0
  2895     0462  0643               	xorwf	(_lcd+1)^(0+128),w
  2896     0463  1D03               	skipz
  2897     0464  2C67               	goto	u1205
  2898     0465  3007               	movlw	7
  2899     0466  0642               	xorwf	_lcd^(0+128),w
  2900     0467                     u1205:
  2901     0467  1D03               	skipz
  2902     0468  2C6A               	goto	u1201
  2903     0469  2C6B               	goto	u1200
  2904     046A                     u1201:
  2905     046A  2CDB               	goto	l154
  2906     046B                     u1200:
  2907     046B                     l1388:
  2908                           
  2909                           ;lcd.c: 71:         TRISC = 0x00;
  2910     046B  0187               	clrf	7	;volatile
  2911     046C                     l1390:	
  2912                           ;lcd.c: 72:     }
  2913                           
  2914                           
  2915                           ;lcd.c: 86:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2916     046C  301A               	movlw	26
  2917     046D  00FC               	movwf	??_LCD_Init+1
  2918     046E  30F8               	movlw	248
  2919     046F  00FB               	movwf	??_LCD_Init
  2920     0470                     u1447:
  2921     0470  0BFB               	decfsz	??_LCD_Init,f
  2922     0471  2C70               	goto	u1447
  2923     0472  0BFC               	decfsz	??_LCD_Init+1,f
  2924     0473  2C70               	goto	u1447
  2925     0474  0000               	nop
  2926     0475                     l1392:
  2927                           
  2928                           ;lcd.c: 89:     LCD_Write(0x03);
  2929     0475  3003               	movlw	3
  2930     0476  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  2931     047B                     l1394:
  2932                           
  2933                           ;lcd.c: 90:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2934     047B  3007               	movlw	7
  2935     047C  00FC               	movwf	??_LCD_Init+1
  2936     047D  307D               	movlw	125
  2937     047E  00FB               	movwf	??_LCD_Init
  2938     047F                     u1457:
  2939     047F  0BFB               	decfsz	??_LCD_Init,f
  2940     0480  2C7F               	goto	u1457
  2941     0481  0BFC               	decfsz	??_LCD_Init+1,f
  2942     0482  2C7F               	goto	u1457
  2943                           
  2944                           ;lcd.c: 91:     LCD_Write(0x03);
  2945     0483  3003               	movlw	3
  2946     0484  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  2947     0489                     l1396:
  2948                           
  2949                           ;lcd.c: 92:     _delay((unsigned long)((16)*(4000000/4000.0)));
  2950     0489  3015               	movlw	21
  2951     048A  00FC               	movwf	??_LCD_Init+1
  2952     048B  30C6               	movlw	198
  2953     048C  00FB               	movwf	??_LCD_Init
  2954     048D                     u1467:
  2955     048D  0BFB               	decfsz	??_LCD_Init,f
  2956     048E  2C8D               	goto	u1467
  2957     048F  0BFC               	decfsz	??_LCD_Init+1,f
  2958     0490  2C8D               	goto	u1467
  2959     0491  0000               	nop
  2960     0492                     l1398:
  2961                           
  2962                           ;lcd.c: 93:     LCD_Write(0x03);
  2963     0492  3003               	movlw	3
  2964     0493  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  2965     0498                     l1400:
  2966                           
  2967                           ;lcd.c: 96:     LCD_Write(0x02);
  2968     0498  3002               	movlw	2
  2969     0499  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  2970     049E                     l1402:
  2971     049E  3002               	movlw	2
  2972     049F  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  2973     04A4                     l1404:
  2974     04A4  3008               	movlw	8
  2975     04A5  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  2976     04AA                     l1406:
  2977     04AA  3000               	movlw	0
  2978     04AB  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  2979     04B0                     l1408:
  2980     04B0  3006               	movlw	6
  2981     04B1  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  2982     04B6                     l1410:
  2983     04B6  3008               	movlw	8
  2984     04B7  00FD               	movwf	LCD_Init@cmd
  2985     04B8                     l1412:
  2986     04B8  157D               	bsf	LCD_Init@cmd,2
  2987     04B9                     l1418:
  2988     04B9  087D               	movf	LCD_Init@cmd,w
  2989     04BA  00FB               	movwf	??_LCD_Init
  2990     04BB  3004               	movlw	4
  2991     04BC                     u1215:
  2992     04BC  1003               	clrc
  2993     04BD  0CFB               	rrf	??_LCD_Init,f
  2994     04BE  3EFF               	addlw	-1
  2995     04BF  1D03               	skipz
  2996     04C0  2CBC               	goto	u1215
  2997     04C1  087B               	movf	??_LCD_Init,w
  2998     04C2  390F               	andlw	15
  2999     04C3  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  3000     04C8  087D               	movf	LCD_Init@cmd,w
  3001     04C9  390F               	andlw	15
  3002     04CA  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  3003     04CF                     l166:	
  3004                           ;lcd.c: 106:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  3005                           
  3006     04CF  3000               	movlw	0
  3007     04D0  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  3008     04D5  3001               	movlw	1
  3009     04D6  120A  118A  221C  120A  118A  	fcall	_LCD_Write
  3010     04DB                     l154:
  3011     04DB  0008               	return
  3012     04DC                     __end_of_LCD_Init:
  3013                           
  3014                           	psect	text13
  3015     021C                     __ptext13:	
  3016 ;; *************** function _LCD_Write *****************
  3017 ;; Defined at:
  3018 ;;		line 42 in file "lcd.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  c               1    wreg     unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  c               1    5[COMMON] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3032 ;;      Params:         0       0       0       0       0
  3033 ;;      Locals:         1       0       0       0       0
  3034 ;;      Temps:          2       0       0       0       0
  3035 ;;      Totals:         3       0       0       0       0
  3036 ;;Total ram usage:        3 bytes
  3037 ;; Hardware stack levels used: 1
  3038 ;; Hardware stack levels required when called: 1
  3039 ;; This function calls:
  3040 ;;		_LCD_Out
  3041 ;; This function is called by:
  3042 ;;		_main
  3043 ;;		_LCD_Init
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047     021C                     _LCD_Write:	
  3048                           ;psect for function _LCD_Write
  3049                           
  3050                           
  3051                           ;incstack = 0
  3052                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3053                           ;LCD_Write@c stored from wreg
  3054     021C  00F5               	movwf	LCD_Write@c
  3055     021D                     l1320:
  3056                           
  3057                           ;lcd.c: 44:     *(lcd.PORT) &= ~(1 << lcd.RS);
  3058     021D  1683               	bsf	3,5	;RP0=1, select bank1
  3059     021E  1303               	bcf	3,6	;RP1=0, select bank1
  3060     021F  0842               	movf	_lcd^(0+128),w
  3061     0220  0084               	movwf	4
  3062     0221  1783               	bsf	3,7
  3063     0222  1C43               	btfss	(_lcd+1)^(0+128),0
  3064     0223  1383               	bcf	3,7
  3065     0224  3001               	movlw	1
  3066     0225  00F3               	movwf	??_LCD_Write
  3067     0226  0844               	movf	(_lcd^(0+128)+2),w
  3068     0227  3907               	andlw	7
  3069     0228  3E01               	addlw	1
  3070     0229  2A2C               	goto	u1064
  3071     022A                     u1065:
  3072     022A  1003               	clrc
  3073     022B  0DF3               	rlf	??_LCD_Write,f
  3074     022C                     u1064:
  3075     022C  3EFF               	addlw	-1
  3076     022D  1D03               	skipz
  3077     022E  2A2A               	goto	u1065
  3078     022F  0873               	movf	??_LCD_Write,w
  3079     0230  3AFF               	xorlw	255
  3080     0231  0580               	andwf	0,f
  3081     0232                     l1322:
  3082                           
  3083                           ;lcd.c: 45:     LCD_Out(c);
  3084     0232  0875               	movf	LCD_Write@c,w
  3085     0233  120A  118A  24DC  120A  118A  	fcall	_LCD_Out
  3086     0238                     l1324:
  3087                           
  3088                           ;lcd.c: 47:     *(lcd.PORT) |= 1 << lcd.EN;
  3089     0238  1683               	bsf	3,5	;RP0=1, select bank1
  3090     0239  1303               	bcf	3,6	;RP1=0, select bank1
  3091     023A  0842               	movf	_lcd^(0+128),w
  3092     023B  0084               	movwf	4
  3093     023C  1783               	bsf	3,7
  3094     023D  1C43               	btfss	(_lcd+1)^(0+128),0
  3095     023E  1383               	bcf	3,7
  3096     023F  3001               	movlw	1
  3097     0240  00F3               	movwf	??_LCD_Write
  3098     0241  0C44               	rrf	(_lcd^(0+128)+2),w
  3099     0242  00F4               	movwf	??_LCD_Write+1
  3100     0243  0CF4               	rrf	??_LCD_Write+1,f
  3101     0244  0C74               	rrf	??_LCD_Write+1,w
  3102     0245  3907               	andlw	7
  3103     0246  3E01               	addlw	1
  3104     0247  2A4A               	goto	u1074
  3105     0248                     u1075:
  3106     0248  1003               	clrc
  3107     0249  0DF3               	rlf	??_LCD_Write,f
  3108     024A                     u1074:
  3109     024A  3EFF               	addlw	-1
  3110     024B  1D03               	skipz
  3111     024C  2A48               	goto	u1075
  3112     024D  0873               	movf	??_LCD_Write,w
  3113     024E  0480               	iorwf	0,f
  3114     024F                     l1326:
  3115                           
  3116                           ;lcd.c: 48:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3117     024F  3006               	movlw	6
  3118     0250  00F4               	movwf	??_LCD_Write+1
  3119     0251  3030               	movlw	48
  3120     0252  00F3               	movwf	??_LCD_Write
  3121     0253                     u1477:
  3122     0253  0BF3               	decfsz	??_LCD_Write,f
  3123     0254  2A53               	goto	u1477
  3124     0255  0BF4               	decfsz	??_LCD_Write+1,f
  3125     0256  2A53               	goto	u1477
  3126     0257  0000               	nop
  3127     0258                     l1328:
  3128                           
  3129                           ;lcd.c: 49:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3130     0258  1683               	bsf	3,5	;RP0=1, select bank1
  3131     0259  1303               	bcf	3,6	;RP1=0, select bank1
  3132     025A  0842               	movf	_lcd^(0+128),w
  3133     025B  0084               	movwf	4
  3134     025C  1783               	bsf	3,7
  3135     025D  1C43               	btfss	(_lcd+1)^(0+128),0
  3136     025E  1383               	bcf	3,7
  3137     025F  3001               	movlw	1
  3138     0260  00F3               	movwf	??_LCD_Write
  3139     0261  0C44               	rrf	(_lcd^(0+128)+2),w
  3140     0262  00F4               	movwf	??_LCD_Write+1
  3141     0263  0CF4               	rrf	??_LCD_Write+1,f
  3142     0264  0C74               	rrf	??_LCD_Write+1,w
  3143     0265  3907               	andlw	7
  3144     0266  3E01               	addlw	1
  3145     0267  2A6A               	goto	u1084
  3146     0268                     u1085:
  3147     0268  1003               	clrc
  3148     0269  0DF3               	rlf	??_LCD_Write,f
  3149     026A                     u1084:
  3150     026A  3EFF               	addlw	-1
  3151     026B  1D03               	skipz
  3152     026C  2A68               	goto	u1085
  3153     026D  0873               	movf	??_LCD_Write,w
  3154     026E  3AFF               	xorlw	255
  3155     026F  0580               	andwf	0,f
  3156     0270                     l145:
  3157     0270  0008               	return
  3158     0271                     __end_of_LCD_Write:
  3159                           
  3160                           	psect	text14
  3161     04DC                     __ptext14:	
  3162 ;; *************** function _LCD_Out *****************
  3163 ;; Defined at:
  3164 ;;		line 10 in file "lcd.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  c               1    wreg     unsigned char 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  c               1    2[COMMON] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3178 ;;      Params:         0       0       0       0       0
  3179 ;;      Locals:         1       0       0       0       0
  3180 ;;      Temps:          2       0       0       0       0
  3181 ;;      Totals:         3       0       0       0       0
  3182 ;;Total ram usage:        3 bytes
  3183 ;; Hardware stack levels used: 1
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_LCD_Write
  3188 ;;		_LCD_putc
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192     04DC                     _LCD_Out:	
  3193                           ;psect for function _LCD_Out
  3194                           
  3195                           
  3196                           ;incstack = 0
  3197                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  3198                           ;LCD_Out@c stored from wreg
  3199     04DC  00F2               	movwf	LCD_Out@c
  3200     04DD                     l1252:
  3201                           
  3202                           ;lcd.c: 12:     if ( c & 1 ){
  3203     04DD  1C72               	btfss	LCD_Out@c,0
  3204     04DE  2CE0               	goto	u891
  3205     04DF  2CE1               	goto	u890
  3206     04E0                     u891:
  3207     04E0  2CF6               	goto	l1256
  3208     04E1                     u890:
  3209     04E1                     l1254:
  3210                           
  3211                           ;lcd.c: 13:         *(lcd.PORT) |= 1 << lcd.D4;
  3212     04E1  1683               	bsf	3,5	;RP0=1, select bank1
  3213     04E2  1303               	bcf	3,6	;RP1=0, select bank1
  3214     04E3  0842               	movf	_lcd^(0+128),w
  3215     04E4  0084               	movwf	4
  3216     04E5  1783               	bsf	3,7
  3217     04E6  1C43               	btfss	(_lcd+1)^(0+128),0
  3218     04E7  1383               	bcf	3,7
  3219     04E8  3001               	movlw	1
  3220     04E9  00F0               	movwf	??_LCD_Out
  3221     04EA  0845               	movf	(_lcd^(0+128)+3),w
  3222     04EB  3907               	andlw	7
  3223     04EC  3E01               	addlw	1
  3224     04ED  2CF0               	goto	u904
  3225     04EE                     u905:
  3226     04EE  1003               	clrc
  3227     04EF  0DF0               	rlf	??_LCD_Out,f
  3228     04F0                     u904:
  3229     04F0  3EFF               	addlw	-1
  3230     04F1  1D03               	skipz
  3231     04F2  2CEE               	goto	u905
  3232     04F3  0870               	movf	??_LCD_Out,w
  3233     04F4  0480               	iorwf	0,f
  3234                           
  3235                           ;lcd.c: 14:     }
  3236     04F5  2D0B               	goto	l1258
  3237     04F6                     l1256:
  3238                           
  3239                           ;lcd.c: 16:          *(lcd.PORT) &= ~(1 << lcd.D4);
  3240     04F6  1683               	bsf	3,5	;RP0=1, select bank1
  3241     04F7  1303               	bcf	3,6	;RP1=0, select bank1
  3242     04F8  0842               	movf	_lcd^(0+128),w
  3243     04F9  0084               	movwf	4
  3244     04FA  1783               	bsf	3,7
  3245     04FB  1C43               	btfss	(_lcd+1)^(0+128),0
  3246     04FC  1383               	bcf	3,7
  3247     04FD  3001               	movlw	1
  3248     04FE  00F0               	movwf	??_LCD_Out
  3249     04FF  0845               	movf	(_lcd^(0+128)+3),w
  3250     0500  3907               	andlw	7
  3251     0501  3E01               	addlw	1
  3252     0502  2D05               	goto	u914
  3253     0503                     u915:
  3254     0503  1003               	clrc
  3255     0504  0DF0               	rlf	??_LCD_Out,f
  3256     0505                     u914:
  3257     0505  3EFF               	addlw	-1
  3258     0506  1D03               	skipz
  3259     0507  2D03               	goto	u915
  3260     0508  0870               	movf	??_LCD_Out,w
  3261     0509  3AFF               	xorlw	255
  3262     050A  0580               	andwf	0,f
  3263     050B                     l1258:
  3264                           
  3265                           ;lcd.c: 19:     if ( c & 2 ) {
  3266     050B  1CF2               	btfss	LCD_Out@c,1
  3267     050C  2D0E               	goto	u921
  3268     050D  2D0F               	goto	u920
  3269     050E                     u921:
  3270     050E  2D25               	goto	l1262
  3271     050F                     u920:
  3272     050F                     l1260:
  3273                           
  3274                           ;lcd.c: 20:         *(lcd.PORT) |= 1 << lcd.D5;
  3275     050F  0842               	movf	_lcd^(0+128),w
  3276     0510  0084               	movwf	4
  3277     0511  1783               	bsf	3,7
  3278     0512  1C43               	btfss	(_lcd+1)^(0+128),0
  3279     0513  1383               	bcf	3,7
  3280     0514  3001               	movlw	1
  3281     0515  00F0               	movwf	??_LCD_Out
  3282     0516  0C45               	rrf	(_lcd^(0+128)+3),w
  3283     0517  00F1               	movwf	??_LCD_Out+1
  3284     0518  0CF1               	rrf	??_LCD_Out+1,f
  3285     0519  0C71               	rrf	??_LCD_Out+1,w
  3286     051A  3907               	andlw	7
  3287     051B  3E01               	addlw	1
  3288     051C  2D1F               	goto	u934
  3289     051D                     u935:
  3290     051D  1003               	clrc
  3291     051E  0DF0               	rlf	??_LCD_Out,f
  3292     051F                     u934:
  3293     051F  3EFF               	addlw	-1
  3294     0520  1D03               	skipz
  3295     0521  2D1D               	goto	u935
  3296     0522  0870               	movf	??_LCD_Out,w
  3297     0523  0480               	iorwf	0,f
  3298                           
  3299                           ;lcd.c: 21:     }
  3300     0524  2D3B               	goto	l1264
  3301     0525                     l1262:
  3302                           
  3303                           ;lcd.c: 23:         *(lcd.PORT) &= ~(1 << lcd.D5);
  3304     0525  0842               	movf	_lcd^(0+128),w
  3305     0526  0084               	movwf	4
  3306     0527  1783               	bsf	3,7
  3307     0528  1C43               	btfss	(_lcd+1)^(0+128),0
  3308     0529  1383               	bcf	3,7
  3309     052A  3001               	movlw	1
  3310     052B  00F0               	movwf	??_LCD_Out
  3311     052C  0C45               	rrf	(_lcd^(0+128)+3),w
  3312     052D  00F1               	movwf	??_LCD_Out+1
  3313     052E  0CF1               	rrf	??_LCD_Out+1,f
  3314     052F  0C71               	rrf	??_LCD_Out+1,w
  3315     0530  3907               	andlw	7
  3316     0531  3E01               	addlw	1
  3317     0532  2D35               	goto	u944
  3318     0533                     u945:
  3319     0533  1003               	clrc
  3320     0534  0DF0               	rlf	??_LCD_Out,f
  3321     0535                     u944:
  3322     0535  3EFF               	addlw	-1
  3323     0536  1D03               	skipz
  3324     0537  2D33               	goto	u945
  3325     0538  0870               	movf	??_LCD_Out,w
  3326     0539  3AFF               	xorlw	255
  3327     053A  0580               	andwf	0,f
  3328     053B                     l1264:
  3329                           
  3330                           ;lcd.c: 26:     if ( c & 4 ) {
  3331     053B  1D72               	btfss	LCD_Out@c,2
  3332     053C  2D3E               	goto	u951
  3333     053D  2D3F               	goto	u950
  3334     053E                     u951:
  3335     053E  2D52               	goto	l1268
  3336     053F                     u950:
  3337     053F                     l1266:
  3338                           
  3339                           ;lcd.c: 27:         *(lcd.PORT) |= 1 << lcd.D6;
  3340     053F  0842               	movf	_lcd^(0+128),w
  3341     0540  0084               	movwf	4
  3342     0541  1783               	bsf	3,7
  3343     0542  1C43               	btfss	(_lcd+1)^(0+128),0
  3344     0543  1383               	bcf	3,7
  3345     0544  3001               	movlw	1
  3346     0545  00F0               	movwf	??_LCD_Out
  3347     0546  0846               	movf	(_lcd^(0+128)+4),w
  3348     0547  3907               	andlw	7
  3349     0548  3E01               	addlw	1
  3350     0549  2D4C               	goto	u964
  3351     054A                     u965:
  3352     054A  1003               	clrc
  3353     054B  0DF0               	rlf	??_LCD_Out,f
  3354     054C                     u964:
  3355     054C  3EFF               	addlw	-1
  3356     054D  1D03               	skipz
  3357     054E  2D4A               	goto	u965
  3358     054F  0870               	movf	??_LCD_Out,w
  3359     0550  0480               	iorwf	0,f
  3360                           
  3361                           ;lcd.c: 28:     }
  3362     0551  2D65               	goto	l1270
  3363     0552                     l1268:
  3364                           
  3365                           ;lcd.c: 30:         *(lcd.PORT) &= ~(1 << lcd.D6);
  3366     0552  0842               	movf	_lcd^(0+128),w
  3367     0553  0084               	movwf	4
  3368     0554  1783               	bsf	3,7
  3369     0555  1C43               	btfss	(_lcd+1)^(0+128),0
  3370     0556  1383               	bcf	3,7
  3371     0557  3001               	movlw	1
  3372     0558  00F0               	movwf	??_LCD_Out
  3373     0559  0846               	movf	(_lcd^(0+128)+4),w
  3374     055A  3907               	andlw	7
  3375     055B  3E01               	addlw	1
  3376     055C  2D5F               	goto	u974
  3377     055D                     u975:
  3378     055D  1003               	clrc
  3379     055E  0DF0               	rlf	??_LCD_Out,f
  3380     055F                     u974:
  3381     055F  3EFF               	addlw	-1
  3382     0560  1D03               	skipz
  3383     0561  2D5D               	goto	u975
  3384     0562  0870               	movf	??_LCD_Out,w
  3385     0563  3AFF               	xorlw	255
  3386     0564  0580               	andwf	0,f
  3387     0565                     l1270:
  3388                           
  3389                           ;lcd.c: 33:     if ( c & 8 ) {
  3390     0565  1DF2               	btfss	LCD_Out@c,3
  3391     0566  2D68               	goto	u981
  3392     0567  2D69               	goto	u980
  3393     0568                     u981:
  3394     0568  2D7F               	goto	l1274
  3395     0569                     u980:
  3396     0569                     l1272:
  3397                           
  3398                           ;lcd.c: 34:          *(lcd.PORT) |= 1 << lcd.D7;
  3399     0569  0842               	movf	_lcd^(0+128),w
  3400     056A  0084               	movwf	4
  3401     056B  1783               	bsf	3,7
  3402     056C  1C43               	btfss	(_lcd+1)^(0+128),0
  3403     056D  1383               	bcf	3,7
  3404     056E  3001               	movlw	1
  3405     056F  00F0               	movwf	??_LCD_Out
  3406     0570  0C46               	rrf	(_lcd^(0+128)+4),w
  3407     0571  00F1               	movwf	??_LCD_Out+1
  3408     0572  0CF1               	rrf	??_LCD_Out+1,f
  3409     0573  0C71               	rrf	??_LCD_Out+1,w
  3410     0574  3907               	andlw	7
  3411     0575  3E01               	addlw	1
  3412     0576  2D79               	goto	u994
  3413     0577                     u995:
  3414     0577  1003               	clrc
  3415     0578  0DF0               	rlf	??_LCD_Out,f
  3416     0579                     u994:
  3417     0579  3EFF               	addlw	-1
  3418     057A  1D03               	skipz
  3419     057B  2D77               	goto	u995
  3420     057C  0870               	movf	??_LCD_Out,w
  3421     057D  0480               	iorwf	0,f
  3422                           
  3423                           ;lcd.c: 35:     }
  3424     057E  2D95               	goto	l142
  3425     057F                     l1274:
  3426                           
  3427                           ;lcd.c: 37:          *(lcd.PORT) &= ~(1 << lcd.D7);
  3428     057F  0842               	movf	_lcd^(0+128),w
  3429     0580  0084               	movwf	4
  3430     0581  1783               	bsf	3,7
  3431     0582  1C43               	btfss	(_lcd+1)^(0+128),0
  3432     0583  1383               	bcf	3,7
  3433     0584  3001               	movlw	1
  3434     0585  00F0               	movwf	??_LCD_Out
  3435     0586  0C46               	rrf	(_lcd^(0+128)+4),w
  3436     0587  00F1               	movwf	??_LCD_Out+1
  3437     0588  0CF1               	rrf	??_LCD_Out+1,f
  3438     0589  0C71               	rrf	??_LCD_Out+1,w
  3439     058A  3907               	andlw	7
  3440     058B  3E01               	addlw	1
  3441     058C  2D8F               	goto	u1004
  3442     058D                     u1005:
  3443     058D  1003               	clrc
  3444     058E  0DF0               	rlf	??_LCD_Out,f
  3445     058F                     u1004:
  3446     058F  3EFF               	addlw	-1
  3447     0590  1D03               	skipz
  3448     0591  2D8D               	goto	u1005
  3449     0592  0870               	movf	??_LCD_Out,w
  3450     0593  3AFF               	xorlw	255
  3451     0594  0580               	andwf	0,f
  3452     0595                     l142:
  3453     0595  0008               	return
  3454     0596                     __end_of_LCD_Out:
  3455                           
  3456                           	psect	text15
  3457     00F0                     __ptext15:	
  3458 ;; *************** function _ADC_read *****************
  3459 ;; Defined at:
  3460 ;;		line 27 in file "main.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;  channel         1    wreg     unsigned char 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  channel         1    4[COMMON] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  2    0[COMMON] unsigned int 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3474 ;;      Params:         2       0       0       0       0
  3475 ;;      Locals:         1       0       0       0       0
  3476 ;;      Temps:          2       0       0       0       0
  3477 ;;      Totals:         5       0       0       0       0
  3478 ;;Total ram usage:        5 bytes
  3479 ;; Hardware stack levels used: 1
  3480 ;; This function calls:
  3481 ;;		Nothing
  3482 ;; This function is called by:
  3483 ;;		_main
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487     00F0                     _ADC_read:	
  3488                           ;psect for function _ADC_read
  3489                           
  3490                           
  3491                           ;incstack = 0
  3492                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  3493                           ;ADC_read@channel stored from wreg
  3494     00F0  00F4               	movwf	ADC_read@channel
  3495     00F1                     l1364:
  3496                           
  3497                           ;main.c: 27:     while(1);main.c: 28:     {;main.c: 29:         do { LCD_Write( (0x01 & 
      +                          0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0 );
  3498     00F1  28F2               	nop2	;2 cycle nop
  3499     00F2  28F3               	nop2	;2 cycle nop
  3500     00F3  0000               	nop
  3501     00F4                     l1366:
  3502                           
  3503                           ;main.c: 30:         do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_
      +                          Write( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do { LCD_Write( (0xC0 + 0
      +                           & 0xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 2 ) { do {
      +                           LCD_Write( (0x94 + 0 & 0xF0) >> 4 ); LCD_Write( 0x94 + 0 & 0x0F); } while ( 0 ); } else
      +                           if ( 0 == 3 ) { do { LCD_Write( (0xD4 + 0 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 0 & 0x0F); 
      +                          } while ( 0 ); } } while ( 0 );
  3504     00F4  3083               	movlw	131
  3505     00F5  1283               	bcf	3,5	;RP0=0, select bank0
  3506     00F6  1303               	bcf	3,6	;RP1=0, select bank0
  3507     00F7  059F               	andwf	31,f	;volatile
  3508                           
  3509                           ;main.c: 31:         LCD_putrs("Voltaje 1: ");
  3510     00F8  0874               	movf	ADC_read@channel,w	;volatile
  3511     00F9  00F2               	movwf	??_ADC_read
  3512     00FA  3001               	movlw	1
  3513     00FB                     u1165:
  3514     00FB  1003               	clrc
  3515     00FC  0DF2               	rlf	??_ADC_read,f
  3516     00FD  3EFF               	addlw	-1
  3517     00FE  1D03               	skipz
  3518     00FF  28FB               	goto	u1165
  3519     0100  1003               	clrc
  3520     0101  0D72               	rlf	??_ADC_read,w
  3521     0102  049F               	iorwf	31,f	;volatile
  3522     0103                     l1368:
  3523                           
  3524                           ;main.c: 32:         do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 11 & 0xF0) >> 4 ); LCD
      +                          _Write( 0x80 + 11 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do { LCD_Write( (0xC0 +
      +                           11 & 0xF0) >> 4 ); LCD_Write( 0xC0 + 11 & 0x0F); } while ( 0 ); } else if ( 0 == 2 ) { 
      +                          do { LCD_Write( (0x94 + 11 & 0xF0) >> 4 ); LCD_Write( 0x94 + 11 & 0x0F); } while ( 0 ); 
      +                          } else if ( 0 == 3 ) { do { LCD_Write( (0xD4 + 11 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 11 &
      +                           0x0F); } while ( 0 ); } } while ( 0 );
  3525     0103  3003               	movlw	3
  3526     0104  00F3               	movwf	??_ADC_read+1
  3527     0105  3097               	movlw	151
  3528     0106  00F2               	movwf	??_ADC_read
  3529     0107                     u1487:
  3530     0107  0BF2               	decfsz	??_ADC_read,f
  3531     0108  2907               	goto	u1487
  3532     0109  0BF3               	decfsz	??_ADC_read+1,f
  3533     010A  2907               	goto	u1487
  3534     010B  290C               	nop2
  3535     010C                     l1370:
  3536                           
  3537                           ;main.c: 33: 
  3538     010C  1283               	bcf	3,5	;RP0=0, select bank0
  3539     010D  1303               	bcf	3,6	;RP1=0, select bank0
  3540     010E  149F               	bsf	31,1	;volatile
  3541     010F                     l34:	
  3542                           ;main.c: 34:         unsigned int adc_result1 = ADC_read(0);
  3543                           
  3544     010F  189F               	btfsc	31,1	;volatile
  3545     0110  2912               	goto	u1171
  3546     0111  2913               	goto	u1170
  3547     0112                     u1171:
  3548     0112  290F               	goto	l34
  3549     0113                     u1170:
  3550     0113                     l1372:
  3551                           
  3552                           ;main.c: 35:         unsigned int volt1 = (adc_result1 * 50000) / 1023;
  3553     0113  081E               	movf	30,w	;volatile
  3554     0114  00F1               	movwf	?_ADC_read+1
  3555     0115  1683               	bsf	3,5	;RP0=1, select bank1
  3556     0116  1303               	bcf	3,6	;RP1=0, select bank1
  3557     0117  081E               	movf	30,w	;volatile
  3558     0118  00F0               	movwf	?_ADC_read
  3559     0119                     l37:
  3560     0119  0008               	return
  3561     011A                     __end_of_ADC_read:
  3562                           
  3563                           	psect	text16
  3564     009A                     __ptext16:	
  3565 ;; *************** function _ADC_init *****************
  3566 ;; Defined at:
  3567 ;;		line 20 in file "main.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;		None
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;		None
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  1    wreg      void 
  3574 ;; Registers used:
  3575 ;;		status,2
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3581 ;;      Params:         0       0       0       0       0
  3582 ;;      Locals:         0       0       0       0       0
  3583 ;;      Temps:          0       0       0       0       0
  3584 ;;      Totals:         0       0       0       0       0
  3585 ;;Total ram usage:        0 bytes
  3586 ;; Hardware stack levels used: 1
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_main
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594     009A                     _ADC_init:	
  3595                           ;psect for function _ADC_init
  3596                           
  3597     009A                     l1356:	
  3598                           ;incstack = 0
  3599                           ; Regs used in _ADC_init: [status,2]
  3600                           
  3601                           
  3602                           ;main.c: 21: 
  3603     009A  3003               	movlw	3
  3604     009B  1683               	bsf	3,5	;RP0=1, select bank3
  3605     009C  1703               	bsf	3,6	;RP1=1, select bank3
  3606     009D  0088               	movwf	8	;volatile
  3607     009E                     l1358:
  3608                           
  3609                           ;main.c: 22: int main(int argc, char** argv)
  3610     009E  0189               	clrf	9	;volatile
  3611     009F                     l1360:
  3612                           
  3613                           ;main.c: 23: {
  3614     009F  3001               	movlw	1
  3615     00A0  1283               	bcf	3,5	;RP0=0, select bank0
  3616     00A1  1303               	bcf	3,6	;RP1=0, select bank0
  3617     00A2  009F               	movwf	31	;volatile
  3618     00A3                     l1362:
  3619                           
  3620                           ;main.c: 24:     char buffer1[10], buffer2[10];
  3621     00A3  3080               	movlw	128
  3622     00A4  1683               	bsf	3,5	;RP0=1, select bank1
  3623     00A5  1303               	bcf	3,6	;RP1=0, select bank1
  3624     00A6  009F               	movwf	31	;volatile
  3625     00A7                     l31:
  3626     00A7  0008               	return
  3627     00A8                     __end_of_ADC_init:
  3628     0002                     ___latbits      equ	2
  3629     007E                     btemp           set	126	;btemp
  3630     007E                     wtemp0          set	126
  3631                           
  3632                           	psect	config
  3633                           
  3634                           ;Config register CONFIG1 @ 0x2007
  3635                           ;	Oscillator Selection bits
  3636                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  3637                           ;	Watchdog Timer Enable bit
  3638                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3639                           ;	Power-up Timer Enable bit
  3640                           ;	PWRTE = OFF, PWRT disabled
  3641                           ;	RE3/MCLR pin function select bit
  3642                           ;	MCLRE = 0x1, unprogrammed default
  3643                           ;	Code Protection bit
  3644                           ;	CP = OFF, Program memory code protection is disabled
  3645                           ;	Data Code Protection bit
  3646                           ;	CPD = OFF, Data memory code protection is disabled
  3647                           ;	Brown Out Reset Selection bits
  3648                           ;	BOREN = ON, BOR enabled
  3649                           ;	Internal External Switchover bit
  3650                           ;	IESO = 0x1, unprogrammed default
  3651                           ;	Fail-Safe Clock Monitor Enabled bit
  3652                           ;	FCMEN = 0x1, unprogrammed default
  3653                           ;	Low Voltage Programming Enable bit
  3654                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3655                           ;	In-Circuit Debugger Mode bit
  3656                           ;	DEBUG = 0x1, unprogrammed default
  3657     2007                     	org	8199
  3658     2007  2FF1               	dw	12273
  3659                           
  3660                           ;Config register CONFIG2 @ 0x2008
  3661                           ;	Brown-out Reset Selection bit
  3662                           ;	BOR4V = 0x1, unprogrammed default
  3663                           ;	Flash Program Memory Self Write Enable bits
  3664                           ;	WRT = OFF, Write protection off
  3665     2008                     	org	8200
  3666     2008  3FFF               	dw	16383

Data Sizes:
    Strings     30
    Constant    0
    Data        5
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     77      80
    BANK1            80      0      39
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    display$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@buffer1(BANK0[10]), main@buffer2(BANK0[10]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@buffer1(BANK0[10]), main@buffer2(BANK0[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    lcd$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    LCD_putrs@a	PTR const unsigned char  size(2) Largest target is 12
		 -> main@buffer1(BANK0[10]), main@buffer2(BANK0[10]), STR_1(CODE[12]), STR_3(CODE[12]), 

    S22$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    S581$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@buffer1(BANK0[10]), main@buffer2(BANK0[10]), 

    S581$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@buffer1(BANK0[10]), main@buffer2(BANK0[10]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMMON[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->___aldiv
    _sprintf->_vfprintf
    _vfpfcnvrt->_fputc
    ___aldiv->___lmul
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                42    38      4    3062
                                             35 BANK0     42    38      4
                           _ADC_init
                           _ADC_read
                           _LCD_Init
                          _LCD_Write
                          _LCD_putrs
                            ___aldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    1343
                                             16 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             5     1      4    1136
                                             13 COMMON     1     1      0
                                             12 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13     9      4    1011
                                              0 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                               13     9      4     230
                                              0 COMMON    13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     165
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     168
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8      96
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     304
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_putrs                                            7     5      2     268
                                              6 COMMON     7     5      2
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             3     3      0     174
                                              3 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     216
                                              6 COMMON     8     3      5
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Write                                            3     3      0     145
                                              3 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (3) _LCD_Out                                              3     3      0     116
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             5     3      2      29
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_read
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   ___aldiv
     ___lmul (ARG)
   ___lmul
   ___lwdiv
   ___lwmod
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___lwdiv
         ___lwmod
         _fputc
           _putch

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      39     48.8%
BITBANK1            80      0       0      0.0%
BANK0               80     77      80    100.0%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     133      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Jun 16 16:37:50 2025

                      pc 0002                       l31 00A7                       l34 010F  
                     l37 0119                       fsr 0004                      l142 0595  
                    l145 0270                      l154 04DB                      l170 0302  
                    l333 0317                      l166 04CF                      l182 0193  
                    l343 039B                      l282 021B                      l731 00CA  
                    l548 01D5                      l558 0151                      l760 05DA  
                    l775 00EF                      l768 065D                      l787 0435  
                    l798 008C                      u710 019C                      u711 019B  
                    u800 0130                      u801 012F                      u730 01AC  
                    u810 013A                      u731 01AB                      u811 0139  
                    u725 01A0                      u750 01BD                      u830 014D  
                    u751 01BC                      u831 014C                      u815 0136  
                    u920 050F                      u904 04F0                      u840 03A2  
                    u921 050E                      u905 04EE                      u745 01AD  
                    u825 0141                      u841 03A1                      u914 0505  
                    u770 01D1                      u850 03A8                      u915 0503  
                    u771 01D0                      u755 01B9                      u851 03A7  
                    u780 0120                      u860 03C7                      u765 01C5  
                    u781 011F                      u861 03C6                      u950 053F  
                    u934 051F                      u870 03F9                      u951 053E  
                    u935 051D                      u871 03F8                      u944 0535  
                    u880 041A                      u945 0533                      u890 04E1  
                    u891 04E0                      u795 0124                      u875 03F5  
                    u980 0569                      u964 054C                      u981 0568  
                    u965 054A                      u974 055F                      u975 055D  
                    u994 0579                      u995 0577          LCD_Init@display 0076  
                    _lcd 00C2                      fsr0 0004                      indf 0000  
        __end_of_LCD_Out 0596              main@buffer1 0049              main@buffer2 0053  
                   l1200 01A8                     l1210 01CB                     l1202 01AC  
                   l1204 01BD                     l1212 01D1                     l1220 0123  
                   l1300 0613                     l1206 01C3                     l1230 0140  
                   l1222 012A                     l1302 0627                     l1310 063D  
                   l1320 021D                     l1400 0498                     l1208 01C4  
                   l1232 0147                     l1224 012C                     l1216 011A  
                   l1240 03A2                     l1304 062B                     l1322 0232  
                   l1410 04B6                     l1402 049E                     l1330 0272  
                   l1226 0130                     l1218 0120                     l1234 014D  
                   l1242 03A8                     l1314 0644                     l1260 050F  
                   l1252 04DD                     l1324 0238                     l1412 04B8  
                   l1404 04A4                     l1340 02C8                     l1332 0286  
                   l1228 013A                     l1244 03AF                     l1308 0632  
                   l1500 0663                     l1270 0565                     l1262 0525  
                   l1254 04E1                     l1326 024F                     l1406 04AA  
                   l1342 02CF                     l1334 0295                     l1422 0152  
                   l1190 0194                     l1246 03C7                     l1238 039C  
                   l1350 00DF                     l1430 00A8                     l1502 067A  
                   l1360 009F                     l1272 0569                     l1264 053B  
                   l1256 04F6                     l1328 0258                     l1408 04B0  
                   l1344 02EA                     l1336 02AC                     l1424 0155  
                   l1192 0196                     l1248 03F9                     l1280 05AA  
                   l1352 00EB                     l1440 00C1                     l1432 00AC  
                   l1520 06A1                     l1504 0680                     l1362 00A3  
                   l1370 010C                     l1274 057F                     l1266 053F  
                   l1258 050B                     l1418 04B9                     l1338 02B0  
                   l1426 0171                     l1450 01F9                     l1194 019C  
                   l1290 05D4                     l1282 05B2                     l1346 00CB  
                   l1434 00B0                     l1530 06B3                     l1506 0686  
                   l1356 009A                     l1372 0113                     l1364 00F1  
                   l1268 0552                     l1380 0453                     l1428 0177  
                   l1460 0306                     l1452 0202                     l1444 01D6  
                   l1196 019F                     l1292 05DC                     l1284 05B6  
                   l1276 0596                     l1348 00D0                     l1436 00B2  
                   l1532 06E3                     l1516 0692                     l1508 068C  
                   l1358 009E                     l1366 00F4                     l1390 046C  
                   l1382 0455                     l1470 0330                     l1462 030A  
                   l1454 0213                     l1446 01DE                     l1198 01A6  
                   l1294 05F2                     l1286 05BA                     l1278 05A6  
                   l1438 00B4                     l1542 0723                     l1534 06F6  
                   l1518 069B                     l1368 0103                     l1392 0475  
                   l1384 045F                     l1376 0436                     l1480 0353  
                   l1472 0338                     l1464 031B                     l1448 01E2  
                   l1296 0607                     l1288 05C6                     l1560 0750  
                   l1552 0738                     l1536 0709                     l1528 06A7  
                   l1394 047B                     l1386 0461                     l1378 0447  
                   l1482 0365                     l1474 033B                     l1490 0383  
                   l1466 0326                     l1458 0303                     l1298 060D  
                   l1570 07C0                     l1562 0780                     l1538 071A  
                   l1396 0489                     l1388 046B                     l1492 0388  
                   l1484 0373                     l1476 0346                     l1468 0328  
                   l1564 0793                     l1548 072F                     l1398 0492  
                   l1494 0393                     l1486 0374                     l1478 034A  
                   l1566 07A6                     l1558 0744                     l1488 037D  
                   l1568 07B7                     l1498 065E                     STR_1 0013  
                   STR_2 002B                     STR_3 001F                     STR_4 002B  
                   u1010 05A6                     u1011 05A5                     u1004 058F  
                   u1020 05C6                     u1005 058D                     u1021 05C5  
                   u1030 060D                     u1031 060C                     u1200 046B  
                   u1040 0612                     u1201 046A                     u1105 0289  
                   u1041 0611                     u1114 02A7                     u1050 0631  
                   u1115 02A5                     u1051 0630                     u1124 02C2  
                   u1220 015F                     u1300 030A                     u1205 0467  
                   u1125 02C0                     u1301 0309                     u1134 02E1  
                   u1230 0181                     u1310 031B                     u1150 00EB  
                   u1215 04BC                     u1135 02DF                     u1311 031A  
                   u1151 00EA                     u1064 022C                     u1144 02FC  
                   u1240 0193                     u1320 0338                     u1065 022A  
                   u1145 02FA                     u1241 0192                     u1321 0337  
                   u1170 0113                     u1074 024A                     u1250 01E2  
                   u1171 0112                     u1075 0248                     u1251 01E1  
                   u1084 026A                     u1180 0453                     u1340 034A  
                   u1165 00FB                     u1085 0268                     u1181 0452  
                   u1341 0349                     u1261 01EB                     u1190 045F  
                   u1094 0281                     u1262 01F2                     u1191 045E  
                   u1095 027F                     u1335 033D                     u1263 01F9  
                   u1360 0365                     u1185 044F                     u1361 0364  
                   u1417 07C6                     u1290 0213                     u1195 045B  
                   u1427 02AE                     u1355 034C                     u1291 0212  
                   u1275 01FB                     u1380 0383                     u1437 02E8  
                   u1381 0382                     u1365 0361                     u1285 0203  
                   u1390 0388                     u1447 0470                     u1391 0387  
                   u1375 0375                     u1457 047F                     u1467 048D  
                   u1477 0253                     u1487 0107                     _dbuf 00A0  
                   _main 065E                     _prec 006D                     btemp 007E  
                   start 0000         __end_of_ADC_init 00A8         __end_of_ADC_read 011A  
            LCD_Init@cmd 007D         __end_of_LCD_Init 04DC         __end_of_LCD_putc 0303  
        __end_of___aldiv 039C                    ?_main 0043                    _ANSEL 0188  
        __end_of___lwdiv 01D6          __end_of___lwmod 0152             vfpfcnvrt@fmt 0022  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
    ___lmul@multiplicand 0074                    _flags 006F                    _fputc 039C  
                  _width 00C0                    _putch 008C                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 00CB  
        __initialization 07CE             __end_of_main 07CE                   ??_main 0047  
              ??_LCD_Out 0070        __end_of_LCD_Write 0271        __end_of_LCD_putrs 0194  
                 _ADCON0 001F                   _ADCON1 009F                   ?_fputc 0070  
                 _ADRESH 001E                   _ADRESL 009E                   ?_putch 0070  
                 _ANSELH 0189             vfprintf@cfmt 007D                   ___lmul 01D6  
              ??___aldiv 007D                ??___lwdiv 0074                ??___lwmod 0074  
                 fputc@c 0070                ?_ADC_init 0070                ?_ADC_read 0070  
                 putch@c 0070         __end_of_vfprintf 00F0                ??_sprintf 0036  
__end_of__initialization 07FC                ?_LCD_Init 0076                ?_LCD_putc 0070  
         __pcstackCOMMON 0070             __pidataBANK1 008D            __end_of_fputc 0436  
          __end_of_putch 008D                LCD_putc@c 0075          ADC_read@channel 0074  
             ??_ADC_init 0070               ??_ADC_read 0072                  ??_fputc 0074  
                ??_putch 0070               __pbssBANK0 006D               __pbssBANK1 00A0  
             ??_LCD_Init 007B               ??_LCD_putc 0073               __pmaintext 065E  
                ?___lmul 0070           ___lmul@product 0079                  _LCD_Out 04DC  
             __stringtab 0003                  ___aldiv 0303                  ___lwdiv 0194  
                ___lwmod 011A                ?_vfprintf 002C                  __ptext1 00A8  
                __ptext2 00CB                  __ptext3 0596                  __ptext4 039C  
                __ptext5 008C                  __ptext6 011A                  __ptext7 0194  
                __ptext8 01D6                  __ptext9 0303         ___aldiv@dividend 0024  
                _sprintf 00A8                  clrloop0 0093                _LCD_Write 021C  
   end_of_initialization 07FC                _LCD_putrs 0152                  fputc@fp 0072  
      __end_of_vfpfcnvrt 065E         ___aldiv@quotient 002A         vfpfcnvrt@convarg 0026  
             ??_vfprintf 007D          main@adc_result1 005D          main@adc_result2 0063  
             ?_LCD_Write 0070               ?_LCD_putrs 0076           __end_of___lmul 021C  
            vfpfcnvrt@ap 0023              vfpfcnvrt@cp 002A              vfpfcnvrt@fp 0020  
             LCD_Write@c 0075      start_initialization 07CE               LCD_putrs@a 0076  
             LCD_putrs@i 007B              vfprintf@fmt 002E                 ??___lmul 0078  
            __pdataBANK1 00C2                 ?_LCD_Out 0070                ___latbits 0002  
          __pcstackBANK0 0020                 LCD_Out@c 0072              ??_LCD_Write 0073  
            ??_LCD_putrs 0078         ___lwdiv@dividend 0072                 ?___aldiv 0020  
               ?___lwdiv 0070                 ?___lwmod 0070                __pstrings 0003  
               _ADC_init 009A                 _ADC_read 00F0         ___lwdiv@quotient 0074  
               ?_sprintf 0030          ___aldiv@divisor 0020          ___aldiv@counter 0028  
               _LCD_Init 0436                clear_ram0 0092                 _LCD_putc 0271  
               _GO_nDONE 00F9                _vfpfcnvrt 0596              __stringbase 0012  
              main@volt1 0069                main@volt2 006B               vfpfcnvrt@c 002B  
      ___lmul@multiplier 0070               vfprintf@ap 002F               vfprintf@fp 002C  
             ?_vfpfcnvrt 0020       __end_of__stringtab 0013               sprintf@fmt 0031  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0076                 __ptext10 0152  
               __ptext11 0271                 __ptext12 0436                 __ptext13 021C  
               __ptext14 04DC                 __ptext15 00F0                 __ptext16 009A  
               _vfprintf 00CB                 main@dec1 0061                 main@dec2 0067  
               main@ent1 005F                 main@ent2 0065                 main@argc 0043  
               main@argv 0045                sprintf@ap 0037         ___lwmod@dividend 0072  
              stringcode 000D              ??_vfpfcnvrt 0024                 sprintf@f 0038  
               sprintf@s 0030          ___lwmod@divisor 0070          ___lwmod@counter 0074  
               stringdir 000D                 stringtab 0003             ___aldiv@sign 0029  
