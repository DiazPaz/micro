

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Jun 19 11:49:57 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,space=0,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    16                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=3
    17                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    18                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    21                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=3
    22                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=3
    23                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=3
    24                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    26                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=1
    27                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    29                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=2
    30                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,space=0,delta=2
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    43                           	dabs	1,0x7E,2
    44     0000                     
    45                           ; Generated 26/03/2025 GMT
    46                           ; 
    47                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution. Publication is not required when
    61                           ;        this file is used in an embedded application.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F887 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79     0004                     fsr             equ	4
    80     0004                     fsr0            equ	4
    81     0000                     indf            equ	0
    82     0000                     indf0           equ	0
    83     0002                     pc              equ	2
    84     0002                     pcl             equ	2
    85     000A                     pclath          equ	10
    86     0003                     status          equ	3
    87     0000                     INDF            equ	0	;# 
    88     0001                     TMR0            equ	1	;# 
    89     0002                     PCL             equ	2	;# 
    90     0003                     STATUS          equ	3	;# 
    91     0004                     FSR             equ	4	;# 
    92     0005                     PORTA           equ	5	;# 
    93     0006                     PORTB           equ	6	;# 
    94     0007                     PORTC           equ	7	;# 
    95     0008                     PORTD           equ	8	;# 
    96     0009                     PORTE           equ	9	;# 
    97     000A                     PCLATH          equ	10	;# 
    98     000B                     INTCON          equ	11	;# 
    99     000C                     PIR1            equ	12	;# 
   100     000D                     PIR2            equ	13	;# 
   101     000E                     TMR1            equ	14	;# 
   102     000E                     TMR1L           equ	14	;# 
   103     000F                     TMR1H           equ	15	;# 
   104     0010                     T1CON           equ	16	;# 
   105     0011                     TMR2            equ	17	;# 
   106     0012                     T2CON           equ	18	;# 
   107     0013                     SSPBUF          equ	19	;# 
   108     0014                     SSPCON          equ	20	;# 
   109     0015                     CCPR1           equ	21	;# 
   110     0015                     CCPR1L          equ	21	;# 
   111     0016                     CCPR1H          equ	22	;# 
   112     0017                     CCP1CON         equ	23	;# 
   113     0018                     RCSTA           equ	24	;# 
   114     0019                     TXREG           equ	25	;# 
   115     001A                     RCREG           equ	26	;# 
   116     001B                     CCPR2           equ	27	;# 
   117     001B                     CCPR2L          equ	27	;# 
   118     001C                     CCPR2H          equ	28	;# 
   119     001D                     CCP2CON         equ	29	;# 
   120     001E                     ADRESH          equ	30	;# 
   121     001F                     ADCON0          equ	31	;# 
   122     0081                     OPTION_REG      equ	129	;# 
   123     0085                     TRISA           equ	133	;# 
   124     0086                     TRISB           equ	134	;# 
   125     0087                     TRISC           equ	135	;# 
   126     0088                     TRISD           equ	136	;# 
   127     0089                     TRISE           equ	137	;# 
   128     008C                     PIE1            equ	140	;# 
   129     008D                     PIE2            equ	141	;# 
   130     008E                     PCON            equ	142	;# 
   131     008F                     OSCCON          equ	143	;# 
   132     0090                     OSCTUNE         equ	144	;# 
   133     0091                     SSPCON2         equ	145	;# 
   134     0092                     PR2             equ	146	;# 
   135     0093                     SSPADD          equ	147	;# 
   136     0093                     SSPMSK          equ	147	;# 
   137     0093                     MSK             equ	147	;# 
   138     0094                     SSPSTAT         equ	148	;# 
   139     0095                     WPUB            equ	149	;# 
   140     0096                     IOCB            equ	150	;# 
   141     0097                     VRCON           equ	151	;# 
   142     0098                     TXSTA           equ	152	;# 
   143     0099                     SPBRG           equ	153	;# 
   144     009A                     SPBRGH          equ	154	;# 
   145     009B                     PWM1CON         equ	155	;# 
   146     009C                     ECCPAS          equ	156	;# 
   147     009D                     PSTRCON         equ	157	;# 
   148     009E                     ADRESL          equ	158	;# 
   149     009F                     ADCON1          equ	159	;# 
   150     0105                     WDTCON          equ	261	;# 
   151     0107                     CM1CON0         equ	263	;# 
   152     0108                     CM2CON0         equ	264	;# 
   153     0109                     CM2CON1         equ	265	;# 
   154     010C                     EEDATA          equ	268	;# 
   155     010C                     EEDAT           equ	268	;# 
   156     010D                     EEADR           equ	269	;# 
   157     010E                     EEDATH          equ	270	;# 
   158     010F                     EEADRH          equ	271	;# 
   159     0185                     SRCON           equ	389	;# 
   160     0187                     BAUDCTL         equ	391	;# 
   161     0188                     ANSEL           equ	392	;# 
   162     0189                     ANSELH          equ	393	;# 
   163     018C                     EECON1          equ	396	;# 
   164     018D                     EECON2          equ	397	;# 
   165     0000                     INDF            equ	0	;# 
   166     0001                     TMR0            equ	1	;# 
   167     0002                     PCL             equ	2	;# 
   168     0003                     STATUS          equ	3	;# 
   169     0004                     FSR             equ	4	;# 
   170     0005                     PORTA           equ	5	;# 
   171     0006                     PORTB           equ	6	;# 
   172     0007                     PORTC           equ	7	;# 
   173     0008                     PORTD           equ	8	;# 
   174     0009                     PORTE           equ	9	;# 
   175     000A                     PCLATH          equ	10	;# 
   176     000B                     INTCON          equ	11	;# 
   177     000C                     PIR1            equ	12	;# 
   178     000D                     PIR2            equ	13	;# 
   179     000E                     TMR1            equ	14	;# 
   180     000E                     TMR1L           equ	14	;# 
   181     000F                     TMR1H           equ	15	;# 
   182     0010                     T1CON           equ	16	;# 
   183     0011                     TMR2            equ	17	;# 
   184     0012                     T2CON           equ	18	;# 
   185     0013                     SSPBUF          equ	19	;# 
   186     0014                     SSPCON          equ	20	;# 
   187     0015                     CCPR1           equ	21	;# 
   188     0015                     CCPR1L          equ	21	;# 
   189     0016                     CCPR1H          equ	22	;# 
   190     0017                     CCP1CON         equ	23	;# 
   191     0018                     RCSTA           equ	24	;# 
   192     0019                     TXREG           equ	25	;# 
   193     001A                     RCREG           equ	26	;# 
   194     001B                     CCPR2           equ	27	;# 
   195     001B                     CCPR2L          equ	27	;# 
   196     001C                     CCPR2H          equ	28	;# 
   197     001D                     CCP2CON         equ	29	;# 
   198     001E                     ADRESH          equ	30	;# 
   199     001F                     ADCON0          equ	31	;# 
   200     0081                     OPTION_REG      equ	129	;# 
   201     0085                     TRISA           equ	133	;# 
   202     0086                     TRISB           equ	134	;# 
   203     0087                     TRISC           equ	135	;# 
   204     0088                     TRISD           equ	136	;# 
   205     0089                     TRISE           equ	137	;# 
   206     008C                     PIE1            equ	140	;# 
   207     008D                     PIE2            equ	141	;# 
   208     008E                     PCON            equ	142	;# 
   209     008F                     OSCCON          equ	143	;# 
   210     0090                     OSCTUNE         equ	144	;# 
   211     0091                     SSPCON2         equ	145	;# 
   212     0092                     PR2             equ	146	;# 
   213     0093                     SSPADD          equ	147	;# 
   214     0093                     SSPMSK          equ	147	;# 
   215     0093                     MSK             equ	147	;# 
   216     0094                     SSPSTAT         equ	148	;# 
   217     0095                     WPUB            equ	149	;# 
   218     0096                     IOCB            equ	150	;# 
   219     0097                     VRCON           equ	151	;# 
   220     0098                     TXSTA           equ	152	;# 
   221     0099                     SPBRG           equ	153	;# 
   222     009A                     SPBRGH          equ	154	;# 
   223     009B                     PWM1CON         equ	155	;# 
   224     009C                     ECCPAS          equ	156	;# 
   225     009D                     PSTRCON         equ	157	;# 
   226     009E                     ADRESL          equ	158	;# 
   227     009F                     ADCON1          equ	159	;# 
   228     0105                     WDTCON          equ	261	;# 
   229     0107                     CM1CON0         equ	263	;# 
   230     0108                     CM2CON0         equ	264	;# 
   231     0109                     CM2CON1         equ	265	;# 
   232     010C                     EEDATA          equ	268	;# 
   233     010C                     EEDAT           equ	268	;# 
   234     010D                     EEADR           equ	269	;# 
   235     010E                     EEDATH          equ	270	;# 
   236     010F                     EEADRH          equ	271	;# 
   237     0185                     SRCON           equ	389	;# 
   238     0187                     BAUDCTL         equ	391	;# 
   239     0188                     ANSEL           equ	392	;# 
   240     0189                     ANSELH          equ	393	;# 
   241     018C                     EECON1          equ	396	;# 
   242     018D                     EECON2          equ	397	;# 
   243     0000                     INDF            equ	0	;# 
   244     0001                     TMR0            equ	1	;# 
   245     0002                     PCL             equ	2	;# 
   246     0003                     STATUS          equ	3	;# 
   247     0004                     FSR             equ	4	;# 
   248     0005                     PORTA           equ	5	;# 
   249     0006                     PORTB           equ	6	;# 
   250     0007                     PORTC           equ	7	;# 
   251     0008                     PORTD           equ	8	;# 
   252     0009                     PORTE           equ	9	;# 
   253     000A                     PCLATH          equ	10	;# 
   254     000B                     INTCON          equ	11	;# 
   255     000C                     PIR1            equ	12	;# 
   256     000D                     PIR2            equ	13	;# 
   257     000E                     TMR1            equ	14	;# 
   258     000E                     TMR1L           equ	14	;# 
   259     000F                     TMR1H           equ	15	;# 
   260     0010                     T1CON           equ	16	;# 
   261     0011                     TMR2            equ	17	;# 
   262     0012                     T2CON           equ	18	;# 
   263     0013                     SSPBUF          equ	19	;# 
   264     0014                     SSPCON          equ	20	;# 
   265     0015                     CCPR1           equ	21	;# 
   266     0015                     CCPR1L          equ	21	;# 
   267     0016                     CCPR1H          equ	22	;# 
   268     0017                     CCP1CON         equ	23	;# 
   269     0018                     RCSTA           equ	24	;# 
   270     0019                     TXREG           equ	25	;# 
   271     001A                     RCREG           equ	26	;# 
   272     001B                     CCPR2           equ	27	;# 
   273     001B                     CCPR2L          equ	27	;# 
   274     001C                     CCPR2H          equ	28	;# 
   275     001D                     CCP2CON         equ	29	;# 
   276     001E                     ADRESH          equ	30	;# 
   277     001F                     ADCON0          equ	31	;# 
   278     0081                     OPTION_REG      equ	129	;# 
   279     0085                     TRISA           equ	133	;# 
   280     0086                     TRISB           equ	134	;# 
   281     0087                     TRISC           equ	135	;# 
   282     0088                     TRISD           equ	136	;# 
   283     0089                     TRISE           equ	137	;# 
   284     008C                     PIE1            equ	140	;# 
   285     008D                     PIE2            equ	141	;# 
   286     008E                     PCON            equ	142	;# 
   287     008F                     OSCCON          equ	143	;# 
   288     0090                     OSCTUNE         equ	144	;# 
   289     0091                     SSPCON2         equ	145	;# 
   290     0092                     PR2             equ	146	;# 
   291     0093                     SSPADD          equ	147	;# 
   292     0093                     SSPMSK          equ	147	;# 
   293     0093                     MSK             equ	147	;# 
   294     0094                     SSPSTAT         equ	148	;# 
   295     0095                     WPUB            equ	149	;# 
   296     0096                     IOCB            equ	150	;# 
   297     0097                     VRCON           equ	151	;# 
   298     0098                     TXSTA           equ	152	;# 
   299     0099                     SPBRG           equ	153	;# 
   300     009A                     SPBRGH          equ	154	;# 
   301     009B                     PWM1CON         equ	155	;# 
   302     009C                     ECCPAS          equ	156	;# 
   303     009D                     PSTRCON         equ	157	;# 
   304     009E                     ADRESL          equ	158	;# 
   305     009F                     ADCON1          equ	159	;# 
   306     0105                     WDTCON          equ	261	;# 
   307     0107                     CM1CON0         equ	263	;# 
   308     0108                     CM2CON0         equ	264	;# 
   309     0109                     CM2CON1         equ	265	;# 
   310     010C                     EEDATA          equ	268	;# 
   311     010C                     EEDAT           equ	268	;# 
   312     010D                     EEADR           equ	269	;# 
   313     010E                     EEDATH          equ	270	;# 
   314     010F                     EEADRH          equ	271	;# 
   315     0185                     SRCON           equ	389	;# 
   316     0187                     BAUDCTL         equ	391	;# 
   317     0188                     ANSEL           equ	392	;# 
   318     0189                     ANSELH          equ	393	;# 
   319     018C                     EECON1          equ	396	;# 
   320     018D                     EECON2          equ	397	;# 
   321                           
   322                           	psect	idataBANK1
   323     0E6D                     __pidataBANK1:
   324                           
   325                           ;initializer for _lcd
   326     0E6D  3407               	retlw	7
   327     0E6E  3400               	retlw	0
   328     0E6F  341A               	retlw	26
   329     0E70  342C               	retlw	44
   330     0E71  343E               	retlw	62
   331     0006                     _PORTB          set	6
   332     0005                     _PORTA          set	5
   333     0008                     _PORTDbits      set	8
   334     001E                     _ADRESH         set	30
   335     001F                     _ADCON0         set	31
   336     0001                     _TMR0           set	1
   337     000E                     _TMR1L          set	14
   338     000F                     _TMR1H          set	15
   339     0010                     _T1CON          set	16
   340     0007                     _PORTC          set	7
   341     0060                     _TMR1IF         set	96
   342     005A                     _T0IF           set	90
   343     00F9                     _GO_nDONE       set	249
   344     005D                     _T0IE           set	93
   345     005F                     _GIE            set	95
   346     005E                     _PEIE           set	94
   347     0087                     _TRISC          set	135
   348     0086                     _TRISB          set	134
   349     0085                     _TRISA          set	133
   350     009E                     _ADRESL         set	158
   351     009F                     _ADCON1         set	159
   352     0081                     _OPTION_REG     set	129
   353     0440                     _TRISD0         set	1088
   354     0460                     _TMR1IE         set	1120
   355     0188                     _ANSEL          set	392
   356                           
   357                           	psect	strings
   358     0800                     __pstrings:
   359     0800                     stringtab:
   360     0800                     __stringtab:
   361                           
   362                           ;	String table - string pointers are 1 byte each
   363     0800  1BFF               	btfsc	btemp+1,7
   364     0801  280A               	ljmp	stringcode
   365     0802  1383               	bcf	3,7
   366     0803  187F               	btfsc	btemp+1,0
   367     0804  1783               	bsf	3,7
   368     0805  0800               	movf	0,w
   369     0806  0A84               	incf	4,f
   370     0807  1903               	skipnz
   371     0808  0AFF               	incf	btemp+1,f
   372     0809  0008               	return
   373     080A                     stringcode:
   374     080A                     stringdir:
   375     080A  3008               	movlw	high stringdir
   376     080B  008A               	movwf	10
   377     080C  0804               	movf	4,w
   378     080D  0A84               	incf	4,f
   379     080E  0782               	addwf	2,f
   380     080F                     __stringbase:
   381     080F  3400               	retlw	0
   382     0810                     __end_of__stringtab:
   383     0810                     STR_1:
   384     0810  3456               	retlw	86	;'V'
   385     0811  346F               	retlw	111	;'o'
   386     0812  346C               	retlw	108	;'l'
   387     0813  3474               	retlw	116	;'t'
   388     0814  3461               	retlw	97	;'a'
   389     0815  346A               	retlw	106	;'j'
   390     0816  3465               	retlw	101	;'e'
   391     0817  343A               	retlw	58	;':'
   392     0818  3420               	retlw	32	;' '
   393     0819  3400               	retlw	0
   394     081A                     STR_2:
   395     081A  3420               	retlw	32	;' '
   396     081B  3454               	retlw	84	;'T'
   397     081C  3469               	retlw	105	;'i'
   398     081D  3465               	retlw	101	;'e'
   399     081E  346D               	retlw	109	;'m'
   400     081F  3470               	retlw	112	;'p'
   401     0820  346F               	retlw	111	;'o'
   402     0821  343A               	retlw	58	;':'
   403     0822  3420               	retlw	32	;' '
   404     0823  3400               	retlw	0
   405     0824                     STR_4:
   406     0824  3425               	retlw	37	;'%'
   407     0825  3430               	retlw	48	;'0'
   408     0826  3432               	retlw	50	;'2'
   409     0827  3475               	retlw	117	;'u'
   410     0828  343A               	retlw	58	;':'
   411     0829  3425               	retlw	37	;'%'
   412     082A  3430               	retlw	48	;'0'
   413     082B  3432               	retlw	50	;'2'
   414     082C  3475               	retlw	117	;'u'
   415     082D  3400               	retlw	0
   416     082E                     STR_5:
   417     082E  3425               	retlw	37	;'%'
   418     082F  3475               	retlw	117	;'u'
   419     0830  342E               	retlw	46	;'.'
   420     0831  3425               	retlw	37	;'%'
   421     0832  3430               	retlw	48	;'0'
   422     0833  3433               	retlw	51	;'3'
   423     0834  3475               	retlw	117	;'u'
   424     0835  3400               	retlw	0
   425     0836                     STR_3:
   426     0836  3430               	retlw	48	;'0'
   427     0837  3430               	retlw	48	;'0'
   428     0838  343A               	retlw	58	;':'
   429     0839  3430               	retlw	48	;'0'
   430     083A  3430               	retlw	48	;'0'
   431     083B  3400               	retlw	0
   432                           
   433                           	psect	cinit
   434     000F                     start_initialization:	
   435                           ; #config settings
   436                           
   437     000F                     __initialization:
   438                           
   439                           ; Initialize objects allocated to BANK1
   440     000F  1683               	bsf	3,5	;RP0=1, select bank1
   441     0010  1303               	bcf	3,6	;RP1=0, select bank1
   442     0011  120A  158A  266D  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   443     0016  00DB               	movwf	__pdataBANK1& (0+127)
   444     0017  120A  158A  266E  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   445     001C  00DC               	movwf	(__pdataBANK1+1)& (0+127)
   446     001D  120A  158A  266F  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   447     0022  00DD               	movwf	(__pdataBANK1+2)& (0+127)
   448     0023  120A  158A  2670  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   449     0028  00DE               	movwf	(__pdataBANK1+3)& (0+127)
   450     0029  120A  158A  2671  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
   451     002E  00DF               	movwf	(__pdataBANK1+4)& (0+127)
   452                           
   453                           ; Clear objects allocated to BANK1
   454     002F  1383               	bcf	3,7	;select IRP bank0
   455     0030  30A0               	movlw	low __pbssBANK1
   456     0031  0084               	movwf	4
   457     0032  30C3               	movlw	low (__pbssBANK1+35)
   458     0033  120A  158A  2672  120A  118A  	fcall	clear_ram0
   459                           
   460                           ; Clear objects allocated to BANK0
   461     0038  3062               	movlw	low __pbssBANK0
   462     0039  0084               	movwf	4
   463     003A  306F               	movlw	low (__pbssBANK0+13)
   464     003B  120A  158A  2672  120A  118A  	fcall	clear_ram0
   465                           
   466                           ; Clear objects allocated to COMMON
   467     0040  01FA               	clrf	__pbssCOMMON& (0+127)
   468     0041  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   469     0042                     end_of_initialization:	
   470                           ;End of C runtime variable initialization code
   471                           
   472     0042                     __end_of__initialization:
   473     0042  0183               	clrf	3
   474     0043  120A  118A  2846   	ljmp	_main	;jump to C main() function
   475                           
   476                           	psect	bssCOMMON
   477     007A                     __pbssCOMMON:
   478     007A                     _timer1:
   479     007A                     	ds	2
   480                           
   481                           	psect	bssBANK0
   482     0062                     __pbssBANK0:
   483     0062                     _width:
   484     0062                     	ds	2
   485     0064                     _prec:
   486     0064                     	ds	2
   487     0066                     _count0:
   488     0066                     	ds	2
   489     0068                     _flags:
   490     0068                     	ds	1
   491     0069                     _exec:
   492     0069                     	ds	6
   493                           
   494                           	psect	bssBANK1
   495     00A0                     __pbssBANK1:
   496     00A0                     _timer0:
   497     00A0                     	ds	2
   498     00A2                     _onOff:
   499     00A2                     	ds	1
   500     00A3                     _dbuf:
   501     00A3                     	ds	32
   502                           
   503                           	psect	dataBANK1
   504     00DB                     __pdataBANK1:
   505     00DB                     _lcd:
   506     00DB                     	ds	5
   507                           
   508                           	psect	clrtext
   509     0E72                     clear_ram0:	
   510                           ;	Called with FSR containing the base address, and
   511                           ;	W with the last address+1
   512                           
   513     0E72  0064               	clrwdt	;clear the watchdog before getting into this loop
   514     0E73                     clrloop0:
   515     0E73  0180               	clrf	0	;clear RAM location pointed to by FSR
   516     0E74  0A84               	incf	4,f	;increment pointer
   517     0E75  0604               	xorwf	4,w	;XOR with final address
   518     0E76  1903               	btfsc	3,2	;have we reached the end yet?
   519     0E77  3400               	retlw	0	;all done for this memory range, return
   520     0E78  0604               	xorwf	4,w	;XOR again to restore value
   521     0E79  2E73               	goto	clrloop0	;do the next byte
   522                           
   523                           	psect	cstackBANK1
   524     00C3                     __pcstackBANK1:
   525     00C3                     ??_main:
   526                           
   527                           ; 1 bytes @ 0x0
   528     00C3                     	ds	2
   529     00C5                     main@buffer:
   530                           
   531                           ; 10 bytes @ 0x2
   532     00C5                     	ds	10
   533     00CF                     main@adc_result:
   534                           
   535                           ; 2 bytes @ 0xC
   536     00CF                     	ds	2
   537     00D1                     main@part_ent:
   538                           
   539                           ; 2 bytes @ 0xE
   540     00D1                     	ds	2
   541     00D3                     main@part_dec:
   542                           
   543                           ; 2 bytes @ 0x10
   544     00D3                     	ds	2
   545     00D5                     _main$957:
   546                           
   547                           ; 2 bytes @ 0x12
   548     00D5                     	ds	2
   549     00D7                     _main$958:
   550                           
   551                           ; 2 bytes @ 0x14
   552     00D7                     	ds	2
   553     00D9                     main@voltaje:
   554                           
   555                           ; 2 bytes @ 0x16
   556     00D9                     	ds	2
   557                           
   558                           	psect	cstackCOMMON
   559     0070                     __pcstackCOMMON:
   560     0070                     ?_LCD_Write:
   561     0070                     ?_putch:	
   562                           ; 1 bytes @ 0x0
   563                           
   564     0070                     ?_TMR1_init:	
   565                           ; 1 bytes @ 0x0
   566                           
   567     0070                     ?_Timer0_Init:	
   568                           ; 1 bytes @ 0x0
   569                           
   570     0070                     ?_ADC_Initialize:	
   571                           ; 1 bytes @ 0x0
   572                           
   573     0070                     ?_ISR:	
   574                           ; 1 bytes @ 0x0
   575                           
   576     0070                     ?_main:	
   577                           ; 1 bytes @ 0x0
   578                           
   579     0070                     ?_LCD_Out:	
   580                           ; 1 bytes @ 0x0
   581                           
   582     0070                     ?_LCD_putc:	
   583                           ; 1 bytes @ 0x0
   584                           
   585     0070                     putch@c:	
   586                           ; 1 bytes @ 0x0
   587                           
   588     0070                     ??_ISR:	
   589                           ; 1 bytes @ 0x0
   590                           
   591                           
   592                           ; 1 bytes @ 0x0
   593     0070                     	ds	2
   594     0072                     ?_fputc:
   595     0072                     ?_ADC_read:	
   596                           ; 2 bytes @ 0x2
   597                           
   598     0072                     ?___wmul:	
   599                           ; 2 bytes @ 0x2
   600                           
   601     0072                     ?___lwdiv:	
   602                           ; 2 bytes @ 0x2
   603                           
   604     0072                     ?___lwmod:	
   605                           ; 2 bytes @ 0x2
   606                           
   607     0072                     ?___lmul:	
   608                           ; 2 bytes @ 0x2
   609                           
   610     0072                     ___wmul@multiplier:	
   611                           ; 4 bytes @ 0x2
   612                           
   613     0072                     ___lwdiv@divisor:	
   614                           ; 2 bytes @ 0x2
   615                           
   616     0072                     ___lwmod@divisor:	
   617                           ; 2 bytes @ 0x2
   618                           
   619     0072                     fputc@c:	
   620                           ; 2 bytes @ 0x2
   621                           
   622     0072                     ___lmul@multiplier:	
   623                           ; 2 bytes @ 0x2
   624                           
   625     0072                     ??_putch:	
   626                           ; 4 bytes @ 0x2
   627                           
   628     0072                     ??_TMR1_init:	
   629                           ; 1 bytes @ 0x2
   630                           
   631     0072                     ??_Timer0_Init:	
   632                           ; 1 bytes @ 0x2
   633                           
   634     0072                     ??_ADC_Initialize:	
   635                           ; 1 bytes @ 0x2
   636                           
   637     0072                     ??_LCD_Out:	
   638                           ; 1 bytes @ 0x2
   639                           
   640                           
   641                           ; 1 bytes @ 0x2
   642     0072                     	ds	2
   643     0074                     LCD_Out@c:
   644     0074                     ___wmul@multiplicand:	
   645                           ; 1 bytes @ 0x4
   646                           
   647     0074                     ___lwdiv@dividend:	
   648                           ; 2 bytes @ 0x4
   649                           
   650     0074                     ___lwmod@dividend:	
   651                           ; 2 bytes @ 0x4
   652                           
   653     0074                     fputc@fp:	
   654                           ; 2 bytes @ 0x4
   655                           
   656     0074                     ??_ADC_read:	
   657                           ; 2 bytes @ 0x4
   658                           
   659                           
   660                           ; 1 bytes @ 0x4
   661     0074                     	ds	1
   662     0075                     ??_LCD_Write:
   663     0075                     ??_LCD_putc:	
   664                           ; 1 bytes @ 0x5
   665                           
   666                           
   667                           ; 1 bytes @ 0x5
   668     0075                     	ds	1
   669     0076                     ?_fputs:
   670     0076                     ___lwmod@counter:	
   671                           ; 2 bytes @ 0x6
   672                           
   673     0076                     fputs@s:	
   674                           ; 1 bytes @ 0x6
   675                           
   676     0076                     ___wmul@product:	
   677                           ; 1 bytes @ 0x6
   678                           
   679     0076                     ___lwdiv@quotient:	
   680                           ; 2 bytes @ 0x6
   681                           
   682     0076                     ___lmul@multiplicand:	
   683                           ; 2 bytes @ 0x6
   684                           
   685     0076                     ??___wmul:	
   686                           ; 4 bytes @ 0x6
   687                           
   688     0076                     ??___lwdiv:	
   689                           ; 1 bytes @ 0x6
   690                           
   691     0076                     ??___lwmod:	
   692                           ; 1 bytes @ 0x6
   693                           
   694                           
   695                           ; 1 bytes @ 0x6
   696     0076                     	ds	1
   697     0077                     LCD_Write@c:
   698     0077                     LCD_putc@c:	
   699                           ; 1 bytes @ 0x7
   700                           
   701     0077                     fputs@fp:	
   702                           ; 1 bytes @ 0x7
   703                           
   704                           
   705                           ; 2 bytes @ 0x7
   706     0077                     	ds	1
   707     0078                     ?_LCD_putrs:
   708     0078                     ?_LCD_puts:	
   709                           ; 1 bytes @ 0x8
   710                           
   711     0078                     ?_read_prec_or_width:	
   712                           ; 1 bytes @ 0x8
   713                           
   714     0078                     LCD_puts@a:	
   715                           ; 2 bytes @ 0x8
   716                           
   717     0078                     ___lwdiv@counter:	
   718                           ; 1 bytes @ 0x8
   719                           
   720     0078                     read_prec_or_width@fmt:	
   721                           ; 1 bytes @ 0x8
   722                           
   723     0078                     LCD_putrs@a:	
   724                           ; 1 bytes @ 0x8
   725                           
   726     0078                     ??_LCD_Init:	
   727                           ; 2 bytes @ 0x8
   728                           
   729                           
   730                           ; 1 bytes @ 0x8
   731     0078                     	ds	1
   732     0079                     read_prec_or_width@ap:
   733     0079                     ??_LCD_puts:	
   734                           ; 1 bytes @ 0x9
   735                           
   736     0079                     ??_pad:	
   737                           ; 1 bytes @ 0x9
   738                           
   739                           
   740                           ; 1 bytes @ 0x9
   741     0079                     	ds	1
   742     007A                     ??_vfprintf:
   743     007A                     ??_utoa:	
   744                           ; 1 bytes @ 0xA
   745                           
   746     007A                     ??_read_prec_or_width:	
   747                           ; 1 bytes @ 0xA
   748                           
   749                           
   750                           	psect	cstackBANK0
   751     0020                     __pcstackBANK0:	
   752                           ; 1 bytes @ 0xA
   753                           
   754     0020                     ?_LCD_Init:
   755     0020                     read_prec_or_width@c:	
   756                           ; 1 bytes @ 0x0
   757                           
   758     0020                     LCD_puts@i:	
   759                           ; 1 bytes @ 0x0
   760                           
   761     0020                     LCD_Init@display:	
   762                           ; 2 bytes @ 0x0
   763                           
   764     0020                     ??_LCD_putrs:	
   765                           ; 5 bytes @ 0x0
   766                           
   767     0020                     ??_fputc:	
   768                           ; 1 bytes @ 0x0
   769                           
   770     0020                     ??___lmul:	
   771                           ; 1 bytes @ 0x0
   772                           
   773                           
   774                           ; 1 bytes @ 0x0
   775     0020                     	ds	1
   776     0021                     read_prec_or_width@n:
   777     0021                     ___lmul@product:	
   778                           ; 2 bytes @ 0x1
   779                           
   780                           
   781                           ; 4 bytes @ 0x1
   782     0021                     	ds	2
   783     0023                     LCD_putrs@i:
   784                           
   785                           ; 2 bytes @ 0x3
   786     0023                     	ds	2
   787     0025                     ?___aldiv:
   788     0025                     LCD_Init@cmd:	
   789                           ; 4 bytes @ 0x5
   790                           
   791     0025                     ___aldiv@divisor:	
   792                           ; 1 bytes @ 0x5
   793                           
   794                           
   795                           ; 4 bytes @ 0x5
   796     0025                     	ds	4
   797     0029                     ___aldiv@dividend:
   798     0029                     ??_fputs:	
   799                           ; 4 bytes @ 0x9
   800                           
   801                           
   802                           ; 1 bytes @ 0x9
   803     0029                     	ds	2
   804     002B                     fputs@c:
   805                           
   806                           ; 1 bytes @ 0xB
   807     002B                     	ds	1
   808     002C                     fputs@i:
   809                           
   810                           ; 2 bytes @ 0xC
   811     002C                     	ds	1
   812     002D                     ??___aldiv:
   813                           
   814                           ; 1 bytes @ 0xD
   815     002D                     	ds	1
   816     002E                     ?_pad:
   817     002E                     ___aldiv@counter:	
   818                           ; 1 bytes @ 0xE
   819                           
   820     002E                     pad@fp:	
   821                           ; 1 bytes @ 0xE
   822                           
   823                           
   824                           ; 2 bytes @ 0xE
   825     002E                     	ds	1
   826     002F                     ___aldiv@sign:
   827                           
   828                           ; 1 bytes @ 0xF
   829     002F                     	ds	1
   830     0030                     pad@buf:
   831     0030                     ___aldiv@quotient:	
   832                           ; 1 bytes @ 0x10
   833                           
   834                           
   835                           ; 4 bytes @ 0x10
   836     0030                     	ds	1
   837     0031                     pad@p:
   838                           
   839                           ; 2 bytes @ 0x11
   840     0031                     	ds	2
   841     0033                     pad@i:
   842                           
   843                           ; 2 bytes @ 0x13
   844     0033                     	ds	2
   845     0035                     ?_utoa:
   846     0035                     utoa@fp:	
   847                           ; 1 bytes @ 0x15
   848                           
   849                           
   850                           ; 2 bytes @ 0x15
   851     0035                     	ds	2
   852     0037                     utoa@d:
   853                           
   854                           ; 2 bytes @ 0x17
   855     0037                     	ds	2
   856     0039                     utoa@p:
   857                           
   858                           ; 1 bytes @ 0x19
   859     0039                     	ds	1
   860     003A                     utoa@w:
   861                           
   862                           ; 2 bytes @ 0x1A
   863     003A                     	ds	2
   864     003C                     utoa@i:
   865                           
   866                           ; 2 bytes @ 0x1C
   867     003C                     	ds	2
   868     003E                     ?_vfpfcnvrt:
   869     003E                     vfpfcnvrt@fp:	
   870                           ; 1 bytes @ 0x1E
   871                           
   872                           
   873                           ; 2 bytes @ 0x1E
   874     003E                     	ds	2
   875     0040                     vfpfcnvrt@fmt:
   876                           
   877                           ; 1 bytes @ 0x20
   878     0040                     	ds	1
   879     0041                     vfpfcnvrt@ap:
   880                           
   881                           ; 1 bytes @ 0x21
   882     0041                     	ds	1
   883     0042                     ??_vfpfcnvrt:
   884                           
   885                           ; 1 bytes @ 0x22
   886     0042                     	ds	2
   887     0044                     vfpfcnvrt@convarg:
   888                           
   889                           ; 4 bytes @ 0x24
   890     0044                     	ds	4
   891     0048                     vfpfcnvrt@done:
   892                           
   893                           ; 1 bytes @ 0x28
   894     0048                     	ds	1
   895     0049                     vfpfcnvrt@cp:
   896                           
   897                           ; 1 bytes @ 0x29
   898     0049                     	ds	1
   899     004A                     ?_vfprintf:
   900     004A                     vfprintf@fp:	
   901                           ; 2 bytes @ 0x2A
   902                           
   903                           
   904                           ; 2 bytes @ 0x2A
   905     004A                     	ds	2
   906     004C                     vfprintf@fmt:
   907                           
   908                           ; 1 bytes @ 0x2C
   909     004C                     	ds	1
   910     004D                     vfprintf@ap:
   911                           
   912                           ; 1 bytes @ 0x2D
   913     004D                     	ds	1
   914     004E                     vfprintf@cfmt:
   915                           
   916                           ; 1 bytes @ 0x2E
   917     004E                     	ds	1
   918     004F                     ?_sprintf:
   919     004F                     sprintf@s:	
   920                           ; 2 bytes @ 0x2F
   921                           
   922                           
   923                           ; 1 bytes @ 0x2F
   924     004F                     	ds	1
   925     0050                     sprintf@fmt:
   926                           
   927                           ; 1 bytes @ 0x30
   928     0050                     	ds	5
   929     0055                     ??_sprintf:
   930                           
   931                           ; 1 bytes @ 0x35
   932     0055                     	ds	1
   933     0056                     sprintf@ap:
   934                           
   935                           ; 1 bytes @ 0x36
   936     0056                     	ds	1
   937     0057                     sprintf@f:
   938                           
   939                           ; 11 bytes @ 0x37
   940     0057                     	ds	11
   941                           
   942                           	psect	maintext
   943     0046                     __pmaintext:	
   944 ;;
   945 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   946 ;;
   947 ;; *************** function _main *****************
   948 ;; Defined at:
   949 ;;		line 101 in file "main.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;		None
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  voltaje         2   22[BANK1 ] unsigned int 
   954 ;;  part_dec        2   16[BANK1 ] unsigned int 
   955 ;;  part_ent        2   14[BANK1 ] unsigned int 
   956 ;;  adc_result      2   12[BANK1 ] unsigned int 
   957 ;;  buffer         10    2[BANK1 ] unsigned char [10]
   958 ;; Return value:  Size  Location     Type
   959 ;;                  1    wreg      void 
   960 ;; Registers used:
   961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   962 ;; Tracked objects:
   963 ;;		On entry : B00/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   967 ;;      Params:         0       0       0       0       0
   968 ;;      Locals:         0       0      22       0       0
   969 ;;      Temps:          0       0       2       0       0
   970 ;;      Totals:         0       0      24       0       0
   971 ;;Total ram usage:       24 bytes
   972 ;; Hardware stack levels required when called: 9
   973 ;; This function calls:
   974 ;;		_ADC_Initialize
   975 ;;		_ADC_read
   976 ;;		_LCD_Init
   977 ;;		_LCD_Write
   978 ;;		_LCD_putrs
   979 ;;		_LCD_puts
   980 ;;		_TMR1_init
   981 ;;		_Timer0_Init
   982 ;;		___aldiv
   983 ;;		___lmul
   984 ;;		___lwdiv
   985 ;;		___lwmod
   986 ;;		_sprintf
   987 ;; This function is called by:
   988 ;;		Startup code after reset
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992     0046                     _main:	
   993                           ;psect for function _main
   994                           
   995     0046                     l2213:	
   996                           ;incstack = 0
   997 ;; hardware stack exceeded
   998                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   999                           
  1000                           
  1001                           ;main.c: 102: 
  1002     0046  120A  158A  2685  120A  118A  	fcall	_ADC_Initialize
  1003                           
  1004                           ;main.c: 103:         PORTDbits.RD0 = onOff;
  1005     004B  120A  158A  267A  120A  118A  	fcall	_Timer0_Init
  1006                           
  1007                           ;main.c: 104: 
  1008     0050  120A  158A  2692  120A  118A  	fcall	_TMR1_init
  1009     0055                     l2215:
  1010                           
  1011                           ;main.c: 106:         do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 9 & 0xF0) >> 4 ); LCD
      +                          _Write( 0x80 + 9 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( (0xC0 + 
      +                          9 & 0xF0) >> 4 ); LCD_Write( 0xC0 + 9 & 0x0F); } while ( 0 ); } else if ( 1 == 2 ) { do 
      +                          { LCD_Write( (0x94 + 9 & 0xF0) >> 4 ); LCD_Write( 0x94 + 9 & 0x0F); } while ( 0 ); } els
      +                          e if ( 1 == 3 ) { do { LCD_Write( (0xD4 + 9 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 9 & 0x0F);
      +                           } while ( 0 ); } } while ( 0 );
  1012     0055  1683               	bsf	3,5	;RP0=1, select bank1
  1013     0056  1303               	bcf	3,6	;RP1=0, select bank1
  1014     0057  1008               	bcf	8,0	;volatile
  1015     0058                     l2217:
  1016                           
  1017                           ;main.c: 107:         sprintf(exec, "%02u:%02u", timer0 / 60, timer0 % 60);
  1018     0058  1283               	bcf	3,5	;RP0=0, select bank0
  1019     0059  1303               	bcf	3,6	;RP1=0, select bank0
  1020     005A  1008               	bcf	8,0	;volatile
  1021     005B                     l2219:
  1022                           
  1023                           ;main.c: 109: 
  1024     005B  3020               	movlw	LCD_Init@display& (0+255)
  1025     005C  0084               	movwf	4
  1026     005D  1683               	bsf	3,5	;RP0=1, select bank1
  1027     005E  1303               	bcf	3,6	;RP1=0, select bank1
  1028     005F  085B               	movf	_lcd^(0+128),w
  1029     0060  1383               	bcf	3,7	;select IRP bank0
  1030     0061  0080               	movwf	0
  1031     0062  0A84               	incf	4,f
  1032     0063  085C               	movf	(_lcd^(0+128)+1),w
  1033     0064  0080               	movwf	0
  1034     0065  0A84               	incf	4,f
  1035     0066  085D               	movf	(_lcd^(0+128)+2),w
  1036     0067  0080               	movwf	0
  1037     0068  0A84               	incf	4,f
  1038     0069  085E               	movf	(_lcd^(0+128)+3),w
  1039     006A  0080               	movwf	0
  1040     006B  0A84               	incf	4,f
  1041     006C  085F               	movf	(_lcd^(0+128)+4),w
  1042     006D  0080               	movwf	0
  1043     006E  120A  118A  2342  120A  118A  	fcall	_LCD_Init
  1044     0073                     l2221:
  1045     0073  3000               	movlw	0
  1046     0074  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1047     0079                     l2223:
  1048     0079  3001               	movlw	1
  1049     007A  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1050     007F                     l2225:
  1051     007F  3008               	movlw	8
  1052     0080  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1053     0085                     l2227:
  1054     0085  3000               	movlw	0
  1055     0086  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1056     008B                     l2235:
  1057                           
  1058                           ;main.c: 113:         unsigned int part_ent = voltaje / 1000;
  1059     008B  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1060     008C  00F8               	movwf	LCD_putrs@a
  1061     008D  3080               	movlw	128
  1062     008E  00F9               	movwf	LCD_putrs@a+1
  1063     008F  120A  158A  27BA  120A  118A  	fcall	_LCD_putrs
  1064     0094                     l2239:
  1065     0094  300C               	movlw	12
  1066     0095  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1067     009A  3000               	movlw	0
  1068     009B  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1069     00A0                     l2245:
  1070                           
  1071                           ;main.c: 116:         sprintf(buffer, "%u.%03u", part_ent, part_dec);
  1072     00A0  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1073     00A1  00F8               	movwf	LCD_putrs@a
  1074     00A2  3080               	movlw	128
  1075     00A3  00F9               	movwf	LCD_putrs@a+1
  1076     00A4  120A  158A  27BA  120A  118A  	fcall	_LCD_putrs
  1077     00A9                     l2249:
  1078     00A9  300C               	movlw	12
  1079     00AA  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1080     00AF  3009               	movlw	9
  1081     00B0  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1082     00B5                     l2255:
  1083                           
  1084                           ;main.c: 118:         LCD_putrs(buffer);
  1085     00B5  3027               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1086     00B6  00F8               	movwf	LCD_putrs@a
  1087     00B7  3080               	movlw	128
  1088     00B8  00F9               	movwf	LCD_putrs@a+1
  1089     00B9  120A  158A  27BA  120A  118A  	fcall	_LCD_putrs
  1090     00BE                     l2257:
  1091     00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1092     00BF  1303               	bcf	3,6	;RP1=0, select bank1
  1093     00C0  0C22               	rrf	_onOff^(0+128),w	;volatile
  1094     00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1095     00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1096     00C3  1C03               	skipc
  1097     00C4  1008               	bcf	8,0	;volatile
  1098     00C5  1803               	skipnc
  1099     00C6  1408               	bsf	8,0	;volatile
  1100     00C7                     l2261:
  1101     00C7  300C               	movlw	12
  1102     00C8  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1103     00CD  3009               	movlw	9
  1104     00CE  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1105     00D3                     l2267:
  1106     00D3  303C               	movlw	60
  1107     00D4  00F2               	movwf	___lwdiv@divisor
  1108     00D5  3000               	movlw	0
  1109     00D6  00F3               	movwf	___lwdiv@divisor+1
  1110     00D7  1683               	bsf	3,5	;RP0=1, select bank1
  1111     00D8  1303               	bcf	3,6	;RP1=0, select bank1
  1112     00D9  0821               	movf	(_timer0+1)^(0+128),w	;volatile
  1113     00DA  00F5               	movwf	___lwdiv@dividend+1
  1114     00DB  0820               	movf	_timer0^(0+128),w	;volatile
  1115     00DC  00F4               	movwf	___lwdiv@dividend
  1116     00DD  120A  158A  2778  120A  118A  	fcall	___lwdiv
  1117     00E2  0873               	movf	?___lwdiv+1,w
  1118     00E3  1683               	bsf	3,5	;RP0=1, select bank1
  1119     00E4  1303               	bcf	3,6	;RP1=0, select bank1
  1120     00E5  00D6               	movwf	(_main$957+1)^(0+128)
  1121     00E6  0872               	movf	?___lwdiv,w
  1122     00E7  00D5               	movwf	_main$957^(0+128)
  1123     00E8                     l2269:
  1124     00E8  303C               	movlw	60
  1125     00E9  00F2               	movwf	___lwmod@divisor
  1126     00EA  3000               	movlw	0
  1127     00EB  00F3               	movwf	___lwmod@divisor+1
  1128     00EC  0821               	movf	(_timer0+1)^(0+128),w	;volatile
  1129     00ED  00F5               	movwf	___lwmod@dividend+1
  1130     00EE  0820               	movf	_timer0^(0+128),w	;volatile
  1131     00EF  00F4               	movwf	___lwmod@dividend
  1132     00F0  120A  158A  2740  120A  118A  	fcall	___lwmod
  1133     00F5  0873               	movf	?___lwmod+1,w
  1134     00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1135     00F7  1303               	bcf	3,6	;RP1=0, select bank1
  1136     00F8  00D8               	movwf	(_main$958+1)^(0+128)
  1137     00F9  0872               	movf	?___lwmod,w
  1138     00FA  00D7               	movwf	_main$958^(0+128)
  1139     00FB                     l2271:
  1140     00FB  3069               	movlw	(low (_exec| 0))& (0+255)
  1141     00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1142     00FD  1303               	bcf	3,6	;RP1=0, select bank0
  1143     00FE  00CF               	movwf	sprintf@s
  1144     00FF  3015               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1145     0100  00D0               	movwf	sprintf@fmt
  1146     0101  1683               	bsf	3,5	;RP0=1, select bank1
  1147     0102  1303               	bcf	3,6	;RP1=0, select bank1
  1148     0103  0856               	movf	(_main$957+1)^(0+128),w
  1149     0104  1283               	bcf	3,5	;RP0=0, select bank0
  1150     0105  1303               	bcf	3,6	;RP1=0, select bank0
  1151     0106  00D2               	movwf	?_sprintf+3
  1152     0107  1683               	bsf	3,5	;RP0=1, select bank1
  1153     0108  1303               	bcf	3,6	;RP1=0, select bank1
  1154     0109  0855               	movf	_main$957^(0+128),w
  1155     010A  1283               	bcf	3,5	;RP0=0, select bank0
  1156     010B  1303               	bcf	3,6	;RP1=0, select bank0
  1157     010C  00D1               	movwf	?_sprintf+2
  1158     010D  1683               	bsf	3,5	;RP0=1, select bank1
  1159     010E  1303               	bcf	3,6	;RP1=0, select bank1
  1160     010F  0858               	movf	(_main$958+1)^(0+128),w
  1161     0110  1283               	bcf	3,5	;RP0=0, select bank0
  1162     0111  1303               	bcf	3,6	;RP1=0, select bank0
  1163     0112  00D4               	movwf	?_sprintf+5
  1164     0113  1683               	bsf	3,5	;RP0=1, select bank1
  1165     0114  1303               	bcf	3,6	;RP1=0, select bank1
  1166     0115  0857               	movf	_main$958^(0+128),w
  1167     0116  1283               	bcf	3,5	;RP0=0, select bank0
  1168     0117  1303               	bcf	3,6	;RP1=0, select bank0
  1169     0118  00D3               	movwf	?_sprintf+4
  1170     0119  120A  158A  26D4  120A  118A  	fcall	_sprintf
  1171     011E                     l2273:
  1172     011E  3069               	movlw	(low (_exec| 0))& (0+255)
  1173     011F  00F8               	movwf	LCD_puts@a
  1174     0120  120A  158A  26F7  120A  118A  	fcall	_LCD_puts
  1175     0125                     l2275:
  1176     0125  120A  158A  26A0  120A  118A  	fcall	_ADC_read
  1177     012A  0873               	movf	?_ADC_read+1,w
  1178     012B  1683               	bsf	3,5	;RP0=1, select bank1
  1179     012C  1303               	bcf	3,6	;RP1=0, select bank1
  1180     012D  00D0               	movwf	(main@adc_result+1)^(0+128)
  1181     012E  0872               	movf	?_ADC_read,w
  1182     012F  00CF               	movwf	main@adc_result^(0+128)
  1183     0130                     l2277:
  1184     0130  3000               	movlw	0
  1185     0131  1283               	bcf	3,5	;RP0=0, select bank0
  1186     0132  1303               	bcf	3,6	;RP1=0, select bank0
  1187     0133  00A8               	movwf	___aldiv@divisor+3
  1188     0134  3000               	movlw	0
  1189     0135  00A7               	movwf	___aldiv@divisor+2
  1190     0136  3027               	movlw	39
  1191     0137  00A6               	movwf	___aldiv@divisor+1
  1192     0138  30F6               	movlw	246
  1193     0139  00A5               	movwf	___aldiv@divisor
  1194     013A  1683               	bsf	3,5	;RP0=1, select bank1
  1195     013B  1303               	bcf	3,6	;RP1=0, select bank1
  1196     013C  084F               	movf	main@adc_result^(0+128),w
  1197     013D  00F2               	movwf	___lmul@multiplier
  1198     013E  0850               	movf	(main@adc_result+1)^(0+128),w
  1199     013F  00F3               	movwf	___lmul@multiplier+1
  1200     0140  01F4               	clrf	___lmul@multiplier+2
  1201     0141  01F5               	clrf	___lmul@multiplier+3
  1202     0142  3000               	movlw	0
  1203     0143  00F9               	movwf	___lmul@multiplicand+3
  1204     0144  3000               	movlw	0
  1205     0145  00F8               	movwf	___lmul@multiplicand+2
  1206     0146  30C3               	movlw	195
  1207     0147  00F7               	movwf	___lmul@multiplicand+1
  1208     0148  3050               	movlw	80
  1209     0149  00F6               	movwf	___lmul@multiplicand
  1210     014A  120A  118A  2789  120A  118A  	fcall	___lmul
  1211     014F  0875               	movf	?___lmul+3,w
  1212     0150  1283               	bcf	3,5	;RP0=0, select bank0
  1213     0151  1303               	bcf	3,6	;RP1=0, select bank0
  1214     0152  00AC               	movwf	___aldiv@dividend+3
  1215     0153  0874               	movf	?___lmul+2,w
  1216     0154  00AB               	movwf	___aldiv@dividend+2
  1217     0155  0873               	movf	?___lmul+1,w
  1218     0156  00AA               	movwf	___aldiv@dividend+1
  1219     0157  0872               	movf	?___lmul,w
  1220     0158  00A9               	movwf	___aldiv@dividend
  1221     0159  120A  118A  248E  120A  118A  	fcall	___aldiv
  1222     015E  1283               	bcf	3,5	;RP0=0, select bank0
  1223     015F  1303               	bcf	3,6	;RP1=0, select bank0
  1224     0160  0826               	movf	?___aldiv+1,w
  1225     0161  1683               	bsf	3,5	;RP0=1, select bank1
  1226     0162  1303               	bcf	3,6	;RP1=0, select bank1
  1227     0163  00DA               	movwf	(main@voltaje+1)^(0+128)
  1228     0164  1283               	bcf	3,5	;RP0=0, select bank0
  1229     0165  1303               	bcf	3,6	;RP1=0, select bank0
  1230     0166  0825               	movf	?___aldiv,w
  1231     0167  1683               	bsf	3,5	;RP0=1, select bank1
  1232     0168  1303               	bcf	3,6	;RP1=0, select bank1
  1233     0169  00D9               	movwf	main@voltaje^(0+128)
  1234     016A                     l2279:
  1235     016A  30E8               	movlw	232
  1236     016B  00F2               	movwf	___lwdiv@divisor
  1237     016C  3003               	movlw	3
  1238     016D  00F3               	movwf	___lwdiv@divisor+1
  1239     016E  085A               	movf	(main@voltaje+1)^(0+128),w
  1240     016F  00F5               	movwf	___lwdiv@dividend+1
  1241     0170  0859               	movf	main@voltaje^(0+128),w
  1242     0171  00F4               	movwf	___lwdiv@dividend
  1243     0172  120A  158A  2778  120A  118A  	fcall	___lwdiv
  1244     0177  0873               	movf	?___lwdiv+1,w
  1245     0178  1683               	bsf	3,5	;RP0=1, select bank1
  1246     0179  1303               	bcf	3,6	;RP1=0, select bank1
  1247     017A  00D2               	movwf	(main@part_ent+1)^(0+128)
  1248     017B  0872               	movf	?___lwdiv,w
  1249     017C  00D1               	movwf	main@part_ent^(0+128)
  1250     017D                     l2281:
  1251     017D  30E8               	movlw	232
  1252     017E  00F2               	movwf	___lwmod@divisor
  1253     017F  3003               	movlw	3
  1254     0180  00F3               	movwf	___lwmod@divisor+1
  1255     0181  085A               	movf	(main@voltaje+1)^(0+128),w
  1256     0182  00F5               	movwf	___lwmod@dividend+1
  1257     0183  0859               	movf	main@voltaje^(0+128),w
  1258     0184  00F4               	movwf	___lwmod@dividend
  1259     0185  120A  158A  2740  120A  118A  	fcall	___lwmod
  1260     018A  0873               	movf	?___lwmod+1,w
  1261     018B  1683               	bsf	3,5	;RP0=1, select bank1
  1262     018C  1303               	bcf	3,6	;RP1=0, select bank1
  1263     018D  00D4               	movwf	(main@part_dec+1)^(0+128)
  1264     018E  0872               	movf	?___lwmod,w
  1265     018F  00D3               	movwf	main@part_dec^(0+128)
  1266     0190                     l2283:
  1267     0190  30C5               	movlw	(low (main@buffer| 0))& (0+255)
  1268     0191  1283               	bcf	3,5	;RP0=0, select bank0
  1269     0192  1303               	bcf	3,6	;RP1=0, select bank0
  1270     0193  00CF               	movwf	sprintf@s
  1271     0194  301F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1272     0195  00D0               	movwf	sprintf@fmt
  1273     0196  1683               	bsf	3,5	;RP0=1, select bank1
  1274     0197  1303               	bcf	3,6	;RP1=0, select bank1
  1275     0198  0852               	movf	(main@part_ent+1)^(0+128),w
  1276     0199  1283               	bcf	3,5	;RP0=0, select bank0
  1277     019A  1303               	bcf	3,6	;RP1=0, select bank0
  1278     019B  00D2               	movwf	?_sprintf+3
  1279     019C  1683               	bsf	3,5	;RP0=1, select bank1
  1280     019D  1303               	bcf	3,6	;RP1=0, select bank1
  1281     019E  0851               	movf	main@part_ent^(0+128),w
  1282     019F  1283               	bcf	3,5	;RP0=0, select bank0
  1283     01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1284     01A1  00D1               	movwf	?_sprintf+2
  1285     01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1286     01A3  1303               	bcf	3,6	;RP1=0, select bank1
  1287     01A4  0854               	movf	(main@part_dec+1)^(0+128),w
  1288     01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1289     01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1290     01A7  00D4               	movwf	?_sprintf+5
  1291     01A8  1683               	bsf	3,5	;RP0=1, select bank1
  1292     01A9  1303               	bcf	3,6	;RP1=0, select bank1
  1293     01AA  0853               	movf	main@part_dec^(0+128),w
  1294     01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1295     01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1296     01AD  00D3               	movwf	?_sprintf+4
  1297     01AE  120A  158A  26D4  120A  118A  	fcall	_sprintf
  1298     01B3                     l2285:
  1299     01B3  3008               	movlw	8
  1300     01B4  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1301     01B9                     l2287:
  1302     01B9  3009               	movlw	9
  1303     01BA  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  1304     01BF                     l2295:
  1305     01BF  30C5               	movlw	(low (main@buffer| 0))& (0+255)
  1306     01C0  00F8               	movwf	LCD_putrs@a
  1307     01C1  3000               	movlw	0
  1308     01C2  00F9               	movwf	LCD_putrs@a+1
  1309     01C3  120A  158A  27BA  120A  118A  	fcall	_LCD_putrs
  1310     01C8                     l2297:
  1311     01C8  3082               	movlw	130
  1312     01C9  1683               	bsf	3,5	;RP0=1, select bank1
  1313     01CA  1303               	bcf	3,6	;RP1=0, select bank1
  1314     01CB  00C4               	movwf	(??_main^(0+128)+1)
  1315     01CC  30DD               	movlw	221
  1316     01CD  00C3               	movwf	??_main^(0+128)
  1317     01CE                     u2407:
  1318     01CE  0BC3               	decfsz	??_main^(0+128),f
  1319     01CF  29CE               	goto	u2407
  1320     01D0  0BC4               	decfsz	(??_main^(0+128)+1),f
  1321     01D1  29CE               	goto	u2407
  1322     01D2  28BE               	goto	l2257
  1323     01D3  120A  118A  280C   	ljmp	start
  1324     01D6                     __end_of_main:
  1325                           
  1326                           	psect	text1
  1327     0ED4                     __ptext1:	
  1328 ;; *************** function _sprintf *****************
  1329 ;; Defined at:
  1330 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;  s               1   47[BANK0 ] PTR unsigned char 
  1333 ;;		 -> main@buffer(10), exec(6), 
  1334 ;;  fmt             1   48[BANK0 ] PTR const unsigned char 
  1335 ;;		 -> STR_5(8), STR_4(10), 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;  f              11   55[BANK0 ] struct _IO_FILE
  1338 ;;  ret             2    0        int 
  1339 ;;  ap              1   54[BANK0 ] PTR void [1]
  1340 ;;		 -> ?_sprintf(2), 
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  2   47[BANK0 ] int 
  1343 ;; Registers used:
  1344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1350 ;;      Params:         0       6       0       0       0
  1351 ;;      Locals:         0      12       0       0       0
  1352 ;;      Temps:          0       1       0       0       0
  1353 ;;      Totals:         0      19       0       0       0
  1354 ;;Total ram usage:       19 bytes
  1355 ;; Hardware stack levels used: 1
  1356 ;; Hardware stack levels required when called: 8
  1357 ;; This function calls:
  1358 ;;		_vfprintf
  1359 ;; This function is called by:
  1360 ;;		_main
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364     0ED4                     _sprintf:	
  1365                           ;psect for function _sprintf
  1366                           
  1367     0ED4                     l2137:	
  1368                           ;incstack = 0
  1369 ;; hardware stack exceeded
  1370                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1371                           
  1372     0ED4  3051               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1373     0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  1374     0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  1375     0ED7  00D6               	movwf	sprintf@ap
  1376     0ED8                     l2139:
  1377     0ED8  084F               	movf	sprintf@s,w
  1378     0ED9  00D7               	movwf	sprintf@f
  1379     0EDA  3000               	movlw	0
  1380     0EDB  00D8               	movwf	sprintf@f+1
  1381     0EDC                     l2141:
  1382     0EDC  01D9               	clrf	sprintf@f+2
  1383     0EDD  01DA               	clrf	sprintf@f+3
  1384     0EDE                     l2143:
  1385     0EDE  01E0               	clrf	sprintf@f+9
  1386     0EDF  01E1               	clrf	sprintf@f+10
  1387     0EE0                     l2145:
  1388     0EE0  3057               	movlw	low sprintf@f
  1389     0EE1  00CA               	movwf	vfprintf@fp
  1390     0EE2  3000               	movlw	high sprintf@f
  1391     0EE3  00CB               	movwf	vfprintf@fp+1
  1392     0EE4  0850               	movf	sprintf@fmt,w
  1393     0EE5  00CC               	movwf	vfprintf@fmt
  1394     0EE6  3056               	movlw	(low (sprintf@ap| 0))& (0+255)
  1395     0EE7  00CD               	movwf	vfprintf@ap
  1396     0EE8  120A  158A  26B1  120A  158A  	fcall	_vfprintf
  1397     0EED                     l2147:
  1398     0EED  1283               	bcf	3,5	;RP0=0, select bank0
  1399     0EEE  1303               	bcf	3,6	;RP1=0, select bank0
  1400     0EEF  0859               	movf	sprintf@f+2,w
  1401     0EF0  074F               	addwf	sprintf@s,w
  1402     0EF1  00D5               	movwf	??_sprintf
  1403     0EF2  0855               	movf	??_sprintf,w
  1404     0EF3  0084               	movwf	4
  1405     0EF4  1383               	bcf	3,7	;select IRP bank0
  1406     0EF5  0180               	clrf	0
  1407     0EF6                     l799:
  1408     0EF6  0008               	return
  1409     0EF7                     __end_of_sprintf:
  1410                           
  1411                           	psect	text2
  1412     0EB1                     __ptext2:	
  1413 ;; *************** function _vfprintf *****************
  1414 ;; Defined at:
  1415 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  fp              2   42[BANK0 ] PTR struct _IO_FILE
  1418 ;;		 -> sprintf@f(11), 
  1419 ;;  fmt             1   44[BANK0 ] PTR const unsigned char 
  1420 ;;		 -> STR_5(8), STR_4(10), 
  1421 ;;  ap              1   45[BANK0 ] PTR PTR void 
  1422 ;;		 -> sprintf@ap(1), 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  cfmt            1   46[BANK0 ] PTR unsigned char 
  1425 ;;		 -> STR_5(8), STR_4(10), 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  2   42[BANK0 ] int 
  1428 ;; Registers used:
  1429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1435 ;;      Params:         0       4       0       0       0
  1436 ;;      Locals:         0       1       0       0       0
  1437 ;;      Temps:          0       0       0       0       0
  1438 ;;      Totals:         0       5       0       0       0
  1439 ;;Total ram usage:        5 bytes
  1440 ;; Hardware stack levels used: 1
  1441 ;; Hardware stack levels required when called: 7
  1442 ;; This function calls:
  1443 ;;		_vfpfcnvrt
  1444 ;; This function is called by:
  1445 ;;		_sprintf
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449     0EB1                     _vfprintf:	
  1450                           ;psect for function _vfprintf
  1451                           
  1452     0EB1                     l2073:	
  1453                           ;incstack = 0
  1454 ;; hardware stack exceeded
  1455                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1456                           
  1457                           
  1458                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1459     0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  1460     0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  1461     0EB3  084C               	movf	vfprintf@fmt,w
  1462     0EB4  00CE               	movwf	vfprintf@cfmt
  1463                           
  1464                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1465     0EB5  2EC3               	goto	l2077
  1466     0EB6                     l2075:
  1467                           
  1468                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1469     0EB6  084A               	movf	vfprintf@fp,w
  1470     0EB7  00BE               	movwf	vfpfcnvrt@fp
  1471     0EB8  084B               	movf	vfprintf@fp+1,w
  1472     0EB9  00BF               	movwf	vfpfcnvrt@fp+1
  1473     0EBA  304E               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1474     0EBB  00C0               	movwf	vfpfcnvrt@fmt
  1475     0EBC  084D               	movf	vfprintf@ap,w
  1476     0EBD  00C1               	movwf	vfpfcnvrt@ap
  1477     0EBE  120A  118A  2290  120A  158A  	fcall	_vfpfcnvrt
  1478     0EC3                     l2077:
  1479                           
  1480                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1481     0EC3  1283               	bcf	3,5	;RP0=0, select bank0
  1482     0EC4  1303               	bcf	3,6	;RP1=0, select bank0
  1483     0EC5  084E               	movf	vfprintf@cfmt,w
  1484     0EC6  0084               	movwf	4
  1485     0EC7  120A  158A  200A  120A  158A  	fcall	stringdir
  1486     0ECC  3A00               	xorlw	0
  1487     0ECD  1D03               	skipz
  1488     0ECE  2ED0               	goto	u2161
  1489     0ECF  2ED1               	goto	u2160
  1490     0ED0                     u2161:
  1491     0ED0  2EB6               	goto	l2075
  1492     0ED1                     u2160:
  1493     0ED1                     l2079:
  1494                           
  1495                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1496     0ED1  01CA               	clrf	?_vfprintf
  1497     0ED2  01CB               	clrf	?_vfprintf+1
  1498     0ED3                     l864:
  1499     0ED3  0008               	return
  1500     0ED4                     __end_of_vfprintf:
  1501                           
  1502                           	psect	text3
  1503     0290                     __ptext3:	
  1504 ;; *************** function _vfpfcnvrt *****************
  1505 ;; Defined at:
  1506 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  fp              2   30[BANK0 ] PTR struct _IO_FILE
  1509 ;;		 -> sprintf@f(11), 
  1510 ;;  fmt             1   32[BANK0 ] PTR PTR unsigned char 
  1511 ;;		 -> vfprintf@cfmt(1), 
  1512 ;;  ap              1   33[BANK0 ] PTR PTR void 
  1513 ;;		 -> sprintf@ap(1), 
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  convarg         4   36[BANK0 ] struct .
  1516 ;;  cp              1   41[BANK0 ] PTR unsigned char 
  1517 ;;		 -> STR_5(8), STR_4(10), 
  1518 ;;  done            1   40[BANK0 ] _Bool 
  1519 ;;  c               1    0        unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1529 ;;      Params:         0       4       0       0       0
  1530 ;;      Locals:         0       6       0       0       0
  1531 ;;      Temps:          0       2       0       0       0
  1532 ;;      Totals:         0      12       0       0       0
  1533 ;;Total ram usage:       12 bytes
  1534 ;; Hardware stack levels used: 1
  1535 ;; Hardware stack levels required when called: 6
  1536 ;; This function calls:
  1537 ;;		_fputc
  1538 ;;		_read_prec_or_width
  1539 ;;		_utoa
  1540 ;; This function is called by:
  1541 ;;		_vfprintf
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545     0290                     _vfpfcnvrt:	
  1546                           ;psect for function _vfpfcnvrt
  1547                           
  1548     0290                     l1995:	
  1549                           ;incstack = 0
  1550 ;; hardware stack exceeded
  1551                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1552                           
  1553                           
  1554                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1555     0290  1283               	bcf	3,5	;RP0=0, select bank0
  1556     0291  1303               	bcf	3,6	;RP1=0, select bank0
  1557     0292  0840               	movf	vfpfcnvrt@fmt,w
  1558     0293  0084               	movwf	4
  1559     0294  1383               	bcf	3,7	;select IRP bank0
  1560     0295  0800               	movf	0,w
  1561     0296  0084               	movwf	4
  1562     0297  120A  158A  200A  120A  118A  	fcall	stringdir
  1563     029C  3A25               	xorlw	37
  1564     029D  1D03               	skipz
  1565     029E  2AA0               	goto	u2031
  1566     029F  2AA1               	goto	u2030
  1567     02A0                     u2031:
  1568     02A0  2B28               	goto	l2041
  1569     02A1                     u2030:
  1570     02A1                     l1997:
  1571                           
  1572                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1573     02A1  0840               	movf	vfpfcnvrt@fmt,w
  1574     02A2  0084               	movwf	4
  1575     02A3  3001               	movlw	1
  1576     02A4  0780               	addwf	0,f
  1577     02A5                     l1999:
  1578                           
  1579                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1580     02A5  01E2               	clrf	_width
  1581     02A6  01E3               	clrf	_width+1
  1582     02A7  3000               	movlw	0
  1583     02A8  00E8               	movwf	_flags
  1584     02A9                     l2001:
  1585                           
  1586                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1587     02A9  30FF               	movlw	255
  1588     02AA  00E4               	movwf	_prec
  1589     02AB  30FF               	movlw	255
  1590     02AC  00E5               	movwf	_prec+1
  1591     02AD                     l2003:
  1592                           
  1593                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1594     02AD  01C8               	clrf	vfpfcnvrt@done
  1595                           
  1596                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1597     02AE  2AC5               	goto	l2011
  1598     02AF                     l847:	
  1599                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  1600                           
  1601                           
  1602                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1603     02AF  14E8               	bsf	_flags,1
  1604     02B0                     l2005:
  1605                           
  1606                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1607     02B0  0840               	movf	vfpfcnvrt@fmt,w
  1608     02B1  0084               	movwf	4
  1609     02B2  3001               	movlw	1
  1610     02B3  0780               	addwf	0,f
  1611                           
  1612                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1613     02B4  2AC5               	goto	l2011
  1614     02B5                     l849:	
  1615                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  1616                           
  1617                           
  1618                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1619     02B5  3001               	movlw	1
  1620     02B6  00C8               	movwf	vfpfcnvrt@done
  1621                           
  1622                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1623     02B7  2AC5               	goto	l2011
  1624     02B8                     l2009:
  1625     02B8  0840               	movf	vfpfcnvrt@fmt,w
  1626     02B9  0084               	movwf	4
  1627     02BA  0800               	movf	0,w
  1628     02BB  0084               	movwf	4
  1629     02BC  120A  158A  200A  120A  118A  	fcall	stringdir
  1630                           
  1631                           ; Switch size 1, requested type "simple"
  1632                           ; Number of cases is 1, Range of values is 48 to 48
  1633                           ; switch strategies available:
  1634                           ; Name         Instructions Cycles
  1635                           ; simple_byte            4     3 (average)
  1636                           ; direct_byte           14    11 (fixed)
  1637                           ; jumptable            263     9 (fixed)
  1638                           ;	Chosen strategy is simple_byte
  1639     02C1  3A30               	xorlw	48	; case 48
  1640     02C2  1903               	skipnz
  1641     02C3  2AAF               	goto	l847
  1642     02C4  2AB5               	goto	l849
  1643     02C5                     l2011:
  1644                           
  1645                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1646     02C5  0848               	movf	vfpfcnvrt@done,w
  1647     02C6  1903               	btfsc	3,2
  1648     02C7  2AC9               	goto	u2041
  1649     02C8  2ACA               	goto	u2040
  1650     02C9                     u2041:
  1651     02C9  2AB8               	goto	l2009
  1652     02CA                     u2040:
  1653     02CA                     l2013:
  1654                           
  1655                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1656     02CA  0840               	movf	vfpfcnvrt@fmt,w
  1657     02CB  00F8               	movwf	read_prec_or_width@fmt
  1658     02CC  0841               	movf	vfpfcnvrt@ap,w
  1659     02CD  00F9               	movwf	read_prec_or_width@ap
  1660     02CE  120A  118A  2637  120A  118A  	fcall	_read_prec_or_width
  1661     02D3  0879               	movf	?_read_prec_or_width+1,w
  1662     02D4  1283               	bcf	3,5	;RP0=0, select bank0
  1663     02D5  1303               	bcf	3,6	;RP1=0, select bank0
  1664     02D6  00E3               	movwf	_width+1
  1665     02D7  0878               	movf	?_read_prec_or_width,w
  1666     02D8  00E2               	movwf	_width
  1667     02D9                     l2015:
  1668                           
  1669                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1670     02D9  1FE3               	btfss	_width+1,7
  1671     02DA  2ADC               	goto	u2051
  1672     02DB  2ADD               	goto	u2050
  1673     02DC                     u2051:
  1674     02DC  2AE3               	goto	l2021
  1675     02DD                     u2050:
  1676     02DD                     l2017:
  1677                           
  1678                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1679     02DD  1468               	bsf	_flags,0
  1680     02DE                     l2019:
  1681                           
  1682                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1683     02DE  09E2               	comf	_width,f
  1684     02DF  09E3               	comf	_width+1,f
  1685     02E0  0AE2               	incf	_width,f
  1686     02E1  1903               	skipnz
  1687     02E2  0AE3               	incf	_width+1,f
  1688     02E3                     l2021:
  1689                           
  1690                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  1691     02E3  0840               	movf	vfpfcnvrt@fmt,w
  1692     02E4  0084               	movwf	4
  1693     02E5  1383               	bcf	3,7	;select IRP bank0
  1694     02E6  0800               	movf	0,w
  1695     02E7  00C9               	movwf	vfpfcnvrt@cp
  1696     02E8                     l2023:
  1697     02E8  0849               	movf	vfpfcnvrt@cp,w
  1698     02E9  0084               	movwf	4
  1699     02EA  120A  158A  200A  120A  118A  	fcall	stringdir
  1700     02EF  3A75               	xorlw	117
  1701     02F0  1D03               	skipz
  1702     02F1  2AF3               	goto	u2061
  1703     02F2  2AF4               	goto	u2060
  1704     02F3                     u2061:
  1705     02F3  2B20               	goto	l2037
  1706     02F4                     u2060:
  1707     02F4                     l2025:
  1708                           
  1709                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1710     02F4  0841               	movf	vfpfcnvrt@ap,w
  1711     02F5  0084               	movwf	4
  1712     02F6  0800               	movf	0,w
  1713     02F7  00FF               	movwf	btemp+1
  1714     02F8  3002               	movlw	2
  1715     02F9  0780               	addwf	0,f
  1716     02FA  087F               	movf	btemp+1,w
  1717     02FB  0084               	movwf	4
  1718     02FC  0800               	movf	0,w
  1719     02FD  00C4               	movwf	vfpfcnvrt@convarg
  1720     02FE  0A84               	incf	4,f
  1721     02FF  0800               	movf	0,w
  1722     0300  00C5               	movwf	vfpfcnvrt@convarg+1
  1723     0301                     l2027:
  1724                           
  1725                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1726     0301  0840               	movf	vfpfcnvrt@fmt,w
  1727     0302  0084               	movwf	4
  1728     0303  0849               	movf	vfpfcnvrt@cp,w
  1729     0304  3E01               	addlw	1
  1730     0305  0080               	movwf	0
  1731                           
  1732                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1733     0306  2B15               	goto	l2035
  1734     0307                     l2029:
  1735                           
  1736                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1542:      return
      +                           (void) utoa(fp, convarg.uint);;	Return value of _vfpfcnvrt is never used
  1737     0307  083E               	movf	vfpfcnvrt@fp,w
  1738     0308  00B5               	movwf	utoa@fp
  1739     0309  083F               	movf	vfpfcnvrt@fp+1,w
  1740     030A  00B6               	movwf	utoa@fp+1
  1741     030B  0845               	movf	vfpfcnvrt@convarg+1,w
  1742     030C  00B8               	movwf	utoa@d+1
  1743     030D  0844               	movf	vfpfcnvrt@convarg,w
  1744     030E  00B7               	movwf	utoa@d
  1745     030F  120A  118A  25B9  120A  118A  	fcall	_utoa
  1746     0314  2B41               	goto	l857
  1747     0315                     l2035:
  1748     0315  0849               	movf	vfpfcnvrt@cp,w
  1749     0316  0084               	movwf	4
  1750     0317  120A  158A  200A  120A  118A  	fcall	stringdir
  1751                           
  1752                           ; Switch size 1, requested type "simple"
  1753                           ; Number of cases is 1, Range of values is 117 to 117
  1754                           ; switch strategies available:
  1755                           ; Name         Instructions Cycles
  1756                           ; simple_byte            4     3 (average)
  1757                           ; direct_byte           14    11 (fixed)
  1758                           ; jumptable            263     9 (fixed)
  1759                           ;	Chosen strategy is simple_byte
  1760     031C  3A75               	xorlw	117	; case 117
  1761     031D  1903               	skipnz
  1762     031E  2B07               	goto	l2029
  1763     031F  2B20               	goto	l2037
  1764     0320                     l2037:
  1765                           
  1766                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1767     0320  1283               	bcf	3,5	;RP0=0, select bank0
  1768     0321  1303               	bcf	3,6	;RP1=0, select bank0
  1769     0322  0840               	movf	vfpfcnvrt@fmt,w
  1770     0323  0084               	movwf	4
  1771     0324  3001               	movlw	1
  1772     0325  1383               	bcf	3,7	;select IRP bank0
  1773     0326  0780               	addwf	0,f
  1774     0327  2B41               	goto	l857
  1775     0328                     l2041:
  1776                           
  1777                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1778     0328  0840               	movf	vfpfcnvrt@fmt,w
  1779     0329  0084               	movwf	4
  1780     032A  0800               	movf	0,w
  1781     032B  0084               	movwf	4
  1782     032C  120A  158A  200A  120A  118A  	fcall	stringdir
  1783     0331  00C2               	movwf	??_vfpfcnvrt
  1784     0332  01C3               	clrf	??_vfpfcnvrt+1
  1785     0333  0842               	movf	??_vfpfcnvrt,w
  1786     0334  00F2               	movwf	fputc@c
  1787     0335  0843               	movf	??_vfpfcnvrt+1,w
  1788     0336  00F3               	movwf	fputc@c+1
  1789     0337  083E               	movf	vfpfcnvrt@fp,w
  1790     0338  00F4               	movwf	fputc@fp
  1791     0339  083F               	movf	vfpfcnvrt@fp+1,w
  1792     033A  00F5               	movwf	fputc@fp+1
  1793     033B  120A  118A  23EE  120A  118A  	fcall	_fputc
  1794     0340  2B20               	goto	l2037
  1795     0341                     l857:
  1796     0341  0008               	return
  1797     0342                     __end_of_vfpfcnvrt:
  1798                           
  1799                           	psect	text4
  1800     05B9                     __ptext4:	
  1801 ;; *************** function _utoa *****************
  1802 ;; Defined at:
  1803 ;;		line 1001 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  fp              2   21[BANK0 ] PTR struct _IO_FILE
  1806 ;;		 -> sprintf@f(11), 
  1807 ;;  d               2   23[BANK0 ] unsigned int 
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;  i               2   28[BANK0 ] int 
  1810 ;;  w               2   26[BANK0 ] int 
  1811 ;;  p               1   25[BANK0 ] _Bool 
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  1    wreg      void 
  1814 ;; Registers used:
  1815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1821 ;;      Params:         0       4       0       0       0
  1822 ;;      Locals:         0       5       0       0       0
  1823 ;;      Temps:          0       0       0       0       0
  1824 ;;      Totals:         0       9       0       0       0
  1825 ;;Total ram usage:        9 bytes
  1826 ;; Hardware stack levels used: 1
  1827 ;; Hardware stack levels required when called: 5
  1828 ;; This function calls:
  1829 ;;		___lwdiv
  1830 ;;		___lwmod
  1831 ;;		_pad
  1832 ;; This function is called by:
  1833 ;;		_vfpfcnvrt
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837     05B9                     _utoa:	
  1838                           ;psect for function _utoa
  1839                           
  1840     05B9                     l1941:	
  1841                           ;incstack = 0
  1842 ;; hardware stack exceeded
  1843                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1844                           
  1845                           
  1846                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1001: static void
      +                           utoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1002: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 1003:     int i, w;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprn
      +                          t.c: 1007:  _Bool p = 1;
  1847     05B9  3001               	movlw	1
  1848     05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1849     05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1850     05BC  00B9               	movwf	utoa@p
  1851     05BD                     l1943:
  1852                           
  1853                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1019:     w = wid
      +                          th;
  1854     05BD  0863               	movf	_width+1,w
  1855     05BE  00BB               	movwf	utoa@w+1
  1856     05BF  0862               	movf	_width,w
  1857     05C0  00BA               	movwf	utoa@w
  1858                           
  1859                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1022:     i = siz
      +                          eof(dbuf) - 1;
  1860     05C1  301F               	movlw	31
  1861     05C2  00BC               	movwf	utoa@i
  1862     05C3  3000               	movlw	0
  1863     05C4  00BD               	movwf	utoa@i+1
  1864     05C5                     l1945:
  1865                           
  1866                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1023:     dbuf[i]
      +                           = '\0';
  1867     05C5  1683               	bsf	3,5	;RP0=1, select bank1
  1868     05C6  1303               	bcf	3,6	;RP1=0, select bank1
  1869     05C7  01C2               	clrf	(_dbuf^(0+128)+31)
  1870                           
  1871                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1024:     while (
      +                          i && (d != 0
  1872     05C8  2DFF               	goto	l1957
  1873     05C9                     l1947:
  1874                           
  1875                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1033:     )) {;C:
      +                          \Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1034:         --i;
  1876     05C9  30FF               	movlw	255
  1877     05CA  07BC               	addwf	utoa@i,f
  1878     05CB  1803               	skipnc
  1879     05CC  0ABD               	incf	utoa@i+1,f
  1880     05CD  30FF               	movlw	255
  1881     05CE  07BD               	addwf	utoa@i+1,f
  1882     05CF                     l1949:
  1883                           
  1884                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1035:         dbu
      +                          f[i] = '0' + (d % 10);
  1885     05CF  083C               	movf	utoa@i,w
  1886     05D0  3EA3               	addlw	(low (_dbuf| 0))& (0+255)
  1887     05D1  0084               	movwf	4
  1888     05D2  300A               	movlw	10
  1889     05D3  00F2               	movwf	___lwmod@divisor
  1890     05D4  3000               	movlw	0
  1891     05D5  00F3               	movwf	___lwmod@divisor+1
  1892     05D6  0838               	movf	utoa@d+1,w
  1893     05D7  00F5               	movwf	___lwmod@dividend+1
  1894     05D8  0837               	movf	utoa@d,w
  1895     05D9  00F4               	movwf	___lwmod@dividend
  1896     05DA  120A  158A  2740  120A  118A  	fcall	___lwmod
  1897     05DF  0872               	movf	?___lwmod,w
  1898     05E0  3E30               	addlw	48
  1899     05E1  1383               	bcf	3,7	;select IRP bank1
  1900     05E2  0080               	movwf	0
  1901     05E3                     l1951:
  1902                           
  1903                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1039:   p = 0;
  1904     05E3  1283               	bcf	3,5	;RP0=0, select bank0
  1905     05E4  1303               	bcf	3,6	;RP1=0, select bank0
  1906     05E5  01B9               	clrf	utoa@p
  1907     05E6                     l1953:
  1908                           
  1909                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1041:         --w
      +                          ;
  1910     05E6  30FF               	movlw	255
  1911     05E7  07BA               	addwf	utoa@w,f
  1912     05E8  1803               	skipnc
  1913     05E9  0ABB               	incf	utoa@w+1,f
  1914     05EA  30FF               	movlw	255
  1915     05EB  07BB               	addwf	utoa@w+1,f
  1916     05EC                     l1955:
  1917                           
  1918                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1042:         d =
      +                           d / 10;
  1919     05EC  300A               	movlw	10
  1920     05ED  00F2               	movwf	___lwdiv@divisor
  1921     05EE  3000               	movlw	0
  1922     05EF  00F3               	movwf	___lwdiv@divisor+1
  1923     05F0  0838               	movf	utoa@d+1,w
  1924     05F1  00F5               	movwf	___lwdiv@dividend+1
  1925     05F2  0837               	movf	utoa@d,w
  1926     05F3  00F4               	movwf	___lwdiv@dividend
  1927     05F4  120A  158A  2778  120A  118A  	fcall	___lwdiv
  1928     05F9  0873               	movf	?___lwdiv+1,w
  1929     05FA  1283               	bcf	3,5	;RP0=0, select bank0
  1930     05FB  1303               	bcf	3,6	;RP1=0, select bank0
  1931     05FC  00B8               	movwf	utoa@d+1
  1932     05FD  0872               	movf	?___lwdiv,w
  1933     05FE  00B7               	movwf	utoa@d
  1934     05FF                     l1957:
  1935                           
  1936                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1024:     while (
      +                          i && (d != 0
  1937     05FF  1283               	bcf	3,5	;RP0=0, select bank0
  1938     0600  083C               	movf	utoa@i,w
  1939     0601  043D               	iorwf	utoa@i+1,w
  1940     0602  1903               	btfsc	3,2
  1941     0603  2E05               	goto	u1861
  1942     0604  2E06               	goto	u1860
  1943     0605                     u1861:
  1944     0605  2E24               	goto	l1967
  1945     0606                     u1860:
  1946     0606                     l1959:
  1947     0606  0837               	movf	utoa@d,w
  1948     0607  0438               	iorwf	utoa@d+1,w
  1949     0608  1D03               	btfss	3,2
  1950     0609  2E0B               	goto	u1871
  1951     060A  2E0C               	goto	u1870
  1952     060B                     u1871:
  1953     060B  2DC9               	goto	l1947
  1954     060C                     u1870:
  1955     060C                     l1961:
  1956     060C  0839               	movf	utoa@p,w
  1957     060D  1D03               	btfss	3,2
  1958     060E  2E10               	goto	u1881
  1959     060F  2E11               	goto	u1880
  1960     0610                     u1881:
  1961     0610  2DC9               	goto	l1947
  1962     0611                     u1880:
  1963     0611                     l1963:
  1964     0611  083B               	movf	utoa@w+1,w
  1965     0612  3A80               	xorlw	128
  1966     0613  00FF               	movwf	btemp+1
  1967     0614  3080               	movlw	128
  1968     0615  027F               	subwf	btemp+1,w
  1969     0616  1D03               	skipz
  1970     0617  2E1A               	goto	u1895
  1971     0618  3001               	movlw	1
  1972     0619  023A               	subwf	utoa@w,w
  1973     061A                     u1895:
  1974     061A  1C03               	skipc
  1975     061B  2E1D               	goto	u1891
  1976     061C  2E1E               	goto	u1890
  1977     061D                     u1891:
  1978     061D  2E24               	goto	l1967
  1979     061E                     u1890:
  1980     061E                     l1965:
  1981     061E  1283               	bcf	3,5	;RP0=0, select bank0
  1982     061F  1303               	bcf	3,6	;RP1=0, select bank0
  1983     0620  18E8               	btfsc	_flags,1
  1984     0621  2E23               	goto	u1901
  1985     0622  2E24               	goto	u1900
  1986     0623                     u1901:
  1987     0623  2DC9               	goto	l1947
  1988     0624                     u1900:
  1989     0624                     l1967:
  1990                           
  1991                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1046:     return 
      +                          (void) pad(fp, &dbuf[i], w);
  1992     0624  1283               	bcf	3,5	;RP0=0, select bank0
  1993     0625  1303               	bcf	3,6	;RP1=0, select bank0
  1994     0626  0835               	movf	utoa@fp,w
  1995     0627  00AE               	movwf	pad@fp
  1996     0628  0836               	movf	utoa@fp+1,w
  1997     0629  00AF               	movwf	pad@fp+1
  1998     062A  083C               	movf	utoa@i,w
  1999     062B  3EA3               	addlw	(low (_dbuf| 0))& (0+255)
  2000     062C  00B0               	movwf	pad@buf
  2001     062D  083B               	movf	utoa@w+1,w
  2002     062E  00B2               	movwf	pad@p+1
  2003     062F  083A               	movf	utoa@w,w
  2004     0630  00B1               	movwf	pad@p
  2005     0631  120A  118A  26E3  120A  118A  	fcall	_pad
  2006     0636                     l832:
  2007     0636  0008               	return
  2008     0637                     __end_of_utoa:
  2009                           
  2010                           	psect	text5
  2011     06E3                     __ptext5:	
  2012 ;; *************** function _pad *****************
  2013 ;; Defined at:
  2014 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  fp              2   14[BANK0 ] PTR struct _IO_FILE
  2017 ;;		 -> sprintf@f(11), 
  2018 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  2019 ;;		 -> dbuf(32), 
  2020 ;;  p               2   17[BANK0 ] int 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  i               2   19[BANK0 ] int 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2032 ;;      Params:         0       5       0       0       0
  2033 ;;      Locals:         0       2       0       0       0
  2034 ;;      Temps:          1       0       0       0       0
  2035 ;;      Totals:         1       7       0       0       0
  2036 ;;Total ram usage:        8 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; Hardware stack levels required when called: 4
  2039 ;; This function calls:
  2040 ;;		_fputc
  2041 ;;		_fputs
  2042 ;; This function is called by:
  2043 ;;		_utoa
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047     06E3                     _pad:	
  2048                           ;psect for function _pad
  2049                           
  2050     06E3                     l1925:	
  2051                           ;incstack = 0
  2052 ;; hardware stack exceeded
  2053                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2054                           
  2055                           
  2056                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2057     06E3  1283               	bcf	3,5	;RP0=0, select bank0
  2058     06E4  1303               	bcf	3,6	;RP1=0, select bank0
  2059     06E5  1C68               	btfss	_flags,0
  2060     06E6  2EE8               	goto	u1821
  2061     06E7  2EE9               	goto	u1820
  2062     06E8                     u1821:
  2063     06E8  2EF4               	goto	l1929
  2064     06E9                     u1820:
  2065     06E9                     l1927:
  2066                           
  2067                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2068     06E9  0830               	movf	pad@buf,w
  2069     06EA  00F6               	movwf	fputs@s
  2070     06EB  082E               	movf	pad@fp,w
  2071     06EC  00F7               	movwf	fputs@fp
  2072     06ED  082F               	movf	pad@fp+1,w
  2073     06EE  00F8               	movwf	fputs@fp+1
  2074     06EF  120A  118A  27D1  120A  118A  	fcall	_fputs
  2075     06F4                     l1929:
  2076                           
  2077                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2078     06F4  1283               	bcf	3,5	;RP0=0, select bank0
  2079     06F5  1303               	bcf	3,6	;RP1=0, select bank0
  2080     06F6  1FB2               	btfss	pad@p+1,7
  2081     06F7  2EF9               	goto	u1831
  2082     06F8  2EFA               	goto	u1830
  2083     06F9                     u1831:
  2084     06F9  2EFC               	goto	l817
  2085     06FA                     u1830:
  2086     06FA                     l1931:
  2087                           
  2088                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2089     06FA  01B1               	clrf	pad@p
  2090     06FB  01B2               	clrf	pad@p+1
  2091     06FC                     l817:	
  2092                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 207:  }
  2093                           
  2094                           
  2095                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2096     06FC  01B3               	clrf	pad@i
  2097     06FD  01B4               	clrf	pad@i+1
  2098                           
  2099                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2100     06FE  2F16               	goto	l1937
  2101     06FF                     l1933:
  2102                           
  2103                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2104     06FF  3020               	movlw	32
  2105     0700  00F2               	movwf	fputc@c
  2106     0701  3000               	movlw	0
  2107     0702  00F3               	movwf	fputc@c+1
  2108     0703  1283               	bcf	3,5	;RP0=0, select bank0
  2109     0704  1303               	bcf	3,6	;RP1=0, select bank0
  2110     0705  082E               	movf	pad@fp,w
  2111     0706  00F4               	movwf	fputc@fp
  2112     0707  082F               	movf	pad@fp+1,w
  2113     0708  00F5               	movwf	fputc@fp+1
  2114     0709  120A  118A  23EE  120A  118A  	fcall	_fputc
  2115     070E                     l1935:
  2116                           
  2117                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2118     070E  3001               	movlw	1
  2119     070F  1283               	bcf	3,5	;RP0=0, select bank0
  2120     0710  1303               	bcf	3,6	;RP1=0, select bank0
  2121     0711  07B3               	addwf	pad@i,f
  2122     0712  1803               	skipnc
  2123     0713  0AB4               	incf	pad@i+1,f
  2124     0714  3000               	movlw	0
  2125     0715  07B4               	addwf	pad@i+1,f
  2126     0716                     l1937:
  2127                           
  2128                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2129     0716  0834               	movf	pad@i+1,w
  2130     0717  3A80               	xorlw	128
  2131     0718  00F9               	movwf	??_pad
  2132     0719  0832               	movf	pad@p+1,w
  2133     071A  3A80               	xorlw	128
  2134     071B  0279               	subwf	??_pad,w
  2135     071C  1D03               	skipz
  2136     071D  2F20               	goto	u1845
  2137     071E  0831               	movf	pad@p,w
  2138     071F  0233               	subwf	pad@i,w
  2139     0720                     u1845:
  2140     0720  1C03               	skipc
  2141     0721  2F23               	goto	u1841
  2142     0722  2F24               	goto	u1840
  2143     0723                     u1841:
  2144     0723  2EFF               	goto	l1933
  2145     0724                     u1840:
  2146     0724                     l820:
  2147                           
  2148                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2149     0724  1283               	bcf	3,5	;RP0=0, select bank0
  2150     0725  1303               	bcf	3,6	;RP1=0, select bank0
  2151     0726  1868               	btfsc	_flags,0
  2152     0727  2F29               	goto	u1851
  2153     0728  2F2A               	goto	u1850
  2154     0729                     u1851:
  2155     0729  2F35               	goto	l822
  2156     072A                     u1850:
  2157     072A                     l1939:
  2158                           
  2159                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2160     072A  0830               	movf	pad@buf,w
  2161     072B  00F6               	movwf	fputs@s
  2162     072C  082E               	movf	pad@fp,w
  2163     072D  00F7               	movwf	fputs@fp
  2164     072E  082F               	movf	pad@fp+1,w
  2165     072F  00F8               	movwf	fputs@fp+1
  2166     0730  120A  118A  27D1  120A  118A  	fcall	_fputs
  2167     0735                     l822:
  2168     0735  0008               	return
  2169     0736                     __end_of_pad:
  2170                           
  2171                           	psect	text6
  2172     07D1                     __ptext6:	
  2173 ;; *************** function _fputs *****************
  2174 ;; Defined at:
  2175 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputs.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  s               1    6[COMMON] PTR const unsigned char 
  2178 ;;		 -> dbuf(32), 
  2179 ;;  fp              2    7[COMMON] PTR struct _IO_FILE
  2180 ;;		 -> sprintf@f(11), 
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;  i               2   12[BANK0 ] int 
  2183 ;;  c               1   11[BANK0 ] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  2    6[COMMON] int 
  2186 ;; Registers used:
  2187 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2193 ;;      Params:         3       0       0       0       0
  2194 ;;      Locals:         0       3       0       0       0
  2195 ;;      Temps:          0       2       0       0       0
  2196 ;;      Totals:         3       5       0       0       0
  2197 ;;Total ram usage:        8 bytes
  2198 ;; Hardware stack levels used: 1
  2199 ;; Hardware stack levels required when called: 3
  2200 ;; This function calls:
  2201 ;;		_fputc
  2202 ;; This function is called by:
  2203 ;;		_pad
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207     07D1                     _fputs:	
  2208                           ;psect for function _fputs
  2209                           
  2210     07D1                     l1917:	
  2211                           ;incstack = 0
  2212 ;; hardware stack exceeded
  2213                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2214                           
  2215     07D1  1283               	bcf	3,5	;RP0=0, select bank0
  2216     07D2  1303               	bcf	3,6	;RP1=0, select bank0
  2217     07D3  01AC               	clrf	fputs@i
  2218     07D4  01AD               	clrf	fputs@i+1
  2219     07D5  2FEE               	goto	l1923
  2220     07D6                     l1919:
  2221     07D6  082B               	movf	fputs@c,w
  2222     07D7  00A9               	movwf	??_fputs
  2223     07D8  01AA               	clrf	??_fputs+1
  2224     07D9  0829               	movf	??_fputs,w
  2225     07DA  00F2               	movwf	fputc@c
  2226     07DB  082A               	movf	??_fputs+1,w
  2227     07DC  00F3               	movwf	fputc@c+1
  2228     07DD  0877               	movf	fputs@fp,w
  2229     07DE  00F4               	movwf	fputc@fp
  2230     07DF  0878               	movf	fputs@fp+1,w
  2231     07E0  00F5               	movwf	fputc@fp+1
  2232     07E1  120A  118A  23EE  120A  118A  	fcall	_fputc
  2233     07E6                     l1921:
  2234     07E6  3001               	movlw	1
  2235     07E7  1283               	bcf	3,5	;RP0=0, select bank0
  2236     07E8  1303               	bcf	3,6	;RP1=0, select bank0
  2237     07E9  07AC               	addwf	fputs@i,f
  2238     07EA  1803               	skipnc
  2239     07EB  0AAD               	incf	fputs@i+1,f
  2240     07EC  3000               	movlw	0
  2241     07ED  07AD               	addwf	fputs@i+1,f
  2242     07EE                     l1923:
  2243     07EE  082C               	movf	fputs@i,w
  2244     07EF  0776               	addwf	fputs@s,w
  2245     07F0  00A9               	movwf	??_fputs
  2246     07F1  0829               	movf	??_fputs,w
  2247     07F2  0084               	movwf	4
  2248     07F3  1383               	bcf	3,7	;select IRP bank0
  2249     07F4  0800               	movf	0,w
  2250     07F5  00AB               	movwf	fputs@c
  2251     07F6  082B               	movf	fputs@c,w
  2252     07F7  1D03               	btfss	3,2
  2253     07F8  2FFA               	goto	u1811
  2254     07F9  2FFB               	goto	u1810
  2255     07FA                     u1811:
  2256     07FA  2FD6               	goto	l1919
  2257     07FB                     u1810:
  2258     07FB                     l884:
  2259     07FB  0008               	return
  2260     07FC                     __end_of_fputs:
  2261                           
  2262                           	psect	text7
  2263     03EE                     __ptext7:	
  2264 ;; *************** function _fputc *****************
  2265 ;; Defined at:
  2266 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;  c               2    2[COMMON] int 
  2269 ;;  fp              2    4[COMMON] PTR struct _IO_FILE
  2270 ;;		 -> sprintf@f(11), 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  2    2[COMMON] int 
  2275 ;; Registers used:
  2276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2282 ;;      Params:         4       0       0       0       0
  2283 ;;      Locals:         0       0       0       0       0
  2284 ;;      Temps:          0       9       0       0       0
  2285 ;;      Totals:         4       9       0       0       0
  2286 ;;Total ram usage:       13 bytes
  2287 ;; Hardware stack levels used: 1
  2288 ;; Hardware stack levels required when called: 2
  2289 ;; This function calls:
  2290 ;;		_putch
  2291 ;; This function is called by:
  2292 ;;		_pad
  2293 ;;		_vfpfcnvrt
  2294 ;;		_fputs
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298     03EE                     _fputc:	
  2299                           ;psect for function _fputc
  2300                           
  2301     03EE                     l1403:	
  2302                           ;incstack = 0
  2303 ;; hardware stack exceeded
  2304                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2305                           
  2306     03EE  0874               	movf	fputc@fp,w
  2307     03EF  0475               	iorwf	fputc@fp+1,w
  2308     03F0  1903               	btfsc	3,2
  2309     03F1  2BF3               	goto	u911
  2310     03F2  2BF4               	goto	u910
  2311     03F3                     u911:
  2312     03F3  2BFA               	goto	l1407
  2313     03F4                     u910:
  2314     03F4                     l1405:
  2315     03F4  0874               	movf	fputc@fp,w
  2316     03F5  0475               	iorwf	fputc@fp+1,w
  2317     03F6  1D03               	btfss	3,2
  2318     03F7  2BF9               	goto	u921
  2319     03F8  2BFA               	goto	u920
  2320     03F9                     u921:
  2321     03F9  2C01               	goto	l1409
  2322     03FA                     u920:
  2323     03FA                     l1407:
  2324     03FA  0872               	movf	fputc@c,w
  2325     03FB  120A  118A  27FC  120A  118A  	fcall	_putch
  2326     0400  2C8D               	goto	l876
  2327     0401                     l1409:
  2328     0401  0874               	movf	fputc@fp,w
  2329     0402  3E09               	addlw	9
  2330     0403  1283               	bcf	3,5	;RP0=0, select bank0
  2331     0404  1303               	bcf	3,6	;RP1=0, select bank0
  2332     0405  00A0               	movwf	??_fputc
  2333     0406  0875               	movf	fputc@fp+1,w
  2334     0407  1803               	skipnc
  2335     0408  3E01               	addlw	1
  2336     0409  3E00               	addlw	0
  2337     040A  00A1               	movwf	??_fputc+1
  2338     040B  0820               	movf	??_fputc,w
  2339     040C  0084               	movwf	4
  2340     040D  1783               	bsf	3,7
  2341     040E  1C21               	btfss	??_fputc+1,0
  2342     040F  1383               	bcf	3,7
  2343     0410  0800               	movf	0,w
  2344     0411  00A2               	movwf	??_fputc+2
  2345     0412  0A84               	incf	4,f
  2346     0413  0800               	movf	0,w
  2347     0414  00A3               	movwf	??_fputc+3
  2348     0415  0822               	movf	??_fputc+2,w
  2349     0416  0423               	iorwf	??_fputc+3,w
  2350     0417  1903               	btfsc	3,2
  2351     0418  2C1A               	goto	u931
  2352     0419  2C1B               	goto	u930
  2353     041A                     u931:
  2354     041A  2C4D               	goto	l1413
  2355     041B                     u930:
  2356     041B                     l1411:
  2357     041B  0874               	movf	fputc@fp,w
  2358     041C  3E09               	addlw	9
  2359     041D  00A0               	movwf	??_fputc
  2360     041E  0875               	movf	fputc@fp+1,w
  2361     041F  1803               	skipnc
  2362     0420  3E01               	addlw	1
  2363     0421  3E00               	addlw	0
  2364     0422  00A1               	movwf	??_fputc+1
  2365     0423  0820               	movf	??_fputc,w
  2366     0424  0084               	movwf	4
  2367     0425  1783               	bsf	3,7
  2368     0426  1C21               	btfss	??_fputc+1,0
  2369     0427  1383               	bcf	3,7
  2370     0428  0800               	movf	0,w
  2371     0429  00A2               	movwf	??_fputc+2
  2372     042A  0A84               	incf	4,f
  2373     042B  0800               	movf	0,w
  2374     042C  00A3               	movwf	??_fputc+3
  2375     042D  0874               	movf	fputc@fp,w
  2376     042E  3E02               	addlw	2
  2377     042F  00A4               	movwf	??_fputc+4
  2378     0430  0875               	movf	fputc@fp+1,w
  2379     0431  1803               	skipnc
  2380     0432  3E01               	addlw	1
  2381     0433  3E00               	addlw	0
  2382     0434  00A5               	movwf	??_fputc+5
  2383     0435  0824               	movf	??_fputc+4,w
  2384     0436  0084               	movwf	4
  2385     0437  1783               	bsf	3,7
  2386     0438  1C25               	btfss	??_fputc+5,0
  2387     0439  1383               	bcf	3,7
  2388     043A  0800               	movf	0,w
  2389     043B  00A6               	movwf	??_fputc+6
  2390     043C  0A84               	incf	4,f
  2391     043D  0800               	movf	0,w
  2392     043E  00A7               	movwf	??_fputc+7
  2393     043F  0827               	movf	??_fputc+7,w
  2394     0440  3A80               	xorlw	128
  2395     0441  00A8               	movwf	??_fputc+8
  2396     0442  0823               	movf	??_fputc+3,w
  2397     0443  3A80               	xorlw	128
  2398     0444  0228               	subwf	??_fputc+8,w
  2399     0445  1D03               	skipz
  2400     0446  2C49               	goto	u945
  2401     0447  0822               	movf	??_fputc+2,w
  2402     0448  0226               	subwf	??_fputc+6,w
  2403     0449                     u945:
  2404     0449  1803               	skipnc
  2405     044A  2C4C               	goto	u941
  2406     044B  2C4D               	goto	u940
  2407     044C                     u941:
  2408     044C  2C8D               	goto	l876
  2409     044D                     u940:
  2410     044D                     l1413:
  2411     044D  0874               	movf	fputc@fp,w
  2412     044E  0084               	movwf	4
  2413     044F  1783               	bsf	3,7
  2414     0450  1C75               	btfss	fputc@fp+1,0
  2415     0451  1383               	bcf	3,7
  2416     0452  0800               	movf	0,w
  2417     0453  1283               	bcf	3,5	;RP0=0, select bank0
  2418     0454  1303               	bcf	3,6	;RP1=0, select bank0
  2419     0455  00A0               	movwf	??_fputc
  2420     0456  0A84               	incf	4,f
  2421     0457  0800               	movf	0,w
  2422     0458  00A1               	movwf	??_fputc+1
  2423     0459  0874               	movf	fputc@fp,w
  2424     045A  3E02               	addlw	2
  2425     045B  00A2               	movwf	??_fputc+2
  2426     045C  0875               	movf	fputc@fp+1,w
  2427     045D  1803               	skipnc
  2428     045E  3E01               	addlw	1
  2429     045F  3E00               	addlw	0
  2430     0460  00A3               	movwf	??_fputc+3
  2431     0461  0822               	movf	??_fputc+2,w
  2432     0462  0084               	movwf	4
  2433     0463  1783               	bsf	3,7
  2434     0464  1C23               	btfss	??_fputc+3,0
  2435     0465  1383               	bcf	3,7
  2436     0466  0800               	movf	0,w
  2437     0467  0720               	addwf	??_fputc,w
  2438     0468  00A5               	movwf	??_fputc+5
  2439     0469  0821               	movf	??_fputc+1,w
  2440     046A  00A4               	movwf	??_fputc+4
  2441     046B  1803               	skipnc
  2442     046C  0AA4               	incf	??_fputc+4,f
  2443     046D  1F80               	btfss	0,7
  2444     046E  2C70               	goto	u950
  2445     046F  03A4               	decf	??_fputc+4,f
  2446     0470                     u950:
  2447     0470  1283               	bcf	3,5	;RP0=0, select bank0
  2448     0471  1303               	bcf	3,6	;RP1=0, select bank0
  2449     0472  0824               	movf	??_fputc+4,w
  2450     0473  00A6               	movwf	??_fputc+6
  2451     0474  0825               	movf	??_fputc+5,w
  2452     0475  0084               	movwf	4
  2453     0476  1783               	bsf	3,7
  2454     0477  1C26               	btfss	??_fputc+6,0
  2455     0478  1383               	bcf	3,7
  2456     0479  0872               	movf	fputc@c,w
  2457     047A  0080               	movwf	0
  2458     047B  0874               	movf	fputc@fp,w
  2459     047C  3E02               	addlw	2
  2460     047D  00A0               	movwf	??_fputc
  2461     047E  0875               	movf	fputc@fp+1,w
  2462     047F  1803               	skipnc
  2463     0480  3E01               	addlw	1
  2464     0481  3E00               	addlw	0
  2465     0482  00A1               	movwf	??_fputc+1
  2466     0483  0820               	movf	??_fputc,w
  2467     0484  0084               	movwf	4
  2468     0485  1783               	bsf	3,7
  2469     0486  1C21               	btfss	??_fputc+1,0
  2470     0487  1383               	bcf	3,7
  2471     0488  3001               	movlw	1
  2472     0489  0780               	addwf	0,f
  2473     048A  0A84               	incf	4,f
  2474     048B  1803               	skipnc
  2475     048C  0A80               	incf	0,f
  2476     048D                     l876:
  2477     048D  0008               	return
  2478     048E                     __end_of_fputc:
  2479                           
  2480                           	psect	text8
  2481     07FC                     __ptext8:	
  2482 ;; *************** function _putch *****************
  2483 ;; Defined at:
  2484 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  c               1    wreg     unsigned char 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  c               1    0[COMMON] unsigned char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2498 ;;      Params:         0       0       0       0       0
  2499 ;;      Locals:         0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0
  2501 ;;      Totals:         0       0       0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used: 1
  2504 ;; Hardware stack levels required when called: 1
  2505 ;; This function calls:
  2506 ;;		Nothing
  2507 ;; This function is called by:
  2508 ;;		_fputc
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512     07FC                     _putch:	
  2513                           ;psect for function _putch
  2514                           
  2515     07FC                     l887:	
  2516                           ;incstack = 0
  2517 ;; hardware stack exceeded
  2518                           ; Regs used in _putch: [wreg]
  2519                           
  2520     07FC  0008               	return
  2521     07FD                     __end_of_putch:
  2522                           
  2523                           	psect	text9
  2524     0F40                     __ptext9:	
  2525 ;; *************** function ___lwmod *****************
  2526 ;; Defined at:
  2527 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  divisor         2    2[COMMON] unsigned int 
  2530 ;;  dividend        2    4[COMMON] unsigned int 
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  counter         1    6[COMMON] unsigned char 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  2    2[COMMON] unsigned int 
  2535 ;; Registers used:
  2536 ;;		wreg, status,2, status,0
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2542 ;;      Params:         4       0       0       0       0
  2543 ;;      Locals:         1       0       0       0       0
  2544 ;;      Temps:          0       0       0       0       0
  2545 ;;      Totals:         5       0       0       0       0
  2546 ;;Total ram usage:        5 bytes
  2547 ;; Hardware stack levels used: 1
  2548 ;; Hardware stack levels required when called: 1
  2549 ;; This function calls:
  2550 ;;		Nothing
  2551 ;; This function is called by:
  2552 ;;		_main
  2553 ;;		_utoa
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557     0F40                     ___lwmod:	
  2558                           ;psect for function ___lwmod
  2559                           
  2560     0F40                     l1465:	
  2561                           ;incstack = 0
  2562                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2563                           
  2564     0F40  0872               	movf	___lwmod@divisor,w
  2565     0F41  0473               	iorwf	___lwmod@divisor+1,w
  2566     0F42  1903               	btfsc	3,2
  2567     0F43  2F45               	goto	u1081
  2568     0F44  2F46               	goto	u1080
  2569     0F45                     u1081:
  2570     0F45  2F73               	goto	l1483
  2571     0F46                     u1080:
  2572     0F46                     l1467:
  2573     0F46  3001               	movlw	1
  2574     0F47  00F6               	movwf	___lwmod@counter
  2575     0F48  2F52               	goto	l1473
  2576     0F49                     l1469:
  2577     0F49  3001               	movlw	1
  2578     0F4A                     u1095:
  2579     0F4A  1003               	clrc
  2580     0F4B  0DF2               	rlf	___lwmod@divisor,f
  2581     0F4C  0DF3               	rlf	___lwmod@divisor+1,f
  2582     0F4D  3EFF               	addlw	-1
  2583     0F4E  1D03               	skipz
  2584     0F4F  2F4A               	goto	u1095
  2585     0F50                     l1471:
  2586     0F50  3001               	movlw	1
  2587     0F51  07F6               	addwf	___lwmod@counter,f
  2588     0F52                     l1473:
  2589     0F52  1FF3               	btfss	___lwmod@divisor+1,7
  2590     0F53  2F55               	goto	u1101
  2591     0F54  2F56               	goto	u1100
  2592     0F55                     u1101:
  2593     0F55  2F49               	goto	l1469
  2594     0F56                     u1100:
  2595     0F56                     l1475:
  2596     0F56  0873               	movf	___lwmod@divisor+1,w
  2597     0F57  0275               	subwf	___lwmod@dividend+1,w
  2598     0F58  1D03               	skipz
  2599     0F59  2F5C               	goto	u1115
  2600     0F5A  0872               	movf	___lwmod@divisor,w
  2601     0F5B  0274               	subwf	___lwmod@dividend,w
  2602     0F5C                     u1115:
  2603     0F5C  1C03               	skipc
  2604     0F5D  2F5F               	goto	u1111
  2605     0F5E  2F60               	goto	u1110
  2606     0F5F                     u1111:
  2607     0F5F  2F66               	goto	l1479
  2608     0F60                     u1110:
  2609     0F60                     l1477:
  2610     0F60  0872               	movf	___lwmod@divisor,w
  2611     0F61  02F4               	subwf	___lwmod@dividend,f
  2612     0F62  0873               	movf	___lwmod@divisor+1,w
  2613     0F63  1C03               	skipc
  2614     0F64  03F5               	decf	___lwmod@dividend+1,f
  2615     0F65  02F5               	subwf	___lwmod@dividend+1,f
  2616     0F66                     l1479:
  2617     0F66  3001               	movlw	1
  2618     0F67                     u1125:
  2619     0F67  1003               	clrc
  2620     0F68  0CF3               	rrf	___lwmod@divisor+1,f
  2621     0F69  0CF2               	rrf	___lwmod@divisor,f
  2622     0F6A  3EFF               	addlw	-1
  2623     0F6B  1D03               	skipz
  2624     0F6C  2F67               	goto	u1125
  2625     0F6D                     l1481:
  2626     0F6D  3001               	movlw	1
  2627     0F6E  02F6               	subwf	___lwmod@counter,f
  2628     0F6F  1D03               	btfss	3,2
  2629     0F70  2F72               	goto	u1131
  2630     0F71  2F73               	goto	u1130
  2631     0F72                     u1131:
  2632     0F72  2F56               	goto	l1475
  2633     0F73                     u1130:
  2634     0F73                     l1483:
  2635     0F73  0875               	movf	___lwmod@dividend+1,w
  2636     0F74  00F3               	movwf	?___lwmod+1
  2637     0F75  0874               	movf	___lwmod@dividend,w
  2638     0F76  00F2               	movwf	?___lwmod
  2639     0F77                     l626:
  2640     0F77  0008               	return
  2641     0F78                     __end_of___lwmod:
  2642                           
  2643                           	psect	text10
  2644     0F78                     __ptext10:	
  2645 ;; *************** function ___lwdiv *****************
  2646 ;; Defined at:
  2647 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  divisor         2    2[COMMON] unsigned int 
  2650 ;;  dividend        2    4[COMMON] unsigned int 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  quotient        2    6[COMMON] unsigned int 
  2653 ;;  counter         1    8[COMMON] unsigned char 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  2    2[COMMON] unsigned int 
  2656 ;; Registers used:
  2657 ;;		wreg, status,2, status,0
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2663 ;;      Params:         4       0       0       0       0
  2664 ;;      Locals:         3       0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0
  2666 ;;      Totals:         7       0       0       0       0
  2667 ;;Total ram usage:        7 bytes
  2668 ;; Hardware stack levels used: 1
  2669 ;; Hardware stack levels required when called: 1
  2670 ;; This function calls:
  2671 ;;		Nothing
  2672 ;; This function is called by:
  2673 ;;		_main
  2674 ;;		_utoa
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678     0F78                     ___lwdiv:	
  2679                           ;psect for function ___lwdiv
  2680                           
  2681     0F78                     l1439:	
  2682                           ;incstack = 0
  2683                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2684                           
  2685     0F78  01F6               	clrf	___lwdiv@quotient
  2686     0F79  01F7               	clrf	___lwdiv@quotient+1
  2687     0F7A                     l1441:
  2688     0F7A  0872               	movf	___lwdiv@divisor,w
  2689     0F7B  0473               	iorwf	___lwdiv@divisor+1,w
  2690     0F7C  1903               	btfsc	3,2
  2691     0F7D  2F7F               	goto	u1011
  2692     0F7E  2F80               	goto	u1010
  2693     0F7F                     u1011:
  2694     0F7F  2FB5               	goto	l1461
  2695     0F80                     u1010:
  2696     0F80                     l1443:
  2697     0F80  3001               	movlw	1
  2698     0F81  00F8               	movwf	___lwdiv@counter
  2699     0F82  2F8C               	goto	l1449
  2700     0F83                     l1445:
  2701     0F83  3001               	movlw	1
  2702     0F84                     u1025:
  2703     0F84  1003               	clrc
  2704     0F85  0DF2               	rlf	___lwdiv@divisor,f
  2705     0F86  0DF3               	rlf	___lwdiv@divisor+1,f
  2706     0F87  3EFF               	addlw	-1
  2707     0F88  1D03               	skipz
  2708     0F89  2F84               	goto	u1025
  2709     0F8A                     l1447:
  2710     0F8A  3001               	movlw	1
  2711     0F8B  07F8               	addwf	___lwdiv@counter,f
  2712     0F8C                     l1449:
  2713     0F8C  1FF3               	btfss	___lwdiv@divisor+1,7
  2714     0F8D  2F8F               	goto	u1031
  2715     0F8E  2F90               	goto	u1030
  2716     0F8F                     u1031:
  2717     0F8F  2F83               	goto	l1445
  2718     0F90                     u1030:
  2719     0F90                     l1451:
  2720     0F90  3001               	movlw	1
  2721     0F91                     u1045:
  2722     0F91  1003               	clrc
  2723     0F92  0DF6               	rlf	___lwdiv@quotient,f
  2724     0F93  0DF7               	rlf	___lwdiv@quotient+1,f
  2725     0F94  3EFF               	addlw	-1
  2726     0F95  1D03               	skipz
  2727     0F96  2F91               	goto	u1045
  2728     0F97  0873               	movf	___lwdiv@divisor+1,w
  2729     0F98  0275               	subwf	___lwdiv@dividend+1,w
  2730     0F99  1D03               	skipz
  2731     0F9A  2F9D               	goto	u1055
  2732     0F9B  0872               	movf	___lwdiv@divisor,w
  2733     0F9C  0274               	subwf	___lwdiv@dividend,w
  2734     0F9D                     u1055:
  2735     0F9D  1C03               	skipc
  2736     0F9E  2FA0               	goto	u1051
  2737     0F9F  2FA1               	goto	u1050
  2738     0FA0                     u1051:
  2739     0FA0  2FA8               	goto	l1457
  2740     0FA1                     u1050:
  2741     0FA1                     l1453:
  2742     0FA1  0872               	movf	___lwdiv@divisor,w
  2743     0FA2  02F4               	subwf	___lwdiv@dividend,f
  2744     0FA3  0873               	movf	___lwdiv@divisor+1,w
  2745     0FA4  1C03               	skipc
  2746     0FA5  03F5               	decf	___lwdiv@dividend+1,f
  2747     0FA6  02F5               	subwf	___lwdiv@dividend+1,f
  2748     0FA7                     l1455:
  2749     0FA7  1476               	bsf	___lwdiv@quotient,0
  2750     0FA8                     l1457:
  2751     0FA8  3001               	movlw	1
  2752     0FA9                     u1065:
  2753     0FA9  1003               	clrc
  2754     0FAA  0CF3               	rrf	___lwdiv@divisor+1,f
  2755     0FAB  0CF2               	rrf	___lwdiv@divisor,f
  2756     0FAC  3EFF               	addlw	-1
  2757     0FAD  1D03               	skipz
  2758     0FAE  2FA9               	goto	u1065
  2759     0FAF                     l1459:
  2760     0FAF  3001               	movlw	1
  2761     0FB0  02F8               	subwf	___lwdiv@counter,f
  2762     0FB1  1D03               	btfss	3,2
  2763     0FB2  2FB4               	goto	u1071
  2764     0FB3  2FB5               	goto	u1070
  2765     0FB4                     u1071:
  2766     0FB4  2F90               	goto	l1451
  2767     0FB5                     u1070:
  2768     0FB5                     l1461:
  2769     0FB5  0877               	movf	___lwdiv@quotient+1,w
  2770     0FB6  00F3               	movwf	?___lwdiv+1
  2771     0FB7  0876               	movf	___lwdiv@quotient,w
  2772     0FB8  00F2               	movwf	?___lwdiv
  2773     0FB9                     l616:
  2774     0FB9  0008               	return
  2775     0FBA                     __end_of___lwdiv:
  2776                           
  2777                           	psect	text11
  2778     0637                     __ptext11:	
  2779 ;; *************** function _read_prec_or_width *****************
  2780 ;; Defined at:
  2781 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  fmt             1    8[COMMON] PTR PTR const unsigned c
  2784 ;;		 -> vfprintf@cfmt(1), 
  2785 ;;  ap              1    9[COMMON] PTR PTR void [1]
  2786 ;;		 -> sprintf@ap(1), 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  c               1    0[BANK0 ] unsigned char 
  2789 ;;  n               2    1[BANK0 ] int 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  2    8[COMMON] int 
  2792 ;; Registers used:
  2793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2799 ;;      Params:         2       0       0       0       0
  2800 ;;      Locals:         0       3       0       0       0
  2801 ;;      Temps:          0       0       0       0       0
  2802 ;;      Totals:         2       3       0       0       0
  2803 ;;Total ram usage:        5 bytes
  2804 ;; Hardware stack levels used: 1
  2805 ;; Hardware stack levels required when called: 2
  2806 ;; This function calls:
  2807 ;;		___wmul
  2808 ;; This function is called by:
  2809 ;;		_vfpfcnvrt
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813     0637                     _read_prec_or_width:	
  2814                           ;psect for function _read_prec_or_width
  2815                           
  2816     0637                     l1533:	
  2817                           ;incstack = 0
  2818                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2819                           
  2820                           
  2821                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  2822     0637  1283               	bcf	3,5	;RP0=0, select bank0
  2823     0638  1303               	bcf	3,6	;RP1=0, select bank0
  2824     0639  01A1               	clrf	read_prec_or_width@n
  2825     063A  01A2               	clrf	read_prec_or_width@n+1
  2826     063B                     l1535:
  2827                           
  2828                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  2829     063B  0878               	movf	read_prec_or_width@fmt,w
  2830     063C  0084               	movwf	4
  2831     063D  1383               	bcf	3,7	;select IRP bank0
  2832     063E  0800               	movf	0,w
  2833     063F  0084               	movwf	4
  2834     0640  120A  158A  200A  120A  118A  	fcall	stringdir
  2835     0645  3A2A               	xorlw	42
  2836     0646  1D03               	skipz
  2837     0647  2E49               	goto	u1231
  2838     0648  2E4A               	goto	u1230
  2839     0649                     u1231:
  2840     0649  2E78               	goto	l1545
  2841     064A                     u1230:
  2842     064A                     l1537:
  2843                           
  2844                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2845     064A  0878               	movf	read_prec_or_width@fmt,w
  2846     064B  0084               	movwf	4
  2847     064C  3001               	movlw	1
  2848     064D  0780               	addwf	0,f
  2849     064E                     l1539:
  2850                           
  2851                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2852     064E  0879               	movf	read_prec_or_width@ap,w
  2853     064F  0084               	movwf	4
  2854     0650  0800               	movf	0,w
  2855     0651  00FF               	movwf	btemp+1
  2856     0652  3002               	movlw	2
  2857     0653  0780               	addwf	0,f
  2858     0654  087F               	movf	btemp+1,w
  2859     0655  0084               	movwf	4
  2860     0656  0800               	movf	0,w
  2861     0657  00A1               	movwf	read_prec_or_width@n
  2862     0658  0A84               	incf	4,f
  2863     0659  0800               	movf	0,w
  2864     065A  00A2               	movwf	read_prec_or_width@n+1
  2865                           
  2866                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2867     065B  2E89               	goto	l1547
  2868     065C                     l1541:
  2869                           
  2870                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2871     065C  0822               	movf	read_prec_or_width@n+1,w
  2872     065D  00F3               	movwf	___wmul@multiplier+1
  2873     065E  0821               	movf	read_prec_or_width@n,w
  2874     065F  00F2               	movwf	___wmul@multiplier
  2875     0660  300A               	movlw	10
  2876     0661  00F4               	movwf	___wmul@multiplicand
  2877     0662  3000               	movlw	0
  2878     0663  00F5               	movwf	___wmul@multiplicand+1
  2879     0664  120A  158A  271B  120A  118A  	fcall	___wmul
  2880     0669  1283               	bcf	3,5	;RP0=0, select bank0
  2881     066A  1303               	bcf	3,6	;RP1=0, select bank0
  2882     066B  0820               	movf	read_prec_or_width@c,w
  2883     066C  0772               	addwf	?___wmul,w
  2884     066D  00A1               	movwf	read_prec_or_width@n
  2885     066E  3000               	movlw	0
  2886     066F  1803               	skipnc
  2887     0670  3001               	movlw	1
  2888     0671  0773               	addwf	?___wmul+1,w
  2889     0672  00A2               	movwf	read_prec_or_width@n+1
  2890     0673                     l1543:
  2891                           
  2892                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2893     0673  0878               	movf	read_prec_or_width@fmt,w
  2894     0674  0084               	movwf	4
  2895     0675  3001               	movlw	1
  2896     0676  1383               	bcf	3,7	;select IRP bank0
  2897     0677  0780               	addwf	0,f
  2898     0678                     l1545:
  2899                           
  2900                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2901     0678  0878               	movf	read_prec_or_width@fmt,w
  2902     0679  0084               	movwf	4
  2903     067A  0800               	movf	0,w
  2904     067B  0084               	movwf	4
  2905     067C  120A  158A  200A  120A  118A  	fcall	stringdir
  2906     0681  3ED0               	addlw	208
  2907     0682  00A0               	movwf	read_prec_or_width@c
  2908     0683  300A               	movlw	10
  2909     0684  0220               	subwf	read_prec_or_width@c,w
  2910     0685  1C03               	skipc
  2911     0686  2E88               	goto	u1241
  2912     0687  2E89               	goto	u1240
  2913     0688                     u1241:
  2914     0688  2E5C               	goto	l1541
  2915     0689                     u1240:
  2916     0689                     l1547:
  2917                           
  2918                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2919     0689  0822               	movf	read_prec_or_width@n+1,w
  2920     068A  00F9               	movwf	?_read_prec_or_width+1
  2921     068B  0821               	movf	read_prec_or_width@n,w
  2922     068C  00F8               	movwf	?_read_prec_or_width
  2923     068D                     l840:
  2924     068D  0008               	return
  2925     068E                     __end_of_read_prec_or_width:
  2926                           
  2927                           	psect	text12
  2928     0F1B                     __ptext12:	
  2929 ;; *************** function ___wmul *****************
  2930 ;; Defined at:
  2931 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  multiplier      2    2[COMMON] unsigned int 
  2934 ;;  multiplicand    2    4[COMMON] unsigned int 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  product         2    6[COMMON] unsigned int 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  2    2[COMMON] unsigned int 
  2939 ;; Registers used:
  2940 ;;		wreg, status,2, status,0
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2946 ;;      Params:         4       0       0       0       0
  2947 ;;      Locals:         2       0       0       0       0
  2948 ;;      Temps:          0       0       0       0       0
  2949 ;;      Totals:         6       0       0       0       0
  2950 ;;Total ram usage:        6 bytes
  2951 ;; Hardware stack levels used: 1
  2952 ;; Hardware stack levels required when called: 1
  2953 ;; This function calls:
  2954 ;;		Nothing
  2955 ;; This function is called by:
  2956 ;;		_read_prec_or_width
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960     0F1B                     ___wmul:	
  2961                           ;psect for function ___wmul
  2962                           
  2963     0F1B                     l1425:	
  2964                           ;incstack = 0
  2965                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2966                           
  2967     0F1B  01F6               	clrf	___wmul@product
  2968     0F1C  01F7               	clrf	___wmul@product+1
  2969     0F1D                     l1427:
  2970     0F1D  1C72               	btfss	___wmul@multiplier,0
  2971     0F1E  2F20               	goto	u971
  2972     0F1F  2F21               	goto	u970
  2973     0F20                     u971:
  2974     0F20  2F27               	goto	l336
  2975     0F21                     u970:
  2976     0F21                     l1429:
  2977     0F21  0874               	movf	___wmul@multiplicand,w
  2978     0F22  07F6               	addwf	___wmul@product,f
  2979     0F23  1803               	skipnc
  2980     0F24  0AF7               	incf	___wmul@product+1,f
  2981     0F25  0875               	movf	___wmul@multiplicand+1,w
  2982     0F26  07F7               	addwf	___wmul@product+1,f
  2983     0F27                     l336:
  2984     0F27  3001               	movlw	1
  2985     0F28                     u985:
  2986     0F28  1003               	clrc
  2987     0F29  0DF4               	rlf	___wmul@multiplicand,f
  2988     0F2A  0DF5               	rlf	___wmul@multiplicand+1,f
  2989     0F2B  3EFF               	addlw	-1
  2990     0F2C  1D03               	skipz
  2991     0F2D  2F28               	goto	u985
  2992     0F2E                     l1431:
  2993     0F2E  3001               	movlw	1
  2994     0F2F                     u995:
  2995     0F2F  1003               	clrc
  2996     0F30  0CF3               	rrf	___wmul@multiplier+1,f
  2997     0F31  0CF2               	rrf	___wmul@multiplier,f
  2998     0F32  3EFF               	addlw	-1
  2999     0F33  1D03               	skipz
  3000     0F34  2F2F               	goto	u995
  3001     0F35                     l1433:
  3002     0F35  0872               	movf	___wmul@multiplier,w
  3003     0F36  0473               	iorwf	___wmul@multiplier+1,w
  3004     0F37  1D03               	btfss	3,2
  3005     0F38  2F3A               	goto	u1001
  3006     0F39  2F3B               	goto	u1000
  3007     0F3A                     u1001:
  3008     0F3A  2F1D               	goto	l1427
  3009     0F3B                     u1000:
  3010     0F3B                     l1435:
  3011     0F3B  0877               	movf	___wmul@product+1,w
  3012     0F3C  00F3               	movwf	?___wmul+1
  3013     0F3D  0876               	movf	___wmul@product,w
  3014     0F3E  00F2               	movwf	?___wmul
  3015     0F3F                     l338:
  3016     0F3F  0008               	return
  3017     0F40                     __end_of___wmul:
  3018                           
  3019                           	psect	text13
  3020     0789                     __ptext13:	
  3021 ;; *************** function ___lmul *****************
  3022 ;; Defined at:
  3023 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul32.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  multiplier      4    2[COMMON] unsigned long 
  3026 ;;  multiplicand    4    6[COMMON] unsigned long 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  product         4    1[BANK0 ] unsigned long 
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  4    2[COMMON] unsigned long 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2, status,0
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3038 ;;      Params:         8       0       0       0       0
  3039 ;;      Locals:         0       4       0       0       0
  3040 ;;      Temps:          0       1       0       0       0
  3041 ;;      Totals:         8       5       0       0       0
  3042 ;;Total ram usage:       13 bytes
  3043 ;; Hardware stack levels used: 1
  3044 ;; Hardware stack levels required when called: 1
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052     0789                     ___lmul:	
  3053                           ;psect for function ___lmul
  3054                           
  3055     0789                     l2159:	
  3056                           ;incstack = 0
  3057                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3058                           
  3059     0789  3000               	movlw	0
  3060     078A  1283               	bcf	3,5	;RP0=0, select bank0
  3061     078B  1303               	bcf	3,6	;RP1=0, select bank0
  3062     078C  00A4               	movwf	___lmul@product+3
  3063     078D  3000               	movlw	0
  3064     078E  00A3               	movwf	___lmul@product+2
  3065     078F  3000               	movlw	0
  3066     0790  00A2               	movwf	___lmul@product+1
  3067     0791  3000               	movlw	0
  3068     0792  00A1               	movwf	___lmul@product
  3069     0793                     l2161:
  3070     0793  1C72               	btfss	___lmul@multiplier,0
  3071     0794  2F96               	goto	u2251
  3072     0795  2F97               	goto	u2250
  3073     0796                     u2251:
  3074     0796  2FAE               	goto	l2165
  3075     0797                     u2250:
  3076     0797                     l2163:
  3077     0797  0876               	movf	___lmul@multiplicand,w
  3078     0798  07A1               	addwf	___lmul@product,f
  3079     0799  0877               	movf	___lmul@multiplicand+1,w
  3080     079A  1103               	clrz
  3081     079B  1803               	skipnc
  3082     079C  3E01               	addlw	1
  3083     079D  1903               	skipnz
  3084     079E  2FA0               	goto	u2261
  3085     079F  07A2               	addwf	___lmul@product+1,f
  3086     07A0                     u2261:
  3087     07A0  0878               	movf	___lmul@multiplicand+2,w
  3088     07A1  1103               	clrz
  3089     07A2  1803               	skipnc
  3090     07A3  3E01               	addlw	1
  3091     07A4  1903               	skipnz
  3092     07A5  2FA7               	goto	u2262
  3093     07A6  07A3               	addwf	___lmul@product+2,f
  3094     07A7                     u2262:
  3095     07A7  0879               	movf	___lmul@multiplicand+3,w
  3096     07A8  1103               	clrz
  3097     07A9  1803               	skipnc
  3098     07AA  3E01               	addlw	1
  3099     07AB  1903               	skipnz
  3100     07AC  2FAE               	goto	u2263
  3101     07AD  07A4               	addwf	___lmul@product+3,f
  3102     07AE                     u2263:
  3103     07AE                     l2165:
  3104     07AE  3001               	movlw	1
  3105     07AF  00A0               	movwf	??___lmul
  3106     07B0                     u2275:
  3107     07B0  1003               	clrc
  3108     07B1  0DF6               	rlf	___lmul@multiplicand,f
  3109     07B2  0DF7               	rlf	___lmul@multiplicand+1,f
  3110     07B3  0DF8               	rlf	___lmul@multiplicand+2,f
  3111     07B4  0DF9               	rlf	___lmul@multiplicand+3,f
  3112     07B5  0BA0               	decfsz	??___lmul,f
  3113     07B6  2FB0               	goto	u2275
  3114     07B7                     l2167:
  3115     07B7  3001               	movlw	1
  3116     07B8                     u2285:
  3117     07B8  1003               	clrc
  3118     07B9  0CF5               	rrf	___lmul@multiplier+3,f
  3119     07BA  0CF4               	rrf	___lmul@multiplier+2,f
  3120     07BB  0CF3               	rrf	___lmul@multiplier+1,f
  3121     07BC  0CF2               	rrf	___lmul@multiplier,f
  3122     07BD  3EFF               	addlw	-1
  3123     07BE  1D03               	skipz
  3124     07BF  2FB8               	goto	u2285
  3125     07C0  0875               	movf	___lmul@multiplier+3,w
  3126     07C1  0474               	iorwf	___lmul@multiplier+2,w
  3127     07C2  0473               	iorwf	___lmul@multiplier+1,w
  3128     07C3  0472               	iorwf	___lmul@multiplier,w
  3129     07C4  1D03               	skipz
  3130     07C5  2FC7               	goto	u2291
  3131     07C6  2FC8               	goto	u2290
  3132     07C7                     u2291:
  3133     07C7  2F93               	goto	l2161
  3134     07C8                     u2290:
  3135     07C8                     l2169:
  3136     07C8  0824               	movf	___lmul@product+3,w
  3137     07C9  00F5               	movwf	?___lmul+3
  3138     07CA  0823               	movf	___lmul@product+2,w
  3139     07CB  00F4               	movwf	?___lmul+2
  3140     07CC  0822               	movf	___lmul@product+1,w
  3141     07CD  00F3               	movwf	?___lmul+1
  3142     07CE  0821               	movf	___lmul@product,w
  3143     07CF  00F2               	movwf	?___lmul
  3144     07D0                     l350:
  3145     07D0  0008               	return
  3146     07D1                     __end_of___lmul:
  3147                           
  3148                           	psect	text14
  3149     048E                     __ptext14:	
  3150 ;; *************** function ___aldiv *****************
  3151 ;; Defined at:
  3152 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\aldiv.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  divisor         4    5[BANK0 ] long 
  3155 ;;  dividend        4    9[BANK0 ] long 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  quotient        4   16[BANK0 ] long 
  3158 ;;  sign            1   15[BANK0 ] unsigned char 
  3159 ;;  counter         1   14[BANK0 ] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  4    5[BANK0 ] long 
  3162 ;; Registers used:
  3163 ;;		wreg, status,2, status,0
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3169 ;;      Params:         0       8       0       0       0
  3170 ;;      Locals:         0       6       0       0       0
  3171 ;;      Temps:          0       1       0       0       0
  3172 ;;      Totals:         0      15       0       0       0
  3173 ;;Total ram usage:       15 bytes
  3174 ;; Hardware stack levels used: 1
  3175 ;; Hardware stack levels required when called: 1
  3176 ;; This function calls:
  3177 ;;		Nothing
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183     048E                     ___aldiv:	
  3184                           ;psect for function ___aldiv
  3185                           
  3186     048E                     l2173:	
  3187                           ;incstack = 0
  3188                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3189                           
  3190     048E  1283               	bcf	3,5	;RP0=0, select bank0
  3191     048F  1303               	bcf	3,6	;RP1=0, select bank0
  3192     0490  01AF               	clrf	___aldiv@sign
  3193     0491                     l2175:
  3194     0491  1FA8               	btfss	___aldiv@divisor+3,7
  3195     0492  2C94               	goto	u2301
  3196     0493  2C95               	goto	u2300
  3197     0494                     u2301:
  3198     0494  2CA2               	goto	l401
  3199     0495                     u2300:
  3200     0495                     l2177:
  3201     0495  09A5               	comf	___aldiv@divisor,f
  3202     0496  09A6               	comf	___aldiv@divisor+1,f
  3203     0497  09A7               	comf	___aldiv@divisor+2,f
  3204     0498  09A8               	comf	___aldiv@divisor+3,f
  3205     0499  0AA5               	incf	___aldiv@divisor,f
  3206     049A  1903               	skipnz
  3207     049B  0AA6               	incf	___aldiv@divisor+1,f
  3208     049C  1903               	skipnz
  3209     049D  0AA7               	incf	___aldiv@divisor+2,f
  3210     049E  1903               	skipnz
  3211     049F  0AA8               	incf	___aldiv@divisor+3,f
  3212     04A0  3001               	movlw	1
  3213     04A1  00AF               	movwf	___aldiv@sign
  3214     04A2                     l401:
  3215     04A2  1FAC               	btfss	___aldiv@dividend+3,7
  3216     04A3  2CA5               	goto	u2311
  3217     04A4  2CA6               	goto	u2310
  3218     04A5                     u2311:
  3219     04A5  2CB3               	goto	l2183
  3220     04A6                     u2310:
  3221     04A6                     l2179:
  3222     04A6  09A9               	comf	___aldiv@dividend,f
  3223     04A7  09AA               	comf	___aldiv@dividend+1,f
  3224     04A8  09AB               	comf	___aldiv@dividend+2,f
  3225     04A9  09AC               	comf	___aldiv@dividend+3,f
  3226     04AA  0AA9               	incf	___aldiv@dividend,f
  3227     04AB  1903               	skipnz
  3228     04AC  0AAA               	incf	___aldiv@dividend+1,f
  3229     04AD  1903               	skipnz
  3230     04AE  0AAB               	incf	___aldiv@dividend+2,f
  3231     04AF  1903               	skipnz
  3232     04B0  0AAC               	incf	___aldiv@dividend+3,f
  3233     04B1                     l2181:
  3234     04B1  3001               	movlw	1
  3235     04B2  06AF               	xorwf	___aldiv@sign,f
  3236     04B3                     l2183:
  3237     04B3  3000               	movlw	0
  3238     04B4  00B3               	movwf	___aldiv@quotient+3
  3239     04B5  3000               	movlw	0
  3240     04B6  00B2               	movwf	___aldiv@quotient+2
  3241     04B7  3000               	movlw	0
  3242     04B8  00B1               	movwf	___aldiv@quotient+1
  3243     04B9  3000               	movlw	0
  3244     04BA  00B0               	movwf	___aldiv@quotient
  3245     04BB                     l2185:
  3246     04BB  0828               	movf	___aldiv@divisor+3,w
  3247     04BC  0427               	iorwf	___aldiv@divisor+2,w
  3248     04BD  0426               	iorwf	___aldiv@divisor+1,w
  3249     04BE  0425               	iorwf	___aldiv@divisor,w
  3250     04BF  1903               	skipnz
  3251     04C0  2CC2               	goto	u2321
  3252     04C1  2CC3               	goto	u2320
  3253     04C2                     u2321:
  3254     04C2  2D0E               	goto	l2205
  3255     04C3                     u2320:
  3256     04C3                     l2187:
  3257     04C3  3001               	movlw	1
  3258     04C4  00AE               	movwf	___aldiv@counter
  3259     04C5  2CD1               	goto	l2191
  3260     04C6                     l2189:
  3261     04C6  3001               	movlw	1
  3262     04C7  00AD               	movwf	??___aldiv
  3263     04C8                     u2335:
  3264     04C8  1003               	clrc
  3265     04C9  0DA5               	rlf	___aldiv@divisor,f
  3266     04CA  0DA6               	rlf	___aldiv@divisor+1,f
  3267     04CB  0DA7               	rlf	___aldiv@divisor+2,f
  3268     04CC  0DA8               	rlf	___aldiv@divisor+3,f
  3269     04CD  0BAD               	decfsz	??___aldiv,f
  3270     04CE  2CC8               	goto	u2335
  3271     04CF  3001               	movlw	1
  3272     04D0  07AE               	addwf	___aldiv@counter,f
  3273     04D1                     l2191:
  3274     04D1  1FA8               	btfss	___aldiv@divisor+3,7
  3275     04D2  2CD4               	goto	u2341
  3276     04D3  2CD5               	goto	u2340
  3277     04D4                     u2341:
  3278     04D4  2CC6               	goto	l2189
  3279     04D5                     u2340:
  3280     04D5                     l2193:
  3281     04D5  3001               	movlw	1
  3282     04D6  00AD               	movwf	??___aldiv
  3283     04D7                     u2355:
  3284     04D7  1003               	clrc
  3285     04D8  0DB0               	rlf	___aldiv@quotient,f
  3286     04D9  0DB1               	rlf	___aldiv@quotient+1,f
  3287     04DA  0DB2               	rlf	___aldiv@quotient+2,f
  3288     04DB  0DB3               	rlf	___aldiv@quotient+3,f
  3289     04DC  0BAD               	decfsz	??___aldiv,f
  3290     04DD  2CD7               	goto	u2355
  3291     04DE                     l2195:
  3292     04DE  0828               	movf	___aldiv@divisor+3,w
  3293     04DF  022C               	subwf	___aldiv@dividend+3,w
  3294     04E0  1D03               	skipz
  3295     04E1  2CEC               	goto	u2365
  3296     04E2  0827               	movf	___aldiv@divisor+2,w
  3297     04E3  022B               	subwf	___aldiv@dividend+2,w
  3298     04E4  1D03               	skipz
  3299     04E5  2CEC               	goto	u2365
  3300     04E6  0826               	movf	___aldiv@divisor+1,w
  3301     04E7  022A               	subwf	___aldiv@dividend+1,w
  3302     04E8  1D03               	skipz
  3303     04E9  2CEC               	goto	u2365
  3304     04EA  0825               	movf	___aldiv@divisor,w
  3305     04EB  0229               	subwf	___aldiv@dividend,w
  3306     04EC                     u2365:
  3307     04EC  1C03               	skipc
  3308     04ED  2CEF               	goto	u2361
  3309     04EE  2CF0               	goto	u2360
  3310     04EF                     u2361:
  3311     04EF  2CFF               	goto	l2201
  3312     04F0                     u2360:
  3313     04F0                     l2197:
  3314     04F0  0825               	movf	___aldiv@divisor,w
  3315     04F1  02A9               	subwf	___aldiv@dividend,f
  3316     04F2  0826               	movf	___aldiv@divisor+1,w
  3317     04F3  1C03               	skipc
  3318     04F4  0F26               	incfsz	___aldiv@divisor+1,w
  3319     04F5  02AA               	subwf	___aldiv@dividend+1,f
  3320     04F6  0827               	movf	___aldiv@divisor+2,w
  3321     04F7  1C03               	skipc
  3322     04F8  0F27               	incfsz	___aldiv@divisor+2,w
  3323     04F9  02AB               	subwf	___aldiv@dividend+2,f
  3324     04FA  0828               	movf	___aldiv@divisor+3,w
  3325     04FB  1C03               	skipc
  3326     04FC  0F28               	incfsz	___aldiv@divisor+3,w
  3327     04FD  02AC               	subwf	___aldiv@dividend+3,f
  3328     04FE                     l2199:
  3329     04FE  1430               	bsf	___aldiv@quotient,0
  3330     04FF                     l2201:
  3331     04FF  3001               	movlw	1
  3332     0500                     u2375:
  3333     0500  1003               	clrc
  3334     0501  0CA8               	rrf	___aldiv@divisor+3,f
  3335     0502  0CA7               	rrf	___aldiv@divisor+2,f
  3336     0503  0CA6               	rrf	___aldiv@divisor+1,f
  3337     0504  0CA5               	rrf	___aldiv@divisor,f
  3338     0505  3EFF               	addlw	-1
  3339     0506  1D03               	skipz
  3340     0507  2D00               	goto	u2375
  3341     0508                     l2203:
  3342     0508  3001               	movlw	1
  3343     0509  02AE               	subwf	___aldiv@counter,f
  3344     050A  1D03               	btfss	3,2
  3345     050B  2D0D               	goto	u2381
  3346     050C  2D0E               	goto	u2380
  3347     050D                     u2381:
  3348     050D  2CD5               	goto	l2193
  3349     050E                     u2380:
  3350     050E                     l2205:
  3351     050E  082F               	movf	___aldiv@sign,w
  3352     050F  1903               	btfsc	3,2
  3353     0510  2D12               	goto	u2391
  3354     0511  2D13               	goto	u2390
  3355     0512                     u2391:
  3356     0512  2D1E               	goto	l2209
  3357     0513                     u2390:
  3358     0513                     l2207:
  3359     0513  09B0               	comf	___aldiv@quotient,f
  3360     0514  09B1               	comf	___aldiv@quotient+1,f
  3361     0515  09B2               	comf	___aldiv@quotient+2,f
  3362     0516  09B3               	comf	___aldiv@quotient+3,f
  3363     0517  0AB0               	incf	___aldiv@quotient,f
  3364     0518  1903               	skipnz
  3365     0519  0AB1               	incf	___aldiv@quotient+1,f
  3366     051A  1903               	skipnz
  3367     051B  0AB2               	incf	___aldiv@quotient+2,f
  3368     051C  1903               	skipnz
  3369     051D  0AB3               	incf	___aldiv@quotient+3,f
  3370     051E                     l2209:
  3371     051E  0833               	movf	___aldiv@quotient+3,w
  3372     051F  00A8               	movwf	?___aldiv+3
  3373     0520  0832               	movf	___aldiv@quotient+2,w
  3374     0521  00A7               	movwf	?___aldiv+2
  3375     0522  0831               	movf	___aldiv@quotient+1,w
  3376     0523  00A6               	movwf	?___aldiv+1
  3377     0524  0830               	movf	___aldiv@quotient,w
  3378     0525  00A5               	movwf	?___aldiv
  3379     0526                     l411:
  3380     0526  0008               	return
  3381     0527                     __end_of___aldiv:
  3382                           
  3383                           	psect	text15
  3384     0E7A                     __ptext15:	
  3385 ;; *************** function _Timer0_Init *****************
  3386 ;; Defined at:
  3387 ;;		line 48 in file "main.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;		None
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  1    wreg      void 
  3394 ;; Registers used:
  3395 ;;		None
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3401 ;;      Params:         0       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0
  3404 ;;      Totals:         0       0       0       0       0
  3405 ;;Total ram usage:        0 bytes
  3406 ;; Hardware stack levels used: 1
  3407 ;; Hardware stack levels required when called: 1
  3408 ;; This function calls:
  3409 ;;		Nothing
  3410 ;; This function is called by:
  3411 ;;		_main
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415     0E7A                     _Timer0_Init:	
  3416                           ;psect for function _Timer0_Init
  3417                           
  3418     0E7A                     l1665:	
  3419                           ;incstack = 0
  3420                           ; Regs used in _Timer0_Init: []
  3421                           
  3422                           
  3423                           ;main.c: 49: 
  3424     0E7A  3007               	movlw	7
  3425     0E7B  1683               	bsf	3,5	;RP0=1, select bank1
  3426     0E7C  1303               	bcf	3,6	;RP1=0, select bank1
  3427     0E7D  0081               	movwf	1	;volatile
  3428                           
  3429                           ;main.c: 50: 
  3430     0E7E  30D9               	movlw	217
  3431     0E7F  1283               	bcf	3,5	;RP0=0, select bank0
  3432     0E80  1303               	bcf	3,6	;RP1=0, select bank0
  3433     0E81  0081               	movwf	1	;volatile
  3434                           
  3435                           ;main.c: 51: void __attribute__((picinterrupt(("")))) ISR(void) {
  3436     0E82  168B               	bsf	11,5	;volatile
  3437                           
  3438                           ;main.c: 52:     if (T0IF) {
  3439     0E83  178B               	bsf	11,7	;volatile
  3440     0E84                     l70:
  3441     0E84  0008               	return
  3442     0E85                     __end_of_Timer0_Init:
  3443                           
  3444                           	psect	text16
  3445     0E92                     __ptext16:	
  3446 ;; *************** function _TMR1_init *****************
  3447 ;; Defined at:
  3448 ;;		line 39 in file "main.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;		None
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		None
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3462 ;;      Params:         0       0       0       0       0
  3463 ;;      Locals:         0       0       0       0       0
  3464 ;;      Temps:          0       0       0       0       0
  3465 ;;      Totals:         0       0       0       0       0
  3466 ;;Total ram usage:        0 bytes
  3467 ;; Hardware stack levels used: 1
  3468 ;; Hardware stack levels required when called: 1
  3469 ;; This function calls:
  3470 ;;		Nothing
  3471 ;; This function is called by:
  3472 ;;		_main
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476     0E92                     _TMR1_init:	
  3477                           ;psect for function _TMR1_init
  3478                           
  3479     0E92                     l1663:	
  3480                           ;incstack = 0
  3481                           ; Regs used in _TMR1_init: []
  3482                           
  3483                           
  3484                           ;main.c: 40: unsigned int ADC_read() {
  3485     0E92  3031               	movlw	49
  3486     0E93  1283               	bcf	3,5	;RP0=0, select bank0
  3487     0E94  1303               	bcf	3,6	;RP1=0, select bank0
  3488     0E95  0090               	movwf	16	;volatile
  3489                           
  3490                           ;main.c: 41:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  3491     0E96  30FB               	movlw	251
  3492     0E97  008F               	movwf	15	;volatile
  3493                           
  3494                           ;main.c: 42:     GO_nDONE = 1;
  3495     0E98  301D               	movlw	29
  3496     0E99  008E               	movwf	14	;volatile
  3497                           
  3498                           ;main.c: 43:     while (GO_nDONE);
  3499     0E9A  1683               	bsf	3,5	;RP0=1, select bank1
  3500     0E9B  1303               	bcf	3,6	;RP1=0, select bank1
  3501     0E9C  140C               	bsf	12,0	;volatile
  3502                           
  3503                           ;main.c: 44:     return (ADRESH << 8) + ADRESL;
  3504     0E9D  170B               	bsf	11,6	;volatile
  3505                           
  3506                           ;main.c: 45: }
  3507     0E9E  178B               	bsf	11,7	;volatile
  3508     0E9F                     l67:
  3509     0E9F  0008               	return
  3510     0EA0                     __end_of_TMR1_init:
  3511                           
  3512                           	psect	text17
  3513     0EF7                     __ptext17:	
  3514 ;; *************** function _LCD_puts *****************
  3515 ;; Defined at:
  3516 ;;		line 128 in file "lcd.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;  a               1    8[COMMON] PTR unsigned char 
  3519 ;;		 -> exec(6), 
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;  i               2    0[BANK0 ] int 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  1    wreg      void 
  3524 ;; Registers used:
  3525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3531 ;;      Params:         1       0       0       0       0
  3532 ;;      Locals:         0       2       0       0       0
  3533 ;;      Temps:          1       0       0       0       0
  3534 ;;      Totals:         2       2       0       0       0
  3535 ;;Total ram usage:        4 bytes
  3536 ;; Hardware stack levels used: 1
  3537 ;; Hardware stack levels required when called: 3
  3538 ;; This function calls:
  3539 ;;		_LCD_putc
  3540 ;; This function is called by:
  3541 ;;		_main
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545     0EF7                     _LCD_puts:	
  3546                           ;psect for function _LCD_puts
  3547                           
  3548     0EF7                     l2151:	
  3549                           ;incstack = 0
  3550                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3551                           
  3552                           
  3553                           ;lcd.c: 130:     for ( int i = 0; a[i] != '\0'; ++i ) {
  3554     0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  3555     0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  3556     0EF9  01A0               	clrf	LCD_puts@i
  3557     0EFA  01A1               	clrf	LCD_puts@i+1
  3558     0EFB  2F0F               	goto	l2157
  3559     0EFC                     l2153:
  3560                           
  3561                           ;lcd.c: 131:         LCD_putc(a[i]);
  3562     0EFC  0820               	movf	LCD_puts@i,w
  3563     0EFD  0778               	addwf	LCD_puts@a,w
  3564     0EFE  00F9               	movwf	??_LCD_puts
  3565     0EFF  0879               	movf	??_LCD_puts,w
  3566     0F00  0084               	movwf	4
  3567     0F01  0800               	movf	0,w
  3568     0F02  120A  118A  2527  120A  158A  	fcall	_LCD_putc
  3569     0F07                     l2155:
  3570                           
  3571                           ;lcd.c: 132:     }
  3572     0F07  3001               	movlw	1
  3573     0F08  1283               	bcf	3,5	;RP0=0, select bank0
  3574     0F09  1303               	bcf	3,6	;RP1=0, select bank0
  3575     0F0A  07A0               	addwf	LCD_puts@i,f
  3576     0F0B  1803               	skipnc
  3577     0F0C  0AA1               	incf	LCD_puts@i+1,f
  3578     0F0D  3000               	movlw	0
  3579     0F0E  07A1               	addwf	LCD_puts@i+1,f
  3580     0F0F                     l2157:
  3581     0F0F  0820               	movf	LCD_puts@i,w
  3582     0F10  0778               	addwf	LCD_puts@a,w
  3583     0F11  00F9               	movwf	??_LCD_puts
  3584     0F12  0879               	movf	??_LCD_puts,w
  3585     0F13  0084               	movwf	4
  3586     0F14  1383               	bcf	3,7	;select IRP bank0
  3587     0F15  0800               	movf	0,w
  3588     0F16  1D03               	btfss	3,2
  3589     0F17  2F19               	goto	u2241
  3590     0F18  2F1A               	goto	u2240
  3591     0F19                     u2241:
  3592     0F19  2EFC               	goto	l2153
  3593     0F1A                     u2240:
  3594     0F1A                     l244:
  3595     0F1A  0008               	return
  3596     0F1B                     __end_of_LCD_puts:
  3597                           
  3598                           	psect	text18
  3599     0FBA                     __ptext18:	
  3600 ;; *************** function _LCD_putrs *****************
  3601 ;; Defined at:
  3602 ;;		line 136 in file "lcd.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  a               2    8[COMMON] PTR const unsigned char 
  3605 ;;		 -> main@buffer(10), STR_3(6), STR_2(10), STR_1(10), 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  i               2    3[BANK0 ] int 
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  1    wreg      void 
  3610 ;; Registers used:
  3611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3617 ;;      Params:         2       0       0       0       0
  3618 ;;      Locals:         0       2       0       0       0
  3619 ;;      Temps:          0       3       0       0       0
  3620 ;;      Totals:         2       5       0       0       0
  3621 ;;Total ram usage:        7 bytes
  3622 ;; Hardware stack levels used: 1
  3623 ;; Hardware stack levels required when called: 3
  3624 ;; This function calls:
  3625 ;;		_LCD_putc
  3626 ;; This function is called by:
  3627 ;;		_main
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631     0FBA                     _LCD_putrs:	
  3632                           ;psect for function _LCD_putrs
  3633                           
  3634     0FBA                     l2129:	
  3635                           ;incstack = 0
  3636                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3637                           
  3638                           
  3639                           ;lcd.c: 138:     for ( int i = 0; a[i] != '\0'; ++i ) {
  3640     0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  3641     0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  3642     0FBC  01A3               	clrf	LCD_putrs@i
  3643     0FBD  01A4               	clrf	LCD_putrs@i+1
  3644     0FBE  2FE3               	goto	l2135
  3645     0FBF                     l2131:
  3646                           
  3647                           ;lcd.c: 139:         LCD_putc(a[i]);
  3648     0FBF  0823               	movf	LCD_putrs@i,w
  3649     0FC0  0778               	addwf	LCD_putrs@a,w
  3650     0FC1  00A1               	movwf	??_LCD_putrs+1
  3651     0FC2  0879               	movf	LCD_putrs@a+1,w
  3652     0FC3  00A0               	movwf	??_LCD_putrs
  3653     0FC4  1803               	skipnc
  3654     0FC5  0AA0               	incf	??_LCD_putrs,f
  3655     0FC6  1FA3               	btfss	LCD_putrs@i,7
  3656     0FC7  2FC9               	goto	u2210
  3657     0FC8  03A0               	decf	??_LCD_putrs,f
  3658     0FC9                     u2210:
  3659     0FC9  1283               	bcf	3,5	;RP0=0, select bank0
  3660     0FCA  1303               	bcf	3,6	;RP1=0, select bank0
  3661     0FCB  0820               	movf	??_LCD_putrs,w
  3662     0FCC  00A2               	movwf	??_LCD_putrs+2
  3663     0FCD  0822               	movf	??_LCD_putrs+2,w
  3664     0FCE  00FF               	movwf	btemp+1
  3665     0FCF  0821               	movf	??_LCD_putrs+1,w
  3666     0FD0  0084               	movwf	4
  3667     0FD1  120A  158A  2000  120A  158A  	fcall	stringtab
  3668     0FD6  120A  118A  2527  120A  158A  	fcall	_LCD_putc
  3669     0FDB                     l2133:
  3670                           
  3671                           ;lcd.c: 140:     }
  3672     0FDB  3001               	movlw	1
  3673     0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  3674     0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  3675     0FDE  07A3               	addwf	LCD_putrs@i,f
  3676     0FDF  1803               	skipnc
  3677     0FE0  0AA4               	incf	LCD_putrs@i+1,f
  3678     0FE1  3000               	movlw	0
  3679     0FE2  07A4               	addwf	LCD_putrs@i+1,f
  3680     0FE3                     l2135:
  3681     0FE3  0823               	movf	LCD_putrs@i,w
  3682     0FE4  0778               	addwf	LCD_putrs@a,w
  3683     0FE5  00A1               	movwf	??_LCD_putrs+1
  3684     0FE6  0879               	movf	LCD_putrs@a+1,w
  3685     0FE7  00A0               	movwf	??_LCD_putrs
  3686     0FE8  1803               	skipnc
  3687     0FE9  0AA0               	incf	??_LCD_putrs,f
  3688     0FEA  1FA3               	btfss	LCD_putrs@i,7
  3689     0FEB  2FED               	goto	u2220
  3690     0FEC  03A0               	decf	??_LCD_putrs,f
  3691     0FED                     u2220:
  3692     0FED  1283               	bcf	3,5	;RP0=0, select bank0
  3693     0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  3694     0FEF  0820               	movf	??_LCD_putrs,w
  3695     0FF0  00A2               	movwf	??_LCD_putrs+2
  3696     0FF1  0822               	movf	??_LCD_putrs+2,w
  3697     0FF2  00FF               	movwf	btemp+1
  3698     0FF3  0821               	movf	??_LCD_putrs+1,w
  3699     0FF4  0084               	movwf	4
  3700     0FF5  120A  158A  2000  120A  158A  	fcall	stringtab
  3701     0FFA  3A00               	xorlw	0
  3702     0FFB  1D03               	skipz
  3703     0FFC  2FFE               	goto	u2231
  3704     0FFD  2FFF               	goto	u2230
  3705     0FFE                     u2231:
  3706     0FFE  2FBF               	goto	l2131
  3707     0FFF                     u2230:
  3708     0FFF                     l250:
  3709     0FFF  0008               	return
  3710     1000                     __end_of_LCD_putrs:
  3711                           
  3712                           	psect	text19
  3713     0527                     __ptext19:	
  3714 ;; *************** function _LCD_putc *****************
  3715 ;; Defined at:
  3716 ;;		line 111 in file "lcd.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  c               1    wreg     unsigned char 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  c               1    7[COMMON] unsigned char 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      void 
  3723 ;; Registers used:
  3724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3730 ;;      Params:         0       0       0       0       0
  3731 ;;      Locals:         1       0       0       0       0
  3732 ;;      Temps:          2       0       0       0       0
  3733 ;;      Totals:         3       0       0       0       0
  3734 ;;Total ram usage:        3 bytes
  3735 ;; Hardware stack levels used: 1
  3736 ;; Hardware stack levels required when called: 2
  3737 ;; This function calls:
  3738 ;;		_LCD_Out
  3739 ;; This function is called by:
  3740 ;;		_LCD_puts
  3741 ;;		_LCD_putrs
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745     0527                     _LCD_putc:	
  3746                           ;psect for function _LCD_putc
  3747                           
  3748                           
  3749                           ;incstack = 0
  3750                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3751                           ;LCD_putc@c stored from wreg
  3752     0527  00F7               	movwf	LCD_putc@c
  3753     0528                     l2057:
  3754                           
  3755                           ;lcd.c: 113:    *(lcd.PORT) |= 1 << lcd.RS;
  3756     0528  1683               	bsf	3,5	;RP0=1, select bank1
  3757     0529  1303               	bcf	3,6	;RP1=0, select bank1
  3758     052A  085B               	movf	_lcd^(0+128),w
  3759     052B  0084               	movwf	4
  3760     052C  1783               	bsf	3,7
  3761     052D  1C5C               	btfss	(_lcd+1)^(0+128),0
  3762     052E  1383               	bcf	3,7
  3763     052F  3001               	movlw	1
  3764     0530  00F5               	movwf	??_LCD_putc
  3765     0531  085D               	movf	(_lcd^(0+128)+2),w
  3766     0532  3907               	andlw	7
  3767     0533  3E01               	addlw	1
  3768     0534  2D37               	goto	u2104
  3769     0535                     u2105:
  3770     0535  1003               	clrc
  3771     0536  0DF5               	rlf	??_LCD_putc,f
  3772     0537                     u2104:
  3773     0537  3EFF               	addlw	-1
  3774     0538  1D03               	skipz
  3775     0539  2D35               	goto	u2105
  3776     053A  0875               	movf	??_LCD_putc,w
  3777     053B  0480               	iorwf	0,f
  3778     053C                     l2059:
  3779                           
  3780                           ;lcd.c: 114:     LCD_Out((c & 0xF0) >> 4);
  3781     053C  0877               	movf	LCD_putc@c,w
  3782     053D  00F5               	movwf	??_LCD_putc
  3783     053E  3004               	movlw	4
  3784     053F                     u2115:
  3785     053F  1003               	clrc
  3786     0540  0CF5               	rrf	??_LCD_putc,f
  3787     0541  3EFF               	addlw	-1
  3788     0542  1D03               	skipz
  3789     0543  2D3F               	goto	u2115
  3790     0544  0875               	movf	??_LCD_putc,w
  3791     0545  390F               	andlw	15
  3792     0546  120A  118A  21D6  120A  118A  	fcall	_LCD_Out
  3793     054B                     l2061:
  3794                           
  3795                           ;lcd.c: 116:     *(lcd.PORT) |= 1 << lcd.EN;
  3796     054B  1683               	bsf	3,5	;RP0=1, select bank1
  3797     054C  1303               	bcf	3,6	;RP1=0, select bank1
  3798     054D  085B               	movf	_lcd^(0+128),w
  3799     054E  0084               	movwf	4
  3800     054F  1783               	bsf	3,7
  3801     0550  1C5C               	btfss	(_lcd+1)^(0+128),0
  3802     0551  1383               	bcf	3,7
  3803     0552  3001               	movlw	1
  3804     0553  00F5               	movwf	??_LCD_putc
  3805     0554  0C5D               	rrf	(_lcd^(0+128)+2),w
  3806     0555  00F6               	movwf	??_LCD_putc+1
  3807     0556  0CF6               	rrf	??_LCD_putc+1,f
  3808     0557  0C76               	rrf	??_LCD_putc+1,w
  3809     0558  3907               	andlw	7
  3810     0559  3E01               	addlw	1
  3811     055A  2D5D               	goto	u2124
  3812     055B                     u2125:
  3813     055B  1003               	clrc
  3814     055C  0DF5               	rlf	??_LCD_putc,f
  3815     055D                     u2124:
  3816     055D  3EFF               	addlw	-1
  3817     055E  1D03               	skipz
  3818     055F  2D5B               	goto	u2125
  3819     0560  0875               	movf	??_LCD_putc,w
  3820     0561  0480               	iorwf	0,f
  3821     0562                     l2063:
  3822                           
  3823                           ;lcd.c: 117:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3824     0562  300D               	movlw	13
  3825     0563  00F5               	movwf	??_LCD_putc
  3826     0564                     u2417:
  3827     0564  0BF5               	decfsz	??_LCD_putc,f
  3828     0565  2D64               	goto	u2417
  3829     0566                     l2065:
  3830                           
  3831                           ;lcd.c: 118:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3832     0566  1683               	bsf	3,5	;RP0=1, select bank1
  3833     0567  1303               	bcf	3,6	;RP1=0, select bank1
  3834     0568  085B               	movf	_lcd^(0+128),w
  3835     0569  0084               	movwf	4
  3836     056A  1783               	bsf	3,7
  3837     056B  1C5C               	btfss	(_lcd+1)^(0+128),0
  3838     056C  1383               	bcf	3,7
  3839     056D  3001               	movlw	1
  3840     056E  00F5               	movwf	??_LCD_putc
  3841     056F  0C5D               	rrf	(_lcd^(0+128)+2),w
  3842     0570  00F6               	movwf	??_LCD_putc+1
  3843     0571  0CF6               	rrf	??_LCD_putc+1,f
  3844     0572  0C76               	rrf	??_LCD_putc+1,w
  3845     0573  3907               	andlw	7
  3846     0574  3E01               	addlw	1
  3847     0575  2D78               	goto	u2134
  3848     0576                     u2135:
  3849     0576  1003               	clrc
  3850     0577  0DF5               	rlf	??_LCD_putc,f
  3851     0578                     u2134:
  3852     0578  3EFF               	addlw	-1
  3853     0579  1D03               	skipz
  3854     057A  2D76               	goto	u2135
  3855     057B  0875               	movf	??_LCD_putc,w
  3856     057C  3AFF               	xorlw	255
  3857     057D  0580               	andwf	0,f
  3858     057E                     l2067:
  3859                           
  3860                           ;lcd.c: 120:     LCD_Out(c & 0x0F);
  3861     057E  0877               	movf	LCD_putc@c,w
  3862     057F  390F               	andlw	15
  3863     0580  120A  118A  21D6  120A  118A  	fcall	_LCD_Out
  3864     0585                     l2069:
  3865                           
  3866                           ;lcd.c: 122:     *(lcd.PORT) |= 1 << lcd.EN;
  3867     0585  1683               	bsf	3,5	;RP0=1, select bank1
  3868     0586  1303               	bcf	3,6	;RP1=0, select bank1
  3869     0587  085B               	movf	_lcd^(0+128),w
  3870     0588  0084               	movwf	4
  3871     0589  1783               	bsf	3,7
  3872     058A  1C5C               	btfss	(_lcd+1)^(0+128),0
  3873     058B  1383               	bcf	3,7
  3874     058C  3001               	movlw	1
  3875     058D  00F5               	movwf	??_LCD_putc
  3876     058E  0C5D               	rrf	(_lcd^(0+128)+2),w
  3877     058F  00F6               	movwf	??_LCD_putc+1
  3878     0590  0CF6               	rrf	??_LCD_putc+1,f
  3879     0591  0C76               	rrf	??_LCD_putc+1,w
  3880     0592  3907               	andlw	7
  3881     0593  3E01               	addlw	1
  3882     0594  2D97               	goto	u2144
  3883     0595                     u2145:
  3884     0595  1003               	clrc
  3885     0596  0DF5               	rlf	??_LCD_putc,f
  3886     0597                     u2144:
  3887     0597  3EFF               	addlw	-1
  3888     0598  1D03               	skipz
  3889     0599  2D95               	goto	u2145
  3890     059A  0875               	movf	??_LCD_putc,w
  3891     059B  0480               	iorwf	0,f
  3892                           
  3893                           ;lcd.c: 123:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3894     059C  300D               	movlw	13
  3895     059D  00F5               	movwf	??_LCD_putc
  3896     059E                     u2427:
  3897     059E  0BF5               	decfsz	??_LCD_putc,f
  3898     059F  2D9E               	goto	u2427
  3899     05A0                     l2071:
  3900                           
  3901                           ;lcd.c: 124:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3902     05A0  1683               	bsf	3,5	;RP0=1, select bank1
  3903     05A1  1303               	bcf	3,6	;RP1=0, select bank1
  3904     05A2  085B               	movf	_lcd^(0+128),w
  3905     05A3  0084               	movwf	4
  3906     05A4  1783               	bsf	3,7
  3907     05A5  1C5C               	btfss	(_lcd+1)^(0+128),0
  3908     05A6  1383               	bcf	3,7
  3909     05A7  3001               	movlw	1
  3910     05A8  00F5               	movwf	??_LCD_putc
  3911     05A9  0C5D               	rrf	(_lcd^(0+128)+2),w
  3912     05AA  00F6               	movwf	??_LCD_putc+1
  3913     05AB  0CF6               	rrf	??_LCD_putc+1,f
  3914     05AC  0C76               	rrf	??_LCD_putc+1,w
  3915     05AD  3907               	andlw	7
  3916     05AE  3E01               	addlw	1
  3917     05AF  2DB2               	goto	u2154
  3918     05B0                     u2155:
  3919     05B0  1003               	clrc
  3920     05B1  0DF5               	rlf	??_LCD_putc,f
  3921     05B2                     u2154:
  3922     05B2  3EFF               	addlw	-1
  3923     05B3  1D03               	skipz
  3924     05B4  2DB0               	goto	u2155
  3925     05B5  0875               	movf	??_LCD_putc,w
  3926     05B6  3AFF               	xorlw	255
  3927     05B7  0580               	andwf	0,f
  3928     05B8                     l238:
  3929     05B8  0008               	return
  3930     05B9                     __end_of_LCD_putc:
  3931                           
  3932                           	psect	text20
  3933     0342                     __ptext20:	
  3934 ;; *************** function _LCD_Init *****************
  3935 ;; Defined at:
  3936 ;;		line 53 in file "lcd.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  display         5    0[BANK0 ] struct .
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  cmd             1    5[BANK0 ] unsigned char 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      _Bool 
  3943 ;; Registers used:
  3944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3950 ;;      Params:         0       5       0       0       0
  3951 ;;      Locals:         0       1       0       0       0
  3952 ;;      Temps:          2       0       0       0       0
  3953 ;;      Totals:         2       6       0       0       0
  3954 ;;Total ram usage:        8 bytes
  3955 ;; Hardware stack levels used: 1
  3956 ;; Hardware stack levels required when called: 3
  3957 ;; This function calls:
  3958 ;;		_LCD_Write
  3959 ;; This function is called by:
  3960 ;;		_main
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964     0342                     _LCD_Init:	
  3965                           ;psect for function _LCD_Init
  3966                           
  3967     0342                     l2083:	
  3968                           ;incstack = 0
  3969                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3970                           
  3971                           
  3972                           ;lcd.c: 55:     lcd = display;
  3973     0342  30DB               	movlw	_lcd& (0+255)
  3974     0343  0084               	movwf	4
  3975     0344  1283               	bcf	3,5	;RP0=0, select bank0
  3976     0345  1303               	bcf	3,6	;RP1=0, select bank0
  3977     0346  0820               	movf	LCD_Init@display,w
  3978     0347  1383               	bcf	3,7	;select IRP bank1
  3979     0348  0080               	movwf	0
  3980     0349  0A84               	incf	4,f
  3981     034A  0821               	movf	LCD_Init@display+1,w
  3982     034B  0080               	movwf	0
  3983     034C  0A84               	incf	4,f
  3984     034D  0822               	movf	LCD_Init@display+2,w
  3985     034E  0080               	movwf	0
  3986     034F  0A84               	incf	4,f
  3987     0350  0823               	movf	LCD_Init@display+3,w
  3988     0351  0080               	movwf	0
  3989     0352  0A84               	incf	4,f
  3990     0353  0824               	movf	LCD_Init@display+4,w
  3991     0354  0080               	movwf	0
  3992     0355                     l2085:
  3993                           
  3994                           ;lcd.c: 64:     if ( lcd.PORT == &PORTA ) {
  3995     0355  3000               	movlw	0
  3996     0356  1683               	bsf	3,5	;RP0=1, select bank1
  3997     0357  1303               	bcf	3,6	;RP1=0, select bank1
  3998     0358  065C               	xorwf	(_lcd+1)^(0+128),w
  3999     0359  1D03               	skipz
  4000     035A  2B5D               	goto	u2175
  4001     035B  3005               	movlw	5
  4002     035C  065B               	xorwf	_lcd^(0+128),w
  4003     035D                     u2175:
  4004     035D  1D03               	skipz
  4005     035E  2B60               	goto	u2171
  4006     035F  2B61               	goto	u2170
  4007     0360                     u2171:
  4008     0360  2B63               	goto	l2089
  4009     0361                     u2170:
  4010     0361                     l2087:
  4011                           
  4012                           ;lcd.c: 65:         TRISA = 0x00;
  4013     0361  0185               	clrf	5	;volatile
  4014                           
  4015                           ;lcd.c: 66:     }
  4016     0362  2B7A               	goto	l2097
  4017     0363                     l2089:
  4018     0363  3000               	movlw	0
  4019     0364  065C               	xorwf	(_lcd+1)^(0+128),w
  4020     0365  1D03               	skipz
  4021     0366  2B69               	goto	u2185
  4022     0367  3006               	movlw	6
  4023     0368  065B               	xorwf	_lcd^(0+128),w
  4024     0369                     u2185:
  4025     0369  1D03               	skipz
  4026     036A  2B6C               	goto	u2181
  4027     036B  2B6D               	goto	u2180
  4028     036C                     u2181:
  4029     036C  2B6F               	goto	l2093
  4030     036D                     u2180:
  4031     036D                     l2091:
  4032                           
  4033                           ;lcd.c: 68:         TRISB = 0x00;
  4034     036D  0186               	clrf	6	;volatile
  4035                           
  4036                           ;lcd.c: 69:     }
  4037     036E  2B7A               	goto	l2097
  4038     036F                     l2093:
  4039     036F  3000               	movlw	0
  4040     0370  065C               	xorwf	(_lcd+1)^(0+128),w
  4041     0371  1D03               	skipz
  4042     0372  2B75               	goto	u2195
  4043     0373  3007               	movlw	7
  4044     0374  065B               	xorwf	_lcd^(0+128),w
  4045     0375                     u2195:
  4046     0375  1D03               	skipz
  4047     0376  2B78               	goto	u2191
  4048     0377  2B79               	goto	u2190
  4049     0378                     u2191:
  4050     0378  2BED               	goto	l222
  4051     0379                     u2190:
  4052     0379                     l2095:
  4053                           
  4054                           ;lcd.c: 71:         TRISC = 0x00;
  4055     0379  0187               	clrf	7	;volatile
  4056     037A                     l2097:	
  4057                           ;lcd.c: 72:     }
  4058                           
  4059                           
  4060                           ;lcd.c: 86:     _delay((unsigned long)((20)*(4000000/4000.0)));
  4061     037A  301A               	movlw	26
  4062     037B  00F9               	movwf	??_LCD_Init+1
  4063     037C  30F8               	movlw	248
  4064     037D  00F8               	movwf	??_LCD_Init
  4065     037E                     u2437:
  4066     037E  0BF8               	decfsz	??_LCD_Init,f
  4067     037F  2B7E               	goto	u2437
  4068     0380  0BF9               	decfsz	??_LCD_Init+1,f
  4069     0381  2B7E               	goto	u2437
  4070     0382  0000               	nop
  4071     0383                     l2099:
  4072                           
  4073                           ;lcd.c: 89:     LCD_Write(0x03);
  4074     0383  3003               	movlw	3
  4075     0384  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4076     0389                     l2101:
  4077                           
  4078                           ;lcd.c: 90:     _delay((unsigned long)((5)*(4000000/4000.0)));
  4079     0389  3007               	movlw	7
  4080     038A  00F9               	movwf	??_LCD_Init+1
  4081     038B  307D               	movlw	125
  4082     038C  00F8               	movwf	??_LCD_Init
  4083     038D                     u2447:
  4084     038D  0BF8               	decfsz	??_LCD_Init,f
  4085     038E  2B8D               	goto	u2447
  4086     038F  0BF9               	decfsz	??_LCD_Init+1,f
  4087     0390  2B8D               	goto	u2447
  4088                           
  4089                           ;lcd.c: 91:     LCD_Write(0x03);
  4090     0391  3003               	movlw	3
  4091     0392  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4092     0397                     l2103:
  4093                           
  4094                           ;lcd.c: 92:     _delay((unsigned long)((16)*(4000000/4000.0)));
  4095     0397  3015               	movlw	21
  4096     0398  00F9               	movwf	??_LCD_Init+1
  4097     0399  30C6               	movlw	198
  4098     039A  00F8               	movwf	??_LCD_Init
  4099     039B                     u2457:
  4100     039B  0BF8               	decfsz	??_LCD_Init,f
  4101     039C  2B9B               	goto	u2457
  4102     039D  0BF9               	decfsz	??_LCD_Init+1,f
  4103     039E  2B9B               	goto	u2457
  4104     039F  0000               	nop
  4105     03A0                     l2105:
  4106                           
  4107                           ;lcd.c: 93:     LCD_Write(0x03);
  4108     03A0  3003               	movlw	3
  4109     03A1  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4110     03A6                     l2107:
  4111                           
  4112                           ;lcd.c: 96:     LCD_Write(0x02);
  4113     03A6  3002               	movlw	2
  4114     03A7  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4115     03AC                     l2109:
  4116     03AC  3002               	movlw	2
  4117     03AD  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4118     03B2                     l2111:
  4119     03B2  3008               	movlw	8
  4120     03B3  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4121     03B8                     l2113:
  4122     03B8  3000               	movlw	0
  4123     03B9  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4124     03BE                     l2115:
  4125     03BE  3006               	movlw	6
  4126     03BF  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4127     03C4                     l2117:
  4128     03C4  3008               	movlw	8
  4129     03C5  1283               	bcf	3,5	;RP0=0, select bank0
  4130     03C6  1303               	bcf	3,6	;RP1=0, select bank0
  4131     03C7  00A5               	movwf	LCD_Init@cmd
  4132     03C8                     l2119:
  4133     03C8  1525               	bsf	LCD_Init@cmd,2
  4134     03C9                     l2125:
  4135     03C9  0825               	movf	LCD_Init@cmd,w
  4136     03CA  00F8               	movwf	??_LCD_Init
  4137     03CB  3004               	movlw	4
  4138     03CC                     u2205:
  4139     03CC  1003               	clrc
  4140     03CD  0CF8               	rrf	??_LCD_Init,f
  4141     03CE  3EFF               	addlw	-1
  4142     03CF  1D03               	skipz
  4143     03D0  2BCC               	goto	u2205
  4144     03D1  0878               	movf	??_LCD_Init,w
  4145     03D2  390F               	andlw	15
  4146     03D3  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4147     03D8  1283               	bcf	3,5	;RP0=0, select bank0
  4148     03D9  1303               	bcf	3,6	;RP1=0, select bank0
  4149     03DA  0825               	movf	LCD_Init@cmd,w
  4150     03DB  390F               	andlw	15
  4151     03DC  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4152     03E1                     l234:	
  4153                           ;lcd.c: 106:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  4154                           
  4155     03E1  3000               	movlw	0
  4156     03E2  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4157     03E7  3001               	movlw	1
  4158     03E8  120A  118A  268E  120A  118A  	fcall	_LCD_Write
  4159     03ED                     l222:
  4160     03ED  0008               	return
  4161     03EE                     __end_of_LCD_Init:
  4162                           
  4163                           	psect	text21
  4164     068E                     __ptext21:	
  4165 ;; *************** function _LCD_Write *****************
  4166 ;; Defined at:
  4167 ;;		line 42 in file "lcd.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  c               1    wreg     unsigned char 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  c               1    7[COMMON] unsigned char 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  1    wreg      void 
  4174 ;; Registers used:
  4175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4181 ;;      Params:         0       0       0       0       0
  4182 ;;      Locals:         1       0       0       0       0
  4183 ;;      Temps:          2       0       0       0       0
  4184 ;;      Totals:         3       0       0       0       0
  4185 ;;Total ram usage:        3 bytes
  4186 ;; Hardware stack levels used: 1
  4187 ;; Hardware stack levels required when called: 2
  4188 ;; This function calls:
  4189 ;;		_LCD_Out
  4190 ;; This function is called by:
  4191 ;;		_main
  4192 ;;		_LCD_Init
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196     068E                     _LCD_Write:	
  4197                           ;psect for function _LCD_Write
  4198                           
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4202                           ;LCD_Write@c stored from wreg
  4203     068E  00F7               	movwf	LCD_Write@c
  4204     068F                     l2047:
  4205                           
  4206                           ;lcd.c: 44:     *(lcd.PORT) &= ~(1 << lcd.RS);
  4207     068F  1683               	bsf	3,5	;RP0=1, select bank1
  4208     0690  1303               	bcf	3,6	;RP1=0, select bank1
  4209     0691  085B               	movf	_lcd^(0+128),w
  4210     0692  0084               	movwf	4
  4211     0693  1783               	bsf	3,7
  4212     0694  1C5C               	btfss	(_lcd+1)^(0+128),0
  4213     0695  1383               	bcf	3,7
  4214     0696  3001               	movlw	1
  4215     0697  00F5               	movwf	??_LCD_Write
  4216     0698  085D               	movf	(_lcd^(0+128)+2),w
  4217     0699  3907               	andlw	7
  4218     069A  3E01               	addlw	1
  4219     069B  2E9E               	goto	u2074
  4220     069C                     u2075:
  4221     069C  1003               	clrc
  4222     069D  0DF5               	rlf	??_LCD_Write,f
  4223     069E                     u2074:
  4224     069E  3EFF               	addlw	-1
  4225     069F  1D03               	skipz
  4226     06A0  2E9C               	goto	u2075
  4227     06A1  0875               	movf	??_LCD_Write,w
  4228     06A2  3AFF               	xorlw	255
  4229     06A3  0580               	andwf	0,f
  4230     06A4                     l2049:
  4231                           
  4232                           ;lcd.c: 45:     LCD_Out(c);
  4233     06A4  0877               	movf	LCD_Write@c,w
  4234     06A5  120A  118A  21D6  120A  118A  	fcall	_LCD_Out
  4235     06AA                     l2051:
  4236                           
  4237                           ;lcd.c: 47:     *(lcd.PORT) |= 1 << lcd.EN;
  4238     06AA  1683               	bsf	3,5	;RP0=1, select bank1
  4239     06AB  1303               	bcf	3,6	;RP1=0, select bank1
  4240     06AC  085B               	movf	_lcd^(0+128),w
  4241     06AD  0084               	movwf	4
  4242     06AE  1783               	bsf	3,7
  4243     06AF  1C5C               	btfss	(_lcd+1)^(0+128),0
  4244     06B0  1383               	bcf	3,7
  4245     06B1  3001               	movlw	1
  4246     06B2  00F5               	movwf	??_LCD_Write
  4247     06B3  0C5D               	rrf	(_lcd^(0+128)+2),w
  4248     06B4  00F6               	movwf	??_LCD_Write+1
  4249     06B5  0CF6               	rrf	??_LCD_Write+1,f
  4250     06B6  0C76               	rrf	??_LCD_Write+1,w
  4251     06B7  3907               	andlw	7
  4252     06B8  3E01               	addlw	1
  4253     06B9  2EBC               	goto	u2084
  4254     06BA                     u2085:
  4255     06BA  1003               	clrc
  4256     06BB  0DF5               	rlf	??_LCD_Write,f
  4257     06BC                     u2084:
  4258     06BC  3EFF               	addlw	-1
  4259     06BD  1D03               	skipz
  4260     06BE  2EBA               	goto	u2085
  4261     06BF  0875               	movf	??_LCD_Write,w
  4262     06C0  0480               	iorwf	0,f
  4263     06C1                     l2053:
  4264                           
  4265                           ;lcd.c: 48:     _delay((unsigned long)((4)*(4000000/4000.0)));
  4266     06C1  3006               	movlw	6
  4267     06C2  00F6               	movwf	??_LCD_Write+1
  4268     06C3  3030               	movlw	48
  4269     06C4  00F5               	movwf	??_LCD_Write
  4270     06C5                     u2467:
  4271     06C5  0BF5               	decfsz	??_LCD_Write,f
  4272     06C6  2EC5               	goto	u2467
  4273     06C7  0BF6               	decfsz	??_LCD_Write+1,f
  4274     06C8  2EC5               	goto	u2467
  4275     06C9  0000               	nop
  4276     06CA                     l2055:
  4277                           
  4278                           ;lcd.c: 49:     *(lcd.PORT) &= ~(1 << lcd.EN);
  4279     06CA  1683               	bsf	3,5	;RP0=1, select bank1
  4280     06CB  1303               	bcf	3,6	;RP1=0, select bank1
  4281     06CC  085B               	movf	_lcd^(0+128),w
  4282     06CD  0084               	movwf	4
  4283     06CE  1783               	bsf	3,7
  4284     06CF  1C5C               	btfss	(_lcd+1)^(0+128),0
  4285     06D0  1383               	bcf	3,7
  4286     06D1  3001               	movlw	1
  4287     06D2  00F5               	movwf	??_LCD_Write
  4288     06D3  0C5D               	rrf	(_lcd^(0+128)+2),w
  4289     06D4  00F6               	movwf	??_LCD_Write+1
  4290     06D5  0CF6               	rrf	??_LCD_Write+1,f
  4291     06D6  0C76               	rrf	??_LCD_Write+1,w
  4292     06D7  3907               	andlw	7
  4293     06D8  3E01               	addlw	1
  4294     06D9  2EDC               	goto	u2094
  4295     06DA                     u2095:
  4296     06DA  1003               	clrc
  4297     06DB  0DF5               	rlf	??_LCD_Write,f
  4298     06DC                     u2094:
  4299     06DC  3EFF               	addlw	-1
  4300     06DD  1D03               	skipz
  4301     06DE  2EDA               	goto	u2095
  4302     06DF  0875               	movf	??_LCD_Write,w
  4303     06E0  3AFF               	xorlw	255
  4304     06E1  0580               	andwf	0,f
  4305     06E2                     l213:
  4306     06E2  0008               	return
  4307     06E3                     __end_of_LCD_Write:
  4308                           
  4309                           	psect	text22
  4310     01D6                     __ptext22:	
  4311 ;; *************** function _LCD_Out *****************
  4312 ;; Defined at:
  4313 ;;		line 10 in file "lcd.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  c               1    wreg     unsigned char 
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  c               1    4[COMMON] unsigned char 
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4327 ;;      Params:         0       0       0       0       0
  4328 ;;      Locals:         1       0       0       0       0
  4329 ;;      Temps:          2       0       0       0       0
  4330 ;;      Totals:         3       0       0       0       0
  4331 ;;Total ram usage:        3 bytes
  4332 ;; Hardware stack levels used: 1
  4333 ;; Hardware stack levels required when called: 1
  4334 ;; This function calls:
  4335 ;;		Nothing
  4336 ;; This function is called by:
  4337 ;;		_LCD_Write
  4338 ;;		_LCD_putc
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342     01D6                     _LCD_Out:	
  4343                           ;psect for function _LCD_Out
  4344                           
  4345                           
  4346                           ;incstack = 0
  4347                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  4348                           ;LCD_Out@c stored from wreg
  4349     01D6  00F4               	movwf	LCD_Out@c
  4350     01D7                     l1971:
  4351                           
  4352                           ;lcd.c: 12:     if ( c & 1 ){
  4353     01D7  1C74               	btfss	LCD_Out@c,0
  4354     01D8  29DA               	goto	u1911
  4355     01D9  29DB               	goto	u1910
  4356     01DA                     u1911:
  4357     01DA  29F0               	goto	l1975
  4358     01DB                     u1910:
  4359     01DB                     l1973:
  4360                           
  4361                           ;lcd.c: 13:         *(lcd.PORT) |= 1 << lcd.D4;
  4362     01DB  1683               	bsf	3,5	;RP0=1, select bank1
  4363     01DC  1303               	bcf	3,6	;RP1=0, select bank1
  4364     01DD  085B               	movf	_lcd^(0+128),w
  4365     01DE  0084               	movwf	4
  4366     01DF  1783               	bsf	3,7
  4367     01E0  1C5C               	btfss	(_lcd+1)^(0+128),0
  4368     01E1  1383               	bcf	3,7
  4369     01E2  3001               	movlw	1
  4370     01E3  00F2               	movwf	??_LCD_Out
  4371     01E4  085E               	movf	(_lcd^(0+128)+3),w
  4372     01E5  3907               	andlw	7
  4373     01E6  3E01               	addlw	1
  4374     01E7  29EA               	goto	u1924
  4375     01E8                     u1925:
  4376     01E8  1003               	clrc
  4377     01E9  0DF2               	rlf	??_LCD_Out,f
  4378     01EA                     u1924:
  4379     01EA  3EFF               	addlw	-1
  4380     01EB  1D03               	skipz
  4381     01EC  29E8               	goto	u1925
  4382     01ED  0872               	movf	??_LCD_Out,w
  4383     01EE  0480               	iorwf	0,f
  4384                           
  4385                           ;lcd.c: 14:     }
  4386     01EF  2A05               	goto	l1977
  4387     01F0                     l1975:
  4388                           
  4389                           ;lcd.c: 16:          *(lcd.PORT) &= ~(1 << lcd.D4);
  4390     01F0  1683               	bsf	3,5	;RP0=1, select bank1
  4391     01F1  1303               	bcf	3,6	;RP1=0, select bank1
  4392     01F2  085B               	movf	_lcd^(0+128),w
  4393     01F3  0084               	movwf	4
  4394     01F4  1783               	bsf	3,7
  4395     01F5  1C5C               	btfss	(_lcd+1)^(0+128),0
  4396     01F6  1383               	bcf	3,7
  4397     01F7  3001               	movlw	1
  4398     01F8  00F2               	movwf	??_LCD_Out
  4399     01F9  085E               	movf	(_lcd^(0+128)+3),w
  4400     01FA  3907               	andlw	7
  4401     01FB  3E01               	addlw	1
  4402     01FC  29FF               	goto	u1934
  4403     01FD                     u1935:
  4404     01FD  1003               	clrc
  4405     01FE  0DF2               	rlf	??_LCD_Out,f
  4406     01FF                     u1934:
  4407     01FF  3EFF               	addlw	-1
  4408     0200  1D03               	skipz
  4409     0201  29FD               	goto	u1935
  4410     0202  0872               	movf	??_LCD_Out,w
  4411     0203  3AFF               	xorlw	255
  4412     0204  0580               	andwf	0,f
  4413     0205                     l1977:
  4414                           
  4415                           ;lcd.c: 19:     if ( c & 2 ) {
  4416     0205  1CF4               	btfss	LCD_Out@c,1
  4417     0206  2A08               	goto	u1941
  4418     0207  2A09               	goto	u1940
  4419     0208                     u1941:
  4420     0208  2A1F               	goto	l1981
  4421     0209                     u1940:
  4422     0209                     l1979:
  4423                           
  4424                           ;lcd.c: 20:         *(lcd.PORT) |= 1 << lcd.D5;
  4425     0209  085B               	movf	_lcd^(0+128),w
  4426     020A  0084               	movwf	4
  4427     020B  1783               	bsf	3,7
  4428     020C  1C5C               	btfss	(_lcd+1)^(0+128),0
  4429     020D  1383               	bcf	3,7
  4430     020E  3001               	movlw	1
  4431     020F  00F2               	movwf	??_LCD_Out
  4432     0210  0C5E               	rrf	(_lcd^(0+128)+3),w
  4433     0211  00F3               	movwf	??_LCD_Out+1
  4434     0212  0CF3               	rrf	??_LCD_Out+1,f
  4435     0213  0C73               	rrf	??_LCD_Out+1,w
  4436     0214  3907               	andlw	7
  4437     0215  3E01               	addlw	1
  4438     0216  2A19               	goto	u1954
  4439     0217                     u1955:
  4440     0217  1003               	clrc
  4441     0218  0DF2               	rlf	??_LCD_Out,f
  4442     0219                     u1954:
  4443     0219  3EFF               	addlw	-1
  4444     021A  1D03               	skipz
  4445     021B  2A17               	goto	u1955
  4446     021C  0872               	movf	??_LCD_Out,w
  4447     021D  0480               	iorwf	0,f
  4448                           
  4449                           ;lcd.c: 21:     }
  4450     021E  2A35               	goto	l1983
  4451     021F                     l1981:
  4452                           
  4453                           ;lcd.c: 23:         *(lcd.PORT) &= ~(1 << lcd.D5);
  4454     021F  085B               	movf	_lcd^(0+128),w
  4455     0220  0084               	movwf	4
  4456     0221  1783               	bsf	3,7
  4457     0222  1C5C               	btfss	(_lcd+1)^(0+128),0
  4458     0223  1383               	bcf	3,7
  4459     0224  3001               	movlw	1
  4460     0225  00F2               	movwf	??_LCD_Out
  4461     0226  0C5E               	rrf	(_lcd^(0+128)+3),w
  4462     0227  00F3               	movwf	??_LCD_Out+1
  4463     0228  0CF3               	rrf	??_LCD_Out+1,f
  4464     0229  0C73               	rrf	??_LCD_Out+1,w
  4465     022A  3907               	andlw	7
  4466     022B  3E01               	addlw	1
  4467     022C  2A2F               	goto	u1964
  4468     022D                     u1965:
  4469     022D  1003               	clrc
  4470     022E  0DF2               	rlf	??_LCD_Out,f
  4471     022F                     u1964:
  4472     022F  3EFF               	addlw	-1
  4473     0230  1D03               	skipz
  4474     0231  2A2D               	goto	u1965
  4475     0232  0872               	movf	??_LCD_Out,w
  4476     0233  3AFF               	xorlw	255
  4477     0234  0580               	andwf	0,f
  4478     0235                     l1983:
  4479                           
  4480                           ;lcd.c: 26:     if ( c & 4 ) {
  4481     0235  1D74               	btfss	LCD_Out@c,2
  4482     0236  2A38               	goto	u1971
  4483     0237  2A39               	goto	u1970
  4484     0238                     u1971:
  4485     0238  2A4C               	goto	l1987
  4486     0239                     u1970:
  4487     0239                     l1985:
  4488                           
  4489                           ;lcd.c: 27:         *(lcd.PORT) |= 1 << lcd.D6;
  4490     0239  085B               	movf	_lcd^(0+128),w
  4491     023A  0084               	movwf	4
  4492     023B  1783               	bsf	3,7
  4493     023C  1C5C               	btfss	(_lcd+1)^(0+128),0
  4494     023D  1383               	bcf	3,7
  4495     023E  3001               	movlw	1
  4496     023F  00F2               	movwf	??_LCD_Out
  4497     0240  085F               	movf	(_lcd^(0+128)+4),w
  4498     0241  3907               	andlw	7
  4499     0242  3E01               	addlw	1
  4500     0243  2A46               	goto	u1984
  4501     0244                     u1985:
  4502     0244  1003               	clrc
  4503     0245  0DF2               	rlf	??_LCD_Out,f
  4504     0246                     u1984:
  4505     0246  3EFF               	addlw	-1
  4506     0247  1D03               	skipz
  4507     0248  2A44               	goto	u1985
  4508     0249  0872               	movf	??_LCD_Out,w
  4509     024A  0480               	iorwf	0,f
  4510                           
  4511                           ;lcd.c: 28:     }
  4512     024B  2A5F               	goto	l1989
  4513     024C                     l1987:
  4514                           
  4515                           ;lcd.c: 30:         *(lcd.PORT) &= ~(1 << lcd.D6);
  4516     024C  085B               	movf	_lcd^(0+128),w
  4517     024D  0084               	movwf	4
  4518     024E  1783               	bsf	3,7
  4519     024F  1C5C               	btfss	(_lcd+1)^(0+128),0
  4520     0250  1383               	bcf	3,7
  4521     0251  3001               	movlw	1
  4522     0252  00F2               	movwf	??_LCD_Out
  4523     0253  085F               	movf	(_lcd^(0+128)+4),w
  4524     0254  3907               	andlw	7
  4525     0255  3E01               	addlw	1
  4526     0256  2A59               	goto	u1994
  4527     0257                     u1995:
  4528     0257  1003               	clrc
  4529     0258  0DF2               	rlf	??_LCD_Out,f
  4530     0259                     u1994:
  4531     0259  3EFF               	addlw	-1
  4532     025A  1D03               	skipz
  4533     025B  2A57               	goto	u1995
  4534     025C  0872               	movf	??_LCD_Out,w
  4535     025D  3AFF               	xorlw	255
  4536     025E  0580               	andwf	0,f
  4537     025F                     l1989:
  4538                           
  4539                           ;lcd.c: 33:     if ( c & 8 ) {
  4540     025F  1DF4               	btfss	LCD_Out@c,3
  4541     0260  2A62               	goto	u2001
  4542     0261  2A63               	goto	u2000
  4543     0262                     u2001:
  4544     0262  2A79               	goto	l1993
  4545     0263                     u2000:
  4546     0263                     l1991:
  4547                           
  4548                           ;lcd.c: 34:          *(lcd.PORT) |= 1 << lcd.D7;
  4549     0263  085B               	movf	_lcd^(0+128),w
  4550     0264  0084               	movwf	4
  4551     0265  1783               	bsf	3,7
  4552     0266  1C5C               	btfss	(_lcd+1)^(0+128),0
  4553     0267  1383               	bcf	3,7
  4554     0268  3001               	movlw	1
  4555     0269  00F2               	movwf	??_LCD_Out
  4556     026A  0C5F               	rrf	(_lcd^(0+128)+4),w
  4557     026B  00F3               	movwf	??_LCD_Out+1
  4558     026C  0CF3               	rrf	??_LCD_Out+1,f
  4559     026D  0C73               	rrf	??_LCD_Out+1,w
  4560     026E  3907               	andlw	7
  4561     026F  3E01               	addlw	1
  4562     0270  2A73               	goto	u2014
  4563     0271                     u2015:
  4564     0271  1003               	clrc
  4565     0272  0DF2               	rlf	??_LCD_Out,f
  4566     0273                     u2014:
  4567     0273  3EFF               	addlw	-1
  4568     0274  1D03               	skipz
  4569     0275  2A71               	goto	u2015
  4570     0276  0872               	movf	??_LCD_Out,w
  4571     0277  0480               	iorwf	0,f
  4572                           
  4573                           ;lcd.c: 35:     }
  4574     0278  2A8F               	goto	l210
  4575     0279                     l1993:
  4576                           
  4577                           ;lcd.c: 37:          *(lcd.PORT) &= ~(1 << lcd.D7);
  4578     0279  085B               	movf	_lcd^(0+128),w
  4579     027A  0084               	movwf	4
  4580     027B  1783               	bsf	3,7
  4581     027C  1C5C               	btfss	(_lcd+1)^(0+128),0
  4582     027D  1383               	bcf	3,7
  4583     027E  3001               	movlw	1
  4584     027F  00F2               	movwf	??_LCD_Out
  4585     0280  0C5F               	rrf	(_lcd^(0+128)+4),w
  4586     0281  00F3               	movwf	??_LCD_Out+1
  4587     0282  0CF3               	rrf	??_LCD_Out+1,f
  4588     0283  0C73               	rrf	??_LCD_Out+1,w
  4589     0284  3907               	andlw	7
  4590     0285  3E01               	addlw	1
  4591     0286  2A89               	goto	u2024
  4592     0287                     u2025:
  4593     0287  1003               	clrc
  4594     0288  0DF2               	rlf	??_LCD_Out,f
  4595     0289                     u2024:
  4596     0289  3EFF               	addlw	-1
  4597     028A  1D03               	skipz
  4598     028B  2A87               	goto	u2025
  4599     028C  0872               	movf	??_LCD_Out,w
  4600     028D  3AFF               	xorlw	255
  4601     028E  0580               	andwf	0,f
  4602     028F                     l210:
  4603     028F  0008               	return
  4604     0290                     __end_of_LCD_Out:
  4605                           
  4606                           	psect	text23
  4607     0EA0                     __ptext23:	
  4608 ;; *************** function _ADC_read *****************
  4609 ;; Defined at:
  4610 ;;		line 61 in file "main.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  2    2[COMMON] unsigned int 
  4617 ;; Registers used:
  4618 ;;		wreg
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4624 ;;      Params:         2       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0
  4627 ;;      Totals:         2       0       0       0       0
  4628 ;;Total ram usage:        2 bytes
  4629 ;; Hardware stack levels used: 1
  4630 ;; Hardware stack levels required when called: 1
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_main
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638     0EA0                     _ADC_read:	
  4639                           ;psect for function _ADC_read
  4640                           
  4641     0EA0                     l1669:	
  4642                           ;incstack = 0
  4643                           ; Regs used in _ADC_read: [wreg]
  4644                           
  4645                           
  4646                           ;main.c: 62:     if (TMR1IF) {
  4647     0EA0  2EA1               	nop2	;2 cycle nop
  4648     0EA1  2EA2               	nop2	;2 cycle nop
  4649     0EA2  0000               	nop
  4650                           
  4651                           ;main.c: 63:         timer1++;
  4652     0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  4653     0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  4654     0EA5  149F               	bsf	31,1	;volatile
  4655     0EA6                     l76:	
  4656                           ;main.c: 64:         if (timer1 > 50)
  4657                           
  4658     0EA6  189F               	btfsc	31,1	;volatile
  4659     0EA7  2EA9               	goto	u1511
  4660     0EA8  2EAA               	goto	u1510
  4661     0EA9                     u1511:
  4662     0EA9  2EA6               	goto	l76
  4663     0EAA                     u1510:
  4664     0EAA                     l1671:
  4665                           
  4666                           ;main.c: 65:             timer1 = 0;
  4667     0EAA  081E               	movf	30,w	;volatile
  4668     0EAB  00F3               	movwf	?_ADC_read+1
  4669     0EAC  1683               	bsf	3,5	;RP0=1, select bank1
  4670     0EAD  1303               	bcf	3,6	;RP1=0, select bank1
  4671     0EAE  081E               	movf	30,w	;volatile
  4672     0EAF  00F2               	movwf	?_ADC_read
  4673     0EB0                     l79:
  4674     0EB0  0008               	return
  4675     0EB1                     __end_of_ADC_read:
  4676                           
  4677                           	psect	text24
  4678     0E85                     __ptext24:	
  4679 ;; *************** function _ADC_Initialize *****************
  4680 ;; Defined at:
  4681 ;;		line 55 in file "main.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      void 
  4688 ;; Registers used:
  4689 ;;		None
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4695 ;;      Params:         0       0       0       0       0
  4696 ;;      Locals:         0       0       0       0       0
  4697 ;;      Temps:          0       0       0       0       0
  4698 ;;      Totals:         0       0       0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used: 1
  4701 ;; Hardware stack levels required when called: 1
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_main
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709     0E85                     _ADC_Initialize:	
  4710                           ;psect for function _ADC_Initialize
  4711                           
  4712     0E85                     l1667:	
  4713                           ;incstack = 0
  4714                           ; Regs used in _ADC_Initialize: []
  4715                           
  4716                           
  4717                           ;main.c: 56:             count0 = 0;
  4718     0E85  3001               	movlw	1
  4719     0E86  1683               	bsf	3,5	;RP0=1, select bank3
  4720     0E87  1703               	bsf	3,6	;RP1=1, select bank3
  4721     0E88  0088               	movwf	8	;volatile
  4722                           
  4723                           ;main.c: 57:         }
  4724     0E89  3081               	movlw	129
  4725     0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  4726     0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  4727     0E8C  009F               	movwf	31	;volatile
  4728                           
  4729                           ;main.c: 58:         TMR0 = 217;
  4730     0E8D  3080               	movlw	128
  4731     0E8E  1683               	bsf	3,5	;RP0=1, select bank1
  4732     0E8F  1303               	bcf	3,6	;RP1=0, select bank1
  4733     0E90  009F               	movwf	31	;volatile
  4734     0E91                     l73:
  4735     0E91  0008               	return
  4736     0E92                     __end_of_ADC_Initialize:
  4737                           
  4738                           	psect	text25
  4739     0736                     __ptext25:	
  4740 ;; *************** function _ISR *****************
  4741 ;; Defined at:
  4742 ;;		line 72 in file "main.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;		None
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;		None
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1    wreg      void 
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4756 ;;      Params:         0       0       0       0       0
  4757 ;;      Locals:         0       0       0       0       0
  4758 ;;      Temps:          2       0       0       0       0
  4759 ;;      Totals:         2       0       0       0       0
  4760 ;;Total ram usage:        2 bytes
  4761 ;; Hardware stack levels used: 1
  4762 ;; This function calls:
  4763 ;;		Nothing
  4764 ;; This function is called by:
  4765 ;;		Interrupt level 1
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769     0736                     _ISR:	
  4770                           ;psect for function _ISR
  4771                           
  4772     0736                     i1l1805:
  4773                           
  4774                           ;main.c: 73:     }
  4775     0736  1D0B               	btfss	11,2	;volatile
  4776     0737  2F39               	goto	u175_21
  4777     0738  2F3A               	goto	u175_20
  4778     0739                     u175_21:
  4779     0739  2F5A               	goto	i1l1817
  4780     073A                     u175_20:
  4781     073A                     i1l1807:
  4782                           
  4783                           ;main.c: 74: }
  4784     073A  3001               	movlw	1
  4785     073B  1283               	bcf	3,5	;RP0=0, select bank0
  4786     073C  1303               	bcf	3,6	;RP1=0, select bank0
  4787     073D  07E6               	addwf	_count0,f	;volatile
  4788     073E  1803               	skipnc
  4789     073F  0AE7               	incf	_count0+1,f	;volatile
  4790     0740  3000               	movlw	0
  4791     0741  07E7               	addwf	_count0+1,f	;volatile
  4792                           
  4793                           ;main.c: 75: 
  4794     0742  3000               	movlw	0
  4795     0743  0267               	subwf	_count0+1,w	;volatile
  4796     0744  3064               	movlw	100
  4797     0745  1903               	skipnz
  4798     0746  0266               	subwf	_count0,w	;volatile
  4799     0747  1C03               	skipc
  4800     0748  2F4A               	goto	u176_21
  4801     0749  2F4B               	goto	u176_20
  4802     074A                     u176_21:
  4803     074A  2F57               	goto	i1l1813
  4804     074B                     u176_20:
  4805     074B                     i1l1809:
  4806                           
  4807                           ;main.c: 76: 
  4808     074B  3001               	movlw	1
  4809     074C  1683               	bsf	3,5	;RP0=1, select bank1
  4810     074D  1303               	bcf	3,6	;RP1=0, select bank1
  4811     074E  07A0               	addwf	_timer0^(0+128),f	;volatile
  4812     074F  1803               	skipnc
  4813     0750  0AA1               	incf	(_timer0+1)^(0+128),f	;volatile
  4814     0751  3000               	movlw	0
  4815     0752  07A1               	addwf	(_timer0+1)^(0+128),f	;volatile
  4816     0753                     i1l1811:
  4817                           
  4818                           ;main.c: 77: 
  4819     0753  1283               	bcf	3,5	;RP0=0, select bank0
  4820     0754  1303               	bcf	3,6	;RP1=0, select bank0
  4821     0755  01E6               	clrf	_count0	;volatile
  4822     0756  01E7               	clrf	_count0+1	;volatile
  4823     0757                     i1l1813:
  4824                           
  4825                           ;main.c: 79: 
  4826     0757  30D9               	movlw	217
  4827     0758  0081               	movwf	1	;volatile
  4828     0759                     i1l1815:
  4829                           
  4830                           ;main.c: 80: void main(void) {
  4831     0759  110B               	bcf	11,2	;volatile
  4832     075A                     i1l1817:
  4833                           
  4834                           ;main.c: 83:     TMR1_init();
  4835     075A  1283               	bcf	3,5	;RP0=0, select bank0
  4836     075B  1303               	bcf	3,6	;RP1=0, select bank0
  4837     075C  1C0C               	btfss	12,0	;volatile
  4838     075D  2F5F               	goto	u177_21
  4839     075E  2F60               	goto	u177_20
  4840     075F                     u177_21:
  4841     075F  2F82               	goto	i1l88
  4842     0760                     u177_20:
  4843     0760                     i1l1819:
  4844                           
  4845                           ;main.c: 84: 
  4846     0760  3001               	movlw	1
  4847     0761  07FA               	addwf	_timer1,f	;volatile
  4848     0762  1803               	skipnc
  4849     0763  0AFB               	incf	_timer1+1,f	;volatile
  4850     0764  3000               	movlw	0
  4851     0765  07FB               	addwf	_timer1+1,f	;volatile
  4852                           
  4853                           ;main.c: 85:     TRISD0 = 0;
  4854     0766  3000               	movlw	0
  4855     0767  027B               	subwf	_timer1+1,w	;volatile
  4856     0768  3033               	movlw	51
  4857     0769  1903               	skipnz
  4858     076A  027A               	subwf	_timer1,w	;volatile
  4859     076B  1C03               	skipc
  4860     076C  2F6E               	goto	u178_21
  4861     076D  2F6F               	goto	u178_20
  4862     076E                     u178_21:
  4863     076E  2F71               	goto	i1l1823
  4864     076F                     u178_20:
  4865     076F                     i1l1821:
  4866                           
  4867                           ;main.c: 86:     PORTDbits.RD0 = 0;
  4868     076F  01FA               	clrf	_timer1	;volatile
  4869     0770  01FB               	clrf	_timer1+1	;volatile
  4870     0771                     i1l1823:
  4871                           
  4872                           ;main.c: 88:     LCD_Init(lcd);
  4873     0771  30FB               	movlw	251
  4874     0772  008F               	movwf	15	;volatile
  4875     0773                     i1l1825:
  4876                           
  4877                           ;main.c: 89:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  4878     0773  301D               	movlw	29
  4879     0774  008E               	movwf	14	;volatile
  4880     0775                     i1l1827:
  4881                           
  4882                           ;main.c: 91:     do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Writ
      +                          e( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0
      +                          xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 2 ) { do { LCD
      +                          _Write( (0x94 + 0 & 0xF0) >> 4 ); LCD_Write( 0x94 + 0 & 0x0F); } while ( 0 ); } else if 
      +                          ( 0 == 3 ) { do { LCD_Write( (0xD4 + 0 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 0 & 0x0F); } wh
      +                          ile ( 0 ); } } while ( 0 );
  4883     0775  1683               	bsf	3,5	;RP0=1, select bank1
  4884     0776  1303               	bcf	3,6	;RP1=0, select bank1
  4885     0777  0822               	movf	_onOff^(0+128),w	;volatile
  4886     0778  1903               	btfsc	3,2
  4887     0779  2F7B               	goto	u179_21
  4888     077A  2F7D               	goto	u179_20
  4889     077B                     u179_21:
  4890     077B  3001               	movlw	1
  4891     077C  2F7E               	goto	u180_20
  4892     077D                     u179_20:
  4893     077D  3000               	movlw	0
  4894     077E                     u180_20:
  4895     077E  00A2               	movwf	_onOff^(0+128)	;volatile
  4896     077F                     i1l1829:
  4897                           
  4898                           ;main.c: 93: 
  4899     077F  1283               	bcf	3,5	;RP0=0, select bank0
  4900     0780  1303               	bcf	3,6	;RP1=0, select bank0
  4901     0781  100C               	bcf	12,0	;volatile
  4902     0782                     i1l88:
  4903     0782  0871               	movf	??_ISR+1,w
  4904     0783  008A               	movwf	10
  4905     0784  0E70               	swapf	??_ISR,w
  4906     0785  0083               	movwf	3
  4907     0786  0EFE               	swapf	btemp,f
  4908     0787  0E7E               	swapf	btemp,w
  4909     0788  0009               	retfie
  4910     0789                     __end_of_ISR:
  4911     0002                     ___latbits      equ	2
  4912     007E                     btemp           set	126	;btemp
  4913     007E                     wtemp0          set	126
  4914                           
  4915                           	psect	intentry
  4916     0004                     __pintentry:	
  4917                           ;incstack = 0
  4918 ;; hardware stack exceeded
  4919                           ; Regs used in _ISR: [wreg+status,2+status,0]
  4920                           
  4921     0004                     interrupt_function:
  4922     007E                     saved_w         set	btemp
  4923     0004  00FE               	movwf	btemp
  4924     0005  0E03               	swapf	3,w
  4925     0006  00F0               	movwf	??_ISR
  4926     0007  080A               	movf	10,w
  4927     0008  00F1               	movwf	??_ISR+1
  4928     0009  120A  118A  2F36   	ljmp	_ISR
  4929                           
  4930                           	psect	config
  4931                           
  4932                           ;Config register CONFIG1 @ 0x2007
  4933                           ;	Oscillator Selection bits
  4934                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  4935                           ;	Watchdog Timer Enable bit
  4936                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4937                           ;	Power-up Timer Enable bit
  4938                           ;	PWRTE = OFF, PWRT disabled
  4939                           ;	RE3/MCLR pin function select bit
  4940                           ;	MCLRE = 0x1, unprogrammed default
  4941                           ;	Code Protection bit
  4942                           ;	CP = OFF, Program memory code protection is disabled
  4943                           ;	Data Code Protection bit
  4944                           ;	CPD = OFF, Data memory code protection is disabled
  4945                           ;	Brown Out Reset Selection bits
  4946                           ;	BOREN = ON, BOR enabled
  4947                           ;	Internal External Switchover bit
  4948                           ;	IESO = 0x1, unprogrammed default
  4949                           ;	Fail-Safe Clock Monitor Enabled bit
  4950                           ;	FCMEN = 0x1, unprogrammed default
  4951                           ;	Low Voltage Programming Enable bit
  4952                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4953                           ;	In-Circuit Debugger Mode bit
  4954                           ;	DEBUG = 0x1, unprogrammed default
  4955     2007                     	org	8199
  4956     2007  2FF1               	dw	12273
  4957                           
  4958                           ;Config register CONFIG2 @ 0x2008
  4959                           ;	Brown-out Reset Selection bit
  4960                           ;	BOR4V = 0x1, unprogrammed default
  4961                           ;	Flash Program Memory Self Write Enable bits
  4962                           ;	WRT = OFF, Write protection off
  4963     2008                     	org	8200
  4964     2008  3FFF               	dw	16383

Data Sizes:
    Strings     44
    Constant    0
    Data        5
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     66      79
    BANK1            80     24      64
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    display$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> exec(BANK0[6]), main@buffer(BANK1[10]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> exec(BANK0[6]), main@buffer(BANK1[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    lcd$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    LCD_putrs@a	PTR const unsigned char  size(2) Largest target is 10
		 -> main@buffer(BANK1[10]), STR_1(CODE[10]), STR_2(CODE[10]), STR_3(CODE[6]), 

    LCD_puts@a	PTR unsigned char  size(1) Largest target is 6
		 -> exec(BANK0[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S22$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    S633$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> exec(BANK0[6]), main@buffer(BANK1[10]), 

    S633$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_5(CODE[8]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> exec(BANK0[6]), main@buffer(BANK1[10]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_5(CODE[8]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_5(CODE[8]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_5(CODE[8]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_putrs
    _main->_LCD_puts
    _main->___lmul
    _vfpfcnvrt->_read_prec_or_width
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _read_prec_or_width->___wmul
    ___aldiv->___lmul
    _LCD_puts->_LCD_putc
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    ___aldiv->___lmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    5917
                                              0 BANK1     24    24      0
                     _ADC_Initialize
                           _ADC_read
                           _LCD_Init
                          _LCD_Write
                          _LCD_putrs
                           _LCD_puts
                          _TMR1_init
                        _Timer0_Init
                            ___aldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    3259
                                             47 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             5     1      4    2928
                                             42 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13     9      4    2701
                                             30 BANK0     12     8      4
                              _fputc
                 _read_prec_or_width
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1583
                                             21 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  8     3      5     882
                                              9 COMMON     1     1      0
                                             14 BANK0      7     2      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     5      3     384
                                              6 COMMON     3     0      3
                                              9 BANK0      5     5      0
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                               13     9      4     232
                                              2 COMMON     4     0      4
                                              0 BANK0      9     9      0
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     165
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     168
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2     276
                                              8 COMMON     2     0      2
                                              0 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4      94
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8     142
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     451
                                              5 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             4     3      1     415
                                              8 COMMON     2     1      1
                                              0 BANK0      2     2      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (1) _LCD_putrs                                            7     5      2     424
                                              8 COMMON     2     0      2
                                              0 BANK0      5     5      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             3     3      0     282
                                              5 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     343
                                              8 COMMON     2     2      0
                                              0 BANK0      6     1      5
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Write                                            3     3      0     235
                                              5 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (3) _LCD_Out                                              3     3      0     188
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             2     0      2       0
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ADC_read
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   _LCD_puts
     _LCD_putc
   _TMR1_init
   _Timer0_Init
   ___aldiv
     ___lmul (ARG)
   ___lmul
   ___lwdiv
   ___lwmod
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _read_prec_or_width
           ___wmul
         _utoa
           ___lwdiv
           ___lwmod
           _pad
             _fputc
             _fputs
               _fputc

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80     24      64     80.0%
BITBANK1            80      0       0      0.0%
BANK0               80     66      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              14     10      12     85.7%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     155      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Jun 19 11:49:57 2025

                         pc 0002                          l70 0E84                          l73 0E91  
                        l67 0E9F                          l76 0EA6                          l79 0EB0  
                        fsr 0004         ___wmul@multiplicand 0074                         l210 028F  
                       l213 06E2                         l222 03ED                         l401 04A2  
                       l234 03E1                         l250 0FFF                         l411 0526  
                       l244 0F1A                         l238 05B8                         l350 07D0  
                       l336 0F27                         l338 0F3F                         l616 0FB9  
                       l626 0F77                         l820 0724                         l822 0735  
                       l840 068D                         l832 0636                         l817 06FC  
                       l847 02AF                         l864 0ED3                         l857 0341  
                       l849 02B5                         l876 048D                         l884 07FB  
                       l887 07FC                         l799 0EF6                         _GIE 005F  
                       _ISR 0736                         u910 03F4                         u911 03F3  
                       u920 03FA                         u921 03F9                         u930 041B  
                       u931 041A                         u940 044D                         u941 044C  
                       u950 0470                         u945 0449                         u970 0F21  
                       u971 0F20                         u985 0F28                         u995 0F2F  
           LCD_Init@display 0020                         _lcd 00DB                         _pad 06E3  
                       fsr0 0004                         indf 0000                        ?_ISR 0070  
           __end_of_LCD_Out 0290                        l2001 02A9                        l2011 02C5  
                      l2003 02AD                        l2101 0389                        l2021 02E3  
                      l2013 02CA                        l2005 02B0                        l2111 03B2  
                      l2103 0397                        l2023 02E8                        l2015 02D9  
                      l2113 03B8                        l2105 03A0                        l2201 04FF  
                      l2025 02F4                        l2017 02DD                        l2009 02B8  
                      l2041 0328                        l2051 06AA                        l2115 03BE  
                      l2107 03A6                        l2131 0FBF                        l2203 0508  
                      l1411 041B                        l1403 03EE                        l2035 0315  
                      l2027 0301                        l2019 02DE                        l2053 06C1  
                      l2125 03C9                        l2117 03C4                        l2109 03AC  
                      l2061 054B                        l2133 0FDB                        l2205 050E  
                      l1413 044D                        l1405 03F4                        l2029 0307  
                      l2037 0320                        l2141 0EDC                        l2221 0073  
                      l2213 0046                        l2055 06CA                        l2047 068F  
                      l2119 03C8                        l2071 05A0                        l2063 0562  
                      l2135 0FE3                        l2151 0EF7                        l2207 0513  
                      l1431 0F2E                        l1407 03FA                        l2143 0EDE  
                      l2223 0079                        l2215 0055                        l2049 06A4  
                      l2065 0566                        l2057 0528                        l2129 0FBA  
                      l2153 0EFC                        l2209 051E                        l2161 0793  
                      l1433 0F35                        l1425 0F1B                        l1441 0F7A  
                      l1409 0401                        l2073 0EB1                        l2145 0EE0  
                      l2137 0ED4                        l2225 007F                        l2217 0058  
                      l2091 036D                        l2083 0342                        l2067 057E  
                      l2059 053C                        l2155 0F07                        l2163 0797  
                      l1435 0F3B                        l1427 0F1D                        l1451 0F90  
                      l1443 0F80                        l2075 0EB6                        l2147 0EED  
                      l2139 0ED8                        l2235 008B                        l2227 0085  
                      l2219 005B                        l2093 036F                        l2085 0355  
                      l2069 0585                        l2157 0F0F                        l2181 04B1  
                      l2173 048E                        l2165 07AE                        l1429 0F21  
                      l1541 065C                        l1533 0637                        l1453 0FA1  
                      l1445 0F83                        l1461 0FB5                        l2077 0EC3  
                      l2261 00C7                        l2245 00A0                        l2095 0379  
                      l2087 0361                        l2191 04D1                        l2183 04B3  
                      l2175 0491                        l2167 07B7                        l2159 0789  
                      l1543 0673                        l1535 063B                        l1455 0FA7  
                      l1447 0F8A                        l1439 0F78                        l1471 0F50  
                      l2079 0ED1                        l2271 00FB                        l2255 00B5  
                      l2239 0094                        l2097 037A                        l2089 0363  
                      l2193 04D5                        l2185 04BB                        l2177 0495  
                      l2169 07C8                        l1537 064A                        l1545 0678  
                      l1457 0FA8                        l1449 0F8C                        l1481 0F6D  
                      l1473 0F52                        l1465 0F40                        l2281 017D  
                      l2273 011E                        l2257 00BE                        l2249 00A9  
                      l2099 0383                        l2195 04DE                        l2187 04C3  
                      l2179 04A6                        l1547 0689                        l1539 064E  
                      l1459 0FAF                        l1475 0F56                        l1467 0F46  
                      l1483 0F73                        l2283 0190                        l2275 0125  
                      l2267 00D3                        l2197 04F0                        l2189 04C6  
                      l1477 0F60                        l1469 0F49                        l2285 01B3  
                      l2277 0130                        l2269 00E8                        l1671 0EAA  
                      l1663 0E92                        l2199 04FE                        l1479 0F66  
                      l2295 01BF                        l2287 01B9                        l2279 016A  
                      l1665 0E7A                        l1921 07E6                        l2297 01C8  
                      l1667 0E85                        l1923 07EE                        l1931 06FA  
                      l1669 0EA0                        l1917 07D1                        l1933 06FF  
                      l1925 06E3                        l1941 05B9                        l1919 07D6  
                      l1935 070E                        l1927 06E9                        l1951 05E3  
                      l1943 05BD                        l1937 0716                        l1929 06F4  
                      l1961 060C                        l1953 05E6                        l1945 05C5  
                      l1971 01D7                        l1939 072A                        l1963 0611  
                      l1955 05EC                        l1947 05C9                        l1981 021F  
                      l1973 01DB                        l1965 061E                        l1949 05CF  
                      l1957 05FF                        ?_pad 002E                        l1991 0263  
                      l1983 0235                        l1975 01F0                        l1959 0606  
                      l1967 0624                        l1993 0279                        l1985 0239  
                      l1977 0205                        l1987 024C                        l1979 0209  
                      l1995 0290                        l1989 025F                        l1997 02A1  
                      l1999 02A5                        STR_1 0810                        STR_2 081A  
                      STR_3 0836                        STR_4 0824                        STR_5 082E  
                      _T0IE 005D                        u1000 0F3B                        _T0IF 005A  
                      u1001 0F3A                        u1010 0F80                        u1011 0F7F  
                      u1100 0F56                        u1101 0F55                        u1030 0F90  
                      u1110 0F60                        u1031 0F8F                        u1111 0F5F  
                      u2000 0263                        u2001 0262                        u1025 0F84  
                      u1050 0FA1                        u1130 0F73                        u1051 0FA0  
                      u1131 0F72                        u1115 0F5C                        u1045 0F91  
                      u1125 0F67                        u2014 0273                        u1230 064A  
                      u1070 0FB5                        u2030 02A1                        u2015 0271  
                      u1231 0649                        u1071 0FB4                        u1055 0F9D  
                      u2031 02A0                        u2024 0289                        u2104 0537  
                      u1240 0689                        u1080 0F46                        u2040 02CA  
                      u2025 0287                        u2105 0535                        u1241 0688  
                      u1065 0FA9                        u1081 0F45                        u2041 02C9  
                      u2210 0FC9                        u2050 02DD                        u2115 053F  
                      u2051 02DC                        u2124 055D                        u2220 0FED  
                      u2300 0495                        u2060 02F4                        u2205 03CC  
                      u2125 055B                        u2301 0494                        u2061 02F3  
                      u1510 0EAA                        u2134 0578                        u2230 0FFF  
                      u2310 04A6                        u1511 0EA9                        u2135 0576  
                      u2231 0FFE                        u2311 04A5                        u1095 0F4A  
                      u2144 0597                        u2240 0F1A                        u2320 04C3  
                      u2160 0ED1                        u2145 0595                        u2241 0F19  
                      u2321 04C2                        u2161 0ED0                        u2074 069E  
                      u2170 0361                        u2154 05B2                        u2250 0797  
                      u2075 069C                        u2171 0360                        u2155 05B0  
                      u2251 0796                        u2084 06BC                        u2180 036D  
                      u2340 04D5                        u2085 06BA                        u2181 036C  
                      u2341 04D4                        u2261 07A0                        u2094 06DC  
                      u2190 0379                        u2262 07A7                        u2095 06DA  
                      u2191 0378                        u2175 035D                        u2335 04C8  
                      u2263 07AE                        u2407 01CE                        u2360 04F0  
                      u2185 0369                        u2417 0564                        u2361 04EF  
                      u2290 07C8                        u1810 07FB                        u2195 0375  
                      u2427 059E                        u2355 04D7                        u2291 07C7  
                      u2275 07B0                        u1811 07FA                        u2380 050E  
                      u1820 06E9                        u1900 0624                        u2437 037E  
                      u2381 050D                        u2365 04EC                        u2285 07B8  
                      u1821 06E8                        u1901 0623                        u1910 01DB  
                      u2390 0513                        u1830 06FA                        u1911 01DA  
                      u2447 038D                        u2391 0512                        u2375 0500  
                      u1831 06F9                        u1840 0724                        u2457 039B  
                      u1841 0723                        u1850 072A                        u2467 06C5  
                      u1851 0729                        u1940 0209                        u1924 01EA  
                      u1860 0606                        u1941 0208                        u1925 01E8  
                      u1845 0720                        u1861 0605                        u1934 01FF  
                      u1870 060C                        u1935 01FD                        u1871 060B  
                      u1880 0611                        u1881 0610                        u1970 0239  
                      u1954 0219                        u1890 061E                        u1971 0238  
                      u1955 0217                        u1891 061D                        _PEIE 005E  
                      u1964 022F                        u1965 022D                        u1895 061A  
                      u1984 0246                        u1985 0244                        u1994 0259  
                      u1995 0257                        i1l88 0782                        _TMR0 0001  
                      _dbuf 00A3                        _main 0046                        _exec 0069  
                      _prec 0064                        pad@i 0033                        pad@p 0031  
                      btemp 007E                        _utoa 05B9                        start 000C  
          __end_of_ADC_read 0EB1                 main@voltaje 00D9                 LCD_Init@cmd 0025  
                     ??_ISR 0070                       ??_pad 0079            __end_of_LCD_Init 03EE  
          __end_of_LCD_putc 05B9            __end_of_LCD_puts 0F1B             __end_of___aldiv 0527  
                     ?_main 0070                       _ANSEL 0188                       ?_utoa 0035  
                     _T1CON 0010             __end_of___lwdiv 0FBA             __end_of___lwmod 0F78  
              vfpfcnvrt@fmt 0040                       _TMR1H 000F                       _TMR1L 000E  
                     _PORTA 0005                       _PORTB 0006                       _PORTC 0007  
                     _TRISA 0085                       _TRISB 0086                       _TRISC 0087  
       ___lmul@multiplicand 0076                main@part_dec 00D3                main@part_ent 00D1  
                     _flags 0068                       _onOff 00A2         read_prec_or_width@c 0020  
       read_prec_or_width@n 0021                       _fputc 03EE                       _fputs 07D1  
                     pad@fp 002E                       _width 0062                       _putch 07FC  
                     pclath 000A                       utoa@d 0037                       utoa@i 003C  
                     utoa@p 0039                       utoa@w 003A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 0EF7             __initialization 000F  
              __end_of_main 01D6                __end_of_utoa 0637                      ??_main 00C3  
                    ??_utoa 007A                   ??_LCD_Out 0072           __end_of_LCD_Write 06E3  
__end_of_read_prec_or_width 068E           __end_of_LCD_putrs 1000                      _ADCON0 001F  
                    _ADCON1 009F                      ?_fputc 0072                      ?_fputs 0076  
                    _ADRESH 001E                      _ADRESL 009E                      ?_putch 0070  
                    i1l1811 0753                      i1l1821 076F                      i1l1813 0757  
                    i1l1805 0736                      i1l1823 0771                      i1l1815 0759  
                    i1l1807 073A                      i1l1825 0773                      i1l1809 074B  
                    i1l1817 075A                      i1l1827 0775                      i1l1819 0760  
                    i1l1829 077F                      u180_20 077E                      u175_20 073A  
                    u175_21 0739                      u176_20 074B                      u176_21 074A  
                    u177_20 0760                      u177_21 075F                      u178_20 076F  
                    u178_21 076E                      u179_20 077D                      u179_21 077B  
             vfpfcnvrt@done 0048                      _TMR1IE 0460                      _TMR1IF 0060  
                    _TRISD0 0440               ??_Timer0_Init 0072                vfprintf@cfmt 004E  
                    ___lmul 0789                   ??___aldiv 002D                      ___wmul 0F1B  
         __end_of_TMR1_init 0EA0                   ??___lwdiv 0076                   ??___lwmod 0076  
                    _count0 0066        read_prec_or_width@ap 0079                      _timer0 00A0  
                    _timer1 007A                      pad@buf 0030                      fputc@c 0072  
                    fputs@c 002B                      fputs@i 002C                      fputs@s 0076  
                    saved_w 007E                   ?_ADC_read 0072                      putch@c 0070  
          __end_of_vfprintf 0ED4                      utoa@fp 0035                   ??_sprintf 0055  
            main@adc_result 00CF     __end_of__initialization 0042                   ?_LCD_Init 0020  
                 ?_LCD_putc 0070                   ?_LCD_puts 0078              __pcstackCOMMON 0070  
              __pidataBANK1 0E6D               __end_of_fputc 048E               __end_of_fputs 07FC  
       __end_of_Timer0_Init 0E85               __end_of_putch 07FD                   LCD_putc@c 0077  
                 LCD_puts@a 0078                   LCD_puts@i 0020                  ??_ADC_read 0074  
                   ??_fputc 0020                     ??_fputs 0029                     ??_putch 0072  
                __pbssBANK0 0062                  __pbssBANK1 00A0                  ??_LCD_Init 0078  
                ??_LCD_putc 0075                  ??_LCD_puts 0079                  __pmaintext 0046  
                   ?___lmul 0072                     ?___wmul 0072                  __pintentry 0004  
            ___lmul@product 0021                     _LCD_Out 01D6                  __stringtab 0800  
               _Timer0_Init 0E7A                     ___aldiv 048E                     ___lwdiv 0F78  
                   ___lwmod 0F40                   ?_vfprintf 004A                     __ptext1 0ED4  
                   __ptext2 0EB1                     __ptext3 0290                     __ptext4 05B9  
                   __ptext5 06E3                     __ptext6 07D1                     __ptext7 03EE  
                   __ptext8 07FC                     __ptext9 0F40       read_prec_or_width@fmt 0078  
          ___aldiv@dividend 0029                     _sprintf 0ED4                     clrloop0 0E73  
                 _LCD_Write 068E        end_of_initialization 0042                   _LCD_putrs 0FBA  
                   fputc@fp 0074                     fputs@fp 0077          _read_prec_or_width 0637  
         __end_of_vfpfcnvrt 0342            ___aldiv@quotient 0030         ?_read_prec_or_width 0078  
          vfpfcnvrt@convarg 0044                  ??_vfprintf 007A                   _PORTDbits 0008  
                 _TMR1_init 0E92        ??_read_prec_or_width 007A                  ?_LCD_Write 0070  
                ?_LCD_putrs 0078                  main@buffer 00C5              __end_of___lmul 07D1  
               vfpfcnvrt@ap 0041                 vfpfcnvrt@cp 0049                 vfpfcnvrt@fp 003E  
            __end_of___wmul 0F40                  LCD_Write@c 0077              _ADC_Initialize 0E85  
                ?_TMR1_init 0070         start_initialization 000F                 __end_of_ISR 0789  
               __end_of_pad 0736                  LCD_putrs@a 0078                  LCD_putrs@i 0023  
               vfprintf@fmt 004C                    ??___lmul 0020                    ??___wmul 0076  
    __end_of_ADC_Initialize 0E92                 __pdataBANK1 00DB                    ?_LCD_Out 0070  
               __pbssCOMMON 007A                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK1 00C3                    LCD_Out@c 0074                 ??_LCD_Write 0075  
               ??_LCD_putrs 0020                ?_Timer0_Init 0070            ___lwdiv@dividend 0074  
                  ?___aldiv 0025                    ?___lwdiv 0072                    ?___lwmod 0072  
           ?_ADC_Initialize 0070                   __pstrings 0800                 ??_TMR1_init 0072  
                  _ADC_read 0EA0            ___lwdiv@quotient 0076                    ?_sprintf 004F  
           ___aldiv@divisor 0025           interrupt_function 0004             ___aldiv@counter 002E  
                  _LCD_Init 0342              ___wmul@product 0076                   clear_ram0 0E72  
                  _LCD_putc 0527                    _LCD_puts 0EF7                    _GO_nDONE 00F9  
                 _vfpfcnvrt 0290                 __stringbase 080F           ___wmul@multiplier 0072  
         ___lmul@multiplier 0072                  vfprintf@ap 004D                  vfprintf@fp 004A  
                ?_vfpfcnvrt 003E          __end_of__stringtab 0810                  sprintf@fmt 0050  
                  _main$957 00D5                    _main$958 00D7             ___lwdiv@divisor 0072  
           ___lwdiv@counter 0078                    __ptext10 0F78                    __ptext11 0637  
                  __ptext20 0342                    __ptext12 0F1B                    __ptext21 068E  
                  __ptext13 0789                    __ptext22 01D6                    __ptext14 048E  
                  __ptext23 0EA0                    __ptext15 0E7A                    __ptext24 0E85  
                  __ptext16 0E92                    __ptext25 0736                    __ptext17 0EF7  
                  __ptext18 0FBA                    __ptext19 0527                    _vfprintf 0EB1  
                  intlevel1 0000                   sprintf@ap 0056            ___lwmod@dividend 0074  
          ??_ADC_Initialize 0072                   stringcode 080A                 ??_vfpfcnvrt 0042  
                _OPTION_REG 0081                    sprintf@f 0057                    sprintf@s 004F  
           ___lwmod@divisor 0072             ___lwmod@counter 0076                    stringdir 080A  
                  stringtab 0800                ___aldiv@sign 002F  
