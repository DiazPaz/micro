

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Jun 19 11:26:30 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,space=0,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    16                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=3
    17                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    18                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    21                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=3
    22                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=3
    23                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=3
    24                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    26                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=1
    27                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    29                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=2
    30                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,space=0,delta=2
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    43                           	dabs	1,0x7E,2
    44     0000                     
    45                           ; Generated 26/03/2025 GMT
    46                           ; 
    47                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution. Publication is not required when
    61                           ;        this file is used in an embedded application.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F887 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79     0004                     fsr             equ	4
    80     0004                     fsr0            equ	4
    81     0000                     indf            equ	0
    82     0000                     indf0           equ	0
    83     0002                     pc              equ	2
    84     0002                     pcl             equ	2
    85     000A                     pclath          equ	10
    86     0003                     status          equ	3
    87     0000                     INDF            equ	0	;# 
    88     0001                     TMR0            equ	1	;# 
    89     0002                     PCL             equ	2	;# 
    90     0003                     STATUS          equ	3	;# 
    91     0004                     FSR             equ	4	;# 
    92     0005                     PORTA           equ	5	;# 
    93     0006                     PORTB           equ	6	;# 
    94     0007                     PORTC           equ	7	;# 
    95     0008                     PORTD           equ	8	;# 
    96     0009                     PORTE           equ	9	;# 
    97     000A                     PCLATH          equ	10	;# 
    98     000B                     INTCON          equ	11	;# 
    99     000C                     PIR1            equ	12	;# 
   100     000D                     PIR2            equ	13	;# 
   101     000E                     TMR1            equ	14	;# 
   102     000E                     TMR1L           equ	14	;# 
   103     000F                     TMR1H           equ	15	;# 
   104     0010                     T1CON           equ	16	;# 
   105     0011                     TMR2            equ	17	;# 
   106     0012                     T2CON           equ	18	;# 
   107     0013                     SSPBUF          equ	19	;# 
   108     0014                     SSPCON          equ	20	;# 
   109     0015                     CCPR1           equ	21	;# 
   110     0015                     CCPR1L          equ	21	;# 
   111     0016                     CCPR1H          equ	22	;# 
   112     0017                     CCP1CON         equ	23	;# 
   113     0018                     RCSTA           equ	24	;# 
   114     0019                     TXREG           equ	25	;# 
   115     001A                     RCREG           equ	26	;# 
   116     001B                     CCPR2           equ	27	;# 
   117     001B                     CCPR2L          equ	27	;# 
   118     001C                     CCPR2H          equ	28	;# 
   119     001D                     CCP2CON         equ	29	;# 
   120     001E                     ADRESH          equ	30	;# 
   121     001F                     ADCON0          equ	31	;# 
   122     0081                     OPTION_REG      equ	129	;# 
   123     0085                     TRISA           equ	133	;# 
   124     0086                     TRISB           equ	134	;# 
   125     0087                     TRISC           equ	135	;# 
   126     0088                     TRISD           equ	136	;# 
   127     0089                     TRISE           equ	137	;# 
   128     008C                     PIE1            equ	140	;# 
   129     008D                     PIE2            equ	141	;# 
   130     008E                     PCON            equ	142	;# 
   131     008F                     OSCCON          equ	143	;# 
   132     0090                     OSCTUNE         equ	144	;# 
   133     0091                     SSPCON2         equ	145	;# 
   134     0092                     PR2             equ	146	;# 
   135     0093                     SSPADD          equ	147	;# 
   136     0093                     SSPMSK          equ	147	;# 
   137     0093                     MSK             equ	147	;# 
   138     0094                     SSPSTAT         equ	148	;# 
   139     0095                     WPUB            equ	149	;# 
   140     0096                     IOCB            equ	150	;# 
   141     0097                     VRCON           equ	151	;# 
   142     0098                     TXSTA           equ	152	;# 
   143     0099                     SPBRG           equ	153	;# 
   144     009A                     SPBRGH          equ	154	;# 
   145     009B                     PWM1CON         equ	155	;# 
   146     009C                     ECCPAS          equ	156	;# 
   147     009D                     PSTRCON         equ	157	;# 
   148     009E                     ADRESL          equ	158	;# 
   149     009F                     ADCON1          equ	159	;# 
   150     0105                     WDTCON          equ	261	;# 
   151     0107                     CM1CON0         equ	263	;# 
   152     0108                     CM2CON0         equ	264	;# 
   153     0109                     CM2CON1         equ	265	;# 
   154     010C                     EEDATA          equ	268	;# 
   155     010C                     EEDAT           equ	268	;# 
   156     010D                     EEADR           equ	269	;# 
   157     010E                     EEDATH          equ	270	;# 
   158     010F                     EEADRH          equ	271	;# 
   159     0185                     SRCON           equ	389	;# 
   160     0187                     BAUDCTL         equ	391	;# 
   161     0188                     ANSEL           equ	392	;# 
   162     0189                     ANSELH          equ	393	;# 
   163     018C                     EECON1          equ	396	;# 
   164     018D                     EECON2          equ	397	;# 
   165     0000                     INDF            equ	0	;# 
   166     0001                     TMR0            equ	1	;# 
   167     0002                     PCL             equ	2	;# 
   168     0003                     STATUS          equ	3	;# 
   169     0004                     FSR             equ	4	;# 
   170     0005                     PORTA           equ	5	;# 
   171     0006                     PORTB           equ	6	;# 
   172     0007                     PORTC           equ	7	;# 
   173     0008                     PORTD           equ	8	;# 
   174     0009                     PORTE           equ	9	;# 
   175     000A                     PCLATH          equ	10	;# 
   176     000B                     INTCON          equ	11	;# 
   177     000C                     PIR1            equ	12	;# 
   178     000D                     PIR2            equ	13	;# 
   179     000E                     TMR1            equ	14	;# 
   180     000E                     TMR1L           equ	14	;# 
   181     000F                     TMR1H           equ	15	;# 
   182     0010                     T1CON           equ	16	;# 
   183     0011                     TMR2            equ	17	;# 
   184     0012                     T2CON           equ	18	;# 
   185     0013                     SSPBUF          equ	19	;# 
   186     0014                     SSPCON          equ	20	;# 
   187     0015                     CCPR1           equ	21	;# 
   188     0015                     CCPR1L          equ	21	;# 
   189     0016                     CCPR1H          equ	22	;# 
   190     0017                     CCP1CON         equ	23	;# 
   191     0018                     RCSTA           equ	24	;# 
   192     0019                     TXREG           equ	25	;# 
   193     001A                     RCREG           equ	26	;# 
   194     001B                     CCPR2           equ	27	;# 
   195     001B                     CCPR2L          equ	27	;# 
   196     001C                     CCPR2H          equ	28	;# 
   197     001D                     CCP2CON         equ	29	;# 
   198     001E                     ADRESH          equ	30	;# 
   199     001F                     ADCON0          equ	31	;# 
   200     0081                     OPTION_REG      equ	129	;# 
   201     0085                     TRISA           equ	133	;# 
   202     0086                     TRISB           equ	134	;# 
   203     0087                     TRISC           equ	135	;# 
   204     0088                     TRISD           equ	136	;# 
   205     0089                     TRISE           equ	137	;# 
   206     008C                     PIE1            equ	140	;# 
   207     008D                     PIE2            equ	141	;# 
   208     008E                     PCON            equ	142	;# 
   209     008F                     OSCCON          equ	143	;# 
   210     0090                     OSCTUNE         equ	144	;# 
   211     0091                     SSPCON2         equ	145	;# 
   212     0092                     PR2             equ	146	;# 
   213     0093                     SSPADD          equ	147	;# 
   214     0093                     SSPMSK          equ	147	;# 
   215     0093                     MSK             equ	147	;# 
   216     0094                     SSPSTAT         equ	148	;# 
   217     0095                     WPUB            equ	149	;# 
   218     0096                     IOCB            equ	150	;# 
   219     0097                     VRCON           equ	151	;# 
   220     0098                     TXSTA           equ	152	;# 
   221     0099                     SPBRG           equ	153	;# 
   222     009A                     SPBRGH          equ	154	;# 
   223     009B                     PWM1CON         equ	155	;# 
   224     009C                     ECCPAS          equ	156	;# 
   225     009D                     PSTRCON         equ	157	;# 
   226     009E                     ADRESL          equ	158	;# 
   227     009F                     ADCON1          equ	159	;# 
   228     0105                     WDTCON          equ	261	;# 
   229     0107                     CM1CON0         equ	263	;# 
   230     0108                     CM2CON0         equ	264	;# 
   231     0109                     CM2CON1         equ	265	;# 
   232     010C                     EEDATA          equ	268	;# 
   233     010C                     EEDAT           equ	268	;# 
   234     010D                     EEADR           equ	269	;# 
   235     010E                     EEDATH          equ	270	;# 
   236     010F                     EEADRH          equ	271	;# 
   237     0185                     SRCON           equ	389	;# 
   238     0187                     BAUDCTL         equ	391	;# 
   239     0188                     ANSEL           equ	392	;# 
   240     0189                     ANSELH          equ	393	;# 
   241     018C                     EECON1          equ	396	;# 
   242     018D                     EECON2          equ	397	;# 
   243     0000                     INDF            equ	0	;# 
   244     0001                     TMR0            equ	1	;# 
   245     0002                     PCL             equ	2	;# 
   246     0003                     STATUS          equ	3	;# 
   247     0004                     FSR             equ	4	;# 
   248     0005                     PORTA           equ	5	;# 
   249     0006                     PORTB           equ	6	;# 
   250     0007                     PORTC           equ	7	;# 
   251     0008                     PORTD           equ	8	;# 
   252     0009                     PORTE           equ	9	;# 
   253     000A                     PCLATH          equ	10	;# 
   254     000B                     INTCON          equ	11	;# 
   255     000C                     PIR1            equ	12	;# 
   256     000D                     PIR2            equ	13	;# 
   257     000E                     TMR1            equ	14	;# 
   258     000E                     TMR1L           equ	14	;# 
   259     000F                     TMR1H           equ	15	;# 
   260     0010                     T1CON           equ	16	;# 
   261     0011                     TMR2            equ	17	;# 
   262     0012                     T2CON           equ	18	;# 
   263     0013                     SSPBUF          equ	19	;# 
   264     0014                     SSPCON          equ	20	;# 
   265     0015                     CCPR1           equ	21	;# 
   266     0015                     CCPR1L          equ	21	;# 
   267     0016                     CCPR1H          equ	22	;# 
   268     0017                     CCP1CON         equ	23	;# 
   269     0018                     RCSTA           equ	24	;# 
   270     0019                     TXREG           equ	25	;# 
   271     001A                     RCREG           equ	26	;# 
   272     001B                     CCPR2           equ	27	;# 
   273     001B                     CCPR2L          equ	27	;# 
   274     001C                     CCPR2H          equ	28	;# 
   275     001D                     CCP2CON         equ	29	;# 
   276     001E                     ADRESH          equ	30	;# 
   277     001F                     ADCON0          equ	31	;# 
   278     0081                     OPTION_REG      equ	129	;# 
   279     0085                     TRISA           equ	133	;# 
   280     0086                     TRISB           equ	134	;# 
   281     0087                     TRISC           equ	135	;# 
   282     0088                     TRISD           equ	136	;# 
   283     0089                     TRISE           equ	137	;# 
   284     008C                     PIE1            equ	140	;# 
   285     008D                     PIE2            equ	141	;# 
   286     008E                     PCON            equ	142	;# 
   287     008F                     OSCCON          equ	143	;# 
   288     0090                     OSCTUNE         equ	144	;# 
   289     0091                     SSPCON2         equ	145	;# 
   290     0092                     PR2             equ	146	;# 
   291     0093                     SSPADD          equ	147	;# 
   292     0093                     SSPMSK          equ	147	;# 
   293     0093                     MSK             equ	147	;# 
   294     0094                     SSPSTAT         equ	148	;# 
   295     0095                     WPUB            equ	149	;# 
   296     0096                     IOCB            equ	150	;# 
   297     0097                     VRCON           equ	151	;# 
   298     0098                     TXSTA           equ	152	;# 
   299     0099                     SPBRG           equ	153	;# 
   300     009A                     SPBRGH          equ	154	;# 
   301     009B                     PWM1CON         equ	155	;# 
   302     009C                     ECCPAS          equ	156	;# 
   303     009D                     PSTRCON         equ	157	;# 
   304     009E                     ADRESL          equ	158	;# 
   305     009F                     ADCON1          equ	159	;# 
   306     0105                     WDTCON          equ	261	;# 
   307     0107                     CM1CON0         equ	263	;# 
   308     0108                     CM2CON0         equ	264	;# 
   309     0109                     CM2CON1         equ	265	;# 
   310     010C                     EEDATA          equ	268	;# 
   311     010C                     EEDAT           equ	268	;# 
   312     010D                     EEADR           equ	269	;# 
   313     010E                     EEDATH          equ	270	;# 
   314     010F                     EEADRH          equ	271	;# 
   315     0185                     SRCON           equ	389	;# 
   316     0187                     BAUDCTL         equ	391	;# 
   317     0188                     ANSEL           equ	392	;# 
   318     0189                     ANSELH          equ	393	;# 
   319     018C                     EECON1          equ	396	;# 
   320     018D                     EECON2          equ	397	;# 
   321                           
   322                           	psect	idataBANK1
   323     0E67                     __pidataBANK1:
   324                           
   325                           ;initializer for _lcd
   326     0E67  3407               	retlw	7
   327     0E68  3400               	retlw	0
   328     0E69  341A               	retlw	26
   329     0E6A  342C               	retlw	44
   330     0E6B  343E               	retlw	62
   331     0006                     _PORTB          set	6
   332     0005                     _PORTA          set	5
   333     0008                     _PORTDbits      set	8
   334     001E                     _ADRESH         set	30
   335     001F                     _ADCON0         set	31
   336     0001                     _TMR0           set	1
   337     000E                     _TMR1L          set	14
   338     000F                     _TMR1H          set	15
   339     0010                     _T1CON          set	16
   340     0007                     _PORTC          set	7
   341     0060                     _TMR1IF         set	96
   342     005A                     _T0IF           set	90
   343     00F9                     _GO_nDONE       set	249
   344     005D                     _T0IE           set	93
   345     005F                     _GIE            set	95
   346     005E                     _PEIE           set	94
   347     0087                     _TRISC          set	135
   348     0086                     _TRISB          set	134
   349     0085                     _TRISA          set	133
   350     009E                     _ADRESL         set	158
   351     009F                     _ADCON1         set	159
   352     0081                     _OPTION_REG     set	129
   353     0440                     _TRISD0         set	1088
   354     0460                     _TMR1IE         set	1120
   355     0188                     _ANSEL          set	392
   356                           
   357                           	psect	strings
   358     0800                     __pstrings:
   359     0800                     stringtab:
   360     0800                     __stringtab:
   361                           
   362                           ;	String table - string pointers are 1 byte each
   363     0800  1BFF               	btfsc	btemp+1,7
   364     0801  280A               	ljmp	stringcode
   365     0802  1383               	bcf	3,7
   366     0803  187F               	btfsc	btemp+1,0
   367     0804  1783               	bsf	3,7
   368     0805  0800               	movf	0,w
   369     0806  0A84               	incf	4,f
   370     0807  1903               	skipnz
   371     0808  0AFF               	incf	btemp+1,f
   372     0809  0008               	return
   373     080A                     stringcode:
   374     080A                     stringdir:
   375     080A  3008               	movlw	high stringdir
   376     080B  008A               	movwf	10
   377     080C  0804               	movf	4,w
   378     080D  0A84               	incf	4,f
   379     080E  0782               	addwf	2,f
   380     080F                     __stringbase:
   381     080F  3400               	retlw	0
   382     0810                     __end_of__stringtab:
   383     0810                     STR_1:
   384     0810  3456               	retlw	86	;'V'
   385     0811  346F               	retlw	111	;'o'
   386     0812  346C               	retlw	108	;'l'
   387     0813  3474               	retlw	116	;'t'
   388     0814  3461               	retlw	97	;'a'
   389     0815  346A               	retlw	106	;'j'
   390     0816  3465               	retlw	101	;'e'
   391     0817  343A               	retlw	58	;':'
   392     0818  3420               	retlw	32	;' '
   393     0819  3400               	retlw	0
   394     081A                     STR_2:
   395     081A  3420               	retlw	32	;' '
   396     081B  3454               	retlw	84	;'T'
   397     081C  3469               	retlw	105	;'i'
   398     081D  3465               	retlw	101	;'e'
   399     081E  346D               	retlw	109	;'m'
   400     081F  3470               	retlw	112	;'p'
   401     0820  346F               	retlw	111	;'o'
   402     0821  343A               	retlw	58	;':'
   403     0822  3420               	retlw	32	;' '
   404     0823  3400               	retlw	0
   405     0824                     STR_4:
   406     0824  3425               	retlw	37	;'%'
   407     0825  3430               	retlw	48	;'0'
   408     0826  3432               	retlw	50	;'2'
   409     0827  3475               	retlw	117	;'u'
   410     0828  343A               	retlw	58	;':'
   411     0829  3425               	retlw	37	;'%'
   412     082A  3430               	retlw	48	;'0'
   413     082B  3432               	retlw	50	;'2'
   414     082C  3475               	retlw	117	;'u'
   415     082D  3400               	retlw	0
   416     082E                     STR_5:
   417     082E  3425               	retlw	37	;'%'
   418     082F  3475               	retlw	117	;'u'
   419     0830  342E               	retlw	46	;'.'
   420     0831  3425               	retlw	37	;'%'
   421     0832  3430               	retlw	48	;'0'
   422     0833  3433               	retlw	51	;'3'
   423     0834  3475               	retlw	117	;'u'
   424     0835  3400               	retlw	0
   425     0836                     STR_3:
   426     0836  3430               	retlw	48	;'0'
   427     0837  3430               	retlw	48	;'0'
   428     0838  343A               	retlw	58	;':'
   429     0839  3430               	retlw	48	;'0'
   430     083A  3430               	retlw	48	;'0'
   431     083B  3400               	retlw	0
   432                           
   433                           	psect	cinit
   434     000F                     start_initialization:	
   435                           ; #config settings
   436                           
   437     000F                     __initialization:
   438                           
   439                           ; Initialize objects allocated to BANK1
   440     000F  1683               	bsf	3,5	;RP0=1, select bank1
   441     0010  1303               	bcf	3,6	;RP1=0, select bank1
   442     0011  120A  158A  2667  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   443     0016  00DF               	movwf	__pdataBANK1& (0+127)
   444     0017  120A  158A  2668  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   445     001C  00E0               	movwf	(__pdataBANK1+1)& (0+127)
   446     001D  120A  158A  2669  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   447     0022  00E1               	movwf	(__pdataBANK1+2)& (0+127)
   448     0023  120A  158A  266A  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   449     0028  00E2               	movwf	(__pdataBANK1+3)& (0+127)
   450     0029  120A  158A  266B  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
   451     002E  00E3               	movwf	(__pdataBANK1+4)& (0+127)
   452                           
   453                           ; Clear objects allocated to BANK1
   454     002F  1383               	bcf	3,7	;select IRP bank0
   455     0030  30A0               	movlw	low __pbssBANK1
   456     0031  0084               	movwf	4
   457     0032  30C9               	movlw	low (__pbssBANK1+41)
   458     0033  120A  158A  266C  120A  118A  	fcall	clear_ram0
   459                           
   460                           ; Clear objects allocated to BANK0
   461     0038  3064               	movlw	low __pbssBANK0
   462     0039  0084               	movwf	4
   463     003A  306D               	movlw	low (__pbssBANK0+9)
   464     003B  120A  158A  266C  120A  118A  	fcall	clear_ram0
   465                           
   466                           ; Clear objects allocated to COMMON
   467     0040  01FA               	clrf	__pbssCOMMON& (0+127)
   468     0041  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   469     0042                     end_of_initialization:	
   470                           ;End of C runtime variable initialization code
   471                           
   472     0042                     __end_of__initialization:
   473     0042  0183               	clrf	3
   474     0043  120A  118A  2846   	ljmp	_main	;jump to C main() function
   475                           
   476                           	psect	bssCOMMON
   477     007A                     __pbssCOMMON:
   478     007A                     _timer1:
   479     007A                     	ds	2
   480                           
   481                           	psect	bssBANK0
   482     0064                     __pbssBANK0:
   483     0064                     _width:
   484     0064                     	ds	2
   485     0066                     _prec:
   486     0066                     	ds	2
   487     0068                     _count1:
   488     0068                     	ds	2
   489     006A                     _count0:
   490     006A                     	ds	2
   491     006C                     _flags:
   492     006C                     	ds	1
   493                           
   494                           	psect	bssBANK1
   495     00A0                     __pbssBANK1:
   496     00A0                     _timer0:
   497     00A0                     	ds	2
   498     00A2                     _onOff:
   499     00A2                     	ds	1
   500     00A3                     _dbuf:
   501     00A3                     	ds	32
   502     00C3                     _exec:
   503     00C3                     	ds	6
   504                           
   505                           	psect	dataBANK1
   506     00DF                     __pdataBANK1:
   507     00DF                     _lcd:
   508     00DF                     	ds	5
   509                           
   510                           	psect	clrtext
   511     0E6C                     clear_ram0:	
   512                           ;	Called with FSR containing the base address, and
   513                           ;	W with the last address+1
   514                           
   515     0E6C  0064               	clrwdt	;clear the watchdog before getting into this loop
   516     0E6D                     clrloop0:
   517     0E6D  0180               	clrf	0	;clear RAM location pointed to by FSR
   518     0E6E  0A84               	incf	4,f	;increment pointer
   519     0E6F  0604               	xorwf	4,w	;XOR with final address
   520     0E70  1903               	btfsc	3,2	;have we reached the end yet?
   521     0E71  3400               	retlw	0	;all done for this memory range, return
   522     0E72  0604               	xorwf	4,w	;XOR again to restore value
   523     0E73  2E6D               	goto	clrloop0	;do the next byte
   524                           
   525                           	psect	cstackBANK1
   526     00C9                     __pcstackBANK1:
   527     00C9                     main@buffer:
   528                           
   529                           ; 10 bytes @ 0x0
   530     00C9                     	ds	10
   531     00D3                     main@adc_result:
   532                           
   533                           ; 2 bytes @ 0xA
   534     00D3                     	ds	2
   535     00D5                     main@part_ent:
   536                           
   537                           ; 2 bytes @ 0xC
   538     00D5                     	ds	2
   539     00D7                     main@part_dec:
   540                           
   541                           ; 2 bytes @ 0xE
   542     00D7                     	ds	2
   543     00D9                     _main$958:
   544                           
   545                           ; 2 bytes @ 0x10
   546     00D9                     	ds	2
   547     00DB                     _main$959:
   548                           
   549                           ; 2 bytes @ 0x12
   550     00DB                     	ds	2
   551     00DD                     main@voltaje:
   552                           
   553                           ; 2 bytes @ 0x14
   554     00DD                     	ds	2
   555                           
   556                           	psect	cstackCOMMON
   557     0070                     __pcstackCOMMON:
   558     0070                     ?_LCD_Write:
   559     0070                     ?_putch:	
   560                           ; 1 bytes @ 0x0
   561                           
   562     0070                     ?_TMR1_init:	
   563                           ; 1 bytes @ 0x0
   564                           
   565     0070                     ?_Timer0_Init:	
   566                           ; 1 bytes @ 0x0
   567                           
   568     0070                     ?_ADC_Initialize:	
   569                           ; 1 bytes @ 0x0
   570                           
   571     0070                     ?_ISR:	
   572                           ; 1 bytes @ 0x0
   573                           
   574     0070                     ?_main:	
   575                           ; 1 bytes @ 0x0
   576                           
   577     0070                     ?_LCD_Out:	
   578                           ; 1 bytes @ 0x0
   579                           
   580     0070                     ?_LCD_putc:	
   581                           ; 1 bytes @ 0x0
   582                           
   583     0070                     putch@c:	
   584                           ; 1 bytes @ 0x0
   585                           
   586     0070                     ??_ISR:	
   587                           ; 1 bytes @ 0x0
   588                           
   589                           
   590                           ; 1 bytes @ 0x0
   591     0070                     	ds	2
   592     0072                     ?_fputc:
   593     0072                     ?_ADC_read:	
   594                           ; 2 bytes @ 0x2
   595                           
   596     0072                     ?___wmul:	
   597                           ; 2 bytes @ 0x2
   598                           
   599     0072                     ?___lwdiv:	
   600                           ; 2 bytes @ 0x2
   601                           
   602     0072                     ?___lwmod:	
   603                           ; 2 bytes @ 0x2
   604                           
   605     0072                     ?___lmul:	
   606                           ; 2 bytes @ 0x2
   607                           
   608     0072                     ___wmul@multiplier:	
   609                           ; 4 bytes @ 0x2
   610                           
   611     0072                     ___lwdiv@divisor:	
   612                           ; 2 bytes @ 0x2
   613                           
   614     0072                     ___lwmod@divisor:	
   615                           ; 2 bytes @ 0x2
   616                           
   617     0072                     fputc@c:	
   618                           ; 2 bytes @ 0x2
   619                           
   620     0072                     ___lmul@multiplier:	
   621                           ; 2 bytes @ 0x2
   622                           
   623     0072                     ??_putch:	
   624                           ; 4 bytes @ 0x2
   625                           
   626     0072                     ??_TMR1_init:	
   627                           ; 1 bytes @ 0x2
   628                           
   629     0072                     ??_Timer0_Init:	
   630                           ; 1 bytes @ 0x2
   631                           
   632     0072                     ??_ADC_Initialize:	
   633                           ; 1 bytes @ 0x2
   634                           
   635     0072                     ??_LCD_Out:	
   636                           ; 1 bytes @ 0x2
   637                           
   638                           
   639                           ; 1 bytes @ 0x2
   640     0072                     	ds	2
   641     0074                     LCD_Out@c:
   642     0074                     ___wmul@multiplicand:	
   643                           ; 1 bytes @ 0x4
   644                           
   645     0074                     ___lwdiv@dividend:	
   646                           ; 2 bytes @ 0x4
   647                           
   648     0074                     ___lwmod@dividend:	
   649                           ; 2 bytes @ 0x4
   650                           
   651     0074                     fputc@fp:	
   652                           ; 2 bytes @ 0x4
   653                           
   654     0074                     ??_ADC_read:	
   655                           ; 2 bytes @ 0x4
   656                           
   657                           
   658                           ; 1 bytes @ 0x4
   659     0074                     	ds	1
   660     0075                     ??_LCD_Write:
   661     0075                     ??_LCD_putc:	
   662                           ; 1 bytes @ 0x5
   663                           
   664                           
   665                           ; 1 bytes @ 0x5
   666     0075                     	ds	1
   667     0076                     ?_fputs:
   668     0076                     ___lwmod@counter:	
   669                           ; 2 bytes @ 0x6
   670                           
   671     0076                     fputs@s:	
   672                           ; 1 bytes @ 0x6
   673                           
   674     0076                     ___wmul@product:	
   675                           ; 1 bytes @ 0x6
   676                           
   677     0076                     ___lwdiv@quotient:	
   678                           ; 2 bytes @ 0x6
   679                           
   680     0076                     ___lmul@multiplicand:	
   681                           ; 2 bytes @ 0x6
   682                           
   683     0076                     ??___wmul:	
   684                           ; 4 bytes @ 0x6
   685                           
   686     0076                     ??___lwdiv:	
   687                           ; 1 bytes @ 0x6
   688                           
   689     0076                     ??___lwmod:	
   690                           ; 1 bytes @ 0x6
   691                           
   692                           
   693                           ; 1 bytes @ 0x6
   694     0076                     	ds	1
   695     0077                     LCD_Write@c:
   696     0077                     LCD_putc@c:	
   697                           ; 1 bytes @ 0x7
   698                           
   699     0077                     fputs@fp:	
   700                           ; 1 bytes @ 0x7
   701                           
   702                           
   703                           ; 2 bytes @ 0x7
   704     0077                     	ds	1
   705     0078                     ?_LCD_putrs:
   706     0078                     ?_LCD_puts:	
   707                           ; 1 bytes @ 0x8
   708                           
   709     0078                     ?_read_prec_or_width:	
   710                           ; 1 bytes @ 0x8
   711                           
   712     0078                     LCD_puts@a:	
   713                           ; 2 bytes @ 0x8
   714                           
   715     0078                     ___lwdiv@counter:	
   716                           ; 1 bytes @ 0x8
   717                           
   718     0078                     read_prec_or_width@fmt:	
   719                           ; 1 bytes @ 0x8
   720                           
   721     0078                     LCD_putrs@a:	
   722                           ; 1 bytes @ 0x8
   723                           
   724     0078                     ??_LCD_Init:	
   725                           ; 2 bytes @ 0x8
   726                           
   727                           
   728                           ; 1 bytes @ 0x8
   729     0078                     	ds	1
   730     0079                     read_prec_or_width@ap:
   731     0079                     ??_LCD_puts:	
   732                           ; 1 bytes @ 0x9
   733                           
   734     0079                     ??_pad:	
   735                           ; 1 bytes @ 0x9
   736                           
   737                           
   738                           ; 1 bytes @ 0x9
   739     0079                     	ds	1
   740     007A                     ??_vfprintf:
   741     007A                     ??_utoa:	
   742                           ; 1 bytes @ 0xA
   743                           
   744     007A                     ??_read_prec_or_width:	
   745                           ; 1 bytes @ 0xA
   746                           
   747                           
   748                           	psect	cstackBANK0
   749     0020                     __pcstackBANK0:	
   750                           ; 1 bytes @ 0xA
   751                           
   752     0020                     ?_LCD_Init:
   753     0020                     read_prec_or_width@c:	
   754                           ; 1 bytes @ 0x0
   755                           
   756     0020                     LCD_puts@i:	
   757                           ; 1 bytes @ 0x0
   758                           
   759     0020                     LCD_Init@display:	
   760                           ; 2 bytes @ 0x0
   761                           
   762     0020                     ??_LCD_putrs:	
   763                           ; 5 bytes @ 0x0
   764                           
   765     0020                     ??_fputc:	
   766                           ; 1 bytes @ 0x0
   767                           
   768     0020                     ??___lmul:	
   769                           ; 1 bytes @ 0x0
   770                           
   771                           
   772                           ; 1 bytes @ 0x0
   773     0020                     	ds	1
   774     0021                     read_prec_or_width@n:
   775     0021                     ___lmul@product:	
   776                           ; 2 bytes @ 0x1
   777                           
   778                           
   779                           ; 4 bytes @ 0x1
   780     0021                     	ds	2
   781     0023                     LCD_putrs@i:
   782                           
   783                           ; 2 bytes @ 0x3
   784     0023                     	ds	2
   785     0025                     ?___aldiv:
   786     0025                     LCD_Init@cmd:	
   787                           ; 4 bytes @ 0x5
   788                           
   789     0025                     ___aldiv@divisor:	
   790                           ; 1 bytes @ 0x5
   791                           
   792                           
   793                           ; 4 bytes @ 0x5
   794     0025                     	ds	4
   795     0029                     ___aldiv@dividend:
   796     0029                     ??_fputs:	
   797                           ; 4 bytes @ 0x9
   798                           
   799                           
   800                           ; 1 bytes @ 0x9
   801     0029                     	ds	2
   802     002B                     fputs@c:
   803                           
   804                           ; 1 bytes @ 0xB
   805     002B                     	ds	1
   806     002C                     fputs@i:
   807                           
   808                           ; 2 bytes @ 0xC
   809     002C                     	ds	1
   810     002D                     ??___aldiv:
   811                           
   812                           ; 1 bytes @ 0xD
   813     002D                     	ds	1
   814     002E                     ?_pad:
   815     002E                     ___aldiv@counter:	
   816                           ; 1 bytes @ 0xE
   817                           
   818     002E                     pad@fp:	
   819                           ; 1 bytes @ 0xE
   820                           
   821                           
   822                           ; 2 bytes @ 0xE
   823     002E                     	ds	1
   824     002F                     ___aldiv@sign:
   825                           
   826                           ; 1 bytes @ 0xF
   827     002F                     	ds	1
   828     0030                     pad@buf:
   829     0030                     ___aldiv@quotient:	
   830                           ; 1 bytes @ 0x10
   831                           
   832                           
   833                           ; 4 bytes @ 0x10
   834     0030                     	ds	1
   835     0031                     pad@p:
   836                           
   837                           ; 2 bytes @ 0x11
   838     0031                     	ds	2
   839     0033                     pad@i:
   840                           
   841                           ; 2 bytes @ 0x13
   842     0033                     	ds	2
   843     0035                     ?_utoa:
   844     0035                     utoa@fp:	
   845                           ; 1 bytes @ 0x15
   846                           
   847                           
   848                           ; 2 bytes @ 0x15
   849     0035                     	ds	2
   850     0037                     utoa@d:
   851                           
   852                           ; 2 bytes @ 0x17
   853     0037                     	ds	2
   854     0039                     utoa@p:
   855                           
   856                           ; 1 bytes @ 0x19
   857     0039                     	ds	1
   858     003A                     utoa@w:
   859                           
   860                           ; 2 bytes @ 0x1A
   861     003A                     	ds	2
   862     003C                     utoa@i:
   863                           
   864                           ; 2 bytes @ 0x1C
   865     003C                     	ds	2
   866     003E                     ?_vfpfcnvrt:
   867     003E                     vfpfcnvrt@fp:	
   868                           ; 1 bytes @ 0x1E
   869                           
   870                           
   871                           ; 2 bytes @ 0x1E
   872     003E                     	ds	2
   873     0040                     vfpfcnvrt@fmt:
   874                           
   875                           ; 1 bytes @ 0x20
   876     0040                     	ds	1
   877     0041                     vfpfcnvrt@ap:
   878                           
   879                           ; 1 bytes @ 0x21
   880     0041                     	ds	1
   881     0042                     ??_vfpfcnvrt:
   882                           
   883                           ; 1 bytes @ 0x22
   884     0042                     	ds	2
   885     0044                     vfpfcnvrt@convarg:
   886                           
   887                           ; 4 bytes @ 0x24
   888     0044                     	ds	4
   889     0048                     vfpfcnvrt@done:
   890                           
   891                           ; 1 bytes @ 0x28
   892     0048                     	ds	1
   893     0049                     vfpfcnvrt@cp:
   894                           
   895                           ; 1 bytes @ 0x29
   896     0049                     	ds	1
   897     004A                     ?_vfprintf:
   898     004A                     vfprintf@fp:	
   899                           ; 2 bytes @ 0x2A
   900                           
   901                           
   902                           ; 2 bytes @ 0x2A
   903     004A                     	ds	2
   904     004C                     vfprintf@fmt:
   905                           
   906                           ; 1 bytes @ 0x2C
   907     004C                     	ds	1
   908     004D                     vfprintf@ap:
   909                           
   910                           ; 1 bytes @ 0x2D
   911     004D                     	ds	1
   912     004E                     vfprintf@cfmt:
   913                           
   914                           ; 1 bytes @ 0x2E
   915     004E                     	ds	1
   916     004F                     ?_sprintf:
   917     004F                     sprintf@s:	
   918                           ; 2 bytes @ 0x2F
   919                           
   920                           
   921                           ; 1 bytes @ 0x2F
   922     004F                     	ds	1
   923     0050                     sprintf@fmt:
   924                           
   925                           ; 1 bytes @ 0x30
   926     0050                     	ds	5
   927     0055                     ??_sprintf:
   928                           
   929                           ; 1 bytes @ 0x35
   930     0055                     	ds	1
   931     0056                     sprintf@ap:
   932                           
   933                           ; 1 bytes @ 0x36
   934     0056                     	ds	1
   935     0057                     sprintf@f:
   936                           
   937                           ; 11 bytes @ 0x37
   938     0057                     	ds	11
   939     0062                     ??_main:
   940                           
   941                           ; 1 bytes @ 0x42
   942     0062                     	ds	2
   943                           
   944                           	psect	maintext
   945     0046                     __pmaintext:	
   946 ;;
   947 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   948 ;;
   949 ;; *************** function _main *****************
   950 ;; Defined at:
   951 ;;		line 103 in file "main.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;		None
   954 ;; Auto vars:     Size  Location     Type
   955 ;;  voltaje         2   20[BANK1 ] unsigned int 
   956 ;;  part_dec        2   14[BANK1 ] unsigned int 
   957 ;;  part_ent        2   12[BANK1 ] unsigned int 
   958 ;;  adc_result      2   10[BANK1 ] unsigned int 
   959 ;;  buffer         10    0[BANK1 ] unsigned char [10]
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : B00/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   969 ;;      Params:         0       0       0       0       0
   970 ;;      Locals:         0       0      22       0       0
   971 ;;      Temps:          0       2       0       0       0
   972 ;;      Totals:         0       2      22       0       0
   973 ;;Total ram usage:       24 bytes
   974 ;; Hardware stack levels required when called: 9
   975 ;; This function calls:
   976 ;;		_ADC_Initialize
   977 ;;		_ADC_read
   978 ;;		_LCD_Init
   979 ;;		_LCD_Write
   980 ;;		_LCD_putrs
   981 ;;		_LCD_puts
   982 ;;		_TMR1_init
   983 ;;		_Timer0_Init
   984 ;;		___aldiv
   985 ;;		___lmul
   986 ;;		___lwdiv
   987 ;;		___lwmod
   988 ;;		_sprintf
   989 ;; This function is called by:
   990 ;;		Startup code after reset
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994     0046                     _main:	
   995                           ;psect for function _main
   996                           
   997     0046                     l2219:	
   998                           ;incstack = 0
   999 ;; hardware stack exceeded
  1000                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1001                           
  1002                           
  1003                           ;main.c: 104: 
  1004     0046  120A  158A  267F  120A  118A  	fcall	_ADC_Initialize
  1005                           
  1006                           ;main.c: 105:         PORTDbits.RD0 = onOff;
  1007     004B  120A  158A  2674  120A  118A  	fcall	_Timer0_Init
  1008                           
  1009                           ;main.c: 106: 
  1010     0050  120A  158A  268C  120A  118A  	fcall	_TMR1_init
  1011     0055                     l2221:
  1012                           
  1013                           ;main.c: 108:         do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 9 & 0xF0) >> 4 ); LCD
      +                          _Write( 0x80 + 9 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( (0xC0 + 
      +                          9 & 0xF0) >> 4 ); LCD_Write( 0xC0 + 9 & 0x0F); } while ( 0 ); } else if ( 1 == 2 ) { do 
      +                          { LCD_Write( (0x94 + 9 & 0xF0) >> 4 ); LCD_Write( 0x94 + 9 & 0x0F); } while ( 0 ); } els
      +                          e if ( 1 == 3 ) { do { LCD_Write( (0xD4 + 9 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 9 & 0x0F);
      +                           } while ( 0 ); } } while ( 0 );
  1014     0055  1683               	bsf	3,5	;RP0=1, select bank1
  1015     0056  1303               	bcf	3,6	;RP1=0, select bank1
  1016     0057  1008               	bcf	8,0	;volatile
  1017     0058                     l2223:
  1018                           
  1019                           ;main.c: 109:         sprintf(exec, "%02u:%02u", timer0 / 60, timer0 % 60);
  1020     0058  1283               	bcf	3,5	;RP0=0, select bank0
  1021     0059  1303               	bcf	3,6	;RP1=0, select bank0
  1022     005A  1008               	bcf	8,0	;volatile
  1023     005B                     l2225:
  1024                           
  1025                           ;main.c: 111: 
  1026     005B  3020               	movlw	LCD_Init@display& (0+255)
  1027     005C  0084               	movwf	4
  1028     005D  1683               	bsf	3,5	;RP0=1, select bank1
  1029     005E  1303               	bcf	3,6	;RP1=0, select bank1
  1030     005F  085F               	movf	_lcd^(0+128),w
  1031     0060  1383               	bcf	3,7	;select IRP bank0
  1032     0061  0080               	movwf	0
  1033     0062  0A84               	incf	4,f
  1034     0063  0860               	movf	(_lcd^(0+128)+1),w
  1035     0064  0080               	movwf	0
  1036     0065  0A84               	incf	4,f
  1037     0066  0861               	movf	(_lcd^(0+128)+2),w
  1038     0067  0080               	movwf	0
  1039     0068  0A84               	incf	4,f
  1040     0069  0862               	movf	(_lcd^(0+128)+3),w
  1041     006A  0080               	movwf	0
  1042     006B  0A84               	incf	4,f
  1043     006C  0863               	movf	(_lcd^(0+128)+4),w
  1044     006D  0080               	movwf	0
  1045     006E  120A  118A  2342  120A  118A  	fcall	_LCD_Init
  1046     0073                     l2227:
  1047     0073  3000               	movlw	0
  1048     0074  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1049     0079                     l2229:
  1050     0079  3001               	movlw	1
  1051     007A  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1052     007F                     l2231:
  1053     007F  3008               	movlw	8
  1054     0080  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1055     0085                     l2233:
  1056     0085  3000               	movlw	0
  1057     0086  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1058     008B                     l2241:
  1059                           
  1060                           ;main.c: 115:         unsigned int part_ent = voltaje / 1000;
  1061     008B  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1062     008C  00F8               	movwf	LCD_putrs@a
  1063     008D  3080               	movlw	128
  1064     008E  00F9               	movwf	LCD_putrs@a+1
  1065     008F  120A  158A  27BA  120A  118A  	fcall	_LCD_putrs
  1066     0094                     l2245:
  1067     0094  300C               	movlw	12
  1068     0095  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1069     009A  3000               	movlw	0
  1070     009B  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1071     00A0                     l2251:
  1072                           
  1073                           ;main.c: 118:         sprintf(buffer, "%u.%03u", part_ent, part_dec);
  1074     00A0  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1075     00A1  00F8               	movwf	LCD_putrs@a
  1076     00A2  3080               	movlw	128
  1077     00A3  00F9               	movwf	LCD_putrs@a+1
  1078     00A4  120A  158A  27BA  120A  118A  	fcall	_LCD_putrs
  1079     00A9                     l2255:
  1080     00A9  300C               	movlw	12
  1081     00AA  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1082     00AF  3009               	movlw	9
  1083     00B0  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1084     00B5                     l2261:
  1085                           
  1086                           ;main.c: 120:         LCD_putrs(buffer);
  1087     00B5  3027               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1088     00B6  00F8               	movwf	LCD_putrs@a
  1089     00B7  3080               	movlw	128
  1090     00B8  00F9               	movwf	LCD_putrs@a+1
  1091     00B9  120A  158A  27BA  120A  118A  	fcall	_LCD_putrs
  1092     00BE                     l2263:
  1093     00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1094     00BF  1303               	bcf	3,6	;RP1=0, select bank1
  1095     00C0  0C22               	rrf	_onOff^(0+128),w	;volatile
  1096     00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1097     00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1098     00C3  1C03               	skipc
  1099     00C4  1008               	bcf	8,0	;volatile
  1100     00C5  1803               	skipnc
  1101     00C6  1408               	bsf	8,0	;volatile
  1102     00C7                     l2267:
  1103     00C7  300C               	movlw	12
  1104     00C8  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1105     00CD  3009               	movlw	9
  1106     00CE  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1107     00D3                     l2273:
  1108     00D3  303C               	movlw	60
  1109     00D4  00F2               	movwf	___lwdiv@divisor
  1110     00D5  3000               	movlw	0
  1111     00D6  00F3               	movwf	___lwdiv@divisor+1
  1112     00D7  1683               	bsf	3,5	;RP0=1, select bank1
  1113     00D8  1303               	bcf	3,6	;RP1=0, select bank1
  1114     00D9  0821               	movf	(_timer0+1)^(0+128),w	;volatile
  1115     00DA  00F5               	movwf	___lwdiv@dividend+1
  1116     00DB  0820               	movf	_timer0^(0+128),w	;volatile
  1117     00DC  00F4               	movwf	___lwdiv@dividend
  1118     00DD  120A  158A  2778  120A  118A  	fcall	___lwdiv
  1119     00E2  0873               	movf	?___lwdiv+1,w
  1120     00E3  1683               	bsf	3,5	;RP0=1, select bank1
  1121     00E4  1303               	bcf	3,6	;RP1=0, select bank1
  1122     00E5  00DA               	movwf	(_main$958+1)^(0+128)
  1123     00E6  0872               	movf	?___lwdiv,w
  1124     00E7  00D9               	movwf	_main$958^(0+128)
  1125     00E8                     l2275:
  1126     00E8  303C               	movlw	60
  1127     00E9  00F2               	movwf	___lwmod@divisor
  1128     00EA  3000               	movlw	0
  1129     00EB  00F3               	movwf	___lwmod@divisor+1
  1130     00EC  0821               	movf	(_timer0+1)^(0+128),w	;volatile
  1131     00ED  00F5               	movwf	___lwmod@dividend+1
  1132     00EE  0820               	movf	_timer0^(0+128),w	;volatile
  1133     00EF  00F4               	movwf	___lwmod@dividend
  1134     00F0  120A  158A  2740  120A  118A  	fcall	___lwmod
  1135     00F5  0873               	movf	?___lwmod+1,w
  1136     00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1137     00F7  1303               	bcf	3,6	;RP1=0, select bank1
  1138     00F8  00DC               	movwf	(_main$959+1)^(0+128)
  1139     00F9  0872               	movf	?___lwmod,w
  1140     00FA  00DB               	movwf	_main$959^(0+128)
  1141     00FB                     l2277:
  1142     00FB  30C3               	movlw	(low (_exec| 0))& (0+255)
  1143     00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1144     00FD  1303               	bcf	3,6	;RP1=0, select bank0
  1145     00FE  00CF               	movwf	sprintf@s
  1146     00FF  3015               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1147     0100  00D0               	movwf	sprintf@fmt
  1148     0101  1683               	bsf	3,5	;RP0=1, select bank1
  1149     0102  1303               	bcf	3,6	;RP1=0, select bank1
  1150     0103  085A               	movf	(_main$958+1)^(0+128),w
  1151     0104  1283               	bcf	3,5	;RP0=0, select bank0
  1152     0105  1303               	bcf	3,6	;RP1=0, select bank0
  1153     0106  00D2               	movwf	?_sprintf+3
  1154     0107  1683               	bsf	3,5	;RP0=1, select bank1
  1155     0108  1303               	bcf	3,6	;RP1=0, select bank1
  1156     0109  0859               	movf	_main$958^(0+128),w
  1157     010A  1283               	bcf	3,5	;RP0=0, select bank0
  1158     010B  1303               	bcf	3,6	;RP1=0, select bank0
  1159     010C  00D1               	movwf	?_sprintf+2
  1160     010D  1683               	bsf	3,5	;RP0=1, select bank1
  1161     010E  1303               	bcf	3,6	;RP1=0, select bank1
  1162     010F  085C               	movf	(_main$959+1)^(0+128),w
  1163     0110  1283               	bcf	3,5	;RP0=0, select bank0
  1164     0111  1303               	bcf	3,6	;RP1=0, select bank0
  1165     0112  00D4               	movwf	?_sprintf+5
  1166     0113  1683               	bsf	3,5	;RP0=1, select bank1
  1167     0114  1303               	bcf	3,6	;RP1=0, select bank1
  1168     0115  085B               	movf	_main$959^(0+128),w
  1169     0116  1283               	bcf	3,5	;RP0=0, select bank0
  1170     0117  1303               	bcf	3,6	;RP1=0, select bank0
  1171     0118  00D3               	movwf	?_sprintf+4
  1172     0119  120A  158A  26CE  120A  118A  	fcall	_sprintf
  1173     011E                     l2279:
  1174     011E  30C3               	movlw	(low (_exec| 0))& (0+255)
  1175     011F  00F8               	movwf	LCD_puts@a
  1176     0120  120A  158A  26F1  120A  118A  	fcall	_LCD_puts
  1177     0125                     l2281:
  1178     0125  120A  158A  269A  120A  118A  	fcall	_ADC_read
  1179     012A  0873               	movf	?_ADC_read+1,w
  1180     012B  1683               	bsf	3,5	;RP0=1, select bank1
  1181     012C  1303               	bcf	3,6	;RP1=0, select bank1
  1182     012D  00D4               	movwf	(main@adc_result+1)^(0+128)
  1183     012E  0872               	movf	?_ADC_read,w
  1184     012F  00D3               	movwf	main@adc_result^(0+128)
  1185     0130                     l2283:
  1186     0130  3000               	movlw	0
  1187     0131  1283               	bcf	3,5	;RP0=0, select bank0
  1188     0132  1303               	bcf	3,6	;RP1=0, select bank0
  1189     0133  00A8               	movwf	___aldiv@divisor+3
  1190     0134  3000               	movlw	0
  1191     0135  00A7               	movwf	___aldiv@divisor+2
  1192     0136  3027               	movlw	39
  1193     0137  00A6               	movwf	___aldiv@divisor+1
  1194     0138  30F6               	movlw	246
  1195     0139  00A5               	movwf	___aldiv@divisor
  1196     013A  1683               	bsf	3,5	;RP0=1, select bank1
  1197     013B  1303               	bcf	3,6	;RP1=0, select bank1
  1198     013C  0853               	movf	main@adc_result^(0+128),w
  1199     013D  00F2               	movwf	___lmul@multiplier
  1200     013E  0854               	movf	(main@adc_result+1)^(0+128),w
  1201     013F  00F3               	movwf	___lmul@multiplier+1
  1202     0140  01F4               	clrf	___lmul@multiplier+2
  1203     0141  01F5               	clrf	___lmul@multiplier+3
  1204     0142  3000               	movlw	0
  1205     0143  00F9               	movwf	___lmul@multiplicand+3
  1206     0144  3000               	movlw	0
  1207     0145  00F8               	movwf	___lmul@multiplicand+2
  1208     0146  30C3               	movlw	195
  1209     0147  00F7               	movwf	___lmul@multiplicand+1
  1210     0148  3050               	movlw	80
  1211     0149  00F6               	movwf	___lmul@multiplicand
  1212     014A  120A  118A  278F  120A  118A  	fcall	___lmul
  1213     014F  0875               	movf	?___lmul+3,w
  1214     0150  1283               	bcf	3,5	;RP0=0, select bank0
  1215     0151  1303               	bcf	3,6	;RP1=0, select bank0
  1216     0152  00AC               	movwf	___aldiv@dividend+3
  1217     0153  0874               	movf	?___lmul+2,w
  1218     0154  00AB               	movwf	___aldiv@dividend+2
  1219     0155  0873               	movf	?___lmul+1,w
  1220     0156  00AA               	movwf	___aldiv@dividend+1
  1221     0157  0872               	movf	?___lmul,w
  1222     0158  00A9               	movwf	___aldiv@dividend
  1223     0159  120A  118A  248E  120A  118A  	fcall	___aldiv
  1224     015E  1283               	bcf	3,5	;RP0=0, select bank0
  1225     015F  1303               	bcf	3,6	;RP1=0, select bank0
  1226     0160  0826               	movf	?___aldiv+1,w
  1227     0161  1683               	bsf	3,5	;RP0=1, select bank1
  1228     0162  1303               	bcf	3,6	;RP1=0, select bank1
  1229     0163  00DE               	movwf	(main@voltaje+1)^(0+128)
  1230     0164  1283               	bcf	3,5	;RP0=0, select bank0
  1231     0165  1303               	bcf	3,6	;RP1=0, select bank0
  1232     0166  0825               	movf	?___aldiv,w
  1233     0167  1683               	bsf	3,5	;RP0=1, select bank1
  1234     0168  1303               	bcf	3,6	;RP1=0, select bank1
  1235     0169  00DD               	movwf	main@voltaje^(0+128)
  1236     016A                     l2285:
  1237     016A  30E8               	movlw	232
  1238     016B  00F2               	movwf	___lwdiv@divisor
  1239     016C  3003               	movlw	3
  1240     016D  00F3               	movwf	___lwdiv@divisor+1
  1241     016E  085E               	movf	(main@voltaje+1)^(0+128),w
  1242     016F  00F5               	movwf	___lwdiv@dividend+1
  1243     0170  085D               	movf	main@voltaje^(0+128),w
  1244     0171  00F4               	movwf	___lwdiv@dividend
  1245     0172  120A  158A  2778  120A  118A  	fcall	___lwdiv
  1246     0177  0873               	movf	?___lwdiv+1,w
  1247     0178  1683               	bsf	3,5	;RP0=1, select bank1
  1248     0179  1303               	bcf	3,6	;RP1=0, select bank1
  1249     017A  00D6               	movwf	(main@part_ent+1)^(0+128)
  1250     017B  0872               	movf	?___lwdiv,w
  1251     017C  00D5               	movwf	main@part_ent^(0+128)
  1252     017D                     l2287:
  1253     017D  30E8               	movlw	232
  1254     017E  00F2               	movwf	___lwmod@divisor
  1255     017F  3003               	movlw	3
  1256     0180  00F3               	movwf	___lwmod@divisor+1
  1257     0181  085E               	movf	(main@voltaje+1)^(0+128),w
  1258     0182  00F5               	movwf	___lwmod@dividend+1
  1259     0183  085D               	movf	main@voltaje^(0+128),w
  1260     0184  00F4               	movwf	___lwmod@dividend
  1261     0185  120A  158A  2740  120A  118A  	fcall	___lwmod
  1262     018A  0873               	movf	?___lwmod+1,w
  1263     018B  1683               	bsf	3,5	;RP0=1, select bank1
  1264     018C  1303               	bcf	3,6	;RP1=0, select bank1
  1265     018D  00D8               	movwf	(main@part_dec+1)^(0+128)
  1266     018E  0872               	movf	?___lwmod,w
  1267     018F  00D7               	movwf	main@part_dec^(0+128)
  1268     0190                     l2289:
  1269     0190  30C9               	movlw	(low (main@buffer| 0))& (0+255)
  1270     0191  1283               	bcf	3,5	;RP0=0, select bank0
  1271     0192  1303               	bcf	3,6	;RP1=0, select bank0
  1272     0193  00CF               	movwf	sprintf@s
  1273     0194  301F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1274     0195  00D0               	movwf	sprintf@fmt
  1275     0196  1683               	bsf	3,5	;RP0=1, select bank1
  1276     0197  1303               	bcf	3,6	;RP1=0, select bank1
  1277     0198  0856               	movf	(main@part_ent+1)^(0+128),w
  1278     0199  1283               	bcf	3,5	;RP0=0, select bank0
  1279     019A  1303               	bcf	3,6	;RP1=0, select bank0
  1280     019B  00D2               	movwf	?_sprintf+3
  1281     019C  1683               	bsf	3,5	;RP0=1, select bank1
  1282     019D  1303               	bcf	3,6	;RP1=0, select bank1
  1283     019E  0855               	movf	main@part_ent^(0+128),w
  1284     019F  1283               	bcf	3,5	;RP0=0, select bank0
  1285     01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1286     01A1  00D1               	movwf	?_sprintf+2
  1287     01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1288     01A3  1303               	bcf	3,6	;RP1=0, select bank1
  1289     01A4  0858               	movf	(main@part_dec+1)^(0+128),w
  1290     01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1291     01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1292     01A7  00D4               	movwf	?_sprintf+5
  1293     01A8  1683               	bsf	3,5	;RP0=1, select bank1
  1294     01A9  1303               	bcf	3,6	;RP1=0, select bank1
  1295     01AA  0857               	movf	main@part_dec^(0+128),w
  1296     01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1297     01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1298     01AD  00D3               	movwf	?_sprintf+4
  1299     01AE  120A  158A  26CE  120A  118A  	fcall	_sprintf
  1300     01B3                     l2291:
  1301     01B3  3008               	movlw	8
  1302     01B4  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1303     01B9                     l2293:
  1304     01B9  3009               	movlw	9
  1305     01BA  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  1306     01BF                     l2301:
  1307     01BF  30C9               	movlw	(low (main@buffer| 0))& (0+255)
  1308     01C0  00F8               	movwf	LCD_putrs@a
  1309     01C1  3000               	movlw	0
  1310     01C2  00F9               	movwf	LCD_putrs@a+1
  1311     01C3  120A  158A  27BA  120A  118A  	fcall	_LCD_putrs
  1312     01C8                     l2303:
  1313     01C8  3082               	movlw	130
  1314     01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1315     01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1316     01CB  00E3               	movwf	??_main+1
  1317     01CC  30DD               	movlw	221
  1318     01CD  00E2               	movwf	??_main
  1319     01CE                     u2407:
  1320     01CE  0BE2               	decfsz	??_main,f
  1321     01CF  29CE               	goto	u2407
  1322     01D0  0BE3               	decfsz	??_main+1,f
  1323     01D1  29CE               	goto	u2407
  1324     01D2  28BE               	goto	l2263
  1325     01D3  120A  118A  280C   	ljmp	start
  1326     01D6                     __end_of_main:
  1327                           
  1328                           	psect	text1
  1329     0ECE                     __ptext1:	
  1330 ;; *************** function _sprintf *****************
  1331 ;; Defined at:
  1332 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;  s               1   47[BANK0 ] PTR unsigned char 
  1335 ;;		 -> main@buffer(10), exec(6), 
  1336 ;;  fmt             1   48[BANK0 ] PTR const unsigned char 
  1337 ;;		 -> STR_5(8), STR_4(10), 
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;  f              11   55[BANK0 ] struct _IO_FILE
  1340 ;;  ret             2    0        int 
  1341 ;;  ap              1   54[BANK0 ] PTR void [1]
  1342 ;;		 -> ?_sprintf(2), 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  2   47[BANK0 ] int 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1352 ;;      Params:         0       6       0       0       0
  1353 ;;      Locals:         0      12       0       0       0
  1354 ;;      Temps:          0       1       0       0       0
  1355 ;;      Totals:         0      19       0       0       0
  1356 ;;Total ram usage:       19 bytes
  1357 ;; Hardware stack levels used: 1
  1358 ;; Hardware stack levels required when called: 8
  1359 ;; This function calls:
  1360 ;;		_vfprintf
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366     0ECE                     _sprintf:	
  1367                           ;psect for function _sprintf
  1368                           
  1369     0ECE                     l2143:	
  1370                           ;incstack = 0
  1371 ;; hardware stack exceeded
  1372                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1373                           
  1374     0ECE  3051               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1375     0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  1376     0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  1377     0ED1  00D6               	movwf	sprintf@ap
  1378     0ED2                     l2145:
  1379     0ED2  084F               	movf	sprintf@s,w
  1380     0ED3  00D7               	movwf	sprintf@f
  1381     0ED4  3000               	movlw	0
  1382     0ED5  00D8               	movwf	sprintf@f+1
  1383     0ED6                     l2147:
  1384     0ED6  01D9               	clrf	sprintf@f+2
  1385     0ED7  01DA               	clrf	sprintf@f+3
  1386     0ED8                     l2149:
  1387     0ED8  01E0               	clrf	sprintf@f+9
  1388     0ED9  01E1               	clrf	sprintf@f+10
  1389     0EDA                     l2151:
  1390     0EDA  3057               	movlw	low sprintf@f
  1391     0EDB  00CA               	movwf	vfprintf@fp
  1392     0EDC  3000               	movlw	high sprintf@f
  1393     0EDD  00CB               	movwf	vfprintf@fp+1
  1394     0EDE  0850               	movf	sprintf@fmt,w
  1395     0EDF  00CC               	movwf	vfprintf@fmt
  1396     0EE0  3056               	movlw	(low (sprintf@ap| 0))& (0+255)
  1397     0EE1  00CD               	movwf	vfprintf@ap
  1398     0EE2  120A  158A  26AB  120A  158A  	fcall	_vfprintf
  1399     0EE7                     l2153:
  1400     0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  1401     0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  1402     0EE9  0859               	movf	sprintf@f+2,w
  1403     0EEA  074F               	addwf	sprintf@s,w
  1404     0EEB  00D5               	movwf	??_sprintf
  1405     0EEC  0855               	movf	??_sprintf,w
  1406     0EED  0084               	movwf	4
  1407     0EEE  1383               	bcf	3,7	;select IRP bank0
  1408     0EEF  0180               	clrf	0
  1409     0EF0                     l801:
  1410     0EF0  0008               	return
  1411     0EF1                     __end_of_sprintf:
  1412                           
  1413                           	psect	text2
  1414     0EAB                     __ptext2:	
  1415 ;; *************** function _vfprintf *****************
  1416 ;; Defined at:
  1417 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  fp              2   42[BANK0 ] PTR struct _IO_FILE
  1420 ;;		 -> sprintf@f(11), 
  1421 ;;  fmt             1   44[BANK0 ] PTR const unsigned char 
  1422 ;;		 -> STR_5(8), STR_4(10), 
  1423 ;;  ap              1   45[BANK0 ] PTR PTR void 
  1424 ;;		 -> sprintf@ap(1), 
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;  cfmt            1   46[BANK0 ] PTR unsigned char 
  1427 ;;		 -> STR_5(8), STR_4(10), 
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  2   42[BANK0 ] int 
  1430 ;; Registers used:
  1431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1437 ;;      Params:         0       4       0       0       0
  1438 ;;      Locals:         0       1       0       0       0
  1439 ;;      Temps:          0       0       0       0       0
  1440 ;;      Totals:         0       5       0       0       0
  1441 ;;Total ram usage:        5 bytes
  1442 ;; Hardware stack levels used: 1
  1443 ;; Hardware stack levels required when called: 7
  1444 ;; This function calls:
  1445 ;;		_vfpfcnvrt
  1446 ;; This function is called by:
  1447 ;;		_sprintf
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451     0EAB                     _vfprintf:	
  1452                           ;psect for function _vfprintf
  1453                           
  1454     0EAB                     l2079:	
  1455                           ;incstack = 0
  1456 ;; hardware stack exceeded
  1457                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1458                           
  1459                           
  1460                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1461     0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  1462     0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  1463     0EAD  084C               	movf	vfprintf@fmt,w
  1464     0EAE  00CE               	movwf	vfprintf@cfmt
  1465                           
  1466                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1467     0EAF  2EBD               	goto	l2083
  1468     0EB0                     l2081:
  1469                           
  1470                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1471     0EB0  084A               	movf	vfprintf@fp,w
  1472     0EB1  00BE               	movwf	vfpfcnvrt@fp
  1473     0EB2  084B               	movf	vfprintf@fp+1,w
  1474     0EB3  00BF               	movwf	vfpfcnvrt@fp+1
  1475     0EB4  304E               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1476     0EB5  00C0               	movwf	vfpfcnvrt@fmt
  1477     0EB6  084D               	movf	vfprintf@ap,w
  1478     0EB7  00C1               	movwf	vfpfcnvrt@ap
  1479     0EB8  120A  118A  2290  120A  158A  	fcall	_vfpfcnvrt
  1480     0EBD                     l2083:
  1481                           
  1482                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1483     0EBD  1283               	bcf	3,5	;RP0=0, select bank0
  1484     0EBE  1303               	bcf	3,6	;RP1=0, select bank0
  1485     0EBF  084E               	movf	vfprintf@cfmt,w
  1486     0EC0  0084               	movwf	4
  1487     0EC1  120A  158A  200A  120A  158A  	fcall	stringdir
  1488     0EC6  3A00               	xorlw	0
  1489     0EC7  1D03               	skipz
  1490     0EC8  2ECA               	goto	u2161
  1491     0EC9  2ECB               	goto	u2160
  1492     0ECA                     u2161:
  1493     0ECA  2EB0               	goto	l2081
  1494     0ECB                     u2160:
  1495     0ECB                     l2085:
  1496                           
  1497                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1498     0ECB  01CA               	clrf	?_vfprintf
  1499     0ECC  01CB               	clrf	?_vfprintf+1
  1500     0ECD                     l866:
  1501     0ECD  0008               	return
  1502     0ECE                     __end_of_vfprintf:
  1503                           
  1504                           	psect	text3
  1505     0290                     __ptext3:	
  1506 ;; *************** function _vfpfcnvrt *****************
  1507 ;; Defined at:
  1508 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  fp              2   30[BANK0 ] PTR struct _IO_FILE
  1511 ;;		 -> sprintf@f(11), 
  1512 ;;  fmt             1   32[BANK0 ] PTR PTR unsigned char 
  1513 ;;		 -> vfprintf@cfmt(1), 
  1514 ;;  ap              1   33[BANK0 ] PTR PTR void 
  1515 ;;		 -> sprintf@ap(1), 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  convarg         4   36[BANK0 ] struct .
  1518 ;;  cp              1   41[BANK0 ] PTR unsigned char 
  1519 ;;		 -> STR_5(8), STR_4(10), 
  1520 ;;  done            1   40[BANK0 ] _Bool 
  1521 ;;  c               1    0        unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1531 ;;      Params:         0       4       0       0       0
  1532 ;;      Locals:         0       6       0       0       0
  1533 ;;      Temps:          0       2       0       0       0
  1534 ;;      Totals:         0      12       0       0       0
  1535 ;;Total ram usage:       12 bytes
  1536 ;; Hardware stack levels used: 1
  1537 ;; Hardware stack levels required when called: 6
  1538 ;; This function calls:
  1539 ;;		_fputc
  1540 ;;		_read_prec_or_width
  1541 ;;		_utoa
  1542 ;; This function is called by:
  1543 ;;		_vfprintf
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547     0290                     _vfpfcnvrt:	
  1548                           ;psect for function _vfpfcnvrt
  1549                           
  1550     0290                     l2001:	
  1551                           ;incstack = 0
  1552 ;; hardware stack exceeded
  1553                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1554                           
  1555                           
  1556                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1557     0290  1283               	bcf	3,5	;RP0=0, select bank0
  1558     0291  1303               	bcf	3,6	;RP1=0, select bank0
  1559     0292  0840               	movf	vfpfcnvrt@fmt,w
  1560     0293  0084               	movwf	4
  1561     0294  1383               	bcf	3,7	;select IRP bank0
  1562     0295  0800               	movf	0,w
  1563     0296  0084               	movwf	4
  1564     0297  120A  158A  200A  120A  118A  	fcall	stringdir
  1565     029C  3A25               	xorlw	37
  1566     029D  1D03               	skipz
  1567     029E  2AA0               	goto	u2031
  1568     029F  2AA1               	goto	u2030
  1569     02A0                     u2031:
  1570     02A0  2B28               	goto	l2047
  1571     02A1                     u2030:
  1572     02A1                     l2003:
  1573                           
  1574                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1575     02A1  0840               	movf	vfpfcnvrt@fmt,w
  1576     02A2  0084               	movwf	4
  1577     02A3  3001               	movlw	1
  1578     02A4  0780               	addwf	0,f
  1579     02A5                     l2005:
  1580                           
  1581                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1582     02A5  01E4               	clrf	_width
  1583     02A6  01E5               	clrf	_width+1
  1584     02A7  3000               	movlw	0
  1585     02A8  00EC               	movwf	_flags
  1586     02A9                     l2007:
  1587                           
  1588                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1589     02A9  30FF               	movlw	255
  1590     02AA  00E6               	movwf	_prec
  1591     02AB  30FF               	movlw	255
  1592     02AC  00E7               	movwf	_prec+1
  1593     02AD                     l2009:
  1594                           
  1595                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1596     02AD  01C8               	clrf	vfpfcnvrt@done
  1597                           
  1598                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1599     02AE  2AC5               	goto	l2017
  1600     02AF                     l849:	
  1601                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  1602                           
  1603                           
  1604                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1605     02AF  14EC               	bsf	_flags,1
  1606     02B0                     l2011:
  1607                           
  1608                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1609     02B0  0840               	movf	vfpfcnvrt@fmt,w
  1610     02B1  0084               	movwf	4
  1611     02B2  3001               	movlw	1
  1612     02B3  0780               	addwf	0,f
  1613                           
  1614                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1615     02B4  2AC5               	goto	l2017
  1616     02B5                     l851:	
  1617                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  1618                           
  1619                           
  1620                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1621     02B5  3001               	movlw	1
  1622     02B6  00C8               	movwf	vfpfcnvrt@done
  1623                           
  1624                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1625     02B7  2AC5               	goto	l2017
  1626     02B8                     l2015:
  1627     02B8  0840               	movf	vfpfcnvrt@fmt,w
  1628     02B9  0084               	movwf	4
  1629     02BA  0800               	movf	0,w
  1630     02BB  0084               	movwf	4
  1631     02BC  120A  158A  200A  120A  118A  	fcall	stringdir
  1632                           
  1633                           ; Switch size 1, requested type "simple"
  1634                           ; Number of cases is 1, Range of values is 48 to 48
  1635                           ; switch strategies available:
  1636                           ; Name         Instructions Cycles
  1637                           ; simple_byte            4     3 (average)
  1638                           ; direct_byte           14    11 (fixed)
  1639                           ; jumptable            263     9 (fixed)
  1640                           ;	Chosen strategy is simple_byte
  1641     02C1  3A30               	xorlw	48	; case 48
  1642     02C2  1903               	skipnz
  1643     02C3  2AAF               	goto	l849
  1644     02C4  2AB5               	goto	l851
  1645     02C5                     l2017:
  1646                           
  1647                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1648     02C5  0848               	movf	vfpfcnvrt@done,w
  1649     02C6  1903               	btfsc	3,2
  1650     02C7  2AC9               	goto	u2041
  1651     02C8  2ACA               	goto	u2040
  1652     02C9                     u2041:
  1653     02C9  2AB8               	goto	l2015
  1654     02CA                     u2040:
  1655     02CA                     l2019:
  1656                           
  1657                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1658     02CA  0840               	movf	vfpfcnvrt@fmt,w
  1659     02CB  00F8               	movwf	read_prec_or_width@fmt
  1660     02CC  0841               	movf	vfpfcnvrt@ap,w
  1661     02CD  00F9               	movwf	read_prec_or_width@ap
  1662     02CE  120A  118A  2690  120A  118A  	fcall	_read_prec_or_width
  1663     02D3  0879               	movf	?_read_prec_or_width+1,w
  1664     02D4  1283               	bcf	3,5	;RP0=0, select bank0
  1665     02D5  1303               	bcf	3,6	;RP1=0, select bank0
  1666     02D6  00E5               	movwf	_width+1
  1667     02D7  0878               	movf	?_read_prec_or_width,w
  1668     02D8  00E4               	movwf	_width
  1669     02D9                     l2021:
  1670                           
  1671                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1672     02D9  1FE5               	btfss	_width+1,7
  1673     02DA  2ADC               	goto	u2051
  1674     02DB  2ADD               	goto	u2050
  1675     02DC                     u2051:
  1676     02DC  2AE3               	goto	l2027
  1677     02DD                     u2050:
  1678     02DD                     l2023:
  1679                           
  1680                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1681     02DD  146C               	bsf	_flags,0
  1682     02DE                     l2025:
  1683                           
  1684                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1685     02DE  09E4               	comf	_width,f
  1686     02DF  09E5               	comf	_width+1,f
  1687     02E0  0AE4               	incf	_width,f
  1688     02E1  1903               	skipnz
  1689     02E2  0AE5               	incf	_width+1,f
  1690     02E3                     l2027:
  1691                           
  1692                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  1693     02E3  0840               	movf	vfpfcnvrt@fmt,w
  1694     02E4  0084               	movwf	4
  1695     02E5  1383               	bcf	3,7	;select IRP bank0
  1696     02E6  0800               	movf	0,w
  1697     02E7  00C9               	movwf	vfpfcnvrt@cp
  1698     02E8                     l2029:
  1699     02E8  0849               	movf	vfpfcnvrt@cp,w
  1700     02E9  0084               	movwf	4
  1701     02EA  120A  158A  200A  120A  118A  	fcall	stringdir
  1702     02EF  3A75               	xorlw	117
  1703     02F0  1D03               	skipz
  1704     02F1  2AF3               	goto	u2061
  1705     02F2  2AF4               	goto	u2060
  1706     02F3                     u2061:
  1707     02F3  2B20               	goto	l2043
  1708     02F4                     u2060:
  1709     02F4                     l2031:
  1710                           
  1711                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1712     02F4  0841               	movf	vfpfcnvrt@ap,w
  1713     02F5  0084               	movwf	4
  1714     02F6  0800               	movf	0,w
  1715     02F7  00FF               	movwf	btemp+1
  1716     02F8  3002               	movlw	2
  1717     02F9  0780               	addwf	0,f
  1718     02FA  087F               	movf	btemp+1,w
  1719     02FB  0084               	movwf	4
  1720     02FC  0800               	movf	0,w
  1721     02FD  00C4               	movwf	vfpfcnvrt@convarg
  1722     02FE  0A84               	incf	4,f
  1723     02FF  0800               	movf	0,w
  1724     0300  00C5               	movwf	vfpfcnvrt@convarg+1
  1725     0301                     l2033:
  1726                           
  1727                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1728     0301  0840               	movf	vfpfcnvrt@fmt,w
  1729     0302  0084               	movwf	4
  1730     0303  0849               	movf	vfpfcnvrt@cp,w
  1731     0304  3E01               	addlw	1
  1732     0305  0080               	movwf	0
  1733                           
  1734                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1735     0306  2B15               	goto	l2041
  1736     0307                     l2035:
  1737                           
  1738                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1542:      return
      +                           (void) utoa(fp, convarg.uint);;	Return value of _vfpfcnvrt is never used
  1739     0307  083E               	movf	vfpfcnvrt@fp,w
  1740     0308  00B5               	movwf	utoa@fp
  1741     0309  083F               	movf	vfpfcnvrt@fp+1,w
  1742     030A  00B6               	movwf	utoa@fp+1
  1743     030B  0845               	movf	vfpfcnvrt@convarg+1,w
  1744     030C  00B8               	movwf	utoa@d+1
  1745     030D  0844               	movf	vfpfcnvrt@convarg,w
  1746     030E  00B7               	movwf	utoa@d
  1747     030F  120A  118A  25B9  120A  118A  	fcall	_utoa
  1748     0314  2B41               	goto	l859
  1749     0315                     l2041:
  1750     0315  0849               	movf	vfpfcnvrt@cp,w
  1751     0316  0084               	movwf	4
  1752     0317  120A  158A  200A  120A  118A  	fcall	stringdir
  1753                           
  1754                           ; Switch size 1, requested type "simple"
  1755                           ; Number of cases is 1, Range of values is 117 to 117
  1756                           ; switch strategies available:
  1757                           ; Name         Instructions Cycles
  1758                           ; simple_byte            4     3 (average)
  1759                           ; direct_byte           14    11 (fixed)
  1760                           ; jumptable            263     9 (fixed)
  1761                           ;	Chosen strategy is simple_byte
  1762     031C  3A75               	xorlw	117	; case 117
  1763     031D  1903               	skipnz
  1764     031E  2B07               	goto	l2035
  1765     031F  2B20               	goto	l2043
  1766     0320                     l2043:
  1767                           
  1768                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1769     0320  1283               	bcf	3,5	;RP0=0, select bank0
  1770     0321  1303               	bcf	3,6	;RP1=0, select bank0
  1771     0322  0840               	movf	vfpfcnvrt@fmt,w
  1772     0323  0084               	movwf	4
  1773     0324  3001               	movlw	1
  1774     0325  1383               	bcf	3,7	;select IRP bank0
  1775     0326  0780               	addwf	0,f
  1776     0327  2B41               	goto	l859
  1777     0328                     l2047:
  1778                           
  1779                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1780     0328  0840               	movf	vfpfcnvrt@fmt,w
  1781     0329  0084               	movwf	4
  1782     032A  0800               	movf	0,w
  1783     032B  0084               	movwf	4
  1784     032C  120A  158A  200A  120A  118A  	fcall	stringdir
  1785     0331  00C2               	movwf	??_vfpfcnvrt
  1786     0332  01C3               	clrf	??_vfpfcnvrt+1
  1787     0333  0842               	movf	??_vfpfcnvrt,w
  1788     0334  00F2               	movwf	fputc@c
  1789     0335  0843               	movf	??_vfpfcnvrt+1,w
  1790     0336  00F3               	movwf	fputc@c+1
  1791     0337  083E               	movf	vfpfcnvrt@fp,w
  1792     0338  00F4               	movwf	fputc@fp
  1793     0339  083F               	movf	vfpfcnvrt@fp+1,w
  1794     033A  00F5               	movwf	fputc@fp+1
  1795     033B  120A  118A  23EE  120A  118A  	fcall	_fputc
  1796     0340  2B20               	goto	l2043
  1797     0341                     l859:
  1798     0341  0008               	return
  1799     0342                     __end_of_vfpfcnvrt:
  1800                           
  1801                           	psect	text4
  1802     05B9                     __ptext4:	
  1803 ;; *************** function _utoa *****************
  1804 ;; Defined at:
  1805 ;;		line 1001 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  fp              2   21[BANK0 ] PTR struct _IO_FILE
  1808 ;;		 -> sprintf@f(11), 
  1809 ;;  d               2   23[BANK0 ] unsigned int 
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  i               2   28[BANK0 ] int 
  1812 ;;  w               2   26[BANK0 ] int 
  1813 ;;  p               1   25[BANK0 ] _Bool 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1823 ;;      Params:         0       4       0       0       0
  1824 ;;      Locals:         0       5       0       0       0
  1825 ;;      Temps:          0       0       0       0       0
  1826 ;;      Totals:         0       9       0       0       0
  1827 ;;Total ram usage:        9 bytes
  1828 ;; Hardware stack levels used: 1
  1829 ;; Hardware stack levels required when called: 5
  1830 ;; This function calls:
  1831 ;;		___lwdiv
  1832 ;;		___lwmod
  1833 ;;		_pad
  1834 ;; This function is called by:
  1835 ;;		_vfpfcnvrt
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839     05B9                     _utoa:	
  1840                           ;psect for function _utoa
  1841                           
  1842     05B9                     l1947:	
  1843                           ;incstack = 0
  1844 ;; hardware stack exceeded
  1845                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1846                           
  1847                           
  1848                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1001: static void
      +                           utoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1002: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 1003:     int i, w;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprn
      +                          t.c: 1007:  _Bool p = 1;
  1849     05B9  3001               	movlw	1
  1850     05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1851     05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1852     05BC  00B9               	movwf	utoa@p
  1853     05BD                     l1949:
  1854                           
  1855                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1019:     w = wid
      +                          th;
  1856     05BD  0865               	movf	_width+1,w
  1857     05BE  00BB               	movwf	utoa@w+1
  1858     05BF  0864               	movf	_width,w
  1859     05C0  00BA               	movwf	utoa@w
  1860                           
  1861                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1022:     i = siz
      +                          eof(dbuf) - 1;
  1862     05C1  301F               	movlw	31
  1863     05C2  00BC               	movwf	utoa@i
  1864     05C3  3000               	movlw	0
  1865     05C4  00BD               	movwf	utoa@i+1
  1866     05C5                     l1951:
  1867                           
  1868                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1023:     dbuf[i]
      +                           = '\0';
  1869     05C5  1683               	bsf	3,5	;RP0=1, select bank1
  1870     05C6  1303               	bcf	3,6	;RP1=0, select bank1
  1871     05C7  01C2               	clrf	(_dbuf^(0+128)+31)
  1872                           
  1873                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1024:     while (
      +                          i && (d != 0
  1874     05C8  2DFF               	goto	l1963
  1875     05C9                     l1953:
  1876                           
  1877                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1033:     )) {;C:
      +                          \Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1034:         --i;
  1878     05C9  30FF               	movlw	255
  1879     05CA  07BC               	addwf	utoa@i,f
  1880     05CB  1803               	skipnc
  1881     05CC  0ABD               	incf	utoa@i+1,f
  1882     05CD  30FF               	movlw	255
  1883     05CE  07BD               	addwf	utoa@i+1,f
  1884     05CF                     l1955:
  1885                           
  1886                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1035:         dbu
      +                          f[i] = '0' + (d % 10);
  1887     05CF  083C               	movf	utoa@i,w
  1888     05D0  3EA3               	addlw	(low (_dbuf| 0))& (0+255)
  1889     05D1  0084               	movwf	4
  1890     05D2  300A               	movlw	10
  1891     05D3  00F2               	movwf	___lwmod@divisor
  1892     05D4  3000               	movlw	0
  1893     05D5  00F3               	movwf	___lwmod@divisor+1
  1894     05D6  0838               	movf	utoa@d+1,w
  1895     05D7  00F5               	movwf	___lwmod@dividend+1
  1896     05D8  0837               	movf	utoa@d,w
  1897     05D9  00F4               	movwf	___lwmod@dividend
  1898     05DA  120A  158A  2740  120A  118A  	fcall	___lwmod
  1899     05DF  0872               	movf	?___lwmod,w
  1900     05E0  3E30               	addlw	48
  1901     05E1  1383               	bcf	3,7	;select IRP bank1
  1902     05E2  0080               	movwf	0
  1903     05E3                     l1957:
  1904                           
  1905                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1039:   p = 0;
  1906     05E3  1283               	bcf	3,5	;RP0=0, select bank0
  1907     05E4  1303               	bcf	3,6	;RP1=0, select bank0
  1908     05E5  01B9               	clrf	utoa@p
  1909     05E6                     l1959:
  1910                           
  1911                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1041:         --w
      +                          ;
  1912     05E6  30FF               	movlw	255
  1913     05E7  07BA               	addwf	utoa@w,f
  1914     05E8  1803               	skipnc
  1915     05E9  0ABB               	incf	utoa@w+1,f
  1916     05EA  30FF               	movlw	255
  1917     05EB  07BB               	addwf	utoa@w+1,f
  1918     05EC                     l1961:
  1919                           
  1920                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1042:         d =
      +                           d / 10;
  1921     05EC  300A               	movlw	10
  1922     05ED  00F2               	movwf	___lwdiv@divisor
  1923     05EE  3000               	movlw	0
  1924     05EF  00F3               	movwf	___lwdiv@divisor+1
  1925     05F0  0838               	movf	utoa@d+1,w
  1926     05F1  00F5               	movwf	___lwdiv@dividend+1
  1927     05F2  0837               	movf	utoa@d,w
  1928     05F3  00F4               	movwf	___lwdiv@dividend
  1929     05F4  120A  158A  2778  120A  118A  	fcall	___lwdiv
  1930     05F9  0873               	movf	?___lwdiv+1,w
  1931     05FA  1283               	bcf	3,5	;RP0=0, select bank0
  1932     05FB  1303               	bcf	3,6	;RP1=0, select bank0
  1933     05FC  00B8               	movwf	utoa@d+1
  1934     05FD  0872               	movf	?___lwdiv,w
  1935     05FE  00B7               	movwf	utoa@d
  1936     05FF                     l1963:
  1937                           
  1938                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1024:     while (
      +                          i && (d != 0
  1939     05FF  1283               	bcf	3,5	;RP0=0, select bank0
  1940     0600  083C               	movf	utoa@i,w
  1941     0601  043D               	iorwf	utoa@i+1,w
  1942     0602  1903               	btfsc	3,2
  1943     0603  2E05               	goto	u1861
  1944     0604  2E06               	goto	u1860
  1945     0605                     u1861:
  1946     0605  2E24               	goto	l1973
  1947     0606                     u1860:
  1948     0606                     l1965:
  1949     0606  0837               	movf	utoa@d,w
  1950     0607  0438               	iorwf	utoa@d+1,w
  1951     0608  1D03               	btfss	3,2
  1952     0609  2E0B               	goto	u1871
  1953     060A  2E0C               	goto	u1870
  1954     060B                     u1871:
  1955     060B  2DC9               	goto	l1953
  1956     060C                     u1870:
  1957     060C                     l1967:
  1958     060C  0839               	movf	utoa@p,w
  1959     060D  1D03               	btfss	3,2
  1960     060E  2E10               	goto	u1881
  1961     060F  2E11               	goto	u1880
  1962     0610                     u1881:
  1963     0610  2DC9               	goto	l1953
  1964     0611                     u1880:
  1965     0611                     l1969:
  1966     0611  083B               	movf	utoa@w+1,w
  1967     0612  3A80               	xorlw	128
  1968     0613  00FF               	movwf	btemp+1
  1969     0614  3080               	movlw	128
  1970     0615  027F               	subwf	btemp+1,w
  1971     0616  1D03               	skipz
  1972     0617  2E1A               	goto	u1895
  1973     0618  3001               	movlw	1
  1974     0619  023A               	subwf	utoa@w,w
  1975     061A                     u1895:
  1976     061A  1C03               	skipc
  1977     061B  2E1D               	goto	u1891
  1978     061C  2E1E               	goto	u1890
  1979     061D                     u1891:
  1980     061D  2E24               	goto	l1973
  1981     061E                     u1890:
  1982     061E                     l1971:
  1983     061E  1283               	bcf	3,5	;RP0=0, select bank0
  1984     061F  1303               	bcf	3,6	;RP1=0, select bank0
  1985     0620  18EC               	btfsc	_flags,1
  1986     0621  2E23               	goto	u1901
  1987     0622  2E24               	goto	u1900
  1988     0623                     u1901:
  1989     0623  2DC9               	goto	l1953
  1990     0624                     u1900:
  1991     0624                     l1973:
  1992                           
  1993                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1046:     return 
      +                          (void) pad(fp, &dbuf[i], w);
  1994     0624  1283               	bcf	3,5	;RP0=0, select bank0
  1995     0625  1303               	bcf	3,6	;RP1=0, select bank0
  1996     0626  0835               	movf	utoa@fp,w
  1997     0627  00AE               	movwf	pad@fp
  1998     0628  0836               	movf	utoa@fp+1,w
  1999     0629  00AF               	movwf	pad@fp+1
  2000     062A  083C               	movf	utoa@i,w
  2001     062B  3EA3               	addlw	(low (_dbuf| 0))& (0+255)
  2002     062C  00B0               	movwf	pad@buf
  2003     062D  083B               	movf	utoa@w+1,w
  2004     062E  00B2               	movwf	pad@p+1
  2005     062F  083A               	movf	utoa@w,w
  2006     0630  00B1               	movwf	pad@p
  2007     0631  120A  118A  273C  120A  118A  	fcall	_pad
  2008     0636                     l834:
  2009     0636  0008               	return
  2010     0637                     __end_of_utoa:
  2011                           
  2012                           	psect	text5
  2013     073C                     __ptext5:	
  2014 ;; *************** function _pad *****************
  2015 ;; Defined at:
  2016 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  fp              2   14[BANK0 ] PTR struct _IO_FILE
  2019 ;;		 -> sprintf@f(11), 
  2020 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  2021 ;;		 -> dbuf(32), 
  2022 ;;  p               2   17[BANK0 ] int 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  i               2   19[BANK0 ] int 
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2034 ;;      Params:         0       5       0       0       0
  2035 ;;      Locals:         0       2       0       0       0
  2036 ;;      Temps:          1       0       0       0       0
  2037 ;;      Totals:         1       7       0       0       0
  2038 ;;Total ram usage:        8 bytes
  2039 ;; Hardware stack levels used: 1
  2040 ;; Hardware stack levels required when called: 4
  2041 ;; This function calls:
  2042 ;;		_fputc
  2043 ;;		_fputs
  2044 ;; This function is called by:
  2045 ;;		_utoa
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049     073C                     _pad:	
  2050                           ;psect for function _pad
  2051                           
  2052     073C                     l1931:	
  2053                           ;incstack = 0
  2054 ;; hardware stack exceeded
  2055                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2056                           
  2057                           
  2058                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2059     073C  1283               	bcf	3,5	;RP0=0, select bank0
  2060     073D  1303               	bcf	3,6	;RP1=0, select bank0
  2061     073E  1C6C               	btfss	_flags,0
  2062     073F  2F41               	goto	u1821
  2063     0740  2F42               	goto	u1820
  2064     0741                     u1821:
  2065     0741  2F4D               	goto	l1935
  2066     0742                     u1820:
  2067     0742                     l1933:
  2068                           
  2069                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2070     0742  0830               	movf	pad@buf,w
  2071     0743  00F6               	movwf	fputs@s
  2072     0744  082E               	movf	pad@fp,w
  2073     0745  00F7               	movwf	fputs@fp
  2074     0746  082F               	movf	pad@fp+1,w
  2075     0747  00F8               	movwf	fputs@fp+1
  2076     0748  120A  158A  2715  120A  118A  	fcall	_fputs
  2077     074D                     l1935:
  2078                           
  2079                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2080     074D  1283               	bcf	3,5	;RP0=0, select bank0
  2081     074E  1303               	bcf	3,6	;RP1=0, select bank0
  2082     074F  1FB2               	btfss	pad@p+1,7
  2083     0750  2F52               	goto	u1831
  2084     0751  2F53               	goto	u1830
  2085     0752                     u1831:
  2086     0752  2F55               	goto	l819
  2087     0753                     u1830:
  2088     0753                     l1937:
  2089                           
  2090                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2091     0753  01B1               	clrf	pad@p
  2092     0754  01B2               	clrf	pad@p+1
  2093     0755                     l819:	
  2094                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 207:  }
  2095                           
  2096                           
  2097                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2098     0755  01B3               	clrf	pad@i
  2099     0756  01B4               	clrf	pad@i+1
  2100                           
  2101                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2102     0757  2F6F               	goto	l1943
  2103     0758                     l1939:
  2104                           
  2105                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2106     0758  3020               	movlw	32
  2107     0759  00F2               	movwf	fputc@c
  2108     075A  3000               	movlw	0
  2109     075B  00F3               	movwf	fputc@c+1
  2110     075C  1283               	bcf	3,5	;RP0=0, select bank0
  2111     075D  1303               	bcf	3,6	;RP1=0, select bank0
  2112     075E  082E               	movf	pad@fp,w
  2113     075F  00F4               	movwf	fputc@fp
  2114     0760  082F               	movf	pad@fp+1,w
  2115     0761  00F5               	movwf	fputc@fp+1
  2116     0762  120A  118A  23EE  120A  118A  	fcall	_fputc
  2117     0767                     l1941:
  2118                           
  2119                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2120     0767  3001               	movlw	1
  2121     0768  1283               	bcf	3,5	;RP0=0, select bank0
  2122     0769  1303               	bcf	3,6	;RP1=0, select bank0
  2123     076A  07B3               	addwf	pad@i,f
  2124     076B  1803               	skipnc
  2125     076C  0AB4               	incf	pad@i+1,f
  2126     076D  3000               	movlw	0
  2127     076E  07B4               	addwf	pad@i+1,f
  2128     076F                     l1943:
  2129                           
  2130                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2131     076F  0834               	movf	pad@i+1,w
  2132     0770  3A80               	xorlw	128
  2133     0771  00F9               	movwf	??_pad
  2134     0772  0832               	movf	pad@p+1,w
  2135     0773  3A80               	xorlw	128
  2136     0774  0279               	subwf	??_pad,w
  2137     0775  1D03               	skipz
  2138     0776  2F79               	goto	u1845
  2139     0777  0831               	movf	pad@p,w
  2140     0778  0233               	subwf	pad@i,w
  2141     0779                     u1845:
  2142     0779  1C03               	skipc
  2143     077A  2F7C               	goto	u1841
  2144     077B  2F7D               	goto	u1840
  2145     077C                     u1841:
  2146     077C  2F58               	goto	l1939
  2147     077D                     u1840:
  2148     077D                     l822:
  2149                           
  2150                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2151     077D  1283               	bcf	3,5	;RP0=0, select bank0
  2152     077E  1303               	bcf	3,6	;RP1=0, select bank0
  2153     077F  186C               	btfsc	_flags,0
  2154     0780  2F82               	goto	u1851
  2155     0781  2F83               	goto	u1850
  2156     0782                     u1851:
  2157     0782  2F8E               	goto	l824
  2158     0783                     u1850:
  2159     0783                     l1945:
  2160                           
  2161                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2162     0783  0830               	movf	pad@buf,w
  2163     0784  00F6               	movwf	fputs@s
  2164     0785  082E               	movf	pad@fp,w
  2165     0786  00F7               	movwf	fputs@fp
  2166     0787  082F               	movf	pad@fp+1,w
  2167     0788  00F8               	movwf	fputs@fp+1
  2168     0789  120A  158A  2715  120A  118A  	fcall	_fputs
  2169     078E                     l824:
  2170     078E  0008               	return
  2171     078F                     __end_of_pad:
  2172                           
  2173                           	psect	text6
  2174     0F15                     __ptext6:	
  2175 ;; *************** function _fputs *****************
  2176 ;; Defined at:
  2177 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputs.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  s               1    6[COMMON] PTR const unsigned char 
  2180 ;;		 -> dbuf(32), 
  2181 ;;  fp              2    7[COMMON] PTR struct _IO_FILE
  2182 ;;		 -> sprintf@f(11), 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  i               2   12[BANK0 ] int 
  2185 ;;  c               1   11[BANK0 ] unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  2    6[COMMON] int 
  2188 ;; Registers used:
  2189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2195 ;;      Params:         3       0       0       0       0
  2196 ;;      Locals:         0       3       0       0       0
  2197 ;;      Temps:          0       2       0       0       0
  2198 ;;      Totals:         3       5       0       0       0
  2199 ;;Total ram usage:        8 bytes
  2200 ;; Hardware stack levels used: 1
  2201 ;; Hardware stack levels required when called: 3
  2202 ;; This function calls:
  2203 ;;		_fputc
  2204 ;; This function is called by:
  2205 ;;		_pad
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209     0F15                     _fputs:	
  2210                           ;psect for function _fputs
  2211                           
  2212     0F15                     l1923:	
  2213                           ;incstack = 0
  2214 ;; hardware stack exceeded
  2215                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2216                           
  2217     0F15  1283               	bcf	3,5	;RP0=0, select bank0
  2218     0F16  1303               	bcf	3,6	;RP1=0, select bank0
  2219     0F17  01AC               	clrf	fputs@i
  2220     0F18  01AD               	clrf	fputs@i+1
  2221     0F19  2F32               	goto	l1929
  2222     0F1A                     l1925:
  2223     0F1A  082B               	movf	fputs@c,w
  2224     0F1B  00A9               	movwf	??_fputs
  2225     0F1C  01AA               	clrf	??_fputs+1
  2226     0F1D  0829               	movf	??_fputs,w
  2227     0F1E  00F2               	movwf	fputc@c
  2228     0F1F  082A               	movf	??_fputs+1,w
  2229     0F20  00F3               	movwf	fputc@c+1
  2230     0F21  0877               	movf	fputs@fp,w
  2231     0F22  00F4               	movwf	fputc@fp
  2232     0F23  0878               	movf	fputs@fp+1,w
  2233     0F24  00F5               	movwf	fputc@fp+1
  2234     0F25  120A  118A  23EE  120A  158A  	fcall	_fputc
  2235     0F2A                     l1927:
  2236     0F2A  3001               	movlw	1
  2237     0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  2238     0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  2239     0F2D  07AC               	addwf	fputs@i,f
  2240     0F2E  1803               	skipnc
  2241     0F2F  0AAD               	incf	fputs@i+1,f
  2242     0F30  3000               	movlw	0
  2243     0F31  07AD               	addwf	fputs@i+1,f
  2244     0F32                     l1929:
  2245     0F32  082C               	movf	fputs@i,w
  2246     0F33  0776               	addwf	fputs@s,w
  2247     0F34  00A9               	movwf	??_fputs
  2248     0F35  0829               	movf	??_fputs,w
  2249     0F36  0084               	movwf	4
  2250     0F37  1383               	bcf	3,7	;select IRP bank0
  2251     0F38  0800               	movf	0,w
  2252     0F39  00AB               	movwf	fputs@c
  2253     0F3A  082B               	movf	fputs@c,w
  2254     0F3B  1D03               	btfss	3,2
  2255     0F3C  2F3E               	goto	u1811
  2256     0F3D  2F3F               	goto	u1810
  2257     0F3E                     u1811:
  2258     0F3E  2F1A               	goto	l1925
  2259     0F3F                     u1810:
  2260     0F3F                     l886:
  2261     0F3F  0008               	return
  2262     0F40                     __end_of_fputs:
  2263                           
  2264                           	psect	text7
  2265     03EE                     __ptext7:	
  2266 ;; *************** function _fputc *****************
  2267 ;; Defined at:
  2268 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  c               2    2[COMMON] int 
  2271 ;;  fp              2    4[COMMON] PTR struct _IO_FILE
  2272 ;;		 -> sprintf@f(11), 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;		None
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  2    2[COMMON] int 
  2277 ;; Registers used:
  2278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2284 ;;      Params:         4       0       0       0       0
  2285 ;;      Locals:         0       0       0       0       0
  2286 ;;      Temps:          0       9       0       0       0
  2287 ;;      Totals:         4       9       0       0       0
  2288 ;;Total ram usage:       13 bytes
  2289 ;; Hardware stack levels used: 1
  2290 ;; Hardware stack levels required when called: 2
  2291 ;; This function calls:
  2292 ;;		_putch
  2293 ;; This function is called by:
  2294 ;;		_pad
  2295 ;;		_vfpfcnvrt
  2296 ;;		_fputs
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300     03EE                     _fputc:	
  2301                           ;psect for function _fputc
  2302                           
  2303     03EE                     l1407:	
  2304                           ;incstack = 0
  2305 ;; hardware stack exceeded
  2306                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2307                           
  2308     03EE  0874               	movf	fputc@fp,w
  2309     03EF  0475               	iorwf	fputc@fp+1,w
  2310     03F0  1903               	btfsc	3,2
  2311     03F1  2BF3               	goto	u911
  2312     03F2  2BF4               	goto	u910
  2313     03F3                     u911:
  2314     03F3  2BFA               	goto	l1411
  2315     03F4                     u910:
  2316     03F4                     l1409:
  2317     03F4  0874               	movf	fputc@fp,w
  2318     03F5  0475               	iorwf	fputc@fp+1,w
  2319     03F6  1D03               	btfss	3,2
  2320     03F7  2BF9               	goto	u921
  2321     03F8  2BFA               	goto	u920
  2322     03F9                     u921:
  2323     03F9  2C01               	goto	l1413
  2324     03FA                     u920:
  2325     03FA                     l1411:
  2326     03FA  0872               	movf	fputc@c,w
  2327     03FB  120A  118A  27FC  120A  118A  	fcall	_putch
  2328     0400  2C8D               	goto	l878
  2329     0401                     l1413:
  2330     0401  0874               	movf	fputc@fp,w
  2331     0402  3E09               	addlw	9
  2332     0403  1283               	bcf	3,5	;RP0=0, select bank0
  2333     0404  1303               	bcf	3,6	;RP1=0, select bank0
  2334     0405  00A0               	movwf	??_fputc
  2335     0406  0875               	movf	fputc@fp+1,w
  2336     0407  1803               	skipnc
  2337     0408  3E01               	addlw	1
  2338     0409  3E00               	addlw	0
  2339     040A  00A1               	movwf	??_fputc+1
  2340     040B  0820               	movf	??_fputc,w
  2341     040C  0084               	movwf	4
  2342     040D  1783               	bsf	3,7
  2343     040E  1C21               	btfss	??_fputc+1,0
  2344     040F  1383               	bcf	3,7
  2345     0410  0800               	movf	0,w
  2346     0411  00A2               	movwf	??_fputc+2
  2347     0412  0A84               	incf	4,f
  2348     0413  0800               	movf	0,w
  2349     0414  00A3               	movwf	??_fputc+3
  2350     0415  0822               	movf	??_fputc+2,w
  2351     0416  0423               	iorwf	??_fputc+3,w
  2352     0417  1903               	btfsc	3,2
  2353     0418  2C1A               	goto	u931
  2354     0419  2C1B               	goto	u930
  2355     041A                     u931:
  2356     041A  2C4D               	goto	l1417
  2357     041B                     u930:
  2358     041B                     l1415:
  2359     041B  0874               	movf	fputc@fp,w
  2360     041C  3E09               	addlw	9
  2361     041D  00A0               	movwf	??_fputc
  2362     041E  0875               	movf	fputc@fp+1,w
  2363     041F  1803               	skipnc
  2364     0420  3E01               	addlw	1
  2365     0421  3E00               	addlw	0
  2366     0422  00A1               	movwf	??_fputc+1
  2367     0423  0820               	movf	??_fputc,w
  2368     0424  0084               	movwf	4
  2369     0425  1783               	bsf	3,7
  2370     0426  1C21               	btfss	??_fputc+1,0
  2371     0427  1383               	bcf	3,7
  2372     0428  0800               	movf	0,w
  2373     0429  00A2               	movwf	??_fputc+2
  2374     042A  0A84               	incf	4,f
  2375     042B  0800               	movf	0,w
  2376     042C  00A3               	movwf	??_fputc+3
  2377     042D  0874               	movf	fputc@fp,w
  2378     042E  3E02               	addlw	2
  2379     042F  00A4               	movwf	??_fputc+4
  2380     0430  0875               	movf	fputc@fp+1,w
  2381     0431  1803               	skipnc
  2382     0432  3E01               	addlw	1
  2383     0433  3E00               	addlw	0
  2384     0434  00A5               	movwf	??_fputc+5
  2385     0435  0824               	movf	??_fputc+4,w
  2386     0436  0084               	movwf	4
  2387     0437  1783               	bsf	3,7
  2388     0438  1C25               	btfss	??_fputc+5,0
  2389     0439  1383               	bcf	3,7
  2390     043A  0800               	movf	0,w
  2391     043B  00A6               	movwf	??_fputc+6
  2392     043C  0A84               	incf	4,f
  2393     043D  0800               	movf	0,w
  2394     043E  00A7               	movwf	??_fputc+7
  2395     043F  0827               	movf	??_fputc+7,w
  2396     0440  3A80               	xorlw	128
  2397     0441  00A8               	movwf	??_fputc+8
  2398     0442  0823               	movf	??_fputc+3,w
  2399     0443  3A80               	xorlw	128
  2400     0444  0228               	subwf	??_fputc+8,w
  2401     0445  1D03               	skipz
  2402     0446  2C49               	goto	u945
  2403     0447  0822               	movf	??_fputc+2,w
  2404     0448  0226               	subwf	??_fputc+6,w
  2405     0449                     u945:
  2406     0449  1803               	skipnc
  2407     044A  2C4C               	goto	u941
  2408     044B  2C4D               	goto	u940
  2409     044C                     u941:
  2410     044C  2C8D               	goto	l878
  2411     044D                     u940:
  2412     044D                     l1417:
  2413     044D  0874               	movf	fputc@fp,w
  2414     044E  0084               	movwf	4
  2415     044F  1783               	bsf	3,7
  2416     0450  1C75               	btfss	fputc@fp+1,0
  2417     0451  1383               	bcf	3,7
  2418     0452  0800               	movf	0,w
  2419     0453  1283               	bcf	3,5	;RP0=0, select bank0
  2420     0454  1303               	bcf	3,6	;RP1=0, select bank0
  2421     0455  00A0               	movwf	??_fputc
  2422     0456  0A84               	incf	4,f
  2423     0457  0800               	movf	0,w
  2424     0458  00A1               	movwf	??_fputc+1
  2425     0459  0874               	movf	fputc@fp,w
  2426     045A  3E02               	addlw	2
  2427     045B  00A2               	movwf	??_fputc+2
  2428     045C  0875               	movf	fputc@fp+1,w
  2429     045D  1803               	skipnc
  2430     045E  3E01               	addlw	1
  2431     045F  3E00               	addlw	0
  2432     0460  00A3               	movwf	??_fputc+3
  2433     0461  0822               	movf	??_fputc+2,w
  2434     0462  0084               	movwf	4
  2435     0463  1783               	bsf	3,7
  2436     0464  1C23               	btfss	??_fputc+3,0
  2437     0465  1383               	bcf	3,7
  2438     0466  0800               	movf	0,w
  2439     0467  0720               	addwf	??_fputc,w
  2440     0468  00A5               	movwf	??_fputc+5
  2441     0469  0821               	movf	??_fputc+1,w
  2442     046A  00A4               	movwf	??_fputc+4
  2443     046B  1803               	skipnc
  2444     046C  0AA4               	incf	??_fputc+4,f
  2445     046D  1F80               	btfss	0,7
  2446     046E  2C70               	goto	u950
  2447     046F  03A4               	decf	??_fputc+4,f
  2448     0470                     u950:
  2449     0470  1283               	bcf	3,5	;RP0=0, select bank0
  2450     0471  1303               	bcf	3,6	;RP1=0, select bank0
  2451     0472  0824               	movf	??_fputc+4,w
  2452     0473  00A6               	movwf	??_fputc+6
  2453     0474  0825               	movf	??_fputc+5,w
  2454     0475  0084               	movwf	4
  2455     0476  1783               	bsf	3,7
  2456     0477  1C26               	btfss	??_fputc+6,0
  2457     0478  1383               	bcf	3,7
  2458     0479  0872               	movf	fputc@c,w
  2459     047A  0080               	movwf	0
  2460     047B  0874               	movf	fputc@fp,w
  2461     047C  3E02               	addlw	2
  2462     047D  00A0               	movwf	??_fputc
  2463     047E  0875               	movf	fputc@fp+1,w
  2464     047F  1803               	skipnc
  2465     0480  3E01               	addlw	1
  2466     0481  3E00               	addlw	0
  2467     0482  00A1               	movwf	??_fputc+1
  2468     0483  0820               	movf	??_fputc,w
  2469     0484  0084               	movwf	4
  2470     0485  1783               	bsf	3,7
  2471     0486  1C21               	btfss	??_fputc+1,0
  2472     0487  1383               	bcf	3,7
  2473     0488  3001               	movlw	1
  2474     0489  0780               	addwf	0,f
  2475     048A  0A84               	incf	4,f
  2476     048B  1803               	skipnc
  2477     048C  0A80               	incf	0,f
  2478     048D                     l878:
  2479     048D  0008               	return
  2480     048E                     __end_of_fputc:
  2481                           
  2482                           	psect	text8
  2483     07FC                     __ptext8:	
  2484 ;; *************** function _putch *****************
  2485 ;; Defined at:
  2486 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;  c               1    wreg     unsigned char 
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;  c               1    0[COMMON] unsigned char 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2500 ;;      Params:         0       0       0       0       0
  2501 ;;      Locals:         0       0       0       0       0
  2502 ;;      Temps:          0       0       0       0       0
  2503 ;;      Totals:         0       0       0       0       0
  2504 ;;Total ram usage:        0 bytes
  2505 ;; Hardware stack levels used: 1
  2506 ;; Hardware stack levels required when called: 1
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_fputc
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514     07FC                     _putch:	
  2515                           ;psect for function _putch
  2516                           
  2517     07FC                     l889:	
  2518                           ;incstack = 0
  2519 ;; hardware stack exceeded
  2520                           ; Regs used in _putch: [wreg]
  2521                           
  2522     07FC  0008               	return
  2523     07FD                     __end_of_putch:
  2524                           
  2525                           	psect	text9
  2526     0F40                     __ptext9:	
  2527 ;; *************** function ___lwmod *****************
  2528 ;; Defined at:
  2529 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;  divisor         2    2[COMMON] unsigned int 
  2532 ;;  dividend        2    4[COMMON] unsigned int 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  counter         1    6[COMMON] unsigned char 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  2    2[COMMON] unsigned int 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, status,0
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2544 ;;      Params:         4       0       0       0       0
  2545 ;;      Locals:         1       0       0       0       0
  2546 ;;      Temps:          0       0       0       0       0
  2547 ;;      Totals:         5       0       0       0       0
  2548 ;;Total ram usage:        5 bytes
  2549 ;; Hardware stack levels used: 1
  2550 ;; Hardware stack levels required when called: 1
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_main
  2555 ;;		_utoa
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559     0F40                     ___lwmod:	
  2560                           ;psect for function ___lwmod
  2561                           
  2562     0F40                     l1469:	
  2563                           ;incstack = 0
  2564                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2565                           
  2566     0F40  0872               	movf	___lwmod@divisor,w
  2567     0F41  0473               	iorwf	___lwmod@divisor+1,w
  2568     0F42  1903               	btfsc	3,2
  2569     0F43  2F45               	goto	u1081
  2570     0F44  2F46               	goto	u1080
  2571     0F45                     u1081:
  2572     0F45  2F73               	goto	l1487
  2573     0F46                     u1080:
  2574     0F46                     l1471:
  2575     0F46  3001               	movlw	1
  2576     0F47  00F6               	movwf	___lwmod@counter
  2577     0F48  2F52               	goto	l1477
  2578     0F49                     l1473:
  2579     0F49  3001               	movlw	1
  2580     0F4A                     u1095:
  2581     0F4A  1003               	clrc
  2582     0F4B  0DF2               	rlf	___lwmod@divisor,f
  2583     0F4C  0DF3               	rlf	___lwmod@divisor+1,f
  2584     0F4D  3EFF               	addlw	-1
  2585     0F4E  1D03               	skipz
  2586     0F4F  2F4A               	goto	u1095
  2587     0F50                     l1475:
  2588     0F50  3001               	movlw	1
  2589     0F51  07F6               	addwf	___lwmod@counter,f
  2590     0F52                     l1477:
  2591     0F52  1FF3               	btfss	___lwmod@divisor+1,7
  2592     0F53  2F55               	goto	u1101
  2593     0F54  2F56               	goto	u1100
  2594     0F55                     u1101:
  2595     0F55  2F49               	goto	l1473
  2596     0F56                     u1100:
  2597     0F56                     l1479:
  2598     0F56  0873               	movf	___lwmod@divisor+1,w
  2599     0F57  0275               	subwf	___lwmod@dividend+1,w
  2600     0F58  1D03               	skipz
  2601     0F59  2F5C               	goto	u1115
  2602     0F5A  0872               	movf	___lwmod@divisor,w
  2603     0F5B  0274               	subwf	___lwmod@dividend,w
  2604     0F5C                     u1115:
  2605     0F5C  1C03               	skipc
  2606     0F5D  2F5F               	goto	u1111
  2607     0F5E  2F60               	goto	u1110
  2608     0F5F                     u1111:
  2609     0F5F  2F66               	goto	l1483
  2610     0F60                     u1110:
  2611     0F60                     l1481:
  2612     0F60  0872               	movf	___lwmod@divisor,w
  2613     0F61  02F4               	subwf	___lwmod@dividend,f
  2614     0F62  0873               	movf	___lwmod@divisor+1,w
  2615     0F63  1C03               	skipc
  2616     0F64  03F5               	decf	___lwmod@dividend+1,f
  2617     0F65  02F5               	subwf	___lwmod@dividend+1,f
  2618     0F66                     l1483:
  2619     0F66  3001               	movlw	1
  2620     0F67                     u1125:
  2621     0F67  1003               	clrc
  2622     0F68  0CF3               	rrf	___lwmod@divisor+1,f
  2623     0F69  0CF2               	rrf	___lwmod@divisor,f
  2624     0F6A  3EFF               	addlw	-1
  2625     0F6B  1D03               	skipz
  2626     0F6C  2F67               	goto	u1125
  2627     0F6D                     l1485:
  2628     0F6D  3001               	movlw	1
  2629     0F6E  02F6               	subwf	___lwmod@counter,f
  2630     0F6F  1D03               	btfss	3,2
  2631     0F70  2F72               	goto	u1131
  2632     0F71  2F73               	goto	u1130
  2633     0F72                     u1131:
  2634     0F72  2F56               	goto	l1479
  2635     0F73                     u1130:
  2636     0F73                     l1487:
  2637     0F73  0875               	movf	___lwmod@dividend+1,w
  2638     0F74  00F3               	movwf	?___lwmod+1
  2639     0F75  0874               	movf	___lwmod@dividend,w
  2640     0F76  00F2               	movwf	?___lwmod
  2641     0F77                     l628:
  2642     0F77  0008               	return
  2643     0F78                     __end_of___lwmod:
  2644                           
  2645                           	psect	text10
  2646     0F78                     __ptext10:	
  2647 ;; *************** function ___lwdiv *****************
  2648 ;; Defined at:
  2649 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  divisor         2    2[COMMON] unsigned int 
  2652 ;;  dividend        2    4[COMMON] unsigned int 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  quotient        2    6[COMMON] unsigned int 
  2655 ;;  counter         1    8[COMMON] unsigned char 
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  2    2[COMMON] unsigned int 
  2658 ;; Registers used:
  2659 ;;		wreg, status,2, status,0
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2665 ;;      Params:         4       0       0       0       0
  2666 ;;      Locals:         3       0       0       0       0
  2667 ;;      Temps:          0       0       0       0       0
  2668 ;;      Totals:         7       0       0       0       0
  2669 ;;Total ram usage:        7 bytes
  2670 ;; Hardware stack levels used: 1
  2671 ;; Hardware stack levels required when called: 1
  2672 ;; This function calls:
  2673 ;;		Nothing
  2674 ;; This function is called by:
  2675 ;;		_main
  2676 ;;		_utoa
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680     0F78                     ___lwdiv:	
  2681                           ;psect for function ___lwdiv
  2682                           
  2683     0F78                     l1443:	
  2684                           ;incstack = 0
  2685                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2686                           
  2687     0F78  01F6               	clrf	___lwdiv@quotient
  2688     0F79  01F7               	clrf	___lwdiv@quotient+1
  2689     0F7A                     l1445:
  2690     0F7A  0872               	movf	___lwdiv@divisor,w
  2691     0F7B  0473               	iorwf	___lwdiv@divisor+1,w
  2692     0F7C  1903               	btfsc	3,2
  2693     0F7D  2F7F               	goto	u1011
  2694     0F7E  2F80               	goto	u1010
  2695     0F7F                     u1011:
  2696     0F7F  2FB5               	goto	l1465
  2697     0F80                     u1010:
  2698     0F80                     l1447:
  2699     0F80  3001               	movlw	1
  2700     0F81  00F8               	movwf	___lwdiv@counter
  2701     0F82  2F8C               	goto	l1453
  2702     0F83                     l1449:
  2703     0F83  3001               	movlw	1
  2704     0F84                     u1025:
  2705     0F84  1003               	clrc
  2706     0F85  0DF2               	rlf	___lwdiv@divisor,f
  2707     0F86  0DF3               	rlf	___lwdiv@divisor+1,f
  2708     0F87  3EFF               	addlw	-1
  2709     0F88  1D03               	skipz
  2710     0F89  2F84               	goto	u1025
  2711     0F8A                     l1451:
  2712     0F8A  3001               	movlw	1
  2713     0F8B  07F8               	addwf	___lwdiv@counter,f
  2714     0F8C                     l1453:
  2715     0F8C  1FF3               	btfss	___lwdiv@divisor+1,7
  2716     0F8D  2F8F               	goto	u1031
  2717     0F8E  2F90               	goto	u1030
  2718     0F8F                     u1031:
  2719     0F8F  2F83               	goto	l1449
  2720     0F90                     u1030:
  2721     0F90                     l1455:
  2722     0F90  3001               	movlw	1
  2723     0F91                     u1045:
  2724     0F91  1003               	clrc
  2725     0F92  0DF6               	rlf	___lwdiv@quotient,f
  2726     0F93  0DF7               	rlf	___lwdiv@quotient+1,f
  2727     0F94  3EFF               	addlw	-1
  2728     0F95  1D03               	skipz
  2729     0F96  2F91               	goto	u1045
  2730     0F97  0873               	movf	___lwdiv@divisor+1,w
  2731     0F98  0275               	subwf	___lwdiv@dividend+1,w
  2732     0F99  1D03               	skipz
  2733     0F9A  2F9D               	goto	u1055
  2734     0F9B  0872               	movf	___lwdiv@divisor,w
  2735     0F9C  0274               	subwf	___lwdiv@dividend,w
  2736     0F9D                     u1055:
  2737     0F9D  1C03               	skipc
  2738     0F9E  2FA0               	goto	u1051
  2739     0F9F  2FA1               	goto	u1050
  2740     0FA0                     u1051:
  2741     0FA0  2FA8               	goto	l1461
  2742     0FA1                     u1050:
  2743     0FA1                     l1457:
  2744     0FA1  0872               	movf	___lwdiv@divisor,w
  2745     0FA2  02F4               	subwf	___lwdiv@dividend,f
  2746     0FA3  0873               	movf	___lwdiv@divisor+1,w
  2747     0FA4  1C03               	skipc
  2748     0FA5  03F5               	decf	___lwdiv@dividend+1,f
  2749     0FA6  02F5               	subwf	___lwdiv@dividend+1,f
  2750     0FA7                     l1459:
  2751     0FA7  1476               	bsf	___lwdiv@quotient,0
  2752     0FA8                     l1461:
  2753     0FA8  3001               	movlw	1
  2754     0FA9                     u1065:
  2755     0FA9  1003               	clrc
  2756     0FAA  0CF3               	rrf	___lwdiv@divisor+1,f
  2757     0FAB  0CF2               	rrf	___lwdiv@divisor,f
  2758     0FAC  3EFF               	addlw	-1
  2759     0FAD  1D03               	skipz
  2760     0FAE  2FA9               	goto	u1065
  2761     0FAF                     l1463:
  2762     0FAF  3001               	movlw	1
  2763     0FB0  02F8               	subwf	___lwdiv@counter,f
  2764     0FB1  1D03               	btfss	3,2
  2765     0FB2  2FB4               	goto	u1071
  2766     0FB3  2FB5               	goto	u1070
  2767     0FB4                     u1071:
  2768     0FB4  2F90               	goto	l1455
  2769     0FB5                     u1070:
  2770     0FB5                     l1465:
  2771     0FB5  0877               	movf	___lwdiv@quotient+1,w
  2772     0FB6  00F3               	movwf	?___lwdiv+1
  2773     0FB7  0876               	movf	___lwdiv@quotient,w
  2774     0FB8  00F2               	movwf	?___lwdiv
  2775     0FB9                     l618:
  2776     0FB9  0008               	return
  2777     0FBA                     __end_of___lwdiv:
  2778                           
  2779                           	psect	text11
  2780     0690                     __ptext11:	
  2781 ;; *************** function _read_prec_or_width *****************
  2782 ;; Defined at:
  2783 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  fmt             1    8[COMMON] PTR PTR const unsigned c
  2786 ;;		 -> vfprintf@cfmt(1), 
  2787 ;;  ap              1    9[COMMON] PTR PTR void [1]
  2788 ;;		 -> sprintf@ap(1), 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  c               1    0[BANK0 ] unsigned char 
  2791 ;;  n               2    1[BANK0 ] int 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  2    8[COMMON] int 
  2794 ;; Registers used:
  2795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2801 ;;      Params:         2       0       0       0       0
  2802 ;;      Locals:         0       3       0       0       0
  2803 ;;      Temps:          0       0       0       0       0
  2804 ;;      Totals:         2       3       0       0       0
  2805 ;;Total ram usage:        5 bytes
  2806 ;; Hardware stack levels used: 1
  2807 ;; Hardware stack levels required when called: 2
  2808 ;; This function calls:
  2809 ;;		___wmul
  2810 ;; This function is called by:
  2811 ;;		_vfpfcnvrt
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815     0690                     _read_prec_or_width:	
  2816                           ;psect for function _read_prec_or_width
  2817                           
  2818     0690                     l1537:	
  2819                           ;incstack = 0
  2820                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2821                           
  2822                           
  2823                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  2824     0690  1283               	bcf	3,5	;RP0=0, select bank0
  2825     0691  1303               	bcf	3,6	;RP1=0, select bank0
  2826     0692  01A1               	clrf	read_prec_or_width@n
  2827     0693  01A2               	clrf	read_prec_or_width@n+1
  2828     0694                     l1539:
  2829                           
  2830                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  2831     0694  0878               	movf	read_prec_or_width@fmt,w
  2832     0695  0084               	movwf	4
  2833     0696  1383               	bcf	3,7	;select IRP bank0
  2834     0697  0800               	movf	0,w
  2835     0698  0084               	movwf	4
  2836     0699  120A  158A  200A  120A  118A  	fcall	stringdir
  2837     069E  3A2A               	xorlw	42
  2838     069F  1D03               	skipz
  2839     06A0  2EA2               	goto	u1231
  2840     06A1  2EA3               	goto	u1230
  2841     06A2                     u1231:
  2842     06A2  2ED1               	goto	l1549
  2843     06A3                     u1230:
  2844     06A3                     l1541:
  2845                           
  2846                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2847     06A3  0878               	movf	read_prec_or_width@fmt,w
  2848     06A4  0084               	movwf	4
  2849     06A5  3001               	movlw	1
  2850     06A6  0780               	addwf	0,f
  2851     06A7                     l1543:
  2852                           
  2853                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2854     06A7  0879               	movf	read_prec_or_width@ap,w
  2855     06A8  0084               	movwf	4
  2856     06A9  0800               	movf	0,w
  2857     06AA  00FF               	movwf	btemp+1
  2858     06AB  3002               	movlw	2
  2859     06AC  0780               	addwf	0,f
  2860     06AD  087F               	movf	btemp+1,w
  2861     06AE  0084               	movwf	4
  2862     06AF  0800               	movf	0,w
  2863     06B0  00A1               	movwf	read_prec_or_width@n
  2864     06B1  0A84               	incf	4,f
  2865     06B2  0800               	movf	0,w
  2866     06B3  00A2               	movwf	read_prec_or_width@n+1
  2867                           
  2868                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2869     06B4  2EE2               	goto	l1551
  2870     06B5                     l1545:
  2871                           
  2872                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2873     06B5  0822               	movf	read_prec_or_width@n+1,w
  2874     06B6  00F3               	movwf	___wmul@multiplier+1
  2875     06B7  0821               	movf	read_prec_or_width@n,w
  2876     06B8  00F2               	movwf	___wmul@multiplier
  2877     06B9  300A               	movlw	10
  2878     06BA  00F4               	movwf	___wmul@multiplicand
  2879     06BB  3000               	movlw	0
  2880     06BC  00F5               	movwf	___wmul@multiplicand+1
  2881     06BD  120A  118A  27D7  120A  118A  	fcall	___wmul
  2882     06C2  1283               	bcf	3,5	;RP0=0, select bank0
  2883     06C3  1303               	bcf	3,6	;RP1=0, select bank0
  2884     06C4  0820               	movf	read_prec_or_width@c,w
  2885     06C5  0772               	addwf	?___wmul,w
  2886     06C6  00A1               	movwf	read_prec_or_width@n
  2887     06C7  3000               	movlw	0
  2888     06C8  1803               	skipnc
  2889     06C9  3001               	movlw	1
  2890     06CA  0773               	addwf	?___wmul+1,w
  2891     06CB  00A2               	movwf	read_prec_or_width@n+1
  2892     06CC                     l1547:
  2893                           
  2894                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2895     06CC  0878               	movf	read_prec_or_width@fmt,w
  2896     06CD  0084               	movwf	4
  2897     06CE  3001               	movlw	1
  2898     06CF  1383               	bcf	3,7	;select IRP bank0
  2899     06D0  0780               	addwf	0,f
  2900     06D1                     l1549:
  2901                           
  2902                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2903     06D1  0878               	movf	read_prec_or_width@fmt,w
  2904     06D2  0084               	movwf	4
  2905     06D3  0800               	movf	0,w
  2906     06D4  0084               	movwf	4
  2907     06D5  120A  158A  200A  120A  118A  	fcall	stringdir
  2908     06DA  3ED0               	addlw	208
  2909     06DB  00A0               	movwf	read_prec_or_width@c
  2910     06DC  300A               	movlw	10
  2911     06DD  0220               	subwf	read_prec_or_width@c,w
  2912     06DE  1C03               	skipc
  2913     06DF  2EE1               	goto	u1241
  2914     06E0  2EE2               	goto	u1240
  2915     06E1                     u1241:
  2916     06E1  2EB5               	goto	l1545
  2917     06E2                     u1240:
  2918     06E2                     l1551:
  2919                           
  2920                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2921     06E2  0822               	movf	read_prec_or_width@n+1,w
  2922     06E3  00F9               	movwf	?_read_prec_or_width+1
  2923     06E4  0821               	movf	read_prec_or_width@n,w
  2924     06E5  00F8               	movwf	?_read_prec_or_width
  2925     06E6                     l842:
  2926     06E6  0008               	return
  2927     06E7                     __end_of_read_prec_or_width:
  2928                           
  2929                           	psect	text12
  2930     07D7                     __ptext12:	
  2931 ;; *************** function ___wmul *****************
  2932 ;; Defined at:
  2933 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  multiplier      2    2[COMMON] unsigned int 
  2936 ;;  multiplicand    2    4[COMMON] unsigned int 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  product         2    6[COMMON] unsigned int 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  2    2[COMMON] unsigned int 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2948 ;;      Params:         4       0       0       0       0
  2949 ;;      Locals:         2       0       0       0       0
  2950 ;;      Temps:          0       0       0       0       0
  2951 ;;      Totals:         6       0       0       0       0
  2952 ;;Total ram usage:        6 bytes
  2953 ;; Hardware stack levels used: 1
  2954 ;; Hardware stack levels required when called: 1
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_read_prec_or_width
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962     07D7                     ___wmul:	
  2963                           ;psect for function ___wmul
  2964                           
  2965     07D7                     l1429:	
  2966                           ;incstack = 0
  2967                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2968                           
  2969     07D7  01F6               	clrf	___wmul@product
  2970     07D8  01F7               	clrf	___wmul@product+1
  2971     07D9                     l1431:
  2972     07D9  1C72               	btfss	___wmul@multiplier,0
  2973     07DA  2FDC               	goto	u971
  2974     07DB  2FDD               	goto	u970
  2975     07DC                     u971:
  2976     07DC  2FE3               	goto	l338
  2977     07DD                     u970:
  2978     07DD                     l1433:
  2979     07DD  0874               	movf	___wmul@multiplicand,w
  2980     07DE  07F6               	addwf	___wmul@product,f
  2981     07DF  1803               	skipnc
  2982     07E0  0AF7               	incf	___wmul@product+1,f
  2983     07E1  0875               	movf	___wmul@multiplicand+1,w
  2984     07E2  07F7               	addwf	___wmul@product+1,f
  2985     07E3                     l338:
  2986     07E3  3001               	movlw	1
  2987     07E4                     u985:
  2988     07E4  1003               	clrc
  2989     07E5  0DF4               	rlf	___wmul@multiplicand,f
  2990     07E6  0DF5               	rlf	___wmul@multiplicand+1,f
  2991     07E7  3EFF               	addlw	-1
  2992     07E8  1D03               	skipz
  2993     07E9  2FE4               	goto	u985
  2994     07EA                     l1435:
  2995     07EA  3001               	movlw	1
  2996     07EB                     u995:
  2997     07EB  1003               	clrc
  2998     07EC  0CF3               	rrf	___wmul@multiplier+1,f
  2999     07ED  0CF2               	rrf	___wmul@multiplier,f
  3000     07EE  3EFF               	addlw	-1
  3001     07EF  1D03               	skipz
  3002     07F0  2FEB               	goto	u995
  3003     07F1                     l1437:
  3004     07F1  0872               	movf	___wmul@multiplier,w
  3005     07F2  0473               	iorwf	___wmul@multiplier+1,w
  3006     07F3  1D03               	btfss	3,2
  3007     07F4  2FF6               	goto	u1001
  3008     07F5  2FF7               	goto	u1000
  3009     07F6                     u1001:
  3010     07F6  2FD9               	goto	l1431
  3011     07F7                     u1000:
  3012     07F7                     l1439:
  3013     07F7  0877               	movf	___wmul@product+1,w
  3014     07F8  00F3               	movwf	?___wmul+1
  3015     07F9  0876               	movf	___wmul@product,w
  3016     07FA  00F2               	movwf	?___wmul
  3017     07FB                     l340:
  3018     07FB  0008               	return
  3019     07FC                     __end_of___wmul:
  3020                           
  3021                           	psect	text13
  3022     078F                     __ptext13:	
  3023 ;; *************** function ___lmul *****************
  3024 ;; Defined at:
  3025 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul32.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  multiplier      4    2[COMMON] unsigned long 
  3028 ;;  multiplicand    4    6[COMMON] unsigned long 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  product         4    1[BANK0 ] unsigned long 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  4    2[COMMON] unsigned long 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3040 ;;      Params:         8       0       0       0       0
  3041 ;;      Locals:         0       4       0       0       0
  3042 ;;      Temps:          0       1       0       0       0
  3043 ;;      Totals:         8       5       0       0       0
  3044 ;;Total ram usage:       13 bytes
  3045 ;; Hardware stack levels used: 1
  3046 ;; Hardware stack levels required when called: 1
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_main
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054     078F                     ___lmul:	
  3055                           ;psect for function ___lmul
  3056                           
  3057     078F                     l2165:	
  3058                           ;incstack = 0
  3059                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3060                           
  3061     078F  3000               	movlw	0
  3062     0790  1283               	bcf	3,5	;RP0=0, select bank0
  3063     0791  1303               	bcf	3,6	;RP1=0, select bank0
  3064     0792  00A4               	movwf	___lmul@product+3
  3065     0793  3000               	movlw	0
  3066     0794  00A3               	movwf	___lmul@product+2
  3067     0795  3000               	movlw	0
  3068     0796  00A2               	movwf	___lmul@product+1
  3069     0797  3000               	movlw	0
  3070     0798  00A1               	movwf	___lmul@product
  3071     0799                     l2167:
  3072     0799  1C72               	btfss	___lmul@multiplier,0
  3073     079A  2F9C               	goto	u2251
  3074     079B  2F9D               	goto	u2250
  3075     079C                     u2251:
  3076     079C  2FB4               	goto	l2171
  3077     079D                     u2250:
  3078     079D                     l2169:
  3079     079D  0876               	movf	___lmul@multiplicand,w
  3080     079E  07A1               	addwf	___lmul@product,f
  3081     079F  0877               	movf	___lmul@multiplicand+1,w
  3082     07A0  1103               	clrz
  3083     07A1  1803               	skipnc
  3084     07A2  3E01               	addlw	1
  3085     07A3  1903               	skipnz
  3086     07A4  2FA6               	goto	u2261
  3087     07A5  07A2               	addwf	___lmul@product+1,f
  3088     07A6                     u2261:
  3089     07A6  0878               	movf	___lmul@multiplicand+2,w
  3090     07A7  1103               	clrz
  3091     07A8  1803               	skipnc
  3092     07A9  3E01               	addlw	1
  3093     07AA  1903               	skipnz
  3094     07AB  2FAD               	goto	u2262
  3095     07AC  07A3               	addwf	___lmul@product+2,f
  3096     07AD                     u2262:
  3097     07AD  0879               	movf	___lmul@multiplicand+3,w
  3098     07AE  1103               	clrz
  3099     07AF  1803               	skipnc
  3100     07B0  3E01               	addlw	1
  3101     07B1  1903               	skipnz
  3102     07B2  2FB4               	goto	u2263
  3103     07B3  07A4               	addwf	___lmul@product+3,f
  3104     07B4                     u2263:
  3105     07B4                     l2171:
  3106     07B4  3001               	movlw	1
  3107     07B5  00A0               	movwf	??___lmul
  3108     07B6                     u2275:
  3109     07B6  1003               	clrc
  3110     07B7  0DF6               	rlf	___lmul@multiplicand,f
  3111     07B8  0DF7               	rlf	___lmul@multiplicand+1,f
  3112     07B9  0DF8               	rlf	___lmul@multiplicand+2,f
  3113     07BA  0DF9               	rlf	___lmul@multiplicand+3,f
  3114     07BB  0BA0               	decfsz	??___lmul,f
  3115     07BC  2FB6               	goto	u2275
  3116     07BD                     l2173:
  3117     07BD  3001               	movlw	1
  3118     07BE                     u2285:
  3119     07BE  1003               	clrc
  3120     07BF  0CF5               	rrf	___lmul@multiplier+3,f
  3121     07C0  0CF4               	rrf	___lmul@multiplier+2,f
  3122     07C1  0CF3               	rrf	___lmul@multiplier+1,f
  3123     07C2  0CF2               	rrf	___lmul@multiplier,f
  3124     07C3  3EFF               	addlw	-1
  3125     07C4  1D03               	skipz
  3126     07C5  2FBE               	goto	u2285
  3127     07C6  0875               	movf	___lmul@multiplier+3,w
  3128     07C7  0474               	iorwf	___lmul@multiplier+2,w
  3129     07C8  0473               	iorwf	___lmul@multiplier+1,w
  3130     07C9  0472               	iorwf	___lmul@multiplier,w
  3131     07CA  1D03               	skipz
  3132     07CB  2FCD               	goto	u2291
  3133     07CC  2FCE               	goto	u2290
  3134     07CD                     u2291:
  3135     07CD  2F99               	goto	l2167
  3136     07CE                     u2290:
  3137     07CE                     l2175:
  3138     07CE  0824               	movf	___lmul@product+3,w
  3139     07CF  00F5               	movwf	?___lmul+3
  3140     07D0  0823               	movf	___lmul@product+2,w
  3141     07D1  00F4               	movwf	?___lmul+2
  3142     07D2  0822               	movf	___lmul@product+1,w
  3143     07D3  00F3               	movwf	?___lmul+1
  3144     07D4  0821               	movf	___lmul@product,w
  3145     07D5  00F2               	movwf	?___lmul
  3146     07D6                     l352:
  3147     07D6  0008               	return
  3148     07D7                     __end_of___lmul:
  3149                           
  3150                           	psect	text14
  3151     048E                     __ptext14:	
  3152 ;; *************** function ___aldiv *****************
  3153 ;; Defined at:
  3154 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\aldiv.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  divisor         4    5[BANK0 ] long 
  3157 ;;  dividend        4    9[BANK0 ] long 
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  quotient        4   16[BANK0 ] long 
  3160 ;;  sign            1   15[BANK0 ] unsigned char 
  3161 ;;  counter         1   14[BANK0 ] unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  4    5[BANK0 ] long 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3171 ;;      Params:         0       8       0       0       0
  3172 ;;      Locals:         0       6       0       0       0
  3173 ;;      Temps:          0       1       0       0       0
  3174 ;;      Totals:         0      15       0       0       0
  3175 ;;Total ram usage:       15 bytes
  3176 ;; Hardware stack levels used: 1
  3177 ;; Hardware stack levels required when called: 1
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_main
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185     048E                     ___aldiv:	
  3186                           ;psect for function ___aldiv
  3187                           
  3188     048E                     l2179:	
  3189                           ;incstack = 0
  3190                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3191                           
  3192     048E  1283               	bcf	3,5	;RP0=0, select bank0
  3193     048F  1303               	bcf	3,6	;RP1=0, select bank0
  3194     0490  01AF               	clrf	___aldiv@sign
  3195     0491                     l2181:
  3196     0491  1FA8               	btfss	___aldiv@divisor+3,7
  3197     0492  2C94               	goto	u2301
  3198     0493  2C95               	goto	u2300
  3199     0494                     u2301:
  3200     0494  2CA2               	goto	l403
  3201     0495                     u2300:
  3202     0495                     l2183:
  3203     0495  09A5               	comf	___aldiv@divisor,f
  3204     0496  09A6               	comf	___aldiv@divisor+1,f
  3205     0497  09A7               	comf	___aldiv@divisor+2,f
  3206     0498  09A8               	comf	___aldiv@divisor+3,f
  3207     0499  0AA5               	incf	___aldiv@divisor,f
  3208     049A  1903               	skipnz
  3209     049B  0AA6               	incf	___aldiv@divisor+1,f
  3210     049C  1903               	skipnz
  3211     049D  0AA7               	incf	___aldiv@divisor+2,f
  3212     049E  1903               	skipnz
  3213     049F  0AA8               	incf	___aldiv@divisor+3,f
  3214     04A0  3001               	movlw	1
  3215     04A1  00AF               	movwf	___aldiv@sign
  3216     04A2                     l403:
  3217     04A2  1FAC               	btfss	___aldiv@dividend+3,7
  3218     04A3  2CA5               	goto	u2311
  3219     04A4  2CA6               	goto	u2310
  3220     04A5                     u2311:
  3221     04A5  2CB3               	goto	l2189
  3222     04A6                     u2310:
  3223     04A6                     l2185:
  3224     04A6  09A9               	comf	___aldiv@dividend,f
  3225     04A7  09AA               	comf	___aldiv@dividend+1,f
  3226     04A8  09AB               	comf	___aldiv@dividend+2,f
  3227     04A9  09AC               	comf	___aldiv@dividend+3,f
  3228     04AA  0AA9               	incf	___aldiv@dividend,f
  3229     04AB  1903               	skipnz
  3230     04AC  0AAA               	incf	___aldiv@dividend+1,f
  3231     04AD  1903               	skipnz
  3232     04AE  0AAB               	incf	___aldiv@dividend+2,f
  3233     04AF  1903               	skipnz
  3234     04B0  0AAC               	incf	___aldiv@dividend+3,f
  3235     04B1                     l2187:
  3236     04B1  3001               	movlw	1
  3237     04B2  06AF               	xorwf	___aldiv@sign,f
  3238     04B3                     l2189:
  3239     04B3  3000               	movlw	0
  3240     04B4  00B3               	movwf	___aldiv@quotient+3
  3241     04B5  3000               	movlw	0
  3242     04B6  00B2               	movwf	___aldiv@quotient+2
  3243     04B7  3000               	movlw	0
  3244     04B8  00B1               	movwf	___aldiv@quotient+1
  3245     04B9  3000               	movlw	0
  3246     04BA  00B0               	movwf	___aldiv@quotient
  3247     04BB                     l2191:
  3248     04BB  0828               	movf	___aldiv@divisor+3,w
  3249     04BC  0427               	iorwf	___aldiv@divisor+2,w
  3250     04BD  0426               	iorwf	___aldiv@divisor+1,w
  3251     04BE  0425               	iorwf	___aldiv@divisor,w
  3252     04BF  1903               	skipnz
  3253     04C0  2CC2               	goto	u2321
  3254     04C1  2CC3               	goto	u2320
  3255     04C2                     u2321:
  3256     04C2  2D0E               	goto	l2211
  3257     04C3                     u2320:
  3258     04C3                     l2193:
  3259     04C3  3001               	movlw	1
  3260     04C4  00AE               	movwf	___aldiv@counter
  3261     04C5  2CD1               	goto	l2197
  3262     04C6                     l2195:
  3263     04C6  3001               	movlw	1
  3264     04C7  00AD               	movwf	??___aldiv
  3265     04C8                     u2335:
  3266     04C8  1003               	clrc
  3267     04C9  0DA5               	rlf	___aldiv@divisor,f
  3268     04CA  0DA6               	rlf	___aldiv@divisor+1,f
  3269     04CB  0DA7               	rlf	___aldiv@divisor+2,f
  3270     04CC  0DA8               	rlf	___aldiv@divisor+3,f
  3271     04CD  0BAD               	decfsz	??___aldiv,f
  3272     04CE  2CC8               	goto	u2335
  3273     04CF  3001               	movlw	1
  3274     04D0  07AE               	addwf	___aldiv@counter,f
  3275     04D1                     l2197:
  3276     04D1  1FA8               	btfss	___aldiv@divisor+3,7
  3277     04D2  2CD4               	goto	u2341
  3278     04D3  2CD5               	goto	u2340
  3279     04D4                     u2341:
  3280     04D4  2CC6               	goto	l2195
  3281     04D5                     u2340:
  3282     04D5                     l2199:
  3283     04D5  3001               	movlw	1
  3284     04D6  00AD               	movwf	??___aldiv
  3285     04D7                     u2355:
  3286     04D7  1003               	clrc
  3287     04D8  0DB0               	rlf	___aldiv@quotient,f
  3288     04D9  0DB1               	rlf	___aldiv@quotient+1,f
  3289     04DA  0DB2               	rlf	___aldiv@quotient+2,f
  3290     04DB  0DB3               	rlf	___aldiv@quotient+3,f
  3291     04DC  0BAD               	decfsz	??___aldiv,f
  3292     04DD  2CD7               	goto	u2355
  3293     04DE                     l2201:
  3294     04DE  0828               	movf	___aldiv@divisor+3,w
  3295     04DF  022C               	subwf	___aldiv@dividend+3,w
  3296     04E0  1D03               	skipz
  3297     04E1  2CEC               	goto	u2365
  3298     04E2  0827               	movf	___aldiv@divisor+2,w
  3299     04E3  022B               	subwf	___aldiv@dividend+2,w
  3300     04E4  1D03               	skipz
  3301     04E5  2CEC               	goto	u2365
  3302     04E6  0826               	movf	___aldiv@divisor+1,w
  3303     04E7  022A               	subwf	___aldiv@dividend+1,w
  3304     04E8  1D03               	skipz
  3305     04E9  2CEC               	goto	u2365
  3306     04EA  0825               	movf	___aldiv@divisor,w
  3307     04EB  0229               	subwf	___aldiv@dividend,w
  3308     04EC                     u2365:
  3309     04EC  1C03               	skipc
  3310     04ED  2CEF               	goto	u2361
  3311     04EE  2CF0               	goto	u2360
  3312     04EF                     u2361:
  3313     04EF  2CFF               	goto	l2207
  3314     04F0                     u2360:
  3315     04F0                     l2203:
  3316     04F0  0825               	movf	___aldiv@divisor,w
  3317     04F1  02A9               	subwf	___aldiv@dividend,f
  3318     04F2  0826               	movf	___aldiv@divisor+1,w
  3319     04F3  1C03               	skipc
  3320     04F4  0F26               	incfsz	___aldiv@divisor+1,w
  3321     04F5  02AA               	subwf	___aldiv@dividend+1,f
  3322     04F6  0827               	movf	___aldiv@divisor+2,w
  3323     04F7  1C03               	skipc
  3324     04F8  0F27               	incfsz	___aldiv@divisor+2,w
  3325     04F9  02AB               	subwf	___aldiv@dividend+2,f
  3326     04FA  0828               	movf	___aldiv@divisor+3,w
  3327     04FB  1C03               	skipc
  3328     04FC  0F28               	incfsz	___aldiv@divisor+3,w
  3329     04FD  02AC               	subwf	___aldiv@dividend+3,f
  3330     04FE                     l2205:
  3331     04FE  1430               	bsf	___aldiv@quotient,0
  3332     04FF                     l2207:
  3333     04FF  3001               	movlw	1
  3334     0500                     u2375:
  3335     0500  1003               	clrc
  3336     0501  0CA8               	rrf	___aldiv@divisor+3,f
  3337     0502  0CA7               	rrf	___aldiv@divisor+2,f
  3338     0503  0CA6               	rrf	___aldiv@divisor+1,f
  3339     0504  0CA5               	rrf	___aldiv@divisor,f
  3340     0505  3EFF               	addlw	-1
  3341     0506  1D03               	skipz
  3342     0507  2D00               	goto	u2375
  3343     0508                     l2209:
  3344     0508  3001               	movlw	1
  3345     0509  02AE               	subwf	___aldiv@counter,f
  3346     050A  1D03               	btfss	3,2
  3347     050B  2D0D               	goto	u2381
  3348     050C  2D0E               	goto	u2380
  3349     050D                     u2381:
  3350     050D  2CD5               	goto	l2199
  3351     050E                     u2380:
  3352     050E                     l2211:
  3353     050E  082F               	movf	___aldiv@sign,w
  3354     050F  1903               	btfsc	3,2
  3355     0510  2D12               	goto	u2391
  3356     0511  2D13               	goto	u2390
  3357     0512                     u2391:
  3358     0512  2D1E               	goto	l2215
  3359     0513                     u2390:
  3360     0513                     l2213:
  3361     0513  09B0               	comf	___aldiv@quotient,f
  3362     0514  09B1               	comf	___aldiv@quotient+1,f
  3363     0515  09B2               	comf	___aldiv@quotient+2,f
  3364     0516  09B3               	comf	___aldiv@quotient+3,f
  3365     0517  0AB0               	incf	___aldiv@quotient,f
  3366     0518  1903               	skipnz
  3367     0519  0AB1               	incf	___aldiv@quotient+1,f
  3368     051A  1903               	skipnz
  3369     051B  0AB2               	incf	___aldiv@quotient+2,f
  3370     051C  1903               	skipnz
  3371     051D  0AB3               	incf	___aldiv@quotient+3,f
  3372     051E                     l2215:
  3373     051E  0833               	movf	___aldiv@quotient+3,w
  3374     051F  00A8               	movwf	?___aldiv+3
  3375     0520  0832               	movf	___aldiv@quotient+2,w
  3376     0521  00A7               	movwf	?___aldiv+2
  3377     0522  0831               	movf	___aldiv@quotient+1,w
  3378     0523  00A6               	movwf	?___aldiv+1
  3379     0524  0830               	movf	___aldiv@quotient,w
  3380     0525  00A5               	movwf	?___aldiv
  3381     0526                     l413:
  3382     0526  0008               	return
  3383     0527                     __end_of___aldiv:
  3384                           
  3385                           	psect	text15
  3386     0E74                     __ptext15:	
  3387 ;; *************** function _Timer0_Init *****************
  3388 ;; Defined at:
  3389 ;;		line 48 in file "main.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		None
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3403 ;;      Params:         0       0       0       0       0
  3404 ;;      Locals:         0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0
  3406 ;;      Totals:         0       0       0       0       0
  3407 ;;Total ram usage:        0 bytes
  3408 ;; Hardware stack levels used: 1
  3409 ;; Hardware stack levels required when called: 1
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417     0E74                     _Timer0_Init:	
  3418                           ;psect for function _Timer0_Init
  3419                           
  3420     0E74                     l1669:	
  3421                           ;incstack = 0
  3422                           ; Regs used in _Timer0_Init: []
  3423                           
  3424                           
  3425                           ;main.c: 49: 
  3426     0E74  3007               	movlw	7
  3427     0E75  1683               	bsf	3,5	;RP0=1, select bank1
  3428     0E76  1303               	bcf	3,6	;RP1=0, select bank1
  3429     0E77  0081               	movwf	1	;volatile
  3430                           
  3431                           ;main.c: 50: 
  3432     0E78  30D9               	movlw	217
  3433     0E79  1283               	bcf	3,5	;RP0=0, select bank0
  3434     0E7A  1303               	bcf	3,6	;RP1=0, select bank0
  3435     0E7B  0081               	movwf	1	;volatile
  3436                           
  3437                           ;main.c: 51: void __attribute__((picinterrupt(("")))) ISR(void) {
  3438     0E7C  168B               	bsf	11,5	;volatile
  3439                           
  3440                           ;main.c: 52:     if (T0IF) {
  3441     0E7D  178B               	bsf	11,7	;volatile
  3442     0E7E                     l72:
  3443     0E7E  0008               	return
  3444     0E7F                     __end_of_Timer0_Init:
  3445                           
  3446                           	psect	text16
  3447     0E8C                     __ptext16:	
  3448 ;; *************** function _TMR1_init *****************
  3449 ;; Defined at:
  3450 ;;		line 39 in file "main.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;		None
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;		None
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		None
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3464 ;;      Params:         0       0       0       0       0
  3465 ;;      Locals:         0       0       0       0       0
  3466 ;;      Temps:          0       0       0       0       0
  3467 ;;      Totals:         0       0       0       0       0
  3468 ;;Total ram usage:        0 bytes
  3469 ;; Hardware stack levels used: 1
  3470 ;; Hardware stack levels required when called: 1
  3471 ;; This function calls:
  3472 ;;		Nothing
  3473 ;; This function is called by:
  3474 ;;		_main
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478     0E8C                     _TMR1_init:	
  3479                           ;psect for function _TMR1_init
  3480                           
  3481     0E8C                     l1667:	
  3482                           ;incstack = 0
  3483                           ; Regs used in _TMR1_init: []
  3484                           
  3485                           
  3486                           ;main.c: 40: unsigned int ADC_read() {
  3487     0E8C  3031               	movlw	49
  3488     0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  3489     0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  3490     0E8F  0090               	movwf	16	;volatile
  3491                           
  3492                           ;main.c: 41:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  3493     0E90  300B               	movlw	11
  3494     0E91  008F               	movwf	15	;volatile
  3495                           
  3496                           ;main.c: 42:     GO_nDONE = 1;
  3497     0E92  30DC               	movlw	220
  3498     0E93  008E               	movwf	14	;volatile
  3499                           
  3500                           ;main.c: 43:     while (GO_nDONE);
  3501     0E94  1683               	bsf	3,5	;RP0=1, select bank1
  3502     0E95  1303               	bcf	3,6	;RP1=0, select bank1
  3503     0E96  140C               	bsf	12,0	;volatile
  3504                           
  3505                           ;main.c: 44:     return (ADRESH << 8) + ADRESL;
  3506     0E97  170B               	bsf	11,6	;volatile
  3507                           
  3508                           ;main.c: 45: }
  3509     0E98  178B               	bsf	11,7	;volatile
  3510     0E99                     l69:
  3511     0E99  0008               	return
  3512     0E9A                     __end_of_TMR1_init:
  3513                           
  3514                           	psect	text17
  3515     0EF1                     __ptext17:	
  3516 ;; *************** function _LCD_puts *****************
  3517 ;; Defined at:
  3518 ;;		line 128 in file "lcd.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  a               1    8[COMMON] PTR unsigned char 
  3521 ;;		 -> exec(6), 
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;  i               2    0[BANK0 ] int 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      void 
  3526 ;; Registers used:
  3527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3533 ;;      Params:         1       0       0       0       0
  3534 ;;      Locals:         0       2       0       0       0
  3535 ;;      Temps:          1       0       0       0       0
  3536 ;;      Totals:         2       2       0       0       0
  3537 ;;Total ram usage:        4 bytes
  3538 ;; Hardware stack levels used: 1
  3539 ;; Hardware stack levels required when called: 3
  3540 ;; This function calls:
  3541 ;;		_LCD_putc
  3542 ;; This function is called by:
  3543 ;;		_main
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547     0EF1                     _LCD_puts:	
  3548                           ;psect for function _LCD_puts
  3549                           
  3550     0EF1                     l2157:	
  3551                           ;incstack = 0
  3552                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3553                           
  3554                           
  3555                           ;lcd.c: 130:     for ( int i = 0; a[i] != '\0'; ++i ) {
  3556     0EF1  1283               	bcf	3,5	;RP0=0, select bank0
  3557     0EF2  1303               	bcf	3,6	;RP1=0, select bank0
  3558     0EF3  01A0               	clrf	LCD_puts@i
  3559     0EF4  01A1               	clrf	LCD_puts@i+1
  3560     0EF5  2F09               	goto	l2163
  3561     0EF6                     l2159:
  3562                           
  3563                           ;lcd.c: 131:         LCD_putc(a[i]);
  3564     0EF6  0820               	movf	LCD_puts@i,w
  3565     0EF7  0778               	addwf	LCD_puts@a,w
  3566     0EF8  00F9               	movwf	??_LCD_puts
  3567     0EF9  0879               	movf	??_LCD_puts,w
  3568     0EFA  0084               	movwf	4
  3569     0EFB  0800               	movf	0,w
  3570     0EFC  120A  118A  2527  120A  158A  	fcall	_LCD_putc
  3571     0F01                     l2161:
  3572                           
  3573                           ;lcd.c: 132:     }
  3574     0F01  3001               	movlw	1
  3575     0F02  1283               	bcf	3,5	;RP0=0, select bank0
  3576     0F03  1303               	bcf	3,6	;RP1=0, select bank0
  3577     0F04  07A0               	addwf	LCD_puts@i,f
  3578     0F05  1803               	skipnc
  3579     0F06  0AA1               	incf	LCD_puts@i+1,f
  3580     0F07  3000               	movlw	0
  3581     0F08  07A1               	addwf	LCD_puts@i+1,f
  3582     0F09                     l2163:
  3583     0F09  0820               	movf	LCD_puts@i,w
  3584     0F0A  0778               	addwf	LCD_puts@a,w
  3585     0F0B  00F9               	movwf	??_LCD_puts
  3586     0F0C  0879               	movf	??_LCD_puts,w
  3587     0F0D  0084               	movwf	4
  3588     0F0E  1383               	bcf	3,7	;select IRP bank0
  3589     0F0F  0800               	movf	0,w
  3590     0F10  1D03               	btfss	3,2
  3591     0F11  2F13               	goto	u2241
  3592     0F12  2F14               	goto	u2240
  3593     0F13                     u2241:
  3594     0F13  2EF6               	goto	l2159
  3595     0F14                     u2240:
  3596     0F14                     l246:
  3597     0F14  0008               	return
  3598     0F15                     __end_of_LCD_puts:
  3599                           
  3600                           	psect	text18
  3601     0FBA                     __ptext18:	
  3602 ;; *************** function _LCD_putrs *****************
  3603 ;; Defined at:
  3604 ;;		line 136 in file "lcd.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  a               2    8[COMMON] PTR const unsigned char 
  3607 ;;		 -> main@buffer(10), STR_3(6), STR_2(10), STR_1(10), 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  i               2    3[BANK0 ] int 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      void 
  3612 ;; Registers used:
  3613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3619 ;;      Params:         2       0       0       0       0
  3620 ;;      Locals:         0       2       0       0       0
  3621 ;;      Temps:          0       3       0       0       0
  3622 ;;      Totals:         2       5       0       0       0
  3623 ;;Total ram usage:        7 bytes
  3624 ;; Hardware stack levels used: 1
  3625 ;; Hardware stack levels required when called: 3
  3626 ;; This function calls:
  3627 ;;		_LCD_putc
  3628 ;; This function is called by:
  3629 ;;		_main
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633     0FBA                     _LCD_putrs:	
  3634                           ;psect for function _LCD_putrs
  3635                           
  3636     0FBA                     l2135:	
  3637                           ;incstack = 0
  3638                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3639                           
  3640                           
  3641                           ;lcd.c: 138:     for ( int i = 0; a[i] != '\0'; ++i ) {
  3642     0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  3643     0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  3644     0FBC  01A3               	clrf	LCD_putrs@i
  3645     0FBD  01A4               	clrf	LCD_putrs@i+1
  3646     0FBE  2FE3               	goto	l2141
  3647     0FBF                     l2137:
  3648                           
  3649                           ;lcd.c: 139:         LCD_putc(a[i]);
  3650     0FBF  0823               	movf	LCD_putrs@i,w
  3651     0FC0  0778               	addwf	LCD_putrs@a,w
  3652     0FC1  00A1               	movwf	??_LCD_putrs+1
  3653     0FC2  0879               	movf	LCD_putrs@a+1,w
  3654     0FC3  00A0               	movwf	??_LCD_putrs
  3655     0FC4  1803               	skipnc
  3656     0FC5  0AA0               	incf	??_LCD_putrs,f
  3657     0FC6  1FA3               	btfss	LCD_putrs@i,7
  3658     0FC7  2FC9               	goto	u2210
  3659     0FC8  03A0               	decf	??_LCD_putrs,f
  3660     0FC9                     u2210:
  3661     0FC9  1283               	bcf	3,5	;RP0=0, select bank0
  3662     0FCA  1303               	bcf	3,6	;RP1=0, select bank0
  3663     0FCB  0820               	movf	??_LCD_putrs,w
  3664     0FCC  00A2               	movwf	??_LCD_putrs+2
  3665     0FCD  0822               	movf	??_LCD_putrs+2,w
  3666     0FCE  00FF               	movwf	btemp+1
  3667     0FCF  0821               	movf	??_LCD_putrs+1,w
  3668     0FD0  0084               	movwf	4
  3669     0FD1  120A  158A  2000  120A  158A  	fcall	stringtab
  3670     0FD6  120A  118A  2527  120A  158A  	fcall	_LCD_putc
  3671     0FDB                     l2139:
  3672                           
  3673                           ;lcd.c: 140:     }
  3674     0FDB  3001               	movlw	1
  3675     0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  3676     0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  3677     0FDE  07A3               	addwf	LCD_putrs@i,f
  3678     0FDF  1803               	skipnc
  3679     0FE0  0AA4               	incf	LCD_putrs@i+1,f
  3680     0FE1  3000               	movlw	0
  3681     0FE2  07A4               	addwf	LCD_putrs@i+1,f
  3682     0FE3                     l2141:
  3683     0FE3  0823               	movf	LCD_putrs@i,w
  3684     0FE4  0778               	addwf	LCD_putrs@a,w
  3685     0FE5  00A1               	movwf	??_LCD_putrs+1
  3686     0FE6  0879               	movf	LCD_putrs@a+1,w
  3687     0FE7  00A0               	movwf	??_LCD_putrs
  3688     0FE8  1803               	skipnc
  3689     0FE9  0AA0               	incf	??_LCD_putrs,f
  3690     0FEA  1FA3               	btfss	LCD_putrs@i,7
  3691     0FEB  2FED               	goto	u2220
  3692     0FEC  03A0               	decf	??_LCD_putrs,f
  3693     0FED                     u2220:
  3694     0FED  1283               	bcf	3,5	;RP0=0, select bank0
  3695     0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  3696     0FEF  0820               	movf	??_LCD_putrs,w
  3697     0FF0  00A2               	movwf	??_LCD_putrs+2
  3698     0FF1  0822               	movf	??_LCD_putrs+2,w
  3699     0FF2  00FF               	movwf	btemp+1
  3700     0FF3  0821               	movf	??_LCD_putrs+1,w
  3701     0FF4  0084               	movwf	4
  3702     0FF5  120A  158A  2000  120A  158A  	fcall	stringtab
  3703     0FFA  3A00               	xorlw	0
  3704     0FFB  1D03               	skipz
  3705     0FFC  2FFE               	goto	u2231
  3706     0FFD  2FFF               	goto	u2230
  3707     0FFE                     u2231:
  3708     0FFE  2FBF               	goto	l2137
  3709     0FFF                     u2230:
  3710     0FFF                     l252:
  3711     0FFF  0008               	return
  3712     1000                     __end_of_LCD_putrs:
  3713                           
  3714                           	psect	text19
  3715     0527                     __ptext19:	
  3716 ;; *************** function _LCD_putc *****************
  3717 ;; Defined at:
  3718 ;;		line 111 in file "lcd.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  c               1    wreg     unsigned char 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  c               1    7[COMMON] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3732 ;;      Params:         0       0       0       0       0
  3733 ;;      Locals:         1       0       0       0       0
  3734 ;;      Temps:          2       0       0       0       0
  3735 ;;      Totals:         3       0       0       0       0
  3736 ;;Total ram usage:        3 bytes
  3737 ;; Hardware stack levels used: 1
  3738 ;; Hardware stack levels required when called: 2
  3739 ;; This function calls:
  3740 ;;		_LCD_Out
  3741 ;; This function is called by:
  3742 ;;		_LCD_puts
  3743 ;;		_LCD_putrs
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747     0527                     _LCD_putc:	
  3748                           ;psect for function _LCD_putc
  3749                           
  3750                           
  3751                           ;incstack = 0
  3752                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3753                           ;LCD_putc@c stored from wreg
  3754     0527  00F7               	movwf	LCD_putc@c
  3755     0528                     l2063:
  3756                           
  3757                           ;lcd.c: 113:    *(lcd.PORT) |= 1 << lcd.RS;
  3758     0528  1683               	bsf	3,5	;RP0=1, select bank1
  3759     0529  1303               	bcf	3,6	;RP1=0, select bank1
  3760     052A  085F               	movf	_lcd^(0+128),w
  3761     052B  0084               	movwf	4
  3762     052C  1783               	bsf	3,7
  3763     052D  1C60               	btfss	(_lcd+1)^(0+128),0
  3764     052E  1383               	bcf	3,7
  3765     052F  3001               	movlw	1
  3766     0530  00F5               	movwf	??_LCD_putc
  3767     0531  0861               	movf	(_lcd^(0+128)+2),w
  3768     0532  3907               	andlw	7
  3769     0533  3E01               	addlw	1
  3770     0534  2D37               	goto	u2104
  3771     0535                     u2105:
  3772     0535  1003               	clrc
  3773     0536  0DF5               	rlf	??_LCD_putc,f
  3774     0537                     u2104:
  3775     0537  3EFF               	addlw	-1
  3776     0538  1D03               	skipz
  3777     0539  2D35               	goto	u2105
  3778     053A  0875               	movf	??_LCD_putc,w
  3779     053B  0480               	iorwf	0,f
  3780     053C                     l2065:
  3781                           
  3782                           ;lcd.c: 114:     LCD_Out((c & 0xF0) >> 4);
  3783     053C  0877               	movf	LCD_putc@c,w
  3784     053D  00F5               	movwf	??_LCD_putc
  3785     053E  3004               	movlw	4
  3786     053F                     u2115:
  3787     053F  1003               	clrc
  3788     0540  0CF5               	rrf	??_LCD_putc,f
  3789     0541  3EFF               	addlw	-1
  3790     0542  1D03               	skipz
  3791     0543  2D3F               	goto	u2115
  3792     0544  0875               	movf	??_LCD_putc,w
  3793     0545  390F               	andlw	15
  3794     0546  120A  118A  21D6  120A  118A  	fcall	_LCD_Out
  3795     054B                     l2067:
  3796                           
  3797                           ;lcd.c: 116:     *(lcd.PORT) |= 1 << lcd.EN;
  3798     054B  1683               	bsf	3,5	;RP0=1, select bank1
  3799     054C  1303               	bcf	3,6	;RP1=0, select bank1
  3800     054D  085F               	movf	_lcd^(0+128),w
  3801     054E  0084               	movwf	4
  3802     054F  1783               	bsf	3,7
  3803     0550  1C60               	btfss	(_lcd+1)^(0+128),0
  3804     0551  1383               	bcf	3,7
  3805     0552  3001               	movlw	1
  3806     0553  00F5               	movwf	??_LCD_putc
  3807     0554  0C61               	rrf	(_lcd^(0+128)+2),w
  3808     0555  00F6               	movwf	??_LCD_putc+1
  3809     0556  0CF6               	rrf	??_LCD_putc+1,f
  3810     0557  0C76               	rrf	??_LCD_putc+1,w
  3811     0558  3907               	andlw	7
  3812     0559  3E01               	addlw	1
  3813     055A  2D5D               	goto	u2124
  3814     055B                     u2125:
  3815     055B  1003               	clrc
  3816     055C  0DF5               	rlf	??_LCD_putc,f
  3817     055D                     u2124:
  3818     055D  3EFF               	addlw	-1
  3819     055E  1D03               	skipz
  3820     055F  2D5B               	goto	u2125
  3821     0560  0875               	movf	??_LCD_putc,w
  3822     0561  0480               	iorwf	0,f
  3823     0562                     l2069:
  3824                           
  3825                           ;lcd.c: 117:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3826     0562  300D               	movlw	13
  3827     0563  00F5               	movwf	??_LCD_putc
  3828     0564                     u2417:
  3829     0564  0BF5               	decfsz	??_LCD_putc,f
  3830     0565  2D64               	goto	u2417
  3831     0566                     l2071:
  3832                           
  3833                           ;lcd.c: 118:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3834     0566  1683               	bsf	3,5	;RP0=1, select bank1
  3835     0567  1303               	bcf	3,6	;RP1=0, select bank1
  3836     0568  085F               	movf	_lcd^(0+128),w
  3837     0569  0084               	movwf	4
  3838     056A  1783               	bsf	3,7
  3839     056B  1C60               	btfss	(_lcd+1)^(0+128),0
  3840     056C  1383               	bcf	3,7
  3841     056D  3001               	movlw	1
  3842     056E  00F5               	movwf	??_LCD_putc
  3843     056F  0C61               	rrf	(_lcd^(0+128)+2),w
  3844     0570  00F6               	movwf	??_LCD_putc+1
  3845     0571  0CF6               	rrf	??_LCD_putc+1,f
  3846     0572  0C76               	rrf	??_LCD_putc+1,w
  3847     0573  3907               	andlw	7
  3848     0574  3E01               	addlw	1
  3849     0575  2D78               	goto	u2134
  3850     0576                     u2135:
  3851     0576  1003               	clrc
  3852     0577  0DF5               	rlf	??_LCD_putc,f
  3853     0578                     u2134:
  3854     0578  3EFF               	addlw	-1
  3855     0579  1D03               	skipz
  3856     057A  2D76               	goto	u2135
  3857     057B  0875               	movf	??_LCD_putc,w
  3858     057C  3AFF               	xorlw	255
  3859     057D  0580               	andwf	0,f
  3860     057E                     l2073:
  3861                           
  3862                           ;lcd.c: 120:     LCD_Out(c & 0x0F);
  3863     057E  0877               	movf	LCD_putc@c,w
  3864     057F  390F               	andlw	15
  3865     0580  120A  118A  21D6  120A  118A  	fcall	_LCD_Out
  3866     0585                     l2075:
  3867                           
  3868                           ;lcd.c: 122:     *(lcd.PORT) |= 1 << lcd.EN;
  3869     0585  1683               	bsf	3,5	;RP0=1, select bank1
  3870     0586  1303               	bcf	3,6	;RP1=0, select bank1
  3871     0587  085F               	movf	_lcd^(0+128),w
  3872     0588  0084               	movwf	4
  3873     0589  1783               	bsf	3,7
  3874     058A  1C60               	btfss	(_lcd+1)^(0+128),0
  3875     058B  1383               	bcf	3,7
  3876     058C  3001               	movlw	1
  3877     058D  00F5               	movwf	??_LCD_putc
  3878     058E  0C61               	rrf	(_lcd^(0+128)+2),w
  3879     058F  00F6               	movwf	??_LCD_putc+1
  3880     0590  0CF6               	rrf	??_LCD_putc+1,f
  3881     0591  0C76               	rrf	??_LCD_putc+1,w
  3882     0592  3907               	andlw	7
  3883     0593  3E01               	addlw	1
  3884     0594  2D97               	goto	u2144
  3885     0595                     u2145:
  3886     0595  1003               	clrc
  3887     0596  0DF5               	rlf	??_LCD_putc,f
  3888     0597                     u2144:
  3889     0597  3EFF               	addlw	-1
  3890     0598  1D03               	skipz
  3891     0599  2D95               	goto	u2145
  3892     059A  0875               	movf	??_LCD_putc,w
  3893     059B  0480               	iorwf	0,f
  3894                           
  3895                           ;lcd.c: 123:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3896     059C  300D               	movlw	13
  3897     059D  00F5               	movwf	??_LCD_putc
  3898     059E                     u2427:
  3899     059E  0BF5               	decfsz	??_LCD_putc,f
  3900     059F  2D9E               	goto	u2427
  3901     05A0                     l2077:
  3902                           
  3903                           ;lcd.c: 124:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3904     05A0  1683               	bsf	3,5	;RP0=1, select bank1
  3905     05A1  1303               	bcf	3,6	;RP1=0, select bank1
  3906     05A2  085F               	movf	_lcd^(0+128),w
  3907     05A3  0084               	movwf	4
  3908     05A4  1783               	bsf	3,7
  3909     05A5  1C60               	btfss	(_lcd+1)^(0+128),0
  3910     05A6  1383               	bcf	3,7
  3911     05A7  3001               	movlw	1
  3912     05A8  00F5               	movwf	??_LCD_putc
  3913     05A9  0C61               	rrf	(_lcd^(0+128)+2),w
  3914     05AA  00F6               	movwf	??_LCD_putc+1
  3915     05AB  0CF6               	rrf	??_LCD_putc+1,f
  3916     05AC  0C76               	rrf	??_LCD_putc+1,w
  3917     05AD  3907               	andlw	7
  3918     05AE  3E01               	addlw	1
  3919     05AF  2DB2               	goto	u2154
  3920     05B0                     u2155:
  3921     05B0  1003               	clrc
  3922     05B1  0DF5               	rlf	??_LCD_putc,f
  3923     05B2                     u2154:
  3924     05B2  3EFF               	addlw	-1
  3925     05B3  1D03               	skipz
  3926     05B4  2DB0               	goto	u2155
  3927     05B5  0875               	movf	??_LCD_putc,w
  3928     05B6  3AFF               	xorlw	255
  3929     05B7  0580               	andwf	0,f
  3930     05B8                     l240:
  3931     05B8  0008               	return
  3932     05B9                     __end_of_LCD_putc:
  3933                           
  3934                           	psect	text20
  3935     0342                     __ptext20:	
  3936 ;; *************** function _LCD_Init *****************
  3937 ;; Defined at:
  3938 ;;		line 53 in file "lcd.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  display         5    0[BANK0 ] struct .
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  cmd             1    5[BANK0 ] unsigned char 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      _Bool 
  3945 ;; Registers used:
  3946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3952 ;;      Params:         0       5       0       0       0
  3953 ;;      Locals:         0       1       0       0       0
  3954 ;;      Temps:          2       0       0       0       0
  3955 ;;      Totals:         2       6       0       0       0
  3956 ;;Total ram usage:        8 bytes
  3957 ;; Hardware stack levels used: 1
  3958 ;; Hardware stack levels required when called: 3
  3959 ;; This function calls:
  3960 ;;		_LCD_Write
  3961 ;; This function is called by:
  3962 ;;		_main
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966     0342                     _LCD_Init:	
  3967                           ;psect for function _LCD_Init
  3968                           
  3969     0342                     l2089:	
  3970                           ;incstack = 0
  3971                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3972                           
  3973                           
  3974                           ;lcd.c: 55:     lcd = display;
  3975     0342  30DF               	movlw	_lcd& (0+255)
  3976     0343  0084               	movwf	4
  3977     0344  1283               	bcf	3,5	;RP0=0, select bank0
  3978     0345  1303               	bcf	3,6	;RP1=0, select bank0
  3979     0346  0820               	movf	LCD_Init@display,w
  3980     0347  1383               	bcf	3,7	;select IRP bank1
  3981     0348  0080               	movwf	0
  3982     0349  0A84               	incf	4,f
  3983     034A  0821               	movf	LCD_Init@display+1,w
  3984     034B  0080               	movwf	0
  3985     034C  0A84               	incf	4,f
  3986     034D  0822               	movf	LCD_Init@display+2,w
  3987     034E  0080               	movwf	0
  3988     034F  0A84               	incf	4,f
  3989     0350  0823               	movf	LCD_Init@display+3,w
  3990     0351  0080               	movwf	0
  3991     0352  0A84               	incf	4,f
  3992     0353  0824               	movf	LCD_Init@display+4,w
  3993     0354  0080               	movwf	0
  3994     0355                     l2091:
  3995                           
  3996                           ;lcd.c: 64:     if ( lcd.PORT == &PORTA ) {
  3997     0355  3000               	movlw	0
  3998     0356  1683               	bsf	3,5	;RP0=1, select bank1
  3999     0357  1303               	bcf	3,6	;RP1=0, select bank1
  4000     0358  0660               	xorwf	(_lcd+1)^(0+128),w
  4001     0359  1D03               	skipz
  4002     035A  2B5D               	goto	u2175
  4003     035B  3005               	movlw	5
  4004     035C  065F               	xorwf	_lcd^(0+128),w
  4005     035D                     u2175:
  4006     035D  1D03               	skipz
  4007     035E  2B60               	goto	u2171
  4008     035F  2B61               	goto	u2170
  4009     0360                     u2171:
  4010     0360  2B63               	goto	l2095
  4011     0361                     u2170:
  4012     0361                     l2093:
  4013                           
  4014                           ;lcd.c: 65:         TRISA = 0x00;
  4015     0361  0185               	clrf	5	;volatile
  4016                           
  4017                           ;lcd.c: 66:     }
  4018     0362  2B7A               	goto	l2103
  4019     0363                     l2095:
  4020     0363  3000               	movlw	0
  4021     0364  0660               	xorwf	(_lcd+1)^(0+128),w
  4022     0365  1D03               	skipz
  4023     0366  2B69               	goto	u2185
  4024     0367  3006               	movlw	6
  4025     0368  065F               	xorwf	_lcd^(0+128),w
  4026     0369                     u2185:
  4027     0369  1D03               	skipz
  4028     036A  2B6C               	goto	u2181
  4029     036B  2B6D               	goto	u2180
  4030     036C                     u2181:
  4031     036C  2B6F               	goto	l2099
  4032     036D                     u2180:
  4033     036D                     l2097:
  4034                           
  4035                           ;lcd.c: 68:         TRISB = 0x00;
  4036     036D  0186               	clrf	6	;volatile
  4037                           
  4038                           ;lcd.c: 69:     }
  4039     036E  2B7A               	goto	l2103
  4040     036F                     l2099:
  4041     036F  3000               	movlw	0
  4042     0370  0660               	xorwf	(_lcd+1)^(0+128),w
  4043     0371  1D03               	skipz
  4044     0372  2B75               	goto	u2195
  4045     0373  3007               	movlw	7
  4046     0374  065F               	xorwf	_lcd^(0+128),w
  4047     0375                     u2195:
  4048     0375  1D03               	skipz
  4049     0376  2B78               	goto	u2191
  4050     0377  2B79               	goto	u2190
  4051     0378                     u2191:
  4052     0378  2BED               	goto	l224
  4053     0379                     u2190:
  4054     0379                     l2101:
  4055                           
  4056                           ;lcd.c: 71:         TRISC = 0x00;
  4057     0379  0187               	clrf	7	;volatile
  4058     037A                     l2103:	
  4059                           ;lcd.c: 72:     }
  4060                           
  4061                           
  4062                           ;lcd.c: 86:     _delay((unsigned long)((20)*(4000000/4000.0)));
  4063     037A  301A               	movlw	26
  4064     037B  00F9               	movwf	??_LCD_Init+1
  4065     037C  30F8               	movlw	248
  4066     037D  00F8               	movwf	??_LCD_Init
  4067     037E                     u2437:
  4068     037E  0BF8               	decfsz	??_LCD_Init,f
  4069     037F  2B7E               	goto	u2437
  4070     0380  0BF9               	decfsz	??_LCD_Init+1,f
  4071     0381  2B7E               	goto	u2437
  4072     0382  0000               	nop
  4073     0383                     l2105:
  4074                           
  4075                           ;lcd.c: 89:     LCD_Write(0x03);
  4076     0383  3003               	movlw	3
  4077     0384  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4078     0389                     l2107:
  4079                           
  4080                           ;lcd.c: 90:     _delay((unsigned long)((5)*(4000000/4000.0)));
  4081     0389  3007               	movlw	7
  4082     038A  00F9               	movwf	??_LCD_Init+1
  4083     038B  307D               	movlw	125
  4084     038C  00F8               	movwf	??_LCD_Init
  4085     038D                     u2447:
  4086     038D  0BF8               	decfsz	??_LCD_Init,f
  4087     038E  2B8D               	goto	u2447
  4088     038F  0BF9               	decfsz	??_LCD_Init+1,f
  4089     0390  2B8D               	goto	u2447
  4090                           
  4091                           ;lcd.c: 91:     LCD_Write(0x03);
  4092     0391  3003               	movlw	3
  4093     0392  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4094     0397                     l2109:
  4095                           
  4096                           ;lcd.c: 92:     _delay((unsigned long)((16)*(4000000/4000.0)));
  4097     0397  3015               	movlw	21
  4098     0398  00F9               	movwf	??_LCD_Init+1
  4099     0399  30C6               	movlw	198
  4100     039A  00F8               	movwf	??_LCD_Init
  4101     039B                     u2457:
  4102     039B  0BF8               	decfsz	??_LCD_Init,f
  4103     039C  2B9B               	goto	u2457
  4104     039D  0BF9               	decfsz	??_LCD_Init+1,f
  4105     039E  2B9B               	goto	u2457
  4106     039F  0000               	nop
  4107     03A0                     l2111:
  4108                           
  4109                           ;lcd.c: 93:     LCD_Write(0x03);
  4110     03A0  3003               	movlw	3
  4111     03A1  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4112     03A6                     l2113:
  4113                           
  4114                           ;lcd.c: 96:     LCD_Write(0x02);
  4115     03A6  3002               	movlw	2
  4116     03A7  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4117     03AC                     l2115:
  4118     03AC  3002               	movlw	2
  4119     03AD  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4120     03B2                     l2117:
  4121     03B2  3008               	movlw	8
  4122     03B3  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4123     03B8                     l2119:
  4124     03B8  3000               	movlw	0
  4125     03B9  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4126     03BE                     l2121:
  4127     03BE  3006               	movlw	6
  4128     03BF  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4129     03C4                     l2123:
  4130     03C4  3008               	movlw	8
  4131     03C5  1283               	bcf	3,5	;RP0=0, select bank0
  4132     03C6  1303               	bcf	3,6	;RP1=0, select bank0
  4133     03C7  00A5               	movwf	LCD_Init@cmd
  4134     03C8                     l2125:
  4135     03C8  1525               	bsf	LCD_Init@cmd,2
  4136     03C9                     l2131:
  4137     03C9  0825               	movf	LCD_Init@cmd,w
  4138     03CA  00F8               	movwf	??_LCD_Init
  4139     03CB  3004               	movlw	4
  4140     03CC                     u2205:
  4141     03CC  1003               	clrc
  4142     03CD  0CF8               	rrf	??_LCD_Init,f
  4143     03CE  3EFF               	addlw	-1
  4144     03CF  1D03               	skipz
  4145     03D0  2BCC               	goto	u2205
  4146     03D1  0878               	movf	??_LCD_Init,w
  4147     03D2  390F               	andlw	15
  4148     03D3  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4149     03D8  1283               	bcf	3,5	;RP0=0, select bank0
  4150     03D9  1303               	bcf	3,6	;RP1=0, select bank0
  4151     03DA  0825               	movf	LCD_Init@cmd,w
  4152     03DB  390F               	andlw	15
  4153     03DC  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4154     03E1                     l236:	
  4155                           ;lcd.c: 106:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  4156                           
  4157     03E1  3000               	movlw	0
  4158     03E2  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4159     03E7  3001               	movlw	1
  4160     03E8  120A  118A  26E7  120A  118A  	fcall	_LCD_Write
  4161     03ED                     l224:
  4162     03ED  0008               	return
  4163     03EE                     __end_of_LCD_Init:
  4164                           
  4165                           	psect	text21
  4166     06E7                     __ptext21:	
  4167 ;; *************** function _LCD_Write *****************
  4168 ;; Defined at:
  4169 ;;		line 42 in file "lcd.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  c               1    wreg     unsigned char 
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;  c               1    7[COMMON] unsigned char 
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  1    wreg      void 
  4176 ;; Registers used:
  4177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4183 ;;      Params:         0       0       0       0       0
  4184 ;;      Locals:         1       0       0       0       0
  4185 ;;      Temps:          2       0       0       0       0
  4186 ;;      Totals:         3       0       0       0       0
  4187 ;;Total ram usage:        3 bytes
  4188 ;; Hardware stack levels used: 1
  4189 ;; Hardware stack levels required when called: 2
  4190 ;; This function calls:
  4191 ;;		_LCD_Out
  4192 ;; This function is called by:
  4193 ;;		_main
  4194 ;;		_LCD_Init
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198     06E7                     _LCD_Write:	
  4199                           ;psect for function _LCD_Write
  4200                           
  4201                           
  4202                           ;incstack = 0
  4203                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4204                           ;LCD_Write@c stored from wreg
  4205     06E7  00F7               	movwf	LCD_Write@c
  4206     06E8                     l2053:
  4207                           
  4208                           ;lcd.c: 44:     *(lcd.PORT) &= ~(1 << lcd.RS);
  4209     06E8  1683               	bsf	3,5	;RP0=1, select bank1
  4210     06E9  1303               	bcf	3,6	;RP1=0, select bank1
  4211     06EA  085F               	movf	_lcd^(0+128),w
  4212     06EB  0084               	movwf	4
  4213     06EC  1783               	bsf	3,7
  4214     06ED  1C60               	btfss	(_lcd+1)^(0+128),0
  4215     06EE  1383               	bcf	3,7
  4216     06EF  3001               	movlw	1
  4217     06F0  00F5               	movwf	??_LCD_Write
  4218     06F1  0861               	movf	(_lcd^(0+128)+2),w
  4219     06F2  3907               	andlw	7
  4220     06F3  3E01               	addlw	1
  4221     06F4  2EF7               	goto	u2074
  4222     06F5                     u2075:
  4223     06F5  1003               	clrc
  4224     06F6  0DF5               	rlf	??_LCD_Write,f
  4225     06F7                     u2074:
  4226     06F7  3EFF               	addlw	-1
  4227     06F8  1D03               	skipz
  4228     06F9  2EF5               	goto	u2075
  4229     06FA  0875               	movf	??_LCD_Write,w
  4230     06FB  3AFF               	xorlw	255
  4231     06FC  0580               	andwf	0,f
  4232     06FD                     l2055:
  4233                           
  4234                           ;lcd.c: 45:     LCD_Out(c);
  4235     06FD  0877               	movf	LCD_Write@c,w
  4236     06FE  120A  118A  21D6  120A  118A  	fcall	_LCD_Out
  4237     0703                     l2057:
  4238                           
  4239                           ;lcd.c: 47:     *(lcd.PORT) |= 1 << lcd.EN;
  4240     0703  1683               	bsf	3,5	;RP0=1, select bank1
  4241     0704  1303               	bcf	3,6	;RP1=0, select bank1
  4242     0705  085F               	movf	_lcd^(0+128),w
  4243     0706  0084               	movwf	4
  4244     0707  1783               	bsf	3,7
  4245     0708  1C60               	btfss	(_lcd+1)^(0+128),0
  4246     0709  1383               	bcf	3,7
  4247     070A  3001               	movlw	1
  4248     070B  00F5               	movwf	??_LCD_Write
  4249     070C  0C61               	rrf	(_lcd^(0+128)+2),w
  4250     070D  00F6               	movwf	??_LCD_Write+1
  4251     070E  0CF6               	rrf	??_LCD_Write+1,f
  4252     070F  0C76               	rrf	??_LCD_Write+1,w
  4253     0710  3907               	andlw	7
  4254     0711  3E01               	addlw	1
  4255     0712  2F15               	goto	u2084
  4256     0713                     u2085:
  4257     0713  1003               	clrc
  4258     0714  0DF5               	rlf	??_LCD_Write,f
  4259     0715                     u2084:
  4260     0715  3EFF               	addlw	-1
  4261     0716  1D03               	skipz
  4262     0717  2F13               	goto	u2085
  4263     0718  0875               	movf	??_LCD_Write,w
  4264     0719  0480               	iorwf	0,f
  4265     071A                     l2059:
  4266                           
  4267                           ;lcd.c: 48:     _delay((unsigned long)((4)*(4000000/4000.0)));
  4268     071A  3006               	movlw	6
  4269     071B  00F6               	movwf	??_LCD_Write+1
  4270     071C  3030               	movlw	48
  4271     071D  00F5               	movwf	??_LCD_Write
  4272     071E                     u2467:
  4273     071E  0BF5               	decfsz	??_LCD_Write,f
  4274     071F  2F1E               	goto	u2467
  4275     0720  0BF6               	decfsz	??_LCD_Write+1,f
  4276     0721  2F1E               	goto	u2467
  4277     0722  0000               	nop
  4278     0723                     l2061:
  4279                           
  4280                           ;lcd.c: 49:     *(lcd.PORT) &= ~(1 << lcd.EN);
  4281     0723  1683               	bsf	3,5	;RP0=1, select bank1
  4282     0724  1303               	bcf	3,6	;RP1=0, select bank1
  4283     0725  085F               	movf	_lcd^(0+128),w
  4284     0726  0084               	movwf	4
  4285     0727  1783               	bsf	3,7
  4286     0728  1C60               	btfss	(_lcd+1)^(0+128),0
  4287     0729  1383               	bcf	3,7
  4288     072A  3001               	movlw	1
  4289     072B  00F5               	movwf	??_LCD_Write
  4290     072C  0C61               	rrf	(_lcd^(0+128)+2),w
  4291     072D  00F6               	movwf	??_LCD_Write+1
  4292     072E  0CF6               	rrf	??_LCD_Write+1,f
  4293     072F  0C76               	rrf	??_LCD_Write+1,w
  4294     0730  3907               	andlw	7
  4295     0731  3E01               	addlw	1
  4296     0732  2F35               	goto	u2094
  4297     0733                     u2095:
  4298     0733  1003               	clrc
  4299     0734  0DF5               	rlf	??_LCD_Write,f
  4300     0735                     u2094:
  4301     0735  3EFF               	addlw	-1
  4302     0736  1D03               	skipz
  4303     0737  2F33               	goto	u2095
  4304     0738  0875               	movf	??_LCD_Write,w
  4305     0739  3AFF               	xorlw	255
  4306     073A  0580               	andwf	0,f
  4307     073B                     l215:
  4308     073B  0008               	return
  4309     073C                     __end_of_LCD_Write:
  4310                           
  4311                           	psect	text22
  4312     01D6                     __ptext22:	
  4313 ;; *************** function _LCD_Out *****************
  4314 ;; Defined at:
  4315 ;;		line 10 in file "lcd.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  c               1    wreg     unsigned char 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  c               1    4[COMMON] unsigned char 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4329 ;;      Params:         0       0       0       0       0
  4330 ;;      Locals:         1       0       0       0       0
  4331 ;;      Temps:          2       0       0       0       0
  4332 ;;      Totals:         3       0       0       0       0
  4333 ;;Total ram usage:        3 bytes
  4334 ;; Hardware stack levels used: 1
  4335 ;; Hardware stack levels required when called: 1
  4336 ;; This function calls:
  4337 ;;		Nothing
  4338 ;; This function is called by:
  4339 ;;		_LCD_Write
  4340 ;;		_LCD_putc
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344     01D6                     _LCD_Out:	
  4345                           ;psect for function _LCD_Out
  4346                           
  4347                           
  4348                           ;incstack = 0
  4349                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  4350                           ;LCD_Out@c stored from wreg
  4351     01D6  00F4               	movwf	LCD_Out@c
  4352     01D7                     l1977:
  4353                           
  4354                           ;lcd.c: 12:     if ( c & 1 ){
  4355     01D7  1C74               	btfss	LCD_Out@c,0
  4356     01D8  29DA               	goto	u1911
  4357     01D9  29DB               	goto	u1910
  4358     01DA                     u1911:
  4359     01DA  29F0               	goto	l1981
  4360     01DB                     u1910:
  4361     01DB                     l1979:
  4362                           
  4363                           ;lcd.c: 13:         *(lcd.PORT) |= 1 << lcd.D4;
  4364     01DB  1683               	bsf	3,5	;RP0=1, select bank1
  4365     01DC  1303               	bcf	3,6	;RP1=0, select bank1
  4366     01DD  085F               	movf	_lcd^(0+128),w
  4367     01DE  0084               	movwf	4
  4368     01DF  1783               	bsf	3,7
  4369     01E0  1C60               	btfss	(_lcd+1)^(0+128),0
  4370     01E1  1383               	bcf	3,7
  4371     01E2  3001               	movlw	1
  4372     01E3  00F2               	movwf	??_LCD_Out
  4373     01E4  0862               	movf	(_lcd^(0+128)+3),w
  4374     01E5  3907               	andlw	7
  4375     01E6  3E01               	addlw	1
  4376     01E7  29EA               	goto	u1924
  4377     01E8                     u1925:
  4378     01E8  1003               	clrc
  4379     01E9  0DF2               	rlf	??_LCD_Out,f
  4380     01EA                     u1924:
  4381     01EA  3EFF               	addlw	-1
  4382     01EB  1D03               	skipz
  4383     01EC  29E8               	goto	u1925
  4384     01ED  0872               	movf	??_LCD_Out,w
  4385     01EE  0480               	iorwf	0,f
  4386                           
  4387                           ;lcd.c: 14:     }
  4388     01EF  2A05               	goto	l1983
  4389     01F0                     l1981:
  4390                           
  4391                           ;lcd.c: 16:          *(lcd.PORT) &= ~(1 << lcd.D4);
  4392     01F0  1683               	bsf	3,5	;RP0=1, select bank1
  4393     01F1  1303               	bcf	3,6	;RP1=0, select bank1
  4394     01F2  085F               	movf	_lcd^(0+128),w
  4395     01F3  0084               	movwf	4
  4396     01F4  1783               	bsf	3,7
  4397     01F5  1C60               	btfss	(_lcd+1)^(0+128),0
  4398     01F6  1383               	bcf	3,7
  4399     01F7  3001               	movlw	1
  4400     01F8  00F2               	movwf	??_LCD_Out
  4401     01F9  0862               	movf	(_lcd^(0+128)+3),w
  4402     01FA  3907               	andlw	7
  4403     01FB  3E01               	addlw	1
  4404     01FC  29FF               	goto	u1934
  4405     01FD                     u1935:
  4406     01FD  1003               	clrc
  4407     01FE  0DF2               	rlf	??_LCD_Out,f
  4408     01FF                     u1934:
  4409     01FF  3EFF               	addlw	-1
  4410     0200  1D03               	skipz
  4411     0201  29FD               	goto	u1935
  4412     0202  0872               	movf	??_LCD_Out,w
  4413     0203  3AFF               	xorlw	255
  4414     0204  0580               	andwf	0,f
  4415     0205                     l1983:
  4416                           
  4417                           ;lcd.c: 19:     if ( c & 2 ) {
  4418     0205  1CF4               	btfss	LCD_Out@c,1
  4419     0206  2A08               	goto	u1941
  4420     0207  2A09               	goto	u1940
  4421     0208                     u1941:
  4422     0208  2A1F               	goto	l1987
  4423     0209                     u1940:
  4424     0209                     l1985:
  4425                           
  4426                           ;lcd.c: 20:         *(lcd.PORT) |= 1 << lcd.D5;
  4427     0209  085F               	movf	_lcd^(0+128),w
  4428     020A  0084               	movwf	4
  4429     020B  1783               	bsf	3,7
  4430     020C  1C60               	btfss	(_lcd+1)^(0+128),0
  4431     020D  1383               	bcf	3,7
  4432     020E  3001               	movlw	1
  4433     020F  00F2               	movwf	??_LCD_Out
  4434     0210  0C62               	rrf	(_lcd^(0+128)+3),w
  4435     0211  00F3               	movwf	??_LCD_Out+1
  4436     0212  0CF3               	rrf	??_LCD_Out+1,f
  4437     0213  0C73               	rrf	??_LCD_Out+1,w
  4438     0214  3907               	andlw	7
  4439     0215  3E01               	addlw	1
  4440     0216  2A19               	goto	u1954
  4441     0217                     u1955:
  4442     0217  1003               	clrc
  4443     0218  0DF2               	rlf	??_LCD_Out,f
  4444     0219                     u1954:
  4445     0219  3EFF               	addlw	-1
  4446     021A  1D03               	skipz
  4447     021B  2A17               	goto	u1955
  4448     021C  0872               	movf	??_LCD_Out,w
  4449     021D  0480               	iorwf	0,f
  4450                           
  4451                           ;lcd.c: 21:     }
  4452     021E  2A35               	goto	l1989
  4453     021F                     l1987:
  4454                           
  4455                           ;lcd.c: 23:         *(lcd.PORT) &= ~(1 << lcd.D5);
  4456     021F  085F               	movf	_lcd^(0+128),w
  4457     0220  0084               	movwf	4
  4458     0221  1783               	bsf	3,7
  4459     0222  1C60               	btfss	(_lcd+1)^(0+128),0
  4460     0223  1383               	bcf	3,7
  4461     0224  3001               	movlw	1
  4462     0225  00F2               	movwf	??_LCD_Out
  4463     0226  0C62               	rrf	(_lcd^(0+128)+3),w
  4464     0227  00F3               	movwf	??_LCD_Out+1
  4465     0228  0CF3               	rrf	??_LCD_Out+1,f
  4466     0229  0C73               	rrf	??_LCD_Out+1,w
  4467     022A  3907               	andlw	7
  4468     022B  3E01               	addlw	1
  4469     022C  2A2F               	goto	u1964
  4470     022D                     u1965:
  4471     022D  1003               	clrc
  4472     022E  0DF2               	rlf	??_LCD_Out,f
  4473     022F                     u1964:
  4474     022F  3EFF               	addlw	-1
  4475     0230  1D03               	skipz
  4476     0231  2A2D               	goto	u1965
  4477     0232  0872               	movf	??_LCD_Out,w
  4478     0233  3AFF               	xorlw	255
  4479     0234  0580               	andwf	0,f
  4480     0235                     l1989:
  4481                           
  4482                           ;lcd.c: 26:     if ( c & 4 ) {
  4483     0235  1D74               	btfss	LCD_Out@c,2
  4484     0236  2A38               	goto	u1971
  4485     0237  2A39               	goto	u1970
  4486     0238                     u1971:
  4487     0238  2A4C               	goto	l1993
  4488     0239                     u1970:
  4489     0239                     l1991:
  4490                           
  4491                           ;lcd.c: 27:         *(lcd.PORT) |= 1 << lcd.D6;
  4492     0239  085F               	movf	_lcd^(0+128),w
  4493     023A  0084               	movwf	4
  4494     023B  1783               	bsf	3,7
  4495     023C  1C60               	btfss	(_lcd+1)^(0+128),0
  4496     023D  1383               	bcf	3,7
  4497     023E  3001               	movlw	1
  4498     023F  00F2               	movwf	??_LCD_Out
  4499     0240  0863               	movf	(_lcd^(0+128)+4),w
  4500     0241  3907               	andlw	7
  4501     0242  3E01               	addlw	1
  4502     0243  2A46               	goto	u1984
  4503     0244                     u1985:
  4504     0244  1003               	clrc
  4505     0245  0DF2               	rlf	??_LCD_Out,f
  4506     0246                     u1984:
  4507     0246  3EFF               	addlw	-1
  4508     0247  1D03               	skipz
  4509     0248  2A44               	goto	u1985
  4510     0249  0872               	movf	??_LCD_Out,w
  4511     024A  0480               	iorwf	0,f
  4512                           
  4513                           ;lcd.c: 28:     }
  4514     024B  2A5F               	goto	l1995
  4515     024C                     l1993:
  4516                           
  4517                           ;lcd.c: 30:         *(lcd.PORT) &= ~(1 << lcd.D6);
  4518     024C  085F               	movf	_lcd^(0+128),w
  4519     024D  0084               	movwf	4
  4520     024E  1783               	bsf	3,7
  4521     024F  1C60               	btfss	(_lcd+1)^(0+128),0
  4522     0250  1383               	bcf	3,7
  4523     0251  3001               	movlw	1
  4524     0252  00F2               	movwf	??_LCD_Out
  4525     0253  0863               	movf	(_lcd^(0+128)+4),w
  4526     0254  3907               	andlw	7
  4527     0255  3E01               	addlw	1
  4528     0256  2A59               	goto	u1994
  4529     0257                     u1995:
  4530     0257  1003               	clrc
  4531     0258  0DF2               	rlf	??_LCD_Out,f
  4532     0259                     u1994:
  4533     0259  3EFF               	addlw	-1
  4534     025A  1D03               	skipz
  4535     025B  2A57               	goto	u1995
  4536     025C  0872               	movf	??_LCD_Out,w
  4537     025D  3AFF               	xorlw	255
  4538     025E  0580               	andwf	0,f
  4539     025F                     l1995:
  4540                           
  4541                           ;lcd.c: 33:     if ( c & 8 ) {
  4542     025F  1DF4               	btfss	LCD_Out@c,3
  4543     0260  2A62               	goto	u2001
  4544     0261  2A63               	goto	u2000
  4545     0262                     u2001:
  4546     0262  2A79               	goto	l1999
  4547     0263                     u2000:
  4548     0263                     l1997:
  4549                           
  4550                           ;lcd.c: 34:          *(lcd.PORT) |= 1 << lcd.D7;
  4551     0263  085F               	movf	_lcd^(0+128),w
  4552     0264  0084               	movwf	4
  4553     0265  1783               	bsf	3,7
  4554     0266  1C60               	btfss	(_lcd+1)^(0+128),0
  4555     0267  1383               	bcf	3,7
  4556     0268  3001               	movlw	1
  4557     0269  00F2               	movwf	??_LCD_Out
  4558     026A  0C63               	rrf	(_lcd^(0+128)+4),w
  4559     026B  00F3               	movwf	??_LCD_Out+1
  4560     026C  0CF3               	rrf	??_LCD_Out+1,f
  4561     026D  0C73               	rrf	??_LCD_Out+1,w
  4562     026E  3907               	andlw	7
  4563     026F  3E01               	addlw	1
  4564     0270  2A73               	goto	u2014
  4565     0271                     u2015:
  4566     0271  1003               	clrc
  4567     0272  0DF2               	rlf	??_LCD_Out,f
  4568     0273                     u2014:
  4569     0273  3EFF               	addlw	-1
  4570     0274  1D03               	skipz
  4571     0275  2A71               	goto	u2015
  4572     0276  0872               	movf	??_LCD_Out,w
  4573     0277  0480               	iorwf	0,f
  4574                           
  4575                           ;lcd.c: 35:     }
  4576     0278  2A8F               	goto	l212
  4577     0279                     l1999:
  4578                           
  4579                           ;lcd.c: 37:          *(lcd.PORT) &= ~(1 << lcd.D7);
  4580     0279  085F               	movf	_lcd^(0+128),w
  4581     027A  0084               	movwf	4
  4582     027B  1783               	bsf	3,7
  4583     027C  1C60               	btfss	(_lcd+1)^(0+128),0
  4584     027D  1383               	bcf	3,7
  4585     027E  3001               	movlw	1
  4586     027F  00F2               	movwf	??_LCD_Out
  4587     0280  0C63               	rrf	(_lcd^(0+128)+4),w
  4588     0281  00F3               	movwf	??_LCD_Out+1
  4589     0282  0CF3               	rrf	??_LCD_Out+1,f
  4590     0283  0C73               	rrf	??_LCD_Out+1,w
  4591     0284  3907               	andlw	7
  4592     0285  3E01               	addlw	1
  4593     0286  2A89               	goto	u2024
  4594     0287                     u2025:
  4595     0287  1003               	clrc
  4596     0288  0DF2               	rlf	??_LCD_Out,f
  4597     0289                     u2024:
  4598     0289  3EFF               	addlw	-1
  4599     028A  1D03               	skipz
  4600     028B  2A87               	goto	u2025
  4601     028C  0872               	movf	??_LCD_Out,w
  4602     028D  3AFF               	xorlw	255
  4603     028E  0580               	andwf	0,f
  4604     028F                     l212:
  4605     028F  0008               	return
  4606     0290                     __end_of_LCD_Out:
  4607                           
  4608                           	psect	text23
  4609     0E9A                     __ptext23:	
  4610 ;; *************** function _ADC_read *****************
  4611 ;; Defined at:
  4612 ;;		line 61 in file "main.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;		None
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  2    2[COMMON] unsigned int 
  4619 ;; Registers used:
  4620 ;;		wreg
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4626 ;;      Params:         2       0       0       0       0
  4627 ;;      Locals:         0       0       0       0       0
  4628 ;;      Temps:          0       0       0       0       0
  4629 ;;      Totals:         2       0       0       0       0
  4630 ;;Total ram usage:        2 bytes
  4631 ;; Hardware stack levels used: 1
  4632 ;; Hardware stack levels required when called: 1
  4633 ;; This function calls:
  4634 ;;		Nothing
  4635 ;; This function is called by:
  4636 ;;		_main
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640     0E9A                     _ADC_read:	
  4641                           ;psect for function _ADC_read
  4642                           
  4643     0E9A                     l1673:	
  4644                           ;incstack = 0
  4645                           ; Regs used in _ADC_read: [wreg]
  4646                           
  4647                           
  4648                           ;main.c: 62:     if (TMR1IF) {
  4649     0E9A  2E9B               	nop2	;2 cycle nop
  4650     0E9B  2E9C               	nop2	;2 cycle nop
  4651     0E9C  0000               	nop
  4652                           
  4653                           ;main.c: 63:         timer1++;
  4654     0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  4655     0E9E  1303               	bcf	3,6	;RP1=0, select bank0
  4656     0E9F  149F               	bsf	31,1	;volatile
  4657     0EA0                     l78:	
  4658                           ;main.c: 64:         if (timer1 > 100) {
  4659                           
  4660     0EA0  189F               	btfsc	31,1	;volatile
  4661     0EA1  2EA3               	goto	u1511
  4662     0EA2  2EA4               	goto	u1510
  4663     0EA3                     u1511:
  4664     0EA3  2EA0               	goto	l78
  4665     0EA4                     u1510:
  4666     0EA4                     l1675:
  4667                           
  4668                           ;main.c: 65:             count1++;
  4669     0EA4  081E               	movf	30,w	;volatile
  4670     0EA5  00F3               	movwf	?_ADC_read+1
  4671     0EA6  1683               	bsf	3,5	;RP0=1, select bank1
  4672     0EA7  1303               	bcf	3,6	;RP1=0, select bank1
  4673     0EA8  081E               	movf	30,w	;volatile
  4674     0EA9  00F2               	movwf	?_ADC_read
  4675     0EAA                     l81:
  4676     0EAA  0008               	return
  4677     0EAB                     __end_of_ADC_read:
  4678                           
  4679                           	psect	text24
  4680     0E7F                     __ptext24:	
  4681 ;; *************** function _ADC_Initialize *****************
  4682 ;; Defined at:
  4683 ;;		line 55 in file "main.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;		None
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;		None
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  1    wreg      void 
  4690 ;; Registers used:
  4691 ;;		None
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4697 ;;      Params:         0       0       0       0       0
  4698 ;;      Locals:         0       0       0       0       0
  4699 ;;      Temps:          0       0       0       0       0
  4700 ;;      Totals:         0       0       0       0       0
  4701 ;;Total ram usage:        0 bytes
  4702 ;; Hardware stack levels used: 1
  4703 ;; Hardware stack levels required when called: 1
  4704 ;; This function calls:
  4705 ;;		Nothing
  4706 ;; This function is called by:
  4707 ;;		_main
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711     0E7F                     _ADC_Initialize:	
  4712                           ;psect for function _ADC_Initialize
  4713                           
  4714     0E7F                     l1671:	
  4715                           ;incstack = 0
  4716                           ; Regs used in _ADC_Initialize: []
  4717                           
  4718                           
  4719                           ;main.c: 56:             count0 = 0;
  4720     0E7F  3001               	movlw	1
  4721     0E80  1683               	bsf	3,5	;RP0=1, select bank3
  4722     0E81  1703               	bsf	3,6	;RP1=1, select bank3
  4723     0E82  0088               	movwf	8	;volatile
  4724                           
  4725                           ;main.c: 57:         }
  4726     0E83  3081               	movlw	129
  4727     0E84  1283               	bcf	3,5	;RP0=0, select bank0
  4728     0E85  1303               	bcf	3,6	;RP1=0, select bank0
  4729     0E86  009F               	movwf	31	;volatile
  4730                           
  4731                           ;main.c: 58:         TMR0 = 217;
  4732     0E87  3080               	movlw	128
  4733     0E88  1683               	bsf	3,5	;RP0=1, select bank1
  4734     0E89  1303               	bcf	3,6	;RP1=0, select bank1
  4735     0E8A  009F               	movwf	31	;volatile
  4736     0E8B                     l75:
  4737     0E8B  0008               	return
  4738     0E8C                     __end_of_ADC_Initialize:
  4739                           
  4740                           	psect	text25
  4741     0637                     __ptext25:	
  4742 ;; *************** function _ISR *****************
  4743 ;; Defined at:
  4744 ;;		line 72 in file "main.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;		None
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;		None
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      void 
  4751 ;; Registers used:
  4752 ;;		wreg, status,2, status,0
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4758 ;;      Params:         0       0       0       0       0
  4759 ;;      Locals:         0       0       0       0       0
  4760 ;;      Temps:          2       0       0       0       0
  4761 ;;      Totals:         2       0       0       0       0
  4762 ;;Total ram usage:        2 bytes
  4763 ;; Hardware stack levels used: 1
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		Interrupt level 1
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771     0637                     _ISR:	
  4772                           ;psect for function _ISR
  4773                           
  4774     0637                     i1l1809:
  4775                           
  4776                           ;main.c: 73: 
  4777     0637  1D0B               	btfss	11,2	;volatile
  4778     0638  2E3A               	goto	u175_21
  4779     0639  2E3B               	goto	u175_20
  4780     063A                     u175_21:
  4781     063A  2E5B               	goto	i1l1821
  4782     063B                     u175_20:
  4783     063B                     i1l1811:
  4784                           
  4785                           ;main.c: 74:         TMR1IF = 0;
  4786     063B  3001               	movlw	1
  4787     063C  1283               	bcf	3,5	;RP0=0, select bank0
  4788     063D  1303               	bcf	3,6	;RP1=0, select bank0
  4789     063E  07EA               	addwf	_count0,f	;volatile
  4790     063F  1803               	skipnc
  4791     0640  0AEB               	incf	_count0+1,f	;volatile
  4792     0641  3000               	movlw	0
  4793     0642  07EB               	addwf	_count0+1,f	;volatile
  4794                           
  4795                           ;main.c: 75:     }
  4796     0643  3000               	movlw	0
  4797     0644  026B               	subwf	_count0+1,w	;volatile
  4798     0645  3065               	movlw	101
  4799     0646  1903               	skipnz
  4800     0647  026A               	subwf	_count0,w	;volatile
  4801     0648  1C03               	skipc
  4802     0649  2E4B               	goto	u176_21
  4803     064A  2E4C               	goto	u176_20
  4804     064B                     u176_21:
  4805     064B  2E58               	goto	i1l1817
  4806     064C                     u176_20:
  4807     064C                     i1l1813:
  4808                           
  4809                           ;main.c: 76: }
  4810     064C  3001               	movlw	1
  4811     064D  1683               	bsf	3,5	;RP0=1, select bank1
  4812     064E  1303               	bcf	3,6	;RP1=0, select bank1
  4813     064F  07A0               	addwf	_timer0^(0+128),f	;volatile
  4814     0650  1803               	skipnc
  4815     0651  0AA1               	incf	(_timer0+1)^(0+128),f	;volatile
  4816     0652  3000               	movlw	0
  4817     0653  07A1               	addwf	(_timer0+1)^(0+128),f	;volatile
  4818     0654                     i1l1815:
  4819                           
  4820                           ;main.c: 77: 
  4821     0654  1283               	bcf	3,5	;RP0=0, select bank0
  4822     0655  1303               	bcf	3,6	;RP1=0, select bank0
  4823     0656  01EA               	clrf	_count0	;volatile
  4824     0657  01EB               	clrf	_count0+1	;volatile
  4825     0658                     i1l1817:
  4826                           
  4827                           ;main.c: 79: 
  4828     0658  30D9               	movlw	217
  4829     0659  0081               	movwf	1	;volatile
  4830     065A                     i1l1819:
  4831                           
  4832                           ;main.c: 80: 
  4833     065A  110B               	bcf	11,2	;volatile
  4834     065B                     i1l1821:
  4835                           
  4836                           ;main.c: 83:     ADC_Initialize();
  4837     065B  1283               	bcf	3,5	;RP0=0, select bank0
  4838     065C  1303               	bcf	3,6	;RP1=0, select bank0
  4839     065D  1C0C               	btfss	12,0	;volatile
  4840     065E  2E60               	goto	u177_21
  4841     065F  2E61               	goto	u177_20
  4842     0660                     u177_21:
  4843     0660  2E89               	goto	i1l90
  4844     0661                     u177_20:
  4845     0661                     i1l1823:
  4846                           
  4847                           ;main.c: 84:     Timer0_Init();
  4848     0661  3001               	movlw	1
  4849     0662  07FA               	addwf	_timer1,f	;volatile
  4850     0663  1803               	skipnc
  4851     0664  0AFB               	incf	_timer1+1,f	;volatile
  4852     0665  3000               	movlw	0
  4853     0666  07FB               	addwf	_timer1+1,f	;volatile
  4854                           
  4855                           ;main.c: 85:     TMR1_init();
  4856     0667  3000               	movlw	0
  4857     0668  027B               	subwf	_timer1+1,w	;volatile
  4858     0669  3065               	movlw	101
  4859     066A  1903               	skipnz
  4860     066B  027A               	subwf	_timer1,w	;volatile
  4861     066C  1C03               	skipc
  4862     066D  2E6F               	goto	u178_21
  4863     066E  2E70               	goto	u178_20
  4864     066F                     u178_21:
  4865     066F  2E78               	goto	i1l1829
  4866     0670                     u178_20:
  4867     0670                     i1l1825:
  4868                           
  4869                           ;main.c: 86: 
  4870     0670  3001               	movlw	1
  4871     0671  07E8               	addwf	_count1,f	;volatile
  4872     0672  1803               	skipnc
  4873     0673  0AE9               	incf	_count1+1,f	;volatile
  4874     0674  3000               	movlw	0
  4875     0675  07E9               	addwf	_count1+1,f	;volatile
  4876     0676                     i1l1827:
  4877                           
  4878                           ;main.c: 87:     TRISD0 = 0;
  4879     0676  01FA               	clrf	_timer1	;volatile
  4880     0677  01FB               	clrf	_timer1+1	;volatile
  4881     0678                     i1l1829:
  4882                           
  4883                           ;main.c: 90:     LCD_Init(lcd);
  4884     0678  300B               	movlw	11
  4885     0679  008F               	movwf	15	;volatile
  4886     067A                     i1l1831:
  4887                           
  4888                           ;main.c: 91:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  4889     067A  30DC               	movlw	220
  4890     067B  008E               	movwf	14	;volatile
  4891     067C                     i1l1833:
  4892                           
  4893                           ;main.c: 93:     do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Writ
      +                          e( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0
      +                          xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 2 ) { do { LCD
      +                          _Write( (0x94 + 0 & 0xF0) >> 4 ); LCD_Write( 0x94 + 0 & 0x0F); } while ( 0 ); } else if 
      +                          ( 0 == 3 ) { do { LCD_Write( (0xD4 + 0 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 0 & 0x0F); } wh
      +                          ile ( 0 ); } } while ( 0 );
  4894     067C  1683               	bsf	3,5	;RP0=1, select bank1
  4895     067D  1303               	bcf	3,6	;RP1=0, select bank1
  4896     067E  0822               	movf	_onOff^(0+128),w	;volatile
  4897     067F  1903               	btfsc	3,2
  4898     0680  2E82               	goto	u179_21
  4899     0681  2E84               	goto	u179_20
  4900     0682                     u179_21:
  4901     0682  3001               	movlw	1
  4902     0683  2E85               	goto	u180_20
  4903     0684                     u179_20:
  4904     0684  3000               	movlw	0
  4905     0685                     u180_20:
  4906     0685  00A2               	movwf	_onOff^(0+128)	;volatile
  4907     0686                     i1l1835:
  4908                           
  4909                           ;main.c: 95: 
  4910     0686  1283               	bcf	3,5	;RP0=0, select bank0
  4911     0687  1303               	bcf	3,6	;RP1=0, select bank0
  4912     0688  100C               	bcf	12,0	;volatile
  4913     0689                     i1l90:
  4914     0689  0871               	movf	??_ISR+1,w
  4915     068A  008A               	movwf	10
  4916     068B  0E70               	swapf	??_ISR,w
  4917     068C  0083               	movwf	3
  4918     068D  0EFE               	swapf	btemp,f
  4919     068E  0E7E               	swapf	btemp,w
  4920     068F  0009               	retfie
  4921     0690                     __end_of_ISR:
  4922     0002                     ___latbits      equ	2
  4923     007E                     btemp           set	126	;btemp
  4924     007E                     wtemp0          set	126
  4925                           
  4926                           	psect	intentry
  4927     0004                     __pintentry:	
  4928                           ;incstack = 0
  4929 ;; hardware stack exceeded
  4930                           ; Regs used in _ISR: [wreg+status,2+status,0]
  4931                           
  4932     0004                     interrupt_function:
  4933     007E                     saved_w         set	btemp
  4934     0004  00FE               	movwf	btemp
  4935     0005  0E03               	swapf	3,w
  4936     0006  00F0               	movwf	??_ISR
  4937     0007  080A               	movf	10,w
  4938     0008  00F1               	movwf	??_ISR+1
  4939     0009  120A  118A  2E37   	ljmp	_ISR
  4940                           
  4941                           	psect	config
  4942                           
  4943                           ;Config register CONFIG1 @ 0x2007
  4944                           ;	Oscillator Selection bits
  4945                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  4946                           ;	Watchdog Timer Enable bit
  4947                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4948                           ;	Power-up Timer Enable bit
  4949                           ;	PWRTE = OFF, PWRT disabled
  4950                           ;	RE3/MCLR pin function select bit
  4951                           ;	MCLRE = 0x1, unprogrammed default
  4952                           ;	Code Protection bit
  4953                           ;	CP = OFF, Program memory code protection is disabled
  4954                           ;	Data Code Protection bit
  4955                           ;	CPD = OFF, Data memory code protection is disabled
  4956                           ;	Brown Out Reset Selection bits
  4957                           ;	BOREN = ON, BOR enabled
  4958                           ;	Internal External Switchover bit
  4959                           ;	IESO = 0x1, unprogrammed default
  4960                           ;	Fail-Safe Clock Monitor Enabled bit
  4961                           ;	FCMEN = 0x1, unprogrammed default
  4962                           ;	Low Voltage Programming Enable bit
  4963                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4964                           ;	In-Circuit Debugger Mode bit
  4965                           ;	DEBUG = 0x1, unprogrammed default
  4966     2007                     	org	8199
  4967     2007  2FF1               	dw	12273
  4968                           
  4969                           ;Config register CONFIG2 @ 0x2008
  4970                           ;	Brown-out Reset Selection bit
  4971                           ;	BOR4V = 0x1, unprogrammed default
  4972                           ;	Flash Program Memory Self Write Enable bits
  4973                           ;	WRT = OFF, Write protection off
  4974     2008                     	org	8200
  4975     2008  3FFF               	dw	16383

Data Sizes:
    Strings     44
    Constant    0
    Data        5
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     68      77
    BANK1            80     22      68
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    display$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> exec(BANK1[6]), main@buffer(BANK1[10]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> exec(BANK1[6]), main@buffer(BANK1[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    lcd$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    LCD_putrs@a	PTR const unsigned char  size(2) Largest target is 10
		 -> main@buffer(BANK1[10]), STR_1(CODE[10]), STR_2(CODE[10]), STR_3(CODE[6]), 

    LCD_puts@a	PTR unsigned char  size(1) Largest target is 6
		 -> exec(BANK1[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S22$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    S634$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> exec(BANK1[6]), main@buffer(BANK1[10]), 

    S634$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_5(CODE[8]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> exec(BANK1[6]), main@buffer(BANK1[10]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_5(CODE[8]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_5(CODE[8]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_5(CODE[8]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_putrs
    _main->_LCD_puts
    _main->___lmul
    _vfpfcnvrt->_read_prec_or_width
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _read_prec_or_width->___wmul
    ___aldiv->___lmul
    _LCD_puts->_LCD_putc
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    ___aldiv->___lmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    5917
                                             66 BANK0      2     2      0
                                              0 BANK1     22    22      0
                     _ADC_Initialize
                           _ADC_read
                           _LCD_Init
                          _LCD_Write
                          _LCD_putrs
                           _LCD_puts
                          _TMR1_init
                        _Timer0_Init
                            ___aldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    3259
                                             47 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             5     1      4    2928
                                             42 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13     9      4    2701
                                             30 BANK0     12     8      4
                              _fputc
                 _read_prec_or_width
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1583
                                             21 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  8     3      5     882
                                              9 COMMON     1     1      0
                                             14 BANK0      7     2      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     5      3     384
                                              6 COMMON     3     0      3
                                              9 BANK0      5     5      0
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                               13     9      4     232
                                              2 COMMON     4     0      4
                                              0 BANK0      9     9      0
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     165
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     168
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2     276
                                              8 COMMON     2     0      2
                                              0 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4      94
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8     142
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     451
                                              5 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             4     3      1     415
                                              8 COMMON     2     1      1
                                              0 BANK0      2     2      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (1) _LCD_putrs                                            7     5      2     424
                                              8 COMMON     2     0      2
                                              0 BANK0      5     5      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             3     3      0     282
                                              5 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     343
                                              8 COMMON     2     2      0
                                              0 BANK0      6     1      5
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Write                                            3     3      0     235
                                              5 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (3) _LCD_Out                                              3     3      0     188
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             2     0      2       0
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ADC_read
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   _LCD_puts
     _LCD_putc
   _TMR1_init
   _Timer0_Init
   ___aldiv
     ___lmul (ARG)
   ___lmul
   ___lwdiv
   ___lwmod
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _read_prec_or_width
           ___wmul
         _utoa
           ___lwdiv
           ___lwmod
           _pad
             _fputc
             _fputs
               _fputc

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80     22      68     85.0%
BITBANK1            80      0       0      0.0%
BANK0               80     68      77     96.2%
BITBANK0            80      0       0      0.0%
COMMON              14     10      12     85.7%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     157      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Jun 19 11:26:30 2025

                         pc 0002                          l72 0E7E                          l81 0EAA  
                        l75 0E8B                          l69 0E99                          l78 0EA0  
                        fsr 0004         ___wmul@multiplicand 0074                         l212 028F  
                       l215 073B                         l224 03ED                         l240 05B8  
                       l403 04A2                         l236 03E1                         l252 0FFF  
                       l340 07FB                         l413 0526                         l246 0F14  
                       l352 07D6                         l338 07E3                         l801 0EF0  
                       l618 0FB9                         l628 0F77                         l822 077D  
                       l824 078E                         l842 06E6                         l834 0636  
                       l819 0755                         l851 02B5                         l849 02AF  
                       l866 0ECD                         l859 0341                         l878 048D  
                       l886 0F3F                         l889 07FC                         _GIE 005F  
                       _ISR 0637                         u910 03F4                         u911 03F3  
                       u920 03FA                         u921 03F9                         u930 041B  
                       u931 041A                         u940 044D                         u941 044C  
                       u950 0470                         u945 0449                         u970 07DD  
                       u971 07DC                         u985 07E4                         u995 07EB  
           LCD_Init@display 0020                         _lcd 00DF                         _pad 073C  
                       fsr0 0004                         indf 0000                        ?_ISR 0070  
           __end_of_LCD_Out 0290                        l2001 0290                        l2011 02B0  
                      l2003 02A1                        l2101 0379                        l2021 02D9  
                      l2005 02A5                        l2111 03A0                        l2103 037A  
                      l2031 02F4                        l2023 02DD                        l2015 02B8  
                      l2007 02A9                        l2121 03BE                        l2113 03A6  
                      l2105 0383                        l2201 04DE                        l2041 0315  
                      l2033 0301                        l2025 02DE                        l2017 02C5  
                      l2009 02AD                        l2131 03C9                        l2123 03C4  
                      l2115 03AC                        l2107 0389                        l2203 04F0  
                      l2211 050E                        l1411 03FA                        l2035 0307  
                      l2043 0320                        l2027 02E3                        l2019 02CA  
                      l2061 0723                        l2053 06E8                        l2125 03C8  
                      l2117 03B2                        l2109 0397                        l2141 0FE3  
                      l2213 0513                        l2205 04FE                        l1413 0401  
                      l2029 02E8                        l2301 01BF                        l2221 0055  
                      l2055 06FD                        l2119 03B8                        l2071 0566  
                      l2063 0528                        l2135 0FBA                        l2215 051E  
                      l2207 04FF                        l1431 07D9                        l1415 041B  
                      l1407 03EE                        l2047 0328                        l2151 0EDA  
                      l2143 0ECE                        l2303 01C8                        l2231 007F  
                      l2223 0058                        l2057 0703                        l2073 057E  
                      l2065 053C                        l2137 0FBF                        l2161 0F01  
                      l2209 0508                        l1433 07DD                        l1417 044D  
                      l1409 03F4                        l2081 0EB0                        l2153 0EE7  
                      l2145 0ED2                        l2241 008B                        l2233 0085  
                      l2225 005B                        l2059 071A                        l2091 0355  
                      l2075 0585                        l2067 054B                        l2139 0FDB  
                      l2163 0F09                        l2171 07B4                        l1435 07EA  
                      l1451 0F8A                        l1443 0F78                        l2083 0EBD  
                      l2147 0ED6                        l2251 00A0                        l2227 0073  
                      l2219 0046                        l2093 0361                        l2077 05A0  
                      l2069 0562                        l2157 0EF1                        l2181 0491  
                      l2173 07BD                        l2165 078F                        l1437 07F1  
                      l1429 07D7                        l1541 06A3                        l1461 0FA8  
                      l1453 0F8C                        l1445 0F7A                        l2085 0ECB  
                      l2149 0ED8                        l2261 00B5                        l2245 0094  
                      l2229 0079                        l2095 0363                        l2159 0EF6  
                      l2191 04BB                        l2183 0495                        l2175 07CE  
                      l2167 0799                        l1439 07F7                        l1551 06E2  
                      l1543 06A7                        l1463 0FAF                        l1455 0F90  
                      l1447 0F80                        l1471 0F46                        l2079 0EAB  
                      l2263 00BE                        l2255 00A9                        l2097 036D  
                      l2089 0342                        l2193 04C3                        l2185 04A6  
                      l2169 079D                        l1545 06B5                        l1537 0690  
                      l1457 0FA1                        l1449 0F83                        l1465 0FB5  
                      l1481 0F60                        l1473 0F49                        l2281 0125  
                      l2273 00D3                        l2099 036F                        l2195 04C6  
                      l2187 04B1                        l2179 048E                        l1547 06CC  
                      l1539 0694                        l1459 0FA7                        l1483 0F66  
                      l1475 0F50                        l2291 01B3                        l2283 0130  
                      l2275 00E8                        l2267 00C7                        l2197 04D1  
                      l2189 04B3                        l1549 06D1                        l1485 0F6D  
                      l1477 0F52                        l1469 0F40                        l2293 01B9  
                      l2285 016A                        l2277 00FB                        l1671 0E7F  
                      l2199 04D5                        l1479 0F56                        l1487 0F73  
                      l2287 017D                        l2279 011E                        l1673 0E9A  
                      l2289 0190                        l1675 0EA4                        l1667 0E8C  
                      l1923 0F15                        l1931 073C                        l1669 0E74  
                      l1925 0F1A                        l1941 0767                        l1933 0742  
                      l1927 0F2A                        l1943 076F                        l1935 074D  
                      l1951 05C5                        l1929 0F32                        l1945 0783  
                      l1937 0753                        l1961 05EC                        l1953 05C9  
                      l1939 0758                        l1971 061E                        l1955 05CF  
                      l1963 05FF                        l1947 05B9                        l1981 01F0  
                      l1965 0606                        l1973 0624                        l1957 05E3  
                      l1949 05BD                        ?_pad 002E                        l1991 0239  
                      l1983 0205                        l1967 060C                        l1959 05E6  
                      l1993 024C                        l1985 0209                        l1977 01D7  
                      l1969 0611                        l1995 025F                        l1987 021F  
                      l1979 01DB                        l1997 0263                        l1989 0235  
                      l1999 0279                        STR_1 0810                        STR_2 081A  
                      STR_3 0836                        STR_4 0824                        STR_5 082E  
                      _T0IE 005D                        u1000 07F7                        _T0IF 005A  
                      u1001 07F6                        u1010 0F80                        u1011 0F7F  
                      u1100 0F56                        u1101 0F55                        u1030 0F90  
                      u1110 0F60                        u1031 0F8F                        u1111 0F5F  
                      u2000 0263                        u2001 0262                        u1025 0F84  
                      u1050 0FA1                        u1130 0F73                        u1051 0FA0  
                      u1131 0F72                        u1115 0F5C                        u1045 0F91  
                      u1125 0F67                        u2014 0273                        u1230 06A3  
                      u1070 0FB5                        u2030 02A1                        u2015 0271  
                      u1231 06A2                        u1071 0FB4                        u1055 0F9D  
                      u2031 02A0                        u2024 0289                        u2104 0537  
                      u1240 06E2                        u1080 0F46                        u2040 02CA  
                      u2025 0287                        u2105 0535                        u1241 06E1  
                      u1065 0FA9                        u1081 0F45                        u2041 02C9  
                      u2210 0FC9                        u2050 02DD                        u2115 053F  
                      u2051 02DC                        u2124 055D                        u2220 0FED  
                      u2300 0495                        u2060 02F4                        u2205 03CC  
                      u2125 055B                        u2301 0494                        u2061 02F3  
                      u1510 0EA4                        u2134 0578                        u2230 0FFF  
                      u2310 04A6                        u1511 0EA3                        u2135 0576  
                      u2231 0FFE                        u2311 04A5                        u1095 0F4A  
                      u2144 0597                        u2240 0F14                        u2320 04C3  
                      u2160 0ECB                        u2145 0595                        u2241 0F13  
                      u2321 04C2                        u2161 0ECA                        u2074 06F7  
                      u2170 0361                        u2154 05B2                        u2250 079D  
                      u2075 06F5                        u2171 0360                        u2155 05B0  
                      u2251 079C                        u2084 0715                        u2180 036D  
                      u2340 04D5                        u2085 0713                        u2181 036C  
                      u2341 04D4                        u2261 07A6                        u2094 0735  
                      u2190 0379                        u2262 07AD                        u2095 0733  
                      u2191 0378                        u2175 035D                        u2335 04C8  
                      u2263 07B4                        u2407 01CE                        u2360 04F0  
                      u2185 0369                        u2417 0564                        u2361 04EF  
                      u2290 07CE                        u1810 0F3F                        u2195 0375  
                      u2427 059E                        u2355 04D7                        u2291 07CD  
                      u2275 07B6                        u1811 0F3E                        u2380 050E  
                      u1820 0742                        u1900 0624                        u2437 037E  
                      u2381 050D                        u2365 04EC                        u2285 07BE  
                      u1821 0741                        u1901 0623                        u1910 01DB  
                      u2390 0513                        u1830 0753                        u1911 01DA  
                      u2447 038D                        u2391 0512                        u2375 0500  
                      u1831 0752                        u1840 077D                        u2457 039B  
                      u1841 077C                        u1850 0783                        u2467 071E  
                      u1851 0782                        u1940 0209                        u1924 01EA  
                      u1860 0606                        u1941 0208                        u1925 01E8  
                      u1845 0779                        u1861 0605                        u1934 01FF  
                      u1870 060C                        u1935 01FD                        u1871 060B  
                      u1880 0611                        u1881 0610                        u1970 0239  
                      u1954 0219                        u1890 061E                        u1971 0238  
                      u1955 0217                        u1891 061D                        _PEIE 005E  
                      u1964 022F                        u1965 022D                        u1895 061A  
                      u1984 0246                        u1985 0244                        u1994 0259  
                      u1995 0257                        i1l90 0689                        _TMR0 0001  
                      _dbuf 00A3                        _main 0046                        _exec 00C3  
                      _prec 0066                        pad@i 0033                        pad@p 0031  
                      btemp 007E                        _utoa 05B9                        start 000C  
          __end_of_ADC_read 0EAB                 main@voltaje 00DD                 LCD_Init@cmd 0025  
                     ??_ISR 0070                       ??_pad 0079            __end_of_LCD_Init 03EE  
          __end_of_LCD_putc 05B9            __end_of_LCD_puts 0F15             __end_of___aldiv 0527  
                     ?_main 0070                       _ANSEL 0188                       ?_utoa 0035  
                     _T1CON 0010             __end_of___lwdiv 0FBA             __end_of___lwmod 0F78  
              vfpfcnvrt@fmt 0040                       _TMR1H 000F                       _TMR1L 000E  
                     _PORTA 0005                       _PORTB 0006                       _PORTC 0007  
                     _TRISA 0085                       _TRISB 0086                       _TRISC 0087  
       ___lmul@multiplicand 0076                main@part_dec 00D7                main@part_ent 00D5  
                     _flags 006C                       _onOff 00A2         read_prec_or_width@c 0020  
       read_prec_or_width@n 0021                       _fputc 03EE                       _fputs 0F15  
                     pad@fp 002E                       _width 0064                       _putch 07FC  
                     pclath 000A                       utoa@d 0037                       utoa@i 003C  
                     utoa@p 0039                       utoa@w 003A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 0EF1             __initialization 000F  
              __end_of_main 01D6                __end_of_utoa 0637                      ??_main 0062  
                    ??_utoa 007A                   ??_LCD_Out 0072           __end_of_LCD_Write 073C  
__end_of_read_prec_or_width 06E7           __end_of_LCD_putrs 1000                      _ADCON0 001F  
                    _ADCON1 009F                      ?_fputc 0072                      ?_fputs 0076  
                    _ADRESH 001E                      _ADRESL 009E                      ?_putch 0070  
                    i1l1811 063B                      i1l1813 064C                      i1l1821 065B  
                    i1l1831 067A                      i1l1823 0661                      i1l1815 0654  
                    i1l1833 067C                      i1l1825 0670                      i1l1817 0658  
                    i1l1809 0637                      i1l1835 0686                      i1l1827 0676  
                    i1l1819 065A                      i1l1829 0678                      u180_20 0685  
                    u175_20 063B                      u175_21 063A                      u176_20 064C  
                    u176_21 064B                      u177_20 0661                      u177_21 0660  
                    u178_20 0670                      u178_21 066F                      u179_20 0684  
                    u179_21 0682               vfpfcnvrt@done 0048                      _TMR1IE 0460  
                    _TMR1IF 0060                      _TRISD0 0440               ??_Timer0_Init 0072  
              vfprintf@cfmt 004E                      ___lmul 078F                   ??___aldiv 002D  
                    ___wmul 07D7           __end_of_TMR1_init 0E9A                   ??___lwdiv 0076  
                 ??___lwmod 0076                      _count0 006A                      _count1 0068  
      read_prec_or_width@ap 0079                      _timer0 00A0                      _timer1 007A  
                    pad@buf 0030                      fputc@c 0072                      fputs@c 002B  
                    fputs@i 002C                      fputs@s 0076                      saved_w 007E  
                 ?_ADC_read 0072                      putch@c 0070            __end_of_vfprintf 0ECE  
                    utoa@fp 0035                   ??_sprintf 0055              main@adc_result 00D3  
   __end_of__initialization 0042                   ?_LCD_Init 0020                   ?_LCD_putc 0070  
                 ?_LCD_puts 0078              __pcstackCOMMON 0070                __pidataBANK1 0E67  
             __end_of_fputc 048E               __end_of_fputs 0F40         __end_of_Timer0_Init 0E7F  
             __end_of_putch 07FD                   LCD_putc@c 0077                   LCD_puts@a 0078  
                 LCD_puts@i 0020                  ??_ADC_read 0074                     ??_fputc 0020  
                   ??_fputs 0029                     ??_putch 0072                  __pbssBANK0 0064  
                __pbssBANK1 00A0                  ??_LCD_Init 0078                  ??_LCD_putc 0075  
                ??_LCD_puts 0079                  __pmaintext 0046                     ?___lmul 0072  
                   ?___wmul 0072                  __pintentry 0004              ___lmul@product 0021  
                   _LCD_Out 01D6                  __stringtab 0800                 _Timer0_Init 0E74  
                   ___aldiv 048E                     ___lwdiv 0F78                     ___lwmod 0F40  
                 ?_vfprintf 004A                     __ptext1 0ECE                     __ptext2 0EAB  
                   __ptext3 0290                     __ptext4 05B9                     __ptext5 073C  
                   __ptext6 0F15                     __ptext7 03EE                     __ptext8 07FC  
                   __ptext9 0F40       read_prec_or_width@fmt 0078            ___aldiv@dividend 0029  
                   _sprintf 0ECE                     clrloop0 0E6D                   _LCD_Write 06E7  
      end_of_initialization 0042                   _LCD_putrs 0FBA                     fputc@fp 0074  
                   fputs@fp 0077          _read_prec_or_width 0690           __end_of_vfpfcnvrt 0342  
          ___aldiv@quotient 0030         ?_read_prec_or_width 0078            vfpfcnvrt@convarg 0044  
                ??_vfprintf 007A                   _PORTDbits 0008                   _TMR1_init 0E8C  
      ??_read_prec_or_width 007A                  ?_LCD_Write 0070                  ?_LCD_putrs 0078  
                main@buffer 00C9              __end_of___lmul 07D7                 vfpfcnvrt@ap 0041  
               vfpfcnvrt@cp 0049                 vfpfcnvrt@fp 003E              __end_of___wmul 07FC  
                LCD_Write@c 0077              _ADC_Initialize 0E7F                  ?_TMR1_init 0070  
       start_initialization 000F                 __end_of_ISR 0690                 __end_of_pad 078F  
                LCD_putrs@a 0078                  LCD_putrs@i 0023                 vfprintf@fmt 004C  
                  ??___lmul 0020                    ??___wmul 0076      __end_of_ADC_Initialize 0E8C  
               __pdataBANK1 00DF                    ?_LCD_Out 0070                 __pbssCOMMON 007A  
                 ___latbits 0002               __pcstackBANK0 0020               __pcstackBANK1 00C9  
                  LCD_Out@c 0074                 ??_LCD_Write 0075                 ??_LCD_putrs 0020  
              ?_Timer0_Init 0070            ___lwdiv@dividend 0074                    ?___aldiv 0025  
                  ?___lwdiv 0072                    ?___lwmod 0072             ?_ADC_Initialize 0070  
                 __pstrings 0800                 ??_TMR1_init 0072                    _ADC_read 0E9A  
          ___lwdiv@quotient 0076                    ?_sprintf 004F             ___aldiv@divisor 0025  
         interrupt_function 0004             ___aldiv@counter 002E                    _LCD_Init 0342  
            ___wmul@product 0076                   clear_ram0 0E6C                    _LCD_putc 0527  
                  _LCD_puts 0EF1                    _GO_nDONE 00F9                   _vfpfcnvrt 0290  
               __stringbase 080F           ___wmul@multiplier 0072           ___lmul@multiplier 0072  
                vfprintf@ap 004D                  vfprintf@fp 004A                  ?_vfpfcnvrt 003E  
        __end_of__stringtab 0810                  sprintf@fmt 0050                    _main$958 00D9  
                  _main$959 00DB             ___lwdiv@divisor 0072             ___lwdiv@counter 0078  
                  __ptext10 0F78                    __ptext11 0690                    __ptext20 0342  
                  __ptext12 07D7                    __ptext21 06E7                    __ptext13 078F  
                  __ptext22 01D6                    __ptext14 048E                    __ptext23 0E9A  
                  __ptext15 0E74                    __ptext24 0E7F                    __ptext16 0E8C  
                  __ptext25 0637                    __ptext17 0EF1                    __ptext18 0FBA  
                  __ptext19 0527                    _vfprintf 0EAB                    intlevel1 0000  
                 sprintf@ap 0056            ___lwmod@dividend 0074            ??_ADC_Initialize 0072  
                 stringcode 080A                 ??_vfpfcnvrt 0042                  _OPTION_REG 0081  
                  sprintf@f 0057                    sprintf@s 004F             ___lwmod@divisor 0072  
           ___lwmod@counter 0076                    stringdir 080A                    stringtab 0800  
              ___aldiv@sign 002F  
