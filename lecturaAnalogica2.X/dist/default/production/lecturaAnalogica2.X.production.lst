

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Fri Jun 13 18:09:23 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,space=0,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    14                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=2
    17                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=2
    18                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=3
    20                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=3
    23                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=3
    24                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35     0000                     
    36                           ; Generated 26/03/2025 GMT
    37                           ; 
    38                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0004                     fsr             equ	4
    71     0004                     fsr0            equ	4
    72     0000                     indf            equ	0
    73     0000                     indf0           equ	0
    74     0002                     pc              equ	2
    75     0002                     pcl             equ	2
    76     000A                     pclath          equ	10
    77     0003                     status          equ	3
    78     0000                     INDF            equ	0	;# 
    79     0001                     TMR0            equ	1	;# 
    80     0002                     PCL             equ	2	;# 
    81     0003                     STATUS          equ	3	;# 
    82     0004                     FSR             equ	4	;# 
    83     0005                     PORTA           equ	5	;# 
    84     0006                     PORTB           equ	6	;# 
    85     0007                     PORTC           equ	7	;# 
    86     0008                     PORTD           equ	8	;# 
    87     0009                     PORTE           equ	9	;# 
    88     000A                     PCLATH          equ	10	;# 
    89     000B                     INTCON          equ	11	;# 
    90     000C                     PIR1            equ	12	;# 
    91     000D                     PIR2            equ	13	;# 
    92     000E                     TMR1            equ	14	;# 
    93     000E                     TMR1L           equ	14	;# 
    94     000F                     TMR1H           equ	15	;# 
    95     0010                     T1CON           equ	16	;# 
    96     0011                     TMR2            equ	17	;# 
    97     0012                     T2CON           equ	18	;# 
    98     0013                     SSPBUF          equ	19	;# 
    99     0014                     SSPCON          equ	20	;# 
   100     0015                     CCPR1           equ	21	;# 
   101     0015                     CCPR1L          equ	21	;# 
   102     0016                     CCPR1H          equ	22	;# 
   103     0017                     CCP1CON         equ	23	;# 
   104     0018                     RCSTA           equ	24	;# 
   105     0019                     TXREG           equ	25	;# 
   106     001A                     RCREG           equ	26	;# 
   107     001B                     CCPR2           equ	27	;# 
   108     001B                     CCPR2L          equ	27	;# 
   109     001C                     CCPR2H          equ	28	;# 
   110     001D                     CCP2CON         equ	29	;# 
   111     001E                     ADRESH          equ	30	;# 
   112     001F                     ADCON0          equ	31	;# 
   113     0081                     OPTION_REG      equ	129	;# 
   114     0085                     TRISA           equ	133	;# 
   115     0086                     TRISB           equ	134	;# 
   116     0087                     TRISC           equ	135	;# 
   117     0088                     TRISD           equ	136	;# 
   118     0089                     TRISE           equ	137	;# 
   119     008C                     PIE1            equ	140	;# 
   120     008D                     PIE2            equ	141	;# 
   121     008E                     PCON            equ	142	;# 
   122     008F                     OSCCON          equ	143	;# 
   123     0090                     OSCTUNE         equ	144	;# 
   124     0091                     SSPCON2         equ	145	;# 
   125     0092                     PR2             equ	146	;# 
   126     0093                     SSPADD          equ	147	;# 
   127     0093                     SSPMSK          equ	147	;# 
   128     0093                     MSK             equ	147	;# 
   129     0094                     SSPSTAT         equ	148	;# 
   130     0095                     WPUB            equ	149	;# 
   131     0096                     IOCB            equ	150	;# 
   132     0097                     VRCON           equ	151	;# 
   133     0098                     TXSTA           equ	152	;# 
   134     0099                     SPBRG           equ	153	;# 
   135     009A                     SPBRGH          equ	154	;# 
   136     009B                     PWM1CON         equ	155	;# 
   137     009C                     ECCPAS          equ	156	;# 
   138     009D                     PSTRCON         equ	157	;# 
   139     009E                     ADRESL          equ	158	;# 
   140     009F                     ADCON1          equ	159	;# 
   141     0105                     WDTCON          equ	261	;# 
   142     0107                     CM1CON0         equ	263	;# 
   143     0108                     CM2CON0         equ	264	;# 
   144     0109                     CM2CON1         equ	265	;# 
   145     010C                     EEDATA          equ	268	;# 
   146     010C                     EEDAT           equ	268	;# 
   147     010D                     EEADR           equ	269	;# 
   148     010E                     EEDATH          equ	270	;# 
   149     010F                     EEADRH          equ	271	;# 
   150     0185                     SRCON           equ	389	;# 
   151     0187                     BAUDCTL         equ	391	;# 
   152     0188                     ANSEL           equ	392	;# 
   153     0189                     ANSELH          equ	393	;# 
   154     018C                     EECON1          equ	396	;# 
   155     018D                     EECON2          equ	397	;# 
   156     0000                     INDF            equ	0	;# 
   157     0001                     TMR0            equ	1	;# 
   158     0002                     PCL             equ	2	;# 
   159     0003                     STATUS          equ	3	;# 
   160     0004                     FSR             equ	4	;# 
   161     0005                     PORTA           equ	5	;# 
   162     0006                     PORTB           equ	6	;# 
   163     0007                     PORTC           equ	7	;# 
   164     0008                     PORTD           equ	8	;# 
   165     0009                     PORTE           equ	9	;# 
   166     000A                     PCLATH          equ	10	;# 
   167     000B                     INTCON          equ	11	;# 
   168     000C                     PIR1            equ	12	;# 
   169     000D                     PIR2            equ	13	;# 
   170     000E                     TMR1            equ	14	;# 
   171     000E                     TMR1L           equ	14	;# 
   172     000F                     TMR1H           equ	15	;# 
   173     0010                     T1CON           equ	16	;# 
   174     0011                     TMR2            equ	17	;# 
   175     0012                     T2CON           equ	18	;# 
   176     0013                     SSPBUF          equ	19	;# 
   177     0014                     SSPCON          equ	20	;# 
   178     0015                     CCPR1           equ	21	;# 
   179     0015                     CCPR1L          equ	21	;# 
   180     0016                     CCPR1H          equ	22	;# 
   181     0017                     CCP1CON         equ	23	;# 
   182     0018                     RCSTA           equ	24	;# 
   183     0019                     TXREG           equ	25	;# 
   184     001A                     RCREG           equ	26	;# 
   185     001B                     CCPR2           equ	27	;# 
   186     001B                     CCPR2L          equ	27	;# 
   187     001C                     CCPR2H          equ	28	;# 
   188     001D                     CCP2CON         equ	29	;# 
   189     001E                     ADRESH          equ	30	;# 
   190     001F                     ADCON0          equ	31	;# 
   191     0081                     OPTION_REG      equ	129	;# 
   192     0085                     TRISA           equ	133	;# 
   193     0086                     TRISB           equ	134	;# 
   194     0087                     TRISC           equ	135	;# 
   195     0088                     TRISD           equ	136	;# 
   196     0089                     TRISE           equ	137	;# 
   197     008C                     PIE1            equ	140	;# 
   198     008D                     PIE2            equ	141	;# 
   199     008E                     PCON            equ	142	;# 
   200     008F                     OSCCON          equ	143	;# 
   201     0090                     OSCTUNE         equ	144	;# 
   202     0091                     SSPCON2         equ	145	;# 
   203     0092                     PR2             equ	146	;# 
   204     0093                     SSPADD          equ	147	;# 
   205     0093                     SSPMSK          equ	147	;# 
   206     0093                     MSK             equ	147	;# 
   207     0094                     SSPSTAT         equ	148	;# 
   208     0095                     WPUB            equ	149	;# 
   209     0096                     IOCB            equ	150	;# 
   210     0097                     VRCON           equ	151	;# 
   211     0098                     TXSTA           equ	152	;# 
   212     0099                     SPBRG           equ	153	;# 
   213     009A                     SPBRGH          equ	154	;# 
   214     009B                     PWM1CON         equ	155	;# 
   215     009C                     ECCPAS          equ	156	;# 
   216     009D                     PSTRCON         equ	157	;# 
   217     009E                     ADRESL          equ	158	;# 
   218     009F                     ADCON1          equ	159	;# 
   219     0105                     WDTCON          equ	261	;# 
   220     0107                     CM1CON0         equ	263	;# 
   221     0108                     CM2CON0         equ	264	;# 
   222     0109                     CM2CON1         equ	265	;# 
   223     010C                     EEDATA          equ	268	;# 
   224     010C                     EEDAT           equ	268	;# 
   225     010D                     EEADR           equ	269	;# 
   226     010E                     EEDATH          equ	270	;# 
   227     010F                     EEADRH          equ	271	;# 
   228     0185                     SRCON           equ	389	;# 
   229     0187                     BAUDCTL         equ	391	;# 
   230     0188                     ANSEL           equ	392	;# 
   231     0189                     ANSELH          equ	393	;# 
   232     018C                     EECON1          equ	396	;# 
   233     018D                     EECON2          equ	397	;# 
   234     0000                     INDF            equ	0	;# 
   235     0001                     TMR0            equ	1	;# 
   236     0002                     PCL             equ	2	;# 
   237     0003                     STATUS          equ	3	;# 
   238     0004                     FSR             equ	4	;# 
   239     0005                     PORTA           equ	5	;# 
   240     0006                     PORTB           equ	6	;# 
   241     0007                     PORTC           equ	7	;# 
   242     0008                     PORTD           equ	8	;# 
   243     0009                     PORTE           equ	9	;# 
   244     000A                     PCLATH          equ	10	;# 
   245     000B                     INTCON          equ	11	;# 
   246     000C                     PIR1            equ	12	;# 
   247     000D                     PIR2            equ	13	;# 
   248     000E                     TMR1            equ	14	;# 
   249     000E                     TMR1L           equ	14	;# 
   250     000F                     TMR1H           equ	15	;# 
   251     0010                     T1CON           equ	16	;# 
   252     0011                     TMR2            equ	17	;# 
   253     0012                     T2CON           equ	18	;# 
   254     0013                     SSPBUF          equ	19	;# 
   255     0014                     SSPCON          equ	20	;# 
   256     0015                     CCPR1           equ	21	;# 
   257     0015                     CCPR1L          equ	21	;# 
   258     0016                     CCPR1H          equ	22	;# 
   259     0017                     CCP1CON         equ	23	;# 
   260     0018                     RCSTA           equ	24	;# 
   261     0019                     TXREG           equ	25	;# 
   262     001A                     RCREG           equ	26	;# 
   263     001B                     CCPR2           equ	27	;# 
   264     001B                     CCPR2L          equ	27	;# 
   265     001C                     CCPR2H          equ	28	;# 
   266     001D                     CCP2CON         equ	29	;# 
   267     001E                     ADRESH          equ	30	;# 
   268     001F                     ADCON0          equ	31	;# 
   269     0081                     OPTION_REG      equ	129	;# 
   270     0085                     TRISA           equ	133	;# 
   271     0086                     TRISB           equ	134	;# 
   272     0087                     TRISC           equ	135	;# 
   273     0088                     TRISD           equ	136	;# 
   274     0089                     TRISE           equ	137	;# 
   275     008C                     PIE1            equ	140	;# 
   276     008D                     PIE2            equ	141	;# 
   277     008E                     PCON            equ	142	;# 
   278     008F                     OSCCON          equ	143	;# 
   279     0090                     OSCTUNE         equ	144	;# 
   280     0091                     SSPCON2         equ	145	;# 
   281     0092                     PR2             equ	146	;# 
   282     0093                     SSPADD          equ	147	;# 
   283     0093                     SSPMSK          equ	147	;# 
   284     0093                     MSK             equ	147	;# 
   285     0094                     SSPSTAT         equ	148	;# 
   286     0095                     WPUB            equ	149	;# 
   287     0096                     IOCB            equ	150	;# 
   288     0097                     VRCON           equ	151	;# 
   289     0098                     TXSTA           equ	152	;# 
   290     0099                     SPBRG           equ	153	;# 
   291     009A                     SPBRGH          equ	154	;# 
   292     009B                     PWM1CON         equ	155	;# 
   293     009C                     ECCPAS          equ	156	;# 
   294     009D                     PSTRCON         equ	157	;# 
   295     009E                     ADRESL          equ	158	;# 
   296     009F                     ADCON1          equ	159	;# 
   297     0105                     WDTCON          equ	261	;# 
   298     0107                     CM1CON0         equ	263	;# 
   299     0108                     CM2CON0         equ	264	;# 
   300     0109                     CM2CON1         equ	265	;# 
   301     010C                     EEDATA          equ	268	;# 
   302     010C                     EEDAT           equ	268	;# 
   303     010D                     EEADR           equ	269	;# 
   304     010E                     EEDATH          equ	270	;# 
   305     010F                     EEADRH          equ	271	;# 
   306     0185                     SRCON           equ	389	;# 
   307     0187                     BAUDCTL         equ	391	;# 
   308     0188                     ANSEL           equ	392	;# 
   309     0189                     ANSELH          equ	393	;# 
   310     018C                     EECON1          equ	396	;# 
   311     018D                     EECON2          equ	397	;# 
   312                           
   313                           	psect	idataBANK0
   314     0036                     __pidataBANK0:
   315                           
   316                           ;initializer for _lcd
   317     0036  3407               	retlw	7
   318     0037  3400               	retlw	0
   319     0038  341A               	retlw	26
   320     0039  342C               	retlw	44
   321     003A  343E               	retlw	62
   322     0005                     _PORTA          set	5
   323     0006                     _PORTBbits      set	6
   324     0006                     _PORTB          set	6
   325     001E                     _ADRESH         set	30
   326     001F                     _ADCON0         set	31
   327     0007                     _PORTC          set	7
   328     00F9                     _GO_nDONE       set	249
   329     0087                     _TRISC          set	135
   330     0085                     _TRISA          set	133
   331     0086                     _TRISB          set	134
   332     0081                     _OPTION_REG     set	129
   333     009E                     _ADRESL         set	158
   334     009F                     _ADCON1         set	159
   335     0189                     _ANSELH         set	393
   336     0188                     _ANSEL          set	392
   337                           
   338                           	psect	strings
   339     0003                     __pstrings:
   340     0003                     stringtab:
   341     0003                     __stringtab:
   342                           
   343                           ;	String table - string pointers are 1 byte each
   344     0003  1BFF               	btfsc	btemp+1,7
   345     0004  280D               	ljmp	stringcode
   346     0005  1383               	bcf	3,7
   347     0006  187F               	btfsc	btemp+1,0
   348     0007  1783               	bsf	3,7
   349     0008  0800               	movf	0,w
   350     0009  0A84               	incf	4,f
   351     000A  1903               	skipnz
   352     000B  0AFF               	incf	btemp+1,f
   353     000C  0008               	return
   354     000D                     stringcode:
   355     000D                     stringdir:
   356     000D  3000               	movlw	high stringdir
   357     000E  008A               	movwf	10
   358     000F  0804               	movf	4,w
   359     0010  0A84               	incf	4,f
   360     0011  0782               	addwf	2,f
   361     0012                     __stringbase:
   362     0012  3400               	retlw	0
   363     0013                     __end_of__stringtab:
   364     0013                     STR_3:
   365     0013  3450               	retlw	80	;'P'
   366     0014  346F               	retlw	111	;'o'
   367     0015  3472               	retlw	114	;'r'
   368     0016  3463               	retlw	99	;'c'
   369     0017  3465               	retlw	101	;'e'
   370     0018  346E               	retlw	110	;'n'
   371     0019  3474               	retlw	116	;'t'
   372     001A  3461               	retlw	97	;'a'
   373     001B  346A               	retlw	106	;'j'
   374     001C  3465               	retlw	101	;'e'
   375     001D  343A               	retlw	58	;':'
   376     001E  3420               	retlw	32	;' '
   377     001F  3400               	retlw	0
   378     0020                     STR_1:
   379     0020  3456               	retlw	86	;'V'
   380     0021  346F               	retlw	111	;'o'
   381     0022  346C               	retlw	108	;'l'
   382     0023  3474               	retlw	116	;'t'
   383     0024  3461               	retlw	97	;'a'
   384     0025  346A               	retlw	106	;'j'
   385     0026  3465               	retlw	101	;'e'
   386     0027  343A               	retlw	58	;':'
   387     0028  3420               	retlw	32	;' '
   388     0029  3400               	retlw	0
   389     002A                     STR_5:
   390     002A  344D               	retlw	77	;'M'
   391     002B  3469               	retlw	105	;'i'
   392     002C  346C               	retlw	108	;'l'
   393     002D  343A               	retlw	58	;':'
   394     002E  3420               	retlw	32	;' '
   395     002F  3400               	retlw	0
   396     0030                     STR_2:
   397     0030  3425               	retlw	37	;'%'
   398     0031  3475               	retlw	117	;'u'
   399     0032  342E               	retlw	46	;'.'
   400     0033  3425               	retlw	37	;'%'
   401     0034  3475               	retlw	117	;'u'
   402     0035  3400               	retlw	0
   403     0030                     STR_4           equ	STR_2
   404     0033                     STR_6           equ	STR_2+3
   405                           
   406                           	psect	cinit
   407     07CD                     start_initialization:	
   408                           ; #config settings
   409                           
   410     07CD                     __initialization:
   411                           
   412                           ; Initialize objects allocated to BANK0
   413     07CD  120A  118A  2036  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   414     07D2  00DF               	movwf	__pdataBANK0& (0+127)
   415     07D3  120A  118A  2037  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   416     07D8  00E0               	movwf	(__pdataBANK0+1)& (0+127)
   417     07D9  120A  118A  2038  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   418     07DE  00E1               	movwf	(__pdataBANK0+2)& (0+127)
   419     07DF  120A  118A  2039  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   420     07E4  00E2               	movwf	(__pdataBANK0+3)& (0+127)
   421     07E5  120A  118A  203A  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   422     07EA  00E3               	movwf	(__pdataBANK0+4)& (0+127)
   423                           
   424                           ; Clear objects allocated to BANK1
   425     07EB  1383               	bcf	3,7	;select IRP bank0
   426     07EC  30A0               	movlw	low __pbssBANK1
   427     07ED  0084               	movwf	4
   428     07EE  30C0               	movlw	low (__pbssBANK1+32)
   429     07EF  120A  158A  27C8  120A  118A  	fcall	clear_ram0
   430                           
   431                           ; Clear objects allocated to BANK0
   432     07F4  3048               	movlw	low __pbssBANK0
   433     07F5  0084               	movwf	4
   434     07F6  305F               	movlw	low (__pbssBANK0+23)
   435     07F7  120A  158A  27C8  120A  118A  	fcall	clear_ram0
   436     07FC                     end_of_initialization:	
   437                           ;End of C runtime variable initialization code
   438                           
   439     07FC                     __end_of__initialization:
   440     07FC  0183               	clrf	3
   441     07FD  120A  118A  2A11   	ljmp	_main	;jump to C main() function
   442                           
   443                           	psect	bssBANK0
   444     0048                     __pbssBANK0:
   445     0048                     _width:
   446     0048                     	ds	2
   447     004A                     _prec:
   448     004A                     	ds	2
   449     004C                     _part_dec:
   450     004C                     	ds	2
   451     004E                     _part_ent:
   452     004E                     	ds	2
   453     0050                     _voltaje:
   454     0050                     	ds	2
   455     0052                     _adc_result:
   456     0052                     	ds	2
   457     0054                     _flags:
   458     0054                     	ds	1
   459     0055                     _buffer:
   460     0055                     	ds	10
   461                           
   462                           	psect	dataBANK0
   463     005F                     __pdataBANK0:
   464     005F                     _lcd:
   465     005F                     	ds	5
   466                           
   467                           	psect	bssBANK1
   468     00A0                     __pbssBANK1:
   469     00A0                     _dbuf:
   470     00A0                     	ds	32
   471                           
   472                           	psect	clrtext
   473     0FC8                     clear_ram0:	
   474                           ;	Called with FSR containing the base address, and
   475                           ;	W with the last address+1
   476                           
   477     0FC8  0064               	clrwdt	;clear the watchdog before getting into this loop
   478     0FC9                     clrloop0:
   479     0FC9  0180               	clrf	0	;clear RAM location pointed to by FSR
   480     0FCA  0A84               	incf	4,f	;increment pointer
   481     0FCB  0604               	xorwf	4,w	;XOR with final address
   482     0FCC  1903               	btfsc	3,2	;have we reached the end yet?
   483     0FCD  3400               	retlw	0	;all done for this memory range, return
   484     0FCE  0604               	xorwf	4,w	;XOR again to restore value
   485     0FCF  2FC9               	goto	clrloop0	;do the next byte
   486                           
   487                           	psect	cstackCOMMON
   488     0070                     __pcstackCOMMON:
   489     0070                     ?_LCD_Write:
   490     0070                     ?_volt:	
   491                           ; 1 bytes @ 0x0
   492                           
   493     0070                     ?_porcentaje:	
   494                           ; 1 bytes @ 0x0
   495                           
   496     0070                     ?_mil:	
   497                           ; 1 bytes @ 0x0
   498                           
   499     0070                     ?_putch:	
   500                           ; 1 bytes @ 0x0
   501                           
   502     0070                     ?_ADC_Initialize:	
   503                           ; 1 bytes @ 0x0
   504                           
   505     0070                     ?_main:	
   506                           ; 1 bytes @ 0x0
   507                           
   508     0070                     ?_LCD_Out:	
   509                           ; 1 bytes @ 0x0
   510                           
   511     0070                     ?_LCD_putc:	
   512                           ; 1 bytes @ 0x0
   513                           
   514     0070                     ?_fputc:	
   515                           ; 1 bytes @ 0x0
   516                           
   517     0070                     ?_ADC_read:	
   518                           ; 2 bytes @ 0x0
   519                           
   520     0070                     ?___lwdiv:	
   521                           ; 2 bytes @ 0x0
   522                           
   523     0070                     ?___lwmod:	
   524                           ; 2 bytes @ 0x0
   525                           
   526     0070                     ?___lmul:	
   527                           ; 2 bytes @ 0x0
   528                           
   529     0070                     putch@c:	
   530                           ; 4 bytes @ 0x0
   531                           
   532     0070                     ___lwdiv@divisor:	
   533                           ; 1 bytes @ 0x0
   534                           
   535     0070                     ___lwmod@divisor:	
   536                           ; 2 bytes @ 0x0
   537                           
   538     0070                     fputc@c:	
   539                           ; 2 bytes @ 0x0
   540                           
   541     0070                     ___lmul@multiplier:	
   542                           ; 2 bytes @ 0x0
   543                           
   544     0070                     ??_putch:	
   545                           ; 4 bytes @ 0x0
   546                           
   547     0070                     ??_ADC_Initialize:	
   548                           ; 1 bytes @ 0x0
   549                           
   550     0070                     ??_LCD_Out:	
   551                           ; 1 bytes @ 0x0
   552                           
   553                           
   554                           ; 1 bytes @ 0x0
   555     0070                     	ds	2
   556     0072                     LCD_Out@c:
   557     0072                     ___lwdiv@dividend:	
   558                           ; 1 bytes @ 0x2
   559                           
   560     0072                     ___lwmod@dividend:	
   561                           ; 2 bytes @ 0x2
   562                           
   563     0072                     fputc@fp:	
   564                           ; 2 bytes @ 0x2
   565                           
   566     0072                     ??_ADC_read:	
   567                           ; 2 bytes @ 0x2
   568                           
   569                           
   570                           ; 1 bytes @ 0x2
   571     0072                     	ds	1
   572     0073                     ??_LCD_Write:
   573     0073                     ??_LCD_putc:	
   574                           ; 1 bytes @ 0x3
   575                           
   576                           
   577                           ; 1 bytes @ 0x3
   578     0073                     	ds	1
   579     0074                     ___lwmod@counter:
   580     0074                     ___lwdiv@quotient:	
   581                           ; 1 bytes @ 0x4
   582                           
   583     0074                     ___lmul@multiplicand:	
   584                           ; 2 bytes @ 0x4
   585                           
   586     0074                     ??_fputc:	
   587                           ; 4 bytes @ 0x4
   588                           
   589     0074                     ??___lwdiv:	
   590                           ; 1 bytes @ 0x4
   591                           
   592     0074                     ??___lwmod:	
   593                           ; 1 bytes @ 0x4
   594                           
   595                           
   596                           ; 1 bytes @ 0x4
   597     0074                     	ds	1
   598     0075                     LCD_Write@c:
   599     0075                     LCD_putc@c:	
   600                           ; 1 bytes @ 0x5
   601                           
   602                           
   603                           ; 1 bytes @ 0x5
   604     0075                     	ds	1
   605     0076                     ?_LCD_Init:
   606     0076                     ?_LCD_putrs:	
   607                           ; 1 bytes @ 0x6
   608                           
   609     0076                     ___lwdiv@counter:	
   610                           ; 1 bytes @ 0x6
   611                           
   612     0076                     LCD_putrs@a:	
   613                           ; 1 bytes @ 0x6
   614                           
   615     0076                     LCD_Init@display:	
   616                           ; 2 bytes @ 0x6
   617                           
   618                           
   619                           ; 5 bytes @ 0x6
   620     0076                     	ds	2
   621     0078                     ??_LCD_putrs:
   622     0078                     ??___lmul:	
   623                           ; 1 bytes @ 0x8
   624                           
   625                           
   626                           ; 1 bytes @ 0x8
   627     0078                     	ds	1
   628     0079                     ___lmul@product:
   629                           
   630                           ; 4 bytes @ 0x9
   631     0079                     	ds	2
   632     007B                     LCD_putrs@i:
   633     007B                     ??_LCD_Init:	
   634                           ; 2 bytes @ 0xB
   635                           
   636                           
   637                           ; 1 bytes @ 0xB
   638     007B                     	ds	2
   639     007D                     LCD_Init@cmd:
   640     007D                     vfprintf@cfmt:	
   641                           ; 1 bytes @ 0xD
   642                           
   643     007D                     ??_vfprintf:	
   644                           ; 1 bytes @ 0xD
   645                           
   646     007D                     ??___aldiv:	
   647                           ; 1 bytes @ 0xD
   648                           
   649                           
   650                           ; 1 bytes @ 0xD
   651     007D                     	ds	1
   652     007E                     ??_main:
   653                           
   654                           	psect	cstackBANK0
   655     0020                     __pcstackBANK0:	
   656                           ; 1 bytes @ 0xE
   657                           
   658     0020                     ?_vfpfcnvrt:
   659     0020                     ?___aldiv:	
   660                           ; 1 bytes @ 0x0
   661                           
   662     0020                     vfpfcnvrt@fp:	
   663                           ; 4 bytes @ 0x0
   664                           
   665     0020                     ___aldiv@divisor:	
   666                           ; 2 bytes @ 0x0
   667                           
   668                           
   669                           ; 4 bytes @ 0x0
   670     0020                     	ds	2
   671     0022                     vfpfcnvrt@fmt:
   672                           
   673                           ; 1 bytes @ 0x2
   674     0022                     	ds	1
   675     0023                     vfpfcnvrt@ap:
   676                           
   677                           ; 1 bytes @ 0x3
   678     0023                     	ds	1
   679     0024                     ___aldiv@dividend:
   680     0024                     ??_vfpfcnvrt:	
   681                           ; 4 bytes @ 0x4
   682                           
   683                           
   684                           ; 1 bytes @ 0x4
   685     0024                     	ds	2
   686     0026                     vfpfcnvrt@convarg:
   687                           
   688                           ; 4 bytes @ 0x6
   689     0026                     	ds	2
   690     0028                     ___aldiv@counter:
   691                           
   692                           ; 1 bytes @ 0x8
   693     0028                     	ds	1
   694     0029                     ___aldiv@sign:
   695                           
   696                           ; 1 bytes @ 0x9
   697     0029                     	ds	1
   698     002A                     vfpfcnvrt@cp:
   699     002A                     ___aldiv@quotient:	
   700                           ; 1 bytes @ 0xA
   701                           
   702                           
   703                           ; 4 bytes @ 0xA
   704     002A                     	ds	1
   705     002B                     vfpfcnvrt@c:
   706                           
   707                           ; 1 bytes @ 0xB
   708     002B                     	ds	1
   709     002C                     ?_vfprintf:
   710     002C                     vfprintf@fp:	
   711                           ; 2 bytes @ 0xC
   712                           
   713                           
   714                           ; 2 bytes @ 0xC
   715     002C                     	ds	2
   716     002E                     vfprintf@fmt:
   717                           
   718                           ; 1 bytes @ 0xE
   719     002E                     	ds	1
   720     002F                     vfprintf@ap:
   721                           
   722                           ; 1 bytes @ 0xF
   723     002F                     	ds	1
   724     0030                     ?_sprintf:
   725     0030                     sprintf@s:	
   726                           ; 2 bytes @ 0x10
   727                           
   728                           
   729                           ; 1 bytes @ 0x10
   730     0030                     	ds	1
   731     0031                     sprintf@fmt:
   732                           
   733                           ; 1 bytes @ 0x11
   734     0031                     	ds	5
   735     0036                     ??_sprintf:
   736                           
   737                           ; 1 bytes @ 0x16
   738     0036                     	ds	1
   739     0037                     sprintf@ap:
   740                           
   741                           ; 1 bytes @ 0x17
   742     0037                     	ds	1
   743     0038                     sprintf@f:
   744                           
   745                           ; 11 bytes @ 0x18
   746     0038                     	ds	11
   747     0043                     ??_volt:
   748     0043                     ??_porcentaje:	
   749                           ; 1 bytes @ 0x23
   750                           
   751     0043                     ??_mil:	
   752                           ; 1 bytes @ 0x23
   753                           
   754                           
   755                           ; 1 bytes @ 0x23
   756     0043                     	ds	3
   757     0046                     main@aux:
   758                           
   759                           ; 2 bytes @ 0x26
   760     0046                     	ds	2
   761                           
   762                           	psect	maintext
   763     0211                     __pmaintext:	
   764 ;;
   765 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   766 ;;
   767 ;; *************** function _main *****************
   768 ;; Defined at:
   769 ;;		line 58 in file "main.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  aux             2   38[BANK0 ] unsigned int 
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : B00/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   783 ;;      Params:         0       0       0       0       0
   784 ;;      Locals:         0       2       0       0       0
   785 ;;      Temps:          0       0       0       0       0
   786 ;;      Totals:         0       2       0       0       0
   787 ;;Total ram usage:        2 bytes
   788 ;; Hardware stack levels required when called: 6
   789 ;; This function calls:
   790 ;;		_ADC_Initialize
   791 ;;		_ADC_read
   792 ;;		_LCD_Init
   793 ;;		_LCD_Write
   794 ;;		_mil
   795 ;;		_porcentaje
   796 ;;		_volt
   797 ;; This function is called by:
   798 ;;		Startup code after reset
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802     0211                     _main:	
   803                           ;psect for function _main
   804                           
   805     0211                     l1707:	
   806                           ;incstack = 0
   807                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   808                           
   809                           
   810                           ;main.c: 59:                 mil();
   811     0211  120A  158A  27D0  120A  118A  	fcall	_ADC_Initialize
   812     0216                     l1709:
   813                           
   814                           ;main.c: 60:                 break;
   815     0216  3076               	movlw	LCD_Init@display& (0+255)
   816     0217  0084               	movwf	4
   817     0218  1283               	bcf	3,5	;RP0=0, select bank0
   818     0219  1303               	bcf	3,6	;RP1=0, select bank0
   819     021A  085F               	movf	_lcd,w
   820     021B  0080               	movwf	0
   821     021C  0A84               	incf	4,f
   822     021D  0860               	movf	_lcd+1,w
   823     021E  0080               	movwf	0
   824     021F  0A84               	incf	4,f
   825     0220  0861               	movf	_lcd+2,w
   826     0221  0080               	movwf	0
   827     0222  0A84               	incf	4,f
   828     0223  0862               	movf	_lcd+3,w
   829     0224  0080               	movwf	0
   830     0225  0A84               	incf	4,f
   831     0226  0863               	movf	_lcd+4,w
   832     0227  0080               	movwf	0
   833     0228  120A  118A  25A3  120A  118A  	fcall	_LCD_Init
   834     022D                     l1711:
   835                           
   836                           ;main.c: 62:     }
   837     022D  1683               	bsf	3,5	;RP0=1, select bank3
   838     022E  1703               	bsf	3,6	;RP1=1, select bank3
   839     022F  0188               	clrf	8	;volatile
   840     0230                     l1713:
   841                           
   842                           ;main.c: 63: }
   843     0230  0189               	clrf	9	;volatile
   844     0231                     l1715:
   845                           
   846                           ;main.c: 64: 
   847     0231  307F               	movlw	127
   848     0232  1683               	bsf	3,5	;RP0=1, select bank1
   849     0233  1303               	bcf	3,6	;RP1=0, select bank1
   850     0234  0581               	andwf	1,f	;volatile
   851     0235                     l1717:
   852                           
   853                           ;main.c: 65: void volt(void)
   854     0235  3003               	movlw	3
   855     0236  0086               	movwf	6	;volatile
   856     0237                     l1719:
   857                           
   858                           ;main.c: 66: {
   859     0237  1283               	bcf	3,5	;RP0=0, select bank0
   860     0238  1303               	bcf	3,6	;RP1=0, select bank0
   861     0239  0186               	clrf	6	;volatile
   862     023A                     l1721:
   863                           
   864                           ;main.c: 68:     LCD_putrs("Voltaje: ");
   865     023A  3001               	movlw	1
   866     023B  00C6               	movwf	main@aux
   867     023C  3000               	movlw	0
   868     023D  00C7               	movwf	main@aux+1
   869     023E                     l1723:
   870     023E  3000               	movlw	0
   871     023F  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
   872     0244                     l1725:
   873     0244  3001               	movlw	1
   874     0245  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
   875     024A                     l1727:
   876                           
   877                           ;main.c: 73:     sprintf(buffer, "%u.%u", part_ent, part_dec);
   878     024A  1283               	bcf	3,5	;RP0=0, select bank0
   879     024B  1303               	bcf	3,6	;RP1=0, select bank0
   880     024C  1806               	btfsc	6,0	;volatile
   881     024D  2A4F               	goto	u1401
   882     024E  2A50               	goto	u1400
   883     024F                     u1401:
   884     024F  2A67               	goto	l1735
   885     0250                     u1400:
   886     0250                     l1729:
   887                           
   888                           ;main.c: 74: ;main.c: 75:     do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 
      +                          4 ); LCD_Write( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( 
      +                          (0xC0 + 0 & 0xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 2
      +                           ) { do { LCD_Write( (0x94 + 0 & 0xF0) >> 4 ); LCD_Write( 0x94 + 0 & 0x0F); } while ( 0 
      +                          ); } else if ( 1 == 3 ) { do { LCD_Write( (0xD4 + 0 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 0 
      +                          & 0x0F); } while ( 0 ); } } while ( 0 );
   889     0250  3001               	movlw	1
   890     0251  07C6               	addwf	main@aux,f
   891     0252  1803               	skipnc
   892     0253  0AC7               	incf	main@aux+1,f
   893     0254  3000               	movlw	0
   894     0255  07C7               	addwf	main@aux+1,f
   895     0256                     l70:	
   896                           ;main.c: 76:     LCD_putrs(buffer);
   897                           
   898     0256  1C06               	btfss	6,0	;volatile
   899     0257  2A59               	goto	u1411
   900     0258  2A5A               	goto	u1410
   901     0259                     u1411:
   902     0259  2A56               	goto	l70
   903     025A                     u1410:
   904     025A                     l1731:
   905                           
   906                           ;main.c: 77:     _delay((unsigned long)((200)*(4000000/4000.0)));
   907     025A  3000               	movlw	0
   908     025B  0247               	subwf	main@aux+1,w
   909     025C  3004               	movlw	4
   910     025D  1903               	skipnz
   911     025E  0246               	subwf	main@aux,w
   912     025F  1C03               	skipc
   913     0260  2A62               	goto	u1421
   914     0261  2A63               	goto	u1420
   915     0262                     u1421:
   916     0262  2A67               	goto	l1735
   917     0263                     u1420:
   918     0263                     l1733:
   919     0263  3001               	movlw	1
   920     0264  00C6               	movwf	main@aux
   921     0265  3000               	movlw	0
   922     0266  00C7               	movwf	main@aux+1
   923     0267                     l1735:
   924                           
   925                           ;main.c: 80: void porcentaje(void)
   926     0267  120A  118A  203B  120A  118A  	fcall	_ADC_read
   927     026C  0871               	movf	?_ADC_read+1,w
   928     026D  1283               	bcf	3,5	;RP0=0, select bank0
   929     026E  1303               	bcf	3,6	;RP1=0, select bank0
   930     026F  00D3               	movwf	_adc_result+1
   931     0270  0870               	movf	?_ADC_read,w
   932     0271  00D2               	movwf	_adc_result
   933                           
   934                           ;main.c: 81: {
   935     0272  2A85               	goto	l1745
   936     0273                     l1737:
   937                           
   938                           ;main.c: 84:     voltaje = (adc_result*1000000) / 102300;
   939     0273  120A  118A  2500  120A  118A  	fcall	_volt
   940                           
   941                           ;main.c: 85:     part_ent = voltaje / 100;
   942     0278  2A3E               	goto	l1723
   943     0279                     l1739:
   944                           
   945                           ;main.c: 87:     sprintf(buffer, "%u.%u", part_ent, part_dec);
   946     0279  120A  118A  245D  120A  118A  	fcall	_porcentaje
   947                           
   948                           ;main.c: 88: 
   949     027E  2A3E               	goto	l1723
   950     027F                     l1741:
   951                           
   952                           ;main.c: 90:     LCD_putrs(buffer);
   953     027F  120A  118A  2173  120A  118A  	fcall	_mil
   954                           
   955                           ;main.c: 91:     _delay((unsigned long)((200)*(4000000/4000.0)));
   956     0284  2A3E               	goto	l1723
   957     0285                     l1745:
   958                           
   959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   960                           ; Switch size 1, requested type "simple"
   961                           ; Number of cases is 1, Range of values is 0 to 0
   962                           ; switch strategies available:
   963                           ; Name         Instructions Cycles
   964                           ; simple_byte            4     3 (average)
   965                           ; direct_byte           11     8 (fixed)
   966                           ; jumptable            260     6 (fixed)
   967                           ;	Chosen strategy is simple_byte
   968     0285  0847               	movf	main@aux+1,w
   969     0286  3A00               	xorlw	0	; case 0
   970     0287  1903               	skipnz
   971     0288  2A8A               	goto	l1779
   972     0289  2A3E               	goto	l1723
   973     028A                     l1779:
   974                           
   975                           ; Switch size 1, requested type "simple"
   976                           ; Number of cases is 3, Range of values is 1 to 3
   977                           ; switch strategies available:
   978                           ; Name         Instructions Cycles
   979                           ; simple_byte           10     6 (average)
   980                           ; direct_byte           20    11 (fixed)
   981                           ; jumptable            263     9 (fixed)
   982                           ;	Chosen strategy is simple_byte
   983     028A  0846               	movf	main@aux,w
   984     028B  3A01               	xorlw	1	; case 1
   985     028C  1903               	skipnz
   986     028D  2A73               	goto	l1737
   987     028E  3A03               	xorlw	3	; case 2
   988     028F  1903               	skipnz
   989     0290  2A79               	goto	l1739
   990     0291  3A01               	xorlw	1	; case 3
   991     0292  1903               	skipnz
   992     0293  2A7F               	goto	l1741
   993     0294  2A3E               	goto	l1723
   994     0295  120A  118A  2800   	ljmp	start
   995     0298                     __end_of_main:
   996                           
   997                           	psect	text1
   998     0500                     __ptext1:	
   999 ;; *************** function _volt *****************
  1000 ;; Defined at:
  1001 ;;		line 96 in file "main.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1015 ;;      Params:         0       0       0       0       0
  1016 ;;      Locals:         0       0       0       0       0
  1017 ;;      Temps:          0       3       0       0       0
  1018 ;;      Totals:         0       3       0       0       0
  1019 ;;Total ram usage:        3 bytes
  1020 ;; Hardware stack levels used: 1
  1021 ;; Hardware stack levels required when called: 5
  1022 ;; This function calls:
  1023 ;;		_LCD_Write
  1024 ;;		_LCD_putrs
  1025 ;;		___aldiv
  1026 ;;		___lmul
  1027 ;;		___lwdiv
  1028 ;;		___lwmod
  1029 ;;		_sprintf
  1030 ;; This function is called by:
  1031 ;;		_main
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035     0500                     _volt:	
  1036                           ;psect for function _volt
  1037                           
  1038     0500                     l84:	
  1039                           ;incstack = 0
  1040                           ; Regs used in _volt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1041                           ;main.c: 98:     LCD_putrs("Mil: ");
  1042                           
  1043     0500                     l1623:
  1044     0500  3008               	movlw	8
  1045     0501  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1046     0506  3000               	movlw	0
  1047     0507  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1048     050C                     l1631:
  1049                           
  1050                           ;main.c: 99:     sprintf(buffer, "%u", adc_result);
  1051     050C  300E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1052     050D  00F6               	movwf	LCD_putrs@a
  1053     050E  3080               	movlw	128
  1054     050F  00F7               	movwf	LCD_putrs@a+1
  1055     0510  120A  118A  20A9  120A  118A  	fcall	_LCD_putrs
  1056     0515                     l1633:
  1057                           
  1058                           ;main.c: 101:     do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Wri
      +                          te( 0x80 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( (0xC0 + 0 & 
      +                          0xF0) >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 2 ) { do { LC
      +                          D_Write( (0x94 + 0 & 0xF0) >> 4 ); LCD_Write( 0x94 + 0 & 0x0F); } while ( 0 ); } else if
      +                           ( 1 == 3 ) { do { LCD_Write( (0xD4 + 0 & 0xF0) >> 4 ); LCD_Write( 0xD4 + 0 & 0x0F); } w
      +                          hile ( 0 ); } } while ( 0 );
  1059     0515  3000               	movlw	0
  1060     0516  1283               	bcf	3,5	;RP0=0, select bank0
  1061     0517  1303               	bcf	3,6	;RP1=0, select bank0
  1062     0518  00A3               	movwf	___aldiv@divisor+3
  1063     0519  3000               	movlw	0
  1064     051A  00A2               	movwf	___aldiv@divisor+2
  1065     051B  3027               	movlw	39
  1066     051C  00A1               	movwf	___aldiv@divisor+1
  1067     051D  30F6               	movlw	246
  1068     051E  00A0               	movwf	___aldiv@divisor
  1069     051F  0852               	movf	_adc_result,w
  1070     0520  00F0               	movwf	___lmul@multiplier
  1071     0521  0853               	movf	_adc_result+1,w
  1072     0522  00F1               	movwf	___lmul@multiplier+1
  1073     0523  01F2               	clrf	___lmul@multiplier+2
  1074     0524  01F3               	clrf	___lmul@multiplier+3
  1075     0525  3000               	movlw	0
  1076     0526  00F7               	movwf	___lmul@multiplicand+3
  1077     0527  3000               	movlw	0
  1078     0528  00F6               	movwf	___lmul@multiplicand+2
  1079     0529  30C3               	movlw	195
  1080     052A  00F5               	movwf	___lmul@multiplicand+1
  1081     052B  3050               	movlw	80
  1082     052C  00F4               	movwf	___lmul@multiplicand
  1083     052D  120A  118A  212D  120A  118A  	fcall	___lmul
  1084     0532  0873               	movf	?___lmul+3,w
  1085     0533  1283               	bcf	3,5	;RP0=0, select bank0
  1086     0534  1303               	bcf	3,6	;RP1=0, select bank0
  1087     0535  00A7               	movwf	___aldiv@dividend+3
  1088     0536  0872               	movf	?___lmul+2,w
  1089     0537  00A6               	movwf	___aldiv@dividend+2
  1090     0538  0871               	movf	?___lmul+1,w
  1091     0539  00A5               	movwf	___aldiv@dividend+1
  1092     053A  0870               	movf	?___lmul,w
  1093     053B  00A4               	movwf	___aldiv@dividend
  1094     053C  120A  118A  232A  120A  118A  	fcall	___aldiv
  1095     0541  1283               	bcf	3,5	;RP0=0, select bank0
  1096     0542  1303               	bcf	3,6	;RP1=0, select bank0
  1097     0543  0821               	movf	?___aldiv+1,w
  1098     0544  00D1               	movwf	_voltaje+1
  1099     0545  0820               	movf	?___aldiv,w
  1100     0546  00D0               	movwf	_voltaje
  1101     0547                     l1635:
  1102                           
  1103                           ;main.c: 102:     LCD_putrs(buffer);
  1104     0547  30E8               	movlw	232
  1105     0548  00F0               	movwf	___lwdiv@divisor
  1106     0549  3003               	movlw	3
  1107     054A  00F1               	movwf	___lwdiv@divisor+1
  1108     054B  0851               	movf	_voltaje+1,w
  1109     054C  00F3               	movwf	___lwdiv@dividend+1
  1110     054D  0850               	movf	_voltaje,w
  1111     054E  00F2               	movwf	___lwdiv@dividend
  1112     054F  120A  118A  20EB  120A  118A  	fcall	___lwdiv
  1113     0554  0871               	movf	?___lwdiv+1,w
  1114     0555  1283               	bcf	3,5	;RP0=0, select bank0
  1115     0556  1303               	bcf	3,6	;RP1=0, select bank0
  1116     0557  00CF               	movwf	_part_ent+1
  1117     0558  0870               	movf	?___lwdiv,w
  1118     0559  00CE               	movwf	_part_ent
  1119     055A                     l1637:
  1120                           
  1121                           ;main.c: 103:     _delay((unsigned long)((200)*(4000000/4000.0)));
  1122     055A  30E8               	movlw	232
  1123     055B  00F0               	movwf	___lwmod@divisor
  1124     055C  3003               	movlw	3
  1125     055D  00F1               	movwf	___lwmod@divisor+1
  1126     055E  0851               	movf	_voltaje+1,w
  1127     055F  00F3               	movwf	___lwmod@dividend+1
  1128     0560  0850               	movf	_voltaje,w
  1129     0561  00F2               	movwf	___lwmod@dividend
  1130     0562  120A  118A  2071  120A  118A  	fcall	___lwmod
  1131     0567  0871               	movf	?___lwmod+1,w
  1132     0568  1283               	bcf	3,5	;RP0=0, select bank0
  1133     0569  1303               	bcf	3,6	;RP1=0, select bank0
  1134     056A  00CD               	movwf	_part_dec+1
  1135     056B  0870               	movf	?___lwmod,w
  1136     056C  00CC               	movwf	_part_dec
  1137     056D                     l1639:
  1138                           
  1139                           ;main.c: 104: }
  1140     056D  3055               	movlw	(low (_buffer| 0))& (0+255)
  1141     056E  00B0               	movwf	sprintf@s
  1142     056F  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1143     0570  00B1               	movwf	sprintf@fmt
  1144     0571  084F               	movf	_part_ent+1,w
  1145     0572  00B3               	movwf	?_sprintf+3
  1146     0573  084E               	movf	_part_ent,w
  1147     0574  00B2               	movwf	?_sprintf+2
  1148     0575  084D               	movf	_part_dec+1,w
  1149     0576  00B5               	movwf	?_sprintf+5
  1150     0577  084C               	movf	_part_dec,w
  1151     0578  00B4               	movwf	?_sprintf+4
  1152     0579  120A  158A  27DD  120A  118A  	fcall	_sprintf
  1153     057E                     l1643:
  1154     057E  300C               	movlw	12
  1155     057F  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1156     0584  3000               	movlw	0
  1157     0585  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1158     058A                     l1649:
  1159     058A  3055               	movlw	(low (_buffer| 0))& (0+255)
  1160     058B  00F6               	movwf	LCD_putrs@a
  1161     058C  3000               	movlw	0
  1162     058D  00F7               	movwf	LCD_putrs@a+1
  1163     058E  120A  118A  20A9  120A  118A  	fcall	_LCD_putrs
  1164     0593                     l1651:
  1165     0593  3002               	movlw	2
  1166     0594  1283               	bcf	3,5	;RP0=0, select bank0
  1167     0595  1303               	bcf	3,6	;RP1=0, select bank0
  1168     0596  00C5               	movwf	??_volt+2
  1169     0597  3004               	movlw	4
  1170     0598  00C4               	movwf	??_volt+1
  1171     0599  30B9               	movlw	185
  1172     059A  00C3               	movwf	??_volt
  1173     059B                     u1447:
  1174     059B  0BC3               	decfsz	??_volt,f
  1175     059C  2D9B               	goto	u1447
  1176     059D  0BC4               	decfsz	??_volt+1,f
  1177     059E  2D9B               	goto	u1447
  1178     059F  0BC5               	decfsz	??_volt+2,f
  1179     05A0  2D9B               	goto	u1447
  1180     05A1  2DA2               	nop2
  1181     05A2                     l118:
  1182     05A2  0008               	return
  1183     05A3                     __end_of_volt:
  1184                           
  1185                           	psect	text2
  1186     045D                     __ptext2:	
  1187 ;; *************** function _porcentaje *****************
  1188 ;; Defined at:
  1189 ;;		line 111 in file "main.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;		None
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;		None
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1203 ;;      Params:         0       0       0       0       0
  1204 ;;      Locals:         0       0       0       0       0
  1205 ;;      Temps:          0       3       0       0       0
  1206 ;;      Totals:         0       3       0       0       0
  1207 ;;Total ram usage:        3 bytes
  1208 ;; Hardware stack levels used: 1
  1209 ;; Hardware stack levels required when called: 5
  1210 ;; This function calls:
  1211 ;;		_LCD_Write
  1212 ;;		_LCD_putrs
  1213 ;;		___aldiv
  1214 ;;		___lmul
  1215 ;;		___lwdiv
  1216 ;;		___lwmod
  1217 ;;		_sprintf
  1218 ;; This function is called by:
  1219 ;;		_main
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223     045D                     _porcentaje:	
  1224                           ;psect for function _porcentaje
  1225                           
  1226     045D                     l121:	
  1227                           ;incstack = 0
  1228                           ; Regs used in _porcentaje: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1229                           
  1230     045D                     l1653:
  1231     045D  3008               	movlw	8
  1232     045E  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1233     0463  3000               	movlw	0
  1234     0464  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1235     0469                     l1661:
  1236     0469  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1237     046A  00F6               	movwf	LCD_putrs@a
  1238     046B  3080               	movlw	128
  1239     046C  00F7               	movwf	LCD_putrs@a+1
  1240     046D  120A  118A  20A9  120A  118A  	fcall	_LCD_putrs
  1241     0472                     l1663:
  1242     0472  3000               	movlw	0
  1243     0473  1283               	bcf	3,5	;RP0=0, select bank0
  1244     0474  1303               	bcf	3,6	;RP1=0, select bank0
  1245     0475  00A3               	movwf	___aldiv@divisor+3
  1246     0476  3001               	movlw	1
  1247     0477  00A2               	movwf	___aldiv@divisor+2
  1248     0478  308F               	movlw	143
  1249     0479  00A1               	movwf	___aldiv@divisor+1
  1250     047A  309C               	movlw	156
  1251     047B  00A0               	movwf	___aldiv@divisor
  1252     047C  0852               	movf	_adc_result,w
  1253     047D  00F0               	movwf	___lmul@multiplier
  1254     047E  0853               	movf	_adc_result+1,w
  1255     047F  00F1               	movwf	___lmul@multiplier+1
  1256     0480  01F2               	clrf	___lmul@multiplier+2
  1257     0481  01F3               	clrf	___lmul@multiplier+3
  1258     0482  3000               	movlw	0
  1259     0483  00F7               	movwf	___lmul@multiplicand+3
  1260     0484  300F               	movlw	15
  1261     0485  00F6               	movwf	___lmul@multiplicand+2
  1262     0486  3042               	movlw	66
  1263     0487  00F5               	movwf	___lmul@multiplicand+1
  1264     0488  3040               	movlw	64
  1265     0489  00F4               	movwf	___lmul@multiplicand
  1266     048A  120A  118A  212D  120A  118A  	fcall	___lmul
  1267     048F  0873               	movf	?___lmul+3,w
  1268     0490  1283               	bcf	3,5	;RP0=0, select bank0
  1269     0491  1303               	bcf	3,6	;RP1=0, select bank0
  1270     0492  00A7               	movwf	___aldiv@dividend+3
  1271     0493  0872               	movf	?___lmul+2,w
  1272     0494  00A6               	movwf	___aldiv@dividend+2
  1273     0495  0871               	movf	?___lmul+1,w
  1274     0496  00A5               	movwf	___aldiv@dividend+1
  1275     0497  0870               	movf	?___lmul,w
  1276     0498  00A4               	movwf	___aldiv@dividend
  1277     0499  120A  118A  232A  120A  118A  	fcall	___aldiv
  1278     049E  1283               	bcf	3,5	;RP0=0, select bank0
  1279     049F  1303               	bcf	3,6	;RP1=0, select bank0
  1280     04A0  0821               	movf	?___aldiv+1,w
  1281     04A1  00D1               	movwf	_voltaje+1
  1282     04A2  0820               	movf	?___aldiv,w
  1283     04A3  00D0               	movwf	_voltaje
  1284     04A4                     l1665:
  1285     04A4  3064               	movlw	100
  1286     04A5  00F0               	movwf	___lwdiv@divisor
  1287     04A6  3000               	movlw	0
  1288     04A7  00F1               	movwf	___lwdiv@divisor+1
  1289     04A8  0851               	movf	_voltaje+1,w
  1290     04A9  00F3               	movwf	___lwdiv@dividend+1
  1291     04AA  0850               	movf	_voltaje,w
  1292     04AB  00F2               	movwf	___lwdiv@dividend
  1293     04AC  120A  118A  20EB  120A  118A  	fcall	___lwdiv
  1294     04B1  0871               	movf	?___lwdiv+1,w
  1295     04B2  1283               	bcf	3,5	;RP0=0, select bank0
  1296     04B3  1303               	bcf	3,6	;RP1=0, select bank0
  1297     04B4  00CF               	movwf	_part_ent+1
  1298     04B5  0870               	movf	?___lwdiv,w
  1299     04B6  00CE               	movwf	_part_ent
  1300     04B7                     l1667:
  1301     04B7  3064               	movlw	100
  1302     04B8  00F0               	movwf	___lwmod@divisor
  1303     04B9  3000               	movlw	0
  1304     04BA  00F1               	movwf	___lwmod@divisor+1
  1305     04BB  0851               	movf	_voltaje+1,w
  1306     04BC  00F3               	movwf	___lwmod@dividend+1
  1307     04BD  0850               	movf	_voltaje,w
  1308     04BE  00F2               	movwf	___lwmod@dividend
  1309     04BF  120A  118A  2071  120A  118A  	fcall	___lwmod
  1310     04C4  0871               	movf	?___lwmod+1,w
  1311     04C5  1283               	bcf	3,5	;RP0=0, select bank0
  1312     04C6  1303               	bcf	3,6	;RP1=0, select bank0
  1313     04C7  00CD               	movwf	_part_dec+1
  1314     04C8  0870               	movf	?___lwmod,w
  1315     04C9  00CC               	movwf	_part_dec
  1316     04CA                     l1669:
  1317     04CA  3055               	movlw	(low (_buffer| 0))& (0+255)
  1318     04CB  00B0               	movwf	sprintf@s
  1319     04CC  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1320     04CD  00B1               	movwf	sprintf@fmt
  1321     04CE  084F               	movf	_part_ent+1,w
  1322     04CF  00B3               	movwf	?_sprintf+3
  1323     04D0  084E               	movf	_part_ent,w
  1324     04D1  00B2               	movwf	?_sprintf+2
  1325     04D2  084D               	movf	_part_dec+1,w
  1326     04D3  00B5               	movwf	?_sprintf+5
  1327     04D4  084C               	movf	_part_dec,w
  1328     04D5  00B4               	movwf	?_sprintf+4
  1329     04D6  120A  158A  27DD  120A  118A  	fcall	_sprintf
  1330     04DB                     l1673:
  1331     04DB  300C               	movlw	12
  1332     04DC  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1333     04E1  3000               	movlw	0
  1334     04E2  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1335     04E7                     l1679:
  1336     04E7  3055               	movlw	(low (_buffer| 0))& (0+255)
  1337     04E8  00F6               	movwf	LCD_putrs@a
  1338     04E9  3000               	movlw	0
  1339     04EA  00F7               	movwf	LCD_putrs@a+1
  1340     04EB  120A  118A  20A9  120A  118A  	fcall	_LCD_putrs
  1341     04F0                     l1681:
  1342     04F0  3002               	movlw	2
  1343     04F1  1283               	bcf	3,5	;RP0=0, select bank0
  1344     04F2  1303               	bcf	3,6	;RP1=0, select bank0
  1345     04F3  00C5               	movwf	??_porcentaje+2
  1346     04F4  3004               	movlw	4
  1347     04F5  00C4               	movwf	??_porcentaje+1
  1348     04F6  30B9               	movlw	185
  1349     04F7  00C3               	movwf	??_porcentaje
  1350     04F8                     u1457:
  1351     04F8  0BC3               	decfsz	??_porcentaje,f
  1352     04F9  2CF8               	goto	u1457
  1353     04FA  0BC4               	decfsz	??_porcentaje+1,f
  1354     04FB  2CF8               	goto	u1457
  1355     04FC  0BC5               	decfsz	??_porcentaje+2,f
  1356     04FD  2CF8               	goto	u1457
  1357     04FE  2CFF               	nop2
  1358     04FF                     l155:
  1359     04FF  0008               	return
  1360     0500                     __end_of_porcentaje:
  1361                           
  1362                           	psect	text3
  1363     012D                     __ptext3:	
  1364 ;; *************** function ___lmul *****************
  1365 ;; Defined at:
  1366 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul32.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  multiplier      4    0[COMMON] unsigned long 
  1369 ;;  multiplicand    4    4[COMMON] unsigned long 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  product         4    9[COMMON] unsigned long 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  4    0[COMMON] unsigned long 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1381 ;;      Params:         8       0       0       0       0
  1382 ;;      Locals:         4       0       0       0       0
  1383 ;;      Temps:          1       0       0       0       0
  1384 ;;      Totals:        13       0       0       0       0
  1385 ;;Total ram usage:       13 bytes
  1386 ;; Hardware stack levels used: 1
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_volt
  1391 ;;		_porcentaje
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395     012D                     ___lmul:	
  1396                           ;psect for function ___lmul
  1397                           
  1398     012D                     l1515:	
  1399                           ;incstack = 0
  1400                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1401                           
  1402     012D  3000               	movlw	0
  1403     012E  00FC               	movwf	___lmul@product+3
  1404     012F  3000               	movlw	0
  1405     0130  00FB               	movwf	___lmul@product+2
  1406     0131  3000               	movlw	0
  1407     0132  00FA               	movwf	___lmul@product+1
  1408     0133  3000               	movlw	0
  1409     0134  00F9               	movwf	___lmul@product
  1410     0135                     l1517:
  1411     0135  1C70               	btfss	___lmul@multiplier,0
  1412     0136  2938               	goto	u1201
  1413     0137  2939               	goto	u1200
  1414     0138                     u1201:
  1415     0138  2950               	goto	l1521
  1416     0139                     u1200:
  1417     0139                     l1519:
  1418     0139  0874               	movf	___lmul@multiplicand,w
  1419     013A  07F9               	addwf	___lmul@product,f
  1420     013B  0875               	movf	___lmul@multiplicand+1,w
  1421     013C  1103               	clrz
  1422     013D  1803               	skipnc
  1423     013E  3E01               	addlw	1
  1424     013F  1903               	skipnz
  1425     0140  2942               	goto	u1211
  1426     0141  07FA               	addwf	___lmul@product+1,f
  1427     0142                     u1211:
  1428     0142  0876               	movf	___lmul@multiplicand+2,w
  1429     0143  1103               	clrz
  1430     0144  1803               	skipnc
  1431     0145  3E01               	addlw	1
  1432     0146  1903               	skipnz
  1433     0147  2949               	goto	u1212
  1434     0148  07FB               	addwf	___lmul@product+2,f
  1435     0149                     u1212:
  1436     0149  0877               	movf	___lmul@multiplicand+3,w
  1437     014A  1103               	clrz
  1438     014B  1803               	skipnc
  1439     014C  3E01               	addlw	1
  1440     014D  1903               	skipnz
  1441     014E  2950               	goto	u1213
  1442     014F  07FC               	addwf	___lmul@product+3,f
  1443     0150                     u1213:
  1444     0150                     l1521:
  1445     0150  3001               	movlw	1
  1446     0151  00F8               	movwf	??___lmul
  1447     0152                     u1225:
  1448     0152  1003               	clrc
  1449     0153  0DF4               	rlf	___lmul@multiplicand,f
  1450     0154  0DF5               	rlf	___lmul@multiplicand+1,f
  1451     0155  0DF6               	rlf	___lmul@multiplicand+2,f
  1452     0156  0DF7               	rlf	___lmul@multiplicand+3,f
  1453     0157  0BF8               	decfsz	??___lmul,f
  1454     0158  2952               	goto	u1225
  1455     0159                     l1523:
  1456     0159  3001               	movlw	1
  1457     015A                     u1235:
  1458     015A  1003               	clrc
  1459     015B  0CF3               	rrf	___lmul@multiplier+3,f
  1460     015C  0CF2               	rrf	___lmul@multiplier+2,f
  1461     015D  0CF1               	rrf	___lmul@multiplier+1,f
  1462     015E  0CF0               	rrf	___lmul@multiplier,f
  1463     015F  3EFF               	addlw	-1
  1464     0160  1D03               	skipz
  1465     0161  295A               	goto	u1235
  1466     0162  0873               	movf	___lmul@multiplier+3,w
  1467     0163  0472               	iorwf	___lmul@multiplier+2,w
  1468     0164  0471               	iorwf	___lmul@multiplier+1,w
  1469     0165  0470               	iorwf	___lmul@multiplier,w
  1470     0166  1D03               	skipz
  1471     0167  2969               	goto	u1241
  1472     0168  296A               	goto	u1240
  1473     0169                     u1241:
  1474     0169  2935               	goto	l1517
  1475     016A                     u1240:
  1476     016A                     l1525:
  1477     016A  087C               	movf	___lmul@product+3,w
  1478     016B  00F3               	movwf	?___lmul+3
  1479     016C  087B               	movf	___lmul@product+2,w
  1480     016D  00F2               	movwf	?___lmul+2
  1481     016E  087A               	movf	___lmul@product+1,w
  1482     016F  00F1               	movwf	?___lmul+1
  1483     0170  0879               	movf	___lmul@product,w
  1484     0171  00F0               	movwf	?___lmul
  1485     0172                     l359:
  1486     0172  0008               	return
  1487     0173                     __end_of___lmul:
  1488                           
  1489                           	psect	text4
  1490     032A                     __ptext4:	
  1491 ;; *************** function ___aldiv *****************
  1492 ;; Defined at:
  1493 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\aldiv.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;  divisor         4    0[BANK0 ] long 
  1496 ;;  dividend        4    4[BANK0 ] long 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  quotient        4   10[BANK0 ] long 
  1499 ;;  sign            1    9[BANK0 ] unsigned char 
  1500 ;;  counter         1    8[BANK0 ] unsigned char 
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  4    0[BANK0 ] long 
  1503 ;; Registers used:
  1504 ;;		wreg, status,2, status,0
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1510 ;;      Params:         0       8       0       0       0
  1511 ;;      Locals:         0       6       0       0       0
  1512 ;;      Temps:          1       0       0       0       0
  1513 ;;      Totals:         1      14       0       0       0
  1514 ;;Total ram usage:       15 bytes
  1515 ;; Hardware stack levels used: 1
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_volt
  1520 ;;		_porcentaje
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524     032A                     ___aldiv:	
  1525                           ;psect for function ___aldiv
  1526                           
  1527     032A                     l1529:	
  1528                           ;incstack = 0
  1529                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1530                           
  1531     032A  1283               	bcf	3,5	;RP0=0, select bank0
  1532     032B  1303               	bcf	3,6	;RP1=0, select bank0
  1533     032C  01A9               	clrf	___aldiv@sign
  1534     032D                     l1531:
  1535     032D  1FA3               	btfss	___aldiv@divisor+3,7
  1536     032E  2B30               	goto	u1251
  1537     032F  2B31               	goto	u1250
  1538     0330                     u1251:
  1539     0330  2B3E               	goto	l410
  1540     0331                     u1250:
  1541     0331                     l1533:
  1542     0331  09A0               	comf	___aldiv@divisor,f
  1543     0332  09A1               	comf	___aldiv@divisor+1,f
  1544     0333  09A2               	comf	___aldiv@divisor+2,f
  1545     0334  09A3               	comf	___aldiv@divisor+3,f
  1546     0335  0AA0               	incf	___aldiv@divisor,f
  1547     0336  1903               	skipnz
  1548     0337  0AA1               	incf	___aldiv@divisor+1,f
  1549     0338  1903               	skipnz
  1550     0339  0AA2               	incf	___aldiv@divisor+2,f
  1551     033A  1903               	skipnz
  1552     033B  0AA3               	incf	___aldiv@divisor+3,f
  1553     033C  3001               	movlw	1
  1554     033D  00A9               	movwf	___aldiv@sign
  1555     033E                     l410:
  1556     033E  1FA7               	btfss	___aldiv@dividend+3,7
  1557     033F  2B41               	goto	u1261
  1558     0340  2B42               	goto	u1260
  1559     0341                     u1261:
  1560     0341  2B4F               	goto	l1539
  1561     0342                     u1260:
  1562     0342                     l1535:
  1563     0342  09A4               	comf	___aldiv@dividend,f
  1564     0343  09A5               	comf	___aldiv@dividend+1,f
  1565     0344  09A6               	comf	___aldiv@dividend+2,f
  1566     0345  09A7               	comf	___aldiv@dividend+3,f
  1567     0346  0AA4               	incf	___aldiv@dividend,f
  1568     0347  1903               	skipnz
  1569     0348  0AA5               	incf	___aldiv@dividend+1,f
  1570     0349  1903               	skipnz
  1571     034A  0AA6               	incf	___aldiv@dividend+2,f
  1572     034B  1903               	skipnz
  1573     034C  0AA7               	incf	___aldiv@dividend+3,f
  1574     034D                     l1537:
  1575     034D  3001               	movlw	1
  1576     034E  06A9               	xorwf	___aldiv@sign,f
  1577     034F                     l1539:
  1578     034F  3000               	movlw	0
  1579     0350  00AD               	movwf	___aldiv@quotient+3
  1580     0351  3000               	movlw	0
  1581     0352  00AC               	movwf	___aldiv@quotient+2
  1582     0353  3000               	movlw	0
  1583     0354  00AB               	movwf	___aldiv@quotient+1
  1584     0355  3000               	movlw	0
  1585     0356  00AA               	movwf	___aldiv@quotient
  1586     0357                     l1541:
  1587     0357  0823               	movf	___aldiv@divisor+3,w
  1588     0358  0422               	iorwf	___aldiv@divisor+2,w
  1589     0359  0421               	iorwf	___aldiv@divisor+1,w
  1590     035A  0420               	iorwf	___aldiv@divisor,w
  1591     035B  1903               	skipnz
  1592     035C  2B5E               	goto	u1271
  1593     035D  2B5F               	goto	u1270
  1594     035E                     u1271:
  1595     035E  2BAA               	goto	l1561
  1596     035F                     u1270:
  1597     035F                     l1543:
  1598     035F  3001               	movlw	1
  1599     0360  00A8               	movwf	___aldiv@counter
  1600     0361  2B6D               	goto	l1547
  1601     0362                     l1545:
  1602     0362  3001               	movlw	1
  1603     0363  00FD               	movwf	??___aldiv
  1604     0364                     u1285:
  1605     0364  1003               	clrc
  1606     0365  0DA0               	rlf	___aldiv@divisor,f
  1607     0366  0DA1               	rlf	___aldiv@divisor+1,f
  1608     0367  0DA2               	rlf	___aldiv@divisor+2,f
  1609     0368  0DA3               	rlf	___aldiv@divisor+3,f
  1610     0369  0BFD               	decfsz	??___aldiv,f
  1611     036A  2B64               	goto	u1285
  1612     036B  3001               	movlw	1
  1613     036C  07A8               	addwf	___aldiv@counter,f
  1614     036D                     l1547:
  1615     036D  1FA3               	btfss	___aldiv@divisor+3,7
  1616     036E  2B70               	goto	u1291
  1617     036F  2B71               	goto	u1290
  1618     0370                     u1291:
  1619     0370  2B62               	goto	l1545
  1620     0371                     u1290:
  1621     0371                     l1549:
  1622     0371  3001               	movlw	1
  1623     0372  00FD               	movwf	??___aldiv
  1624     0373                     u1305:
  1625     0373  1003               	clrc
  1626     0374  0DAA               	rlf	___aldiv@quotient,f
  1627     0375  0DAB               	rlf	___aldiv@quotient+1,f
  1628     0376  0DAC               	rlf	___aldiv@quotient+2,f
  1629     0377  0DAD               	rlf	___aldiv@quotient+3,f
  1630     0378  0BFD               	decfsz	??___aldiv,f
  1631     0379  2B73               	goto	u1305
  1632     037A                     l1551:
  1633     037A  0823               	movf	___aldiv@divisor+3,w
  1634     037B  0227               	subwf	___aldiv@dividend+3,w
  1635     037C  1D03               	skipz
  1636     037D  2B88               	goto	u1315
  1637     037E  0822               	movf	___aldiv@divisor+2,w
  1638     037F  0226               	subwf	___aldiv@dividend+2,w
  1639     0380  1D03               	skipz
  1640     0381  2B88               	goto	u1315
  1641     0382  0821               	movf	___aldiv@divisor+1,w
  1642     0383  0225               	subwf	___aldiv@dividend+1,w
  1643     0384  1D03               	skipz
  1644     0385  2B88               	goto	u1315
  1645     0386  0820               	movf	___aldiv@divisor,w
  1646     0387  0224               	subwf	___aldiv@dividend,w
  1647     0388                     u1315:
  1648     0388  1C03               	skipc
  1649     0389  2B8B               	goto	u1311
  1650     038A  2B8C               	goto	u1310
  1651     038B                     u1311:
  1652     038B  2B9B               	goto	l1557
  1653     038C                     u1310:
  1654     038C                     l1553:
  1655     038C  0820               	movf	___aldiv@divisor,w
  1656     038D  02A4               	subwf	___aldiv@dividend,f
  1657     038E  0821               	movf	___aldiv@divisor+1,w
  1658     038F  1C03               	skipc
  1659     0390  0F21               	incfsz	___aldiv@divisor+1,w
  1660     0391  02A5               	subwf	___aldiv@dividend+1,f
  1661     0392  0822               	movf	___aldiv@divisor+2,w
  1662     0393  1C03               	skipc
  1663     0394  0F22               	incfsz	___aldiv@divisor+2,w
  1664     0395  02A6               	subwf	___aldiv@dividend+2,f
  1665     0396  0823               	movf	___aldiv@divisor+3,w
  1666     0397  1C03               	skipc
  1667     0398  0F23               	incfsz	___aldiv@divisor+3,w
  1668     0399  02A7               	subwf	___aldiv@dividend+3,f
  1669     039A                     l1555:
  1670     039A  142A               	bsf	___aldiv@quotient,0
  1671     039B                     l1557:
  1672     039B  3001               	movlw	1
  1673     039C                     u1325:
  1674     039C  1003               	clrc
  1675     039D  0CA3               	rrf	___aldiv@divisor+3,f
  1676     039E  0CA2               	rrf	___aldiv@divisor+2,f
  1677     039F  0CA1               	rrf	___aldiv@divisor+1,f
  1678     03A0  0CA0               	rrf	___aldiv@divisor,f
  1679     03A1  3EFF               	addlw	-1
  1680     03A2  1D03               	skipz
  1681     03A3  2B9C               	goto	u1325
  1682     03A4                     l1559:
  1683     03A4  3001               	movlw	1
  1684     03A5  02A8               	subwf	___aldiv@counter,f
  1685     03A6  1D03               	btfss	3,2
  1686     03A7  2BA9               	goto	u1331
  1687     03A8  2BAA               	goto	u1330
  1688     03A9                     u1331:
  1689     03A9  2B71               	goto	l1549
  1690     03AA                     u1330:
  1691     03AA                     l1561:
  1692     03AA  0829               	movf	___aldiv@sign,w
  1693     03AB  1903               	btfsc	3,2
  1694     03AC  2BAE               	goto	u1341
  1695     03AD  2BAF               	goto	u1340
  1696     03AE                     u1341:
  1697     03AE  2BBA               	goto	l1565
  1698     03AF                     u1340:
  1699     03AF                     l1563:
  1700     03AF  09AA               	comf	___aldiv@quotient,f
  1701     03B0  09AB               	comf	___aldiv@quotient+1,f
  1702     03B1  09AC               	comf	___aldiv@quotient+2,f
  1703     03B2  09AD               	comf	___aldiv@quotient+3,f
  1704     03B3  0AAA               	incf	___aldiv@quotient,f
  1705     03B4  1903               	skipnz
  1706     03B5  0AAB               	incf	___aldiv@quotient+1,f
  1707     03B6  1903               	skipnz
  1708     03B7  0AAC               	incf	___aldiv@quotient+2,f
  1709     03B8  1903               	skipnz
  1710     03B9  0AAD               	incf	___aldiv@quotient+3,f
  1711     03BA                     l1565:
  1712     03BA  082D               	movf	___aldiv@quotient+3,w
  1713     03BB  00A3               	movwf	?___aldiv+3
  1714     03BC  082C               	movf	___aldiv@quotient+2,w
  1715     03BD  00A2               	movwf	?___aldiv+2
  1716     03BE  082B               	movf	___aldiv@quotient+1,w
  1717     03BF  00A1               	movwf	?___aldiv+1
  1718     03C0  082A               	movf	___aldiv@quotient,w
  1719     03C1  00A0               	movwf	?___aldiv
  1720     03C2                     l420:
  1721     03C2  0008               	return
  1722     03C3                     __end_of___aldiv:
  1723                           
  1724                           	psect	text5
  1725     0173                     __ptext5:	
  1726 ;; *************** function _mil *****************
  1727 ;; Defined at:
  1728 ;;		line 126 in file "main.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;		None
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;		None
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1742 ;;      Params:         0       0       0       0       0
  1743 ;;      Locals:         0       0       0       0       0
  1744 ;;      Temps:          0       3       0       0       0
  1745 ;;      Totals:         0       3       0       0       0
  1746 ;;Total ram usage:        3 bytes
  1747 ;; Hardware stack levels used: 1
  1748 ;; Hardware stack levels required when called: 5
  1749 ;; This function calls:
  1750 ;;		_LCD_Write
  1751 ;;		_LCD_putrs
  1752 ;;		_sprintf
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758     0173                     _mil:	
  1759                           ;psect for function _mil
  1760                           
  1761     0173                     l158:	
  1762                           ;incstack = 0
  1763                           ; Regs used in _mil: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1764                           
  1765     0173                     l1683:
  1766     0173  3008               	movlw	8
  1767     0174  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1768     0179  3000               	movlw	0
  1769     017A  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1770     017F                     l1691:
  1771     017F  3018               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1772     0180  00F6               	movwf	LCD_putrs@a
  1773     0181  3080               	movlw	128
  1774     0182  00F7               	movwf	LCD_putrs@a+1
  1775     0183  120A  118A  20A9  120A  118A  	fcall	_LCD_putrs
  1776     0188                     l1693:
  1777     0188  3055               	movlw	(low (_buffer| 0))& (0+255)
  1778     0189  1283               	bcf	3,5	;RP0=0, select bank0
  1779     018A  1303               	bcf	3,6	;RP1=0, select bank0
  1780     018B  00B0               	movwf	sprintf@s
  1781     018C  3021               	movlw	(low (((STR_2+3)-__stringbase)| (0+32768)))& (0+255)
  1782     018D  00B1               	movwf	sprintf@fmt
  1783     018E  0853               	movf	_adc_result+1,w
  1784     018F  00B3               	movwf	?_sprintf+3
  1785     0190  0852               	movf	_adc_result,w
  1786     0191  00B2               	movwf	?_sprintf+2
  1787     0192  120A  158A  27DD  120A  118A  	fcall	_sprintf
  1788     0197                     l1697:
  1789     0197  300C               	movlw	12
  1790     0198  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1791     019D  3000               	movlw	0
  1792     019E  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  1793     01A3                     l1703:
  1794     01A3  3055               	movlw	(low (_buffer| 0))& (0+255)
  1795     01A4  00F6               	movwf	LCD_putrs@a
  1796     01A5  3000               	movlw	0
  1797     01A6  00F7               	movwf	LCD_putrs@a+1
  1798     01A7  120A  118A  20A9  120A  118A  	fcall	_LCD_putrs
  1799     01AC                     l1705:
  1800     01AC  3002               	movlw	2
  1801     01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1802     01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1803     01AF  00C5               	movwf	??_mil+2
  1804     01B0  3004               	movlw	4
  1805     01B1  00C4               	movwf	??_mil+1
  1806     01B2  30B9               	movlw	185
  1807     01B3  00C3               	movwf	??_mil
  1808     01B4                     u1467:
  1809     01B4  0BC3               	decfsz	??_mil,f
  1810     01B5  29B4               	goto	u1467
  1811     01B6  0BC4               	decfsz	??_mil+1,f
  1812     01B7  29B4               	goto	u1467
  1813     01B8  0BC5               	decfsz	??_mil+2,f
  1814     01B9  29B4               	goto	u1467
  1815     01BA  29BB               	nop2
  1816     01BB                     l192:
  1817     01BB  0008               	return
  1818     01BC                     __end_of_mil:
  1819                           
  1820                           	psect	text6
  1821     0FDD                     __ptext6:	
  1822 ;; *************** function _sprintf *****************
  1823 ;; Defined at:
  1824 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  s               1   16[BANK0 ] PTR unsigned char 
  1827 ;;		 -> buffer(10), 
  1828 ;;  fmt             1   17[BANK0 ] PTR const unsigned char 
  1829 ;;		 -> STR_6(3), STR_4(6), STR_2(6), 
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;  f              11   24[BANK0 ] struct _IO_FILE
  1832 ;;  ret             2    0        int 
  1833 ;;  ap              1   23[BANK0 ] PTR void [1]
  1834 ;;		 -> ?_sprintf(2), 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  2   16[BANK0 ] int 
  1837 ;; Registers used:
  1838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1844 ;;      Params:         0       6       0       0       0
  1845 ;;      Locals:         0      12       0       0       0
  1846 ;;      Temps:          0       1       0       0       0
  1847 ;;      Totals:         0      19       0       0       0
  1848 ;;Total ram usage:       19 bytes
  1849 ;; Hardware stack levels used: 1
  1850 ;; Hardware stack levels required when called: 4
  1851 ;; This function calls:
  1852 ;;		_vfprintf
  1853 ;; This function is called by:
  1854 ;;		_volt
  1855 ;;		_porcentaje
  1856 ;;		_mil
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860     0FDD                     _sprintf:	
  1861                           ;psect for function _sprintf
  1862                           
  1863     0FDD                     l1501:	
  1864                           ;incstack = 0
  1865                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1866                           
  1867     0FDD  3032               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1868     0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  1869     0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  1870     0FE0  00B7               	movwf	sprintf@ap
  1871     0FE1                     l1503:
  1872     0FE1  0830               	movf	sprintf@s,w
  1873     0FE2  00B8               	movwf	sprintf@f
  1874     0FE3  3000               	movlw	0
  1875     0FE4  00B9               	movwf	sprintf@f+1
  1876     0FE5                     l1505:
  1877     0FE5  01BA               	clrf	sprintf@f+2
  1878     0FE6  01BB               	clrf	sprintf@f+3
  1879     0FE7                     l1507:
  1880     0FE7  01C1               	clrf	sprintf@f+9
  1881     0FE8  01C2               	clrf	sprintf@f+10
  1882     0FE9                     l1509:
  1883     0FE9  3038               	movlw	low sprintf@f
  1884     0FEA  00AC               	movwf	vfprintf@fp
  1885     0FEB  3000               	movlw	high sprintf@f
  1886     0FEC  00AD               	movwf	vfprintf@fp+1
  1887     0FED  0831               	movf	sprintf@fmt,w
  1888     0FEE  00AE               	movwf	vfprintf@fmt
  1889     0FEF  3037               	movlw	(low (sprintf@ap| 0))& (0+255)
  1890     0FF0  00AF               	movwf	vfprintf@ap
  1891     0FF1  120A  118A  204C  120A  158A  	fcall	_vfprintf
  1892     0FF6                     l1511:
  1893     0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  1894     0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  1895     0FF8  083A               	movf	sprintf@f+2,w
  1896     0FF9  0730               	addwf	sprintf@s,w
  1897     0FFA  00B6               	movwf	??_sprintf
  1898     0FFB  0836               	movf	??_sprintf,w
  1899     0FFC  0084               	movwf	4
  1900     0FFD  1383               	bcf	3,7	;select IRP bank0
  1901     0FFE  0180               	clrf	0
  1902     0FFF                     l808:
  1903     0FFF  0008               	return
  1904     1000                     __end_of_sprintf:
  1905                           
  1906                           	psect	text7
  1907     004C                     __ptext7:	
  1908 ;; *************** function _vfprintf *****************
  1909 ;; Defined at:
  1910 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  fp              2   12[BANK0 ] PTR struct _IO_FILE
  1913 ;;		 -> sprintf@f(11), 
  1914 ;;  fmt             1   14[BANK0 ] PTR const unsigned char 
  1915 ;;		 -> STR_6(3), STR_4(6), STR_2(6), 
  1916 ;;  ap              1   15[BANK0 ] PTR PTR void 
  1917 ;;		 -> sprintf@ap(1), 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  cfmt            1   13[COMMON] PTR unsigned char 
  1920 ;;		 -> STR_6(3), STR_4(6), STR_2(6), 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  2   12[BANK0 ] int 
  1923 ;; Registers used:
  1924 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1930 ;;      Params:         0       4       0       0       0
  1931 ;;      Locals:         1       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0
  1933 ;;      Totals:         1       4       0       0       0
  1934 ;;Total ram usage:        5 bytes
  1935 ;; Hardware stack levels used: 1
  1936 ;; Hardware stack levels required when called: 3
  1937 ;; This function calls:
  1938 ;;		_vfpfcnvrt
  1939 ;; This function is called by:
  1940 ;;		_sprintf
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944     004C                     _vfprintf:	
  1945                           ;psect for function _vfprintf
  1946                           
  1947     004C                     l1473:	
  1948                           ;incstack = 0
  1949                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1950                           
  1951                           
  1952                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1953     004C  1283               	bcf	3,5	;RP0=0, select bank0
  1954     004D  1303               	bcf	3,6	;RP1=0, select bank0
  1955     004E  082E               	movf	vfprintf@fmt,w
  1956     004F  00FD               	movwf	vfprintf@cfmt
  1957                           
  1958                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1959     0050  2860               	goto	l1477
  1960     0051                     l1475:
  1961                           
  1962                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1963     0051  1283               	bcf	3,5	;RP0=0, select bank0
  1964     0052  1303               	bcf	3,6	;RP1=0, select bank0
  1965     0053  082C               	movf	vfprintf@fp,w
  1966     0054  00A0               	movwf	vfpfcnvrt@fp
  1967     0055  082D               	movf	vfprintf@fp+1,w
  1968     0056  00A1               	movwf	vfpfcnvrt@fp+1
  1969     0057  307D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1970     0058  00A2               	movwf	vfpfcnvrt@fmt
  1971     0059  082F               	movf	vfprintf@ap,w
  1972     005A  00A3               	movwf	vfpfcnvrt@ap
  1973     005B  120A  118A  2709  120A  118A  	fcall	_vfpfcnvrt
  1974     0060                     l1477:
  1975                           
  1976                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1977     0060  087D               	movf	vfprintf@cfmt,w
  1978     0061  0084               	movwf	4
  1979     0062  120A  118A  200D  120A  118A  	fcall	stringdir
  1980     0067  3A00               	xorlw	0
  1981     0068  1D03               	skipz
  1982     0069  286B               	goto	u1131
  1983     006A  286C               	goto	u1130
  1984     006B                     u1131:
  1985     006B  2851               	goto	l1475
  1986     006C                     u1130:
  1987     006C                     l1479:
  1988                           
  1989                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1990     006C  1283               	bcf	3,5	;RP0=0, select bank0
  1991     006D  1303               	bcf	3,6	;RP1=0, select bank0
  1992     006E  01AC               	clrf	?_vfprintf
  1993     006F  01AD               	clrf	?_vfprintf+1
  1994     0070                     l852:
  1995     0070  0008               	return
  1996     0071                     __end_of_vfprintf:
  1997                           
  1998                           	psect	text8
  1999     0709                     __ptext8:	
  2000 ;; *************** function _vfpfcnvrt *****************
  2001 ;; Defined at:
  2002 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2005 ;;		 -> sprintf@f(11), 
  2006 ;;  fmt             1    2[BANK0 ] PTR PTR unsigned char 
  2007 ;;		 -> vfprintf@cfmt(1), 
  2008 ;;  ap              1    3[BANK0 ] PTR PTR void 
  2009 ;;		 -> sprintf@ap(1), 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  convarg         4    6[BANK0 ] struct .
  2012 ;;  c               1   11[BANK0 ] unsigned char 
  2013 ;;  cp              1   10[BANK0 ] PTR unsigned char 
  2014 ;;		 -> STR_6(3), STR_4(6), STR_2(6), 
  2015 ;;  done            1    0        _Bool 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2025 ;;      Params:         0       4       0       0       0
  2026 ;;      Locals:         0       6       0       0       0
  2027 ;;      Temps:          0       2       0       0       0
  2028 ;;      Totals:         0      12       0       0       0
  2029 ;;Total ram usage:       12 bytes
  2030 ;; Hardware stack levels used: 1
  2031 ;; Hardware stack levels required when called: 2
  2032 ;; This function calls:
  2033 ;;		___lwdiv
  2034 ;;		___lwmod
  2035 ;;		_fputc
  2036 ;; This function is called by:
  2037 ;;		_vfprintf
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041     0709                     _vfpfcnvrt:	
  2042                           ;psect for function _vfpfcnvrt
  2043                           
  2044     0709                     l1413:	
  2045                           ;incstack = 0
  2046                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2047                           
  2048                           
  2049                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2050     0709  1283               	bcf	3,5	;RP0=0, select bank0
  2051     070A  1303               	bcf	3,6	;RP1=0, select bank0
  2052     070B  0822               	movf	vfpfcnvrt@fmt,w
  2053     070C  0084               	movwf	4
  2054     070D  0800               	movf	0,w
  2055     070E  0084               	movwf	4
  2056     070F  120A  118A  200D  120A  118A  	fcall	stringdir
  2057     0714  3A25               	xorlw	37
  2058     0715  1D03               	skipz
  2059     0716  2F18               	goto	u1021
  2060     0717  2F19               	goto	u1020
  2061     0718                     u1021:
  2062     0718  2FB3               	goto	l1451
  2063     0719                     u1020:
  2064     0719                     l1415:
  2065                           
  2066                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2067     0719  0822               	movf	vfpfcnvrt@fmt,w
  2068     071A  0084               	movwf	4
  2069     071B  3001               	movlw	1
  2070     071C  0780               	addwf	0,f
  2071     071D                     l1417:
  2072                           
  2073                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2074     071D  01C8               	clrf	_width
  2075     071E  01C9               	clrf	_width+1
  2076     071F  3000               	movlw	0
  2077     0720  00D4               	movwf	_flags
  2078     0721                     l1419:
  2079                           
  2080                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2081     0721  30FF               	movlw	255
  2082     0722  00CA               	movwf	_prec
  2083     0723  30FF               	movlw	255
  2084     0724  00CB               	movwf	_prec+1
  2085     0725                     l1421:
  2086                           
  2087                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  2088     0725  0822               	movf	vfpfcnvrt@fmt,w
  2089     0726  0084               	movwf	4
  2090     0727  0800               	movf	0,w
  2091     0728  00AA               	movwf	vfpfcnvrt@cp
  2092     0729                     l1423:
  2093     0729  082A               	movf	vfpfcnvrt@cp,w
  2094     072A  0084               	movwf	4
  2095     072B  120A  118A  200D  120A  118A  	fcall	stringdir
  2096     0730  3A75               	xorlw	117
  2097     0731  1D03               	skipz
  2098     0732  2F34               	goto	u1031
  2099     0733  2F35               	goto	u1030
  2100     0734                     u1031:
  2101     0734  2FAC               	goto	l1447
  2102     0735                     u1030:
  2103     0735                     l1425:
  2104                           
  2105                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  2106     0735  0823               	movf	vfpfcnvrt@ap,w
  2107     0736  0084               	movwf	4
  2108     0737  1383               	bcf	3,7	;select IRP bank0
  2109     0738  0800               	movf	0,w
  2110     0739  00FF               	movwf	btemp+1
  2111     073A  3002               	movlw	2
  2112     073B  0780               	addwf	0,f
  2113     073C  087F               	movf	btemp+1,w
  2114     073D  0084               	movwf	4
  2115     073E  0800               	movf	0,w
  2116     073F  00A6               	movwf	vfpfcnvrt@convarg
  2117     0740  0A84               	incf	4,f
  2118     0741  0800               	movf	0,w
  2119     0742  00A7               	movwf	vfpfcnvrt@convarg+1
  2120     0743                     l1427:
  2121                           
  2122                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  2123     0743  0822               	movf	vfpfcnvrt@fmt,w
  2124     0744  0084               	movwf	4
  2125     0745  082A               	movf	vfpfcnvrt@cp,w
  2126     0746  3E01               	addlw	1
  2127     0747  0080               	movwf	0
  2128                           
  2129                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  2130     0748  2FA1               	goto	l1445
  2131     0749                     l837:	
  2132                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1523:     case 'u
      +                          ':
  2133                           
  2134                           
  2135                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  2136     0749  3020               	movlw	32
  2137     074A  00AB               	movwf	vfpfcnvrt@c
  2138     074B                     l1429:
  2139                           
  2140                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  2141     074B  3001               	movlw	1
  2142     074C  02AB               	subwf	vfpfcnvrt@c,f
  2143     074D  082B               	movf	vfpfcnvrt@c,w
  2144     074E  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2145     074F  0084               	movwf	4
  2146     0750  300A               	movlw	10
  2147     0751  00F0               	movwf	___lwmod@divisor
  2148     0752  3000               	movlw	0
  2149     0753  00F1               	movwf	___lwmod@divisor+1
  2150     0754  0827               	movf	vfpfcnvrt@convarg+1,w
  2151     0755  00F3               	movwf	___lwmod@dividend+1
  2152     0756  0826               	movf	vfpfcnvrt@convarg,w
  2153     0757  00F2               	movwf	___lwmod@dividend
  2154     0758  120A  118A  2071  120A  118A  	fcall	___lwmod
  2155     075D  0870               	movf	?___lwmod,w
  2156     075E  3E30               	addlw	48
  2157     075F  1383               	bcf	3,7	;select IRP bank1
  2158     0760  0080               	movwf	0
  2159     0761                     l1431:
  2160                           
  2161                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  2162     0761  300A               	movlw	10
  2163     0762  00F0               	movwf	___lwdiv@divisor
  2164     0763  3000               	movlw	0
  2165     0764  00F1               	movwf	___lwdiv@divisor+1
  2166     0765  1283               	bcf	3,5	;RP0=0, select bank0
  2167     0766  1303               	bcf	3,6	;RP1=0, select bank0
  2168     0767  0827               	movf	vfpfcnvrt@convarg+1,w
  2169     0768  00F3               	movwf	___lwdiv@dividend+1
  2170     0769  0826               	movf	vfpfcnvrt@convarg,w
  2171     076A  00F2               	movwf	___lwdiv@dividend
  2172     076B  120A  118A  20EB  120A  118A  	fcall	___lwdiv
  2173     0770  0871               	movf	?___lwdiv+1,w
  2174     0771  1283               	bcf	3,5	;RP0=0, select bank0
  2175     0772  1303               	bcf	3,6	;RP1=0, select bank0
  2176     0773  00A7               	movwf	vfpfcnvrt@convarg+1
  2177     0774  0870               	movf	?___lwdiv,w
  2178     0775  00A6               	movwf	vfpfcnvrt@convarg
  2179     0776                     l1433:
  2180                           
  2181                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  2182     0776  0826               	movf	vfpfcnvrt@convarg,w
  2183     0777  0427               	iorwf	vfpfcnvrt@convarg+1,w
  2184     0778  1903               	btfsc	3,2
  2185     0779  2F7B               	goto	u1041
  2186     077A  2F7C               	goto	u1040
  2187     077B                     u1041:
  2188     077B  2F9A               	goto	l1441
  2189     077C                     u1040:
  2190     077C                     l1435:
  2191     077C  082B               	movf	vfpfcnvrt@c,w
  2192     077D  1D03               	btfss	3,2
  2193     077E  2F80               	goto	u1051
  2194     077F  2F81               	goto	u1050
  2195     0780                     u1051:
  2196     0780  2F4B               	goto	l1429
  2197     0781                     u1050:
  2198     0781  2F9A               	goto	l1441
  2199     0782                     l1437:
  2200                           
  2201                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  2202     0782  082B               	movf	vfpfcnvrt@c,w
  2203     0783  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2204     0784  0084               	movwf	4
  2205     0785  1383               	bcf	3,7	;select IRP bank1
  2206     0786  0800               	movf	0,w
  2207     0787  00A4               	movwf	??_vfpfcnvrt
  2208     0788  01A5               	clrf	??_vfpfcnvrt+1
  2209     0789  0824               	movf	??_vfpfcnvrt,w
  2210     078A  00F0               	movwf	fputc@c
  2211     078B  0825               	movf	??_vfpfcnvrt+1,w
  2212     078C  00F1               	movwf	fputc@c+1
  2213     078D  0820               	movf	vfpfcnvrt@fp,w
  2214     078E  00F2               	movwf	fputc@fp
  2215     078F  0821               	movf	vfpfcnvrt@fp+1,w
  2216     0790  00F3               	movwf	fputc@fp+1
  2217     0791  120A  118A  23C3  120A  118A  	fcall	_fputc
  2218     0796                     l1439:
  2219     0796  3001               	movlw	1
  2220     0797  1283               	bcf	3,5	;RP0=0, select bank0
  2221     0798  1303               	bcf	3,6	;RP1=0, select bank0
  2222     0799  07AB               	addwf	vfpfcnvrt@c,f
  2223     079A                     l1441:
  2224                           
  2225                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  2226     079A  3020               	movlw	32
  2227     079B  062B               	xorwf	vfpfcnvrt@c,w
  2228     079C  1D03               	btfss	3,2
  2229     079D  2F9F               	goto	u1061
  2230     079E  2FA0               	goto	u1060
  2231     079F                     u1061:
  2232     079F  2F82               	goto	l1437
  2233     07A0                     u1060:
  2234     07A0  2FCC               	goto	l845
  2235     07A1                     l1445:
  2236     07A1  082A               	movf	vfpfcnvrt@cp,w
  2237     07A2  0084               	movwf	4
  2238     07A3  120A  118A  200D  120A  118A  	fcall	stringdir
  2239                           
  2240                           ; Switch size 1, requested type "simple"
  2241                           ; Number of cases is 1, Range of values is 117 to 117
  2242                           ; switch strategies available:
  2243                           ; Name         Instructions Cycles
  2244                           ; simple_byte            4     3 (average)
  2245                           ; direct_byte           14    11 (fixed)
  2246                           ; jumptable            263     9 (fixed)
  2247                           ;	Chosen strategy is simple_byte
  2248     07A8  3A75               	xorlw	117	; case 117
  2249     07A9  1903               	skipnz
  2250     07AA  2F49               	goto	l837
  2251     07AB  2FAC               	goto	l1447
  2252     07AC                     l1447:
  2253                           
  2254                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2255     07AC  1283               	bcf	3,5	;RP0=0, select bank0
  2256     07AD  1303               	bcf	3,6	;RP1=0, select bank0
  2257     07AE  0822               	movf	vfpfcnvrt@fmt,w
  2258     07AF  0084               	movwf	4
  2259     07B0  3001               	movlw	1
  2260     07B1  0780               	addwf	0,f
  2261     07B2  2FCC               	goto	l845
  2262     07B3                     l1451:
  2263                           
  2264                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2265     07B3  0822               	movf	vfpfcnvrt@fmt,w
  2266     07B4  0084               	movwf	4
  2267     07B5  0800               	movf	0,w
  2268     07B6  0084               	movwf	4
  2269     07B7  120A  118A  200D  120A  118A  	fcall	stringdir
  2270     07BC  00A4               	movwf	??_vfpfcnvrt
  2271     07BD  01A5               	clrf	??_vfpfcnvrt+1
  2272     07BE  0824               	movf	??_vfpfcnvrt,w
  2273     07BF  00F0               	movwf	fputc@c
  2274     07C0  0825               	movf	??_vfpfcnvrt+1,w
  2275     07C1  00F1               	movwf	fputc@c+1
  2276     07C2  0820               	movf	vfpfcnvrt@fp,w
  2277     07C3  00F2               	movwf	fputc@fp
  2278     07C4  0821               	movf	vfpfcnvrt@fp+1,w
  2279     07C5  00F3               	movwf	fputc@fp+1
  2280     07C6  120A  118A  23C3  120A  118A  	fcall	_fputc
  2281     07CB  2FAC               	goto	l1447
  2282     07CC                     l845:
  2283     07CC  0008               	return
  2284     07CD                     __end_of_vfpfcnvrt:
  2285                           
  2286                           	psect	text9
  2287     03C3                     __ptext9:	
  2288 ;; *************** function _fputc *****************
  2289 ;; Defined at:
  2290 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  c               2    0[COMMON] int 
  2293 ;;  fp              2    2[COMMON] PTR struct _IO_FILE
  2294 ;;		 -> sprintf@f(11), 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;		None
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  2    0[COMMON] int 
  2299 ;; Registers used:
  2300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2306 ;;      Params:         4       0       0       0       0
  2307 ;;      Locals:         0       0       0       0       0
  2308 ;;      Temps:          9       0       0       0       0
  2309 ;;      Totals:        13       0       0       0       0
  2310 ;;Total ram usage:       13 bytes
  2311 ;; Hardware stack levels used: 1
  2312 ;; Hardware stack levels required when called: 1
  2313 ;; This function calls:
  2314 ;;		_putch
  2315 ;; This function is called by:
  2316 ;;		_vfpfcnvrt
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320     03C3                     _fputc:	
  2321                           ;psect for function _fputc
  2322                           
  2323     03C3                     l1375:	
  2324                           ;incstack = 0
  2325                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2326                           
  2327     03C3  0872               	movf	fputc@fp,w
  2328     03C4  0473               	iorwf	fputc@fp+1,w
  2329     03C5  1903               	btfsc	3,2
  2330     03C6  2BC8               	goto	u851
  2331     03C7  2BC9               	goto	u850
  2332     03C8                     u851:
  2333     03C8  2BCF               	goto	l1379
  2334     03C9                     u850:
  2335     03C9                     l1377:
  2336     03C9  0872               	movf	fputc@fp,w
  2337     03CA  0473               	iorwf	fputc@fp+1,w
  2338     03CB  1D03               	btfss	3,2
  2339     03CC  2BCE               	goto	u861
  2340     03CD  2BCF               	goto	u860
  2341     03CE                     u861:
  2342     03CE  2BD6               	goto	l1381
  2343     03CF                     u860:
  2344     03CF                     l1379:
  2345     03CF  0870               	movf	fputc@c,w
  2346     03D0  120A  158A  27C7  120A  118A  	fcall	_putch
  2347     03D5  2C5C               	goto	l864
  2348     03D6                     l1381:
  2349     03D6  0872               	movf	fputc@fp,w
  2350     03D7  3E09               	addlw	9
  2351     03D8  00F4               	movwf	??_fputc
  2352     03D9  0873               	movf	fputc@fp+1,w
  2353     03DA  1803               	skipnc
  2354     03DB  3E01               	addlw	1
  2355     03DC  3E00               	addlw	0
  2356     03DD  00F5               	movwf	??_fputc+1
  2357     03DE  0874               	movf	??_fputc,w
  2358     03DF  0084               	movwf	4
  2359     03E0  1783               	bsf	3,7
  2360     03E1  1C75               	btfss	??_fputc+1,0
  2361     03E2  1383               	bcf	3,7
  2362     03E3  0800               	movf	0,w
  2363     03E4  00F6               	movwf	??_fputc+2
  2364     03E5  0A84               	incf	4,f
  2365     03E6  0800               	movf	0,w
  2366     03E7  00F7               	movwf	??_fputc+3
  2367     03E8  0876               	movf	??_fputc+2,w
  2368     03E9  0477               	iorwf	??_fputc+3,w
  2369     03EA  1903               	btfsc	3,2
  2370     03EB  2BED               	goto	u871
  2371     03EC  2BEE               	goto	u870
  2372     03ED                     u871:
  2373     03ED  2C20               	goto	l1385
  2374     03EE                     u870:
  2375     03EE                     l1383:
  2376     03EE  0872               	movf	fputc@fp,w
  2377     03EF  3E09               	addlw	9
  2378     03F0  00F4               	movwf	??_fputc
  2379     03F1  0873               	movf	fputc@fp+1,w
  2380     03F2  1803               	skipnc
  2381     03F3  3E01               	addlw	1
  2382     03F4  3E00               	addlw	0
  2383     03F5  00F5               	movwf	??_fputc+1
  2384     03F6  0874               	movf	??_fputc,w
  2385     03F7  0084               	movwf	4
  2386     03F8  1783               	bsf	3,7
  2387     03F9  1C75               	btfss	??_fputc+1,0
  2388     03FA  1383               	bcf	3,7
  2389     03FB  0800               	movf	0,w
  2390     03FC  00F6               	movwf	??_fputc+2
  2391     03FD  0A84               	incf	4,f
  2392     03FE  0800               	movf	0,w
  2393     03FF  00F7               	movwf	??_fputc+3
  2394     0400  0872               	movf	fputc@fp,w
  2395     0401  3E02               	addlw	2
  2396     0402  00F8               	movwf	??_fputc+4
  2397     0403  0873               	movf	fputc@fp+1,w
  2398     0404  1803               	skipnc
  2399     0405  3E01               	addlw	1
  2400     0406  3E00               	addlw	0
  2401     0407  00F9               	movwf	??_fputc+5
  2402     0408  0878               	movf	??_fputc+4,w
  2403     0409  0084               	movwf	4
  2404     040A  1783               	bsf	3,7
  2405     040B  1C79               	btfss	??_fputc+5,0
  2406     040C  1383               	bcf	3,7
  2407     040D  0800               	movf	0,w
  2408     040E  00FA               	movwf	??_fputc+6
  2409     040F  0A84               	incf	4,f
  2410     0410  0800               	movf	0,w
  2411     0411  00FB               	movwf	??_fputc+7
  2412     0412  087B               	movf	??_fputc+7,w
  2413     0413  3A80               	xorlw	128
  2414     0414  00FC               	movwf	??_fputc+8
  2415     0415  0877               	movf	??_fputc+3,w
  2416     0416  3A80               	xorlw	128
  2417     0417  027C               	subwf	??_fputc+8,w
  2418     0418  1D03               	skipz
  2419     0419  2C1C               	goto	u885
  2420     041A  0876               	movf	??_fputc+2,w
  2421     041B  027A               	subwf	??_fputc+6,w
  2422     041C                     u885:
  2423     041C  1803               	skipnc
  2424     041D  2C1F               	goto	u881
  2425     041E  2C20               	goto	u880
  2426     041F                     u881:
  2427     041F  2C5C               	goto	l864
  2428     0420                     u880:
  2429     0420                     l1385:
  2430     0420  0872               	movf	fputc@fp,w
  2431     0421  0084               	movwf	4
  2432     0422  1783               	bsf	3,7
  2433     0423  1C73               	btfss	fputc@fp+1,0
  2434     0424  1383               	bcf	3,7
  2435     0425  0800               	movf	0,w
  2436     0426  00F4               	movwf	??_fputc
  2437     0427  0A84               	incf	4,f
  2438     0428  0800               	movf	0,w
  2439     0429  00F5               	movwf	??_fputc+1
  2440     042A  0872               	movf	fputc@fp,w
  2441     042B  3E02               	addlw	2
  2442     042C  00F6               	movwf	??_fputc+2
  2443     042D  0873               	movf	fputc@fp+1,w
  2444     042E  1803               	skipnc
  2445     042F  3E01               	addlw	1
  2446     0430  3E00               	addlw	0
  2447     0431  00F7               	movwf	??_fputc+3
  2448     0432  0876               	movf	??_fputc+2,w
  2449     0433  0084               	movwf	4
  2450     0434  1783               	bsf	3,7
  2451     0435  1C77               	btfss	??_fputc+3,0
  2452     0436  1383               	bcf	3,7
  2453     0437  0800               	movf	0,w
  2454     0438  0774               	addwf	??_fputc,w
  2455     0439  00F9               	movwf	??_fputc+5
  2456     043A  0875               	movf	??_fputc+1,w
  2457     043B  00F8               	movwf	??_fputc+4
  2458     043C  1803               	skipnc
  2459     043D  0AF8               	incf	??_fputc+4,f
  2460     043E  1F80               	btfss	0,7
  2461     043F  2C41               	goto	u890
  2462     0440  03F8               	decf	??_fputc+4,f
  2463     0441                     u890:
  2464     0441  0878               	movf	??_fputc+4,w
  2465     0442  00FA               	movwf	??_fputc+6
  2466     0443  0879               	movf	??_fputc+5,w
  2467     0444  0084               	movwf	4
  2468     0445  1783               	bsf	3,7
  2469     0446  1C7A               	btfss	??_fputc+6,0
  2470     0447  1383               	bcf	3,7
  2471     0448  0870               	movf	fputc@c,w
  2472     0449  0080               	movwf	0
  2473     044A  0872               	movf	fputc@fp,w
  2474     044B  3E02               	addlw	2
  2475     044C  00F4               	movwf	??_fputc
  2476     044D  0873               	movf	fputc@fp+1,w
  2477     044E  1803               	skipnc
  2478     044F  3E01               	addlw	1
  2479     0450  3E00               	addlw	0
  2480     0451  00F5               	movwf	??_fputc+1
  2481     0452  0874               	movf	??_fputc,w
  2482     0453  0084               	movwf	4
  2483     0454  1783               	bsf	3,7
  2484     0455  1C75               	btfss	??_fputc+1,0
  2485     0456  1383               	bcf	3,7
  2486     0457  3001               	movlw	1
  2487     0458  0780               	addwf	0,f
  2488     0459  0A84               	incf	4,f
  2489     045A  1803               	skipnc
  2490     045B  0A80               	incf	0,f
  2491     045C                     l864:
  2492     045C  0008               	return
  2493     045D                     __end_of_fputc:
  2494                           
  2495                           	psect	text10
  2496     0FC7                     __ptext10:	
  2497 ;; *************** function _putch *****************
  2498 ;; Defined at:
  2499 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  c               1    wreg     unsigned char 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  c               1    0[COMMON] unsigned char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      void 
  2506 ;; Registers used:
  2507 ;;		wreg
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2513 ;;      Params:         0       0       0       0       0
  2514 ;;      Locals:         0       0       0       0       0
  2515 ;;      Temps:          0       0       0       0       0
  2516 ;;      Totals:         0       0       0       0       0
  2517 ;;Total ram usage:        0 bytes
  2518 ;; Hardware stack levels used: 1
  2519 ;; This function calls:
  2520 ;;		Nothing
  2521 ;; This function is called by:
  2522 ;;		_fputc
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526     0FC7                     _putch:	
  2527                           ;psect for function _putch
  2528                           
  2529     0FC7                     l875:	
  2530                           ;incstack = 0
  2531                           ; Regs used in _putch: [wreg]
  2532                           
  2533     0FC7  0008               	return
  2534     0FC8                     __end_of_putch:
  2535                           
  2536                           	psect	text11
  2537     0071                     __ptext11:	
  2538 ;; *************** function ___lwmod *****************
  2539 ;; Defined at:
  2540 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  divisor         2    0[COMMON] unsigned int 
  2543 ;;  dividend        2    2[COMMON] unsigned int 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  counter         1    4[COMMON] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  2    0[COMMON] unsigned int 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2555 ;;      Params:         4       0       0       0       0
  2556 ;;      Locals:         1       0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0
  2558 ;;      Totals:         5       0       0       0       0
  2559 ;;Total ram usage:        5 bytes
  2560 ;; Hardware stack levels used: 1
  2561 ;; This function calls:
  2562 ;;		Nothing
  2563 ;; This function is called by:
  2564 ;;		_volt
  2565 ;;		_porcentaje
  2566 ;;		_vfpfcnvrt
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570     0071                     ___lwmod:	
  2571                           ;psect for function ___lwmod
  2572                           
  2573     0071                     l1353:	
  2574                           ;incstack = 0
  2575                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2576                           
  2577     0071  0870               	movf	___lwmod@divisor,w
  2578     0072  0471               	iorwf	___lwmod@divisor+1,w
  2579     0073  1903               	btfsc	3,2
  2580     0074  2876               	goto	u791
  2581     0075  2877               	goto	u790
  2582     0076                     u791:
  2583     0076  28A4               	goto	l1371
  2584     0077                     u790:
  2585     0077                     l1355:
  2586     0077  3001               	movlw	1
  2587     0078  00F4               	movwf	___lwmod@counter
  2588     0079  2883               	goto	l1361
  2589     007A                     l1357:
  2590     007A  3001               	movlw	1
  2591     007B                     u805:
  2592     007B  1003               	clrc
  2593     007C  0DF0               	rlf	___lwmod@divisor,f
  2594     007D  0DF1               	rlf	___lwmod@divisor+1,f
  2595     007E  3EFF               	addlw	-1
  2596     007F  1D03               	skipz
  2597     0080  287B               	goto	u805
  2598     0081                     l1359:
  2599     0081  3001               	movlw	1
  2600     0082  07F4               	addwf	___lwmod@counter,f
  2601     0083                     l1361:
  2602     0083  1FF1               	btfss	___lwmod@divisor+1,7
  2603     0084  2886               	goto	u811
  2604     0085  2887               	goto	u810
  2605     0086                     u811:
  2606     0086  287A               	goto	l1357
  2607     0087                     u810:
  2608     0087                     l1363:
  2609     0087  0871               	movf	___lwmod@divisor+1,w
  2610     0088  0273               	subwf	___lwmod@dividend+1,w
  2611     0089  1D03               	skipz
  2612     008A  288D               	goto	u825
  2613     008B  0870               	movf	___lwmod@divisor,w
  2614     008C  0272               	subwf	___lwmod@dividend,w
  2615     008D                     u825:
  2616     008D  1C03               	skipc
  2617     008E  2890               	goto	u821
  2618     008F  2891               	goto	u820
  2619     0090                     u821:
  2620     0090  2897               	goto	l1367
  2621     0091                     u820:
  2622     0091                     l1365:
  2623     0091  0870               	movf	___lwmod@divisor,w
  2624     0092  02F2               	subwf	___lwmod@dividend,f
  2625     0093  0871               	movf	___lwmod@divisor+1,w
  2626     0094  1C03               	skipc
  2627     0095  03F3               	decf	___lwmod@dividend+1,f
  2628     0096  02F3               	subwf	___lwmod@dividend+1,f
  2629     0097                     l1367:
  2630     0097  3001               	movlw	1
  2631     0098                     u835:
  2632     0098  1003               	clrc
  2633     0099  0CF1               	rrf	___lwmod@divisor+1,f
  2634     009A  0CF0               	rrf	___lwmod@divisor,f
  2635     009B  3EFF               	addlw	-1
  2636     009C  1D03               	skipz
  2637     009D  2898               	goto	u835
  2638     009E                     l1369:
  2639     009E  3001               	movlw	1
  2640     009F  02F4               	subwf	___lwmod@counter,f
  2641     00A0  1D03               	btfss	3,2
  2642     00A1  28A3               	goto	u841
  2643     00A2  28A4               	goto	u840
  2644     00A3                     u841:
  2645     00A3  2887               	goto	l1363
  2646     00A4                     u840:
  2647     00A4                     l1371:
  2648     00A4  0873               	movf	___lwmod@dividend+1,w
  2649     00A5  00F1               	movwf	?___lwmod+1
  2650     00A6  0872               	movf	___lwmod@dividend,w
  2651     00A7  00F0               	movwf	?___lwmod
  2652     00A8                     l635:
  2653     00A8  0008               	return
  2654     00A9                     __end_of___lwmod:
  2655                           
  2656                           	psect	text12
  2657     00EB                     __ptext12:	
  2658 ;; *************** function ___lwdiv *****************
  2659 ;; Defined at:
  2660 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  divisor         2    0[COMMON] unsigned int 
  2663 ;;  dividend        2    2[COMMON] unsigned int 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  quotient        2    4[COMMON] unsigned int 
  2666 ;;  counter         1    6[COMMON] unsigned char 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  2    0[COMMON] unsigned int 
  2669 ;; Registers used:
  2670 ;;		wreg, status,2, status,0
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2676 ;;      Params:         4       0       0       0       0
  2677 ;;      Locals:         3       0       0       0       0
  2678 ;;      Temps:          0       0       0       0       0
  2679 ;;      Totals:         7       0       0       0       0
  2680 ;;Total ram usage:        7 bytes
  2681 ;; Hardware stack levels used: 1
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_volt
  2686 ;;		_porcentaje
  2687 ;;		_vfpfcnvrt
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691     00EB                     ___lwdiv:	
  2692                           ;psect for function ___lwdiv
  2693                           
  2694     00EB                     l1327:	
  2695                           ;incstack = 0
  2696                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2697                           
  2698     00EB  01F4               	clrf	___lwdiv@quotient
  2699     00EC  01F5               	clrf	___lwdiv@quotient+1
  2700     00ED                     l1329:
  2701     00ED  0870               	movf	___lwdiv@divisor,w
  2702     00EE  0471               	iorwf	___lwdiv@divisor+1,w
  2703     00EF  1903               	btfsc	3,2
  2704     00F0  28F2               	goto	u721
  2705     00F1  28F3               	goto	u720
  2706     00F2                     u721:
  2707     00F2  2928               	goto	l1349
  2708     00F3                     u720:
  2709     00F3                     l1331:
  2710     00F3  3001               	movlw	1
  2711     00F4  00F6               	movwf	___lwdiv@counter
  2712     00F5  28FF               	goto	l1337
  2713     00F6                     l1333:
  2714     00F6  3001               	movlw	1
  2715     00F7                     u735:
  2716     00F7  1003               	clrc
  2717     00F8  0DF0               	rlf	___lwdiv@divisor,f
  2718     00F9  0DF1               	rlf	___lwdiv@divisor+1,f
  2719     00FA  3EFF               	addlw	-1
  2720     00FB  1D03               	skipz
  2721     00FC  28F7               	goto	u735
  2722     00FD                     l1335:
  2723     00FD  3001               	movlw	1
  2724     00FE  07F6               	addwf	___lwdiv@counter,f
  2725     00FF                     l1337:
  2726     00FF  1FF1               	btfss	___lwdiv@divisor+1,7
  2727     0100  2902               	goto	u741
  2728     0101  2903               	goto	u740
  2729     0102                     u741:
  2730     0102  28F6               	goto	l1333
  2731     0103                     u740:
  2732     0103                     l1339:
  2733     0103  3001               	movlw	1
  2734     0104                     u755:
  2735     0104  1003               	clrc
  2736     0105  0DF4               	rlf	___lwdiv@quotient,f
  2737     0106  0DF5               	rlf	___lwdiv@quotient+1,f
  2738     0107  3EFF               	addlw	-1
  2739     0108  1D03               	skipz
  2740     0109  2904               	goto	u755
  2741     010A  0871               	movf	___lwdiv@divisor+1,w
  2742     010B  0273               	subwf	___lwdiv@dividend+1,w
  2743     010C  1D03               	skipz
  2744     010D  2910               	goto	u765
  2745     010E  0870               	movf	___lwdiv@divisor,w
  2746     010F  0272               	subwf	___lwdiv@dividend,w
  2747     0110                     u765:
  2748     0110  1C03               	skipc
  2749     0111  2913               	goto	u761
  2750     0112  2914               	goto	u760
  2751     0113                     u761:
  2752     0113  291B               	goto	l1345
  2753     0114                     u760:
  2754     0114                     l1341:
  2755     0114  0870               	movf	___lwdiv@divisor,w
  2756     0115  02F2               	subwf	___lwdiv@dividend,f
  2757     0116  0871               	movf	___lwdiv@divisor+1,w
  2758     0117  1C03               	skipc
  2759     0118  03F3               	decf	___lwdiv@dividend+1,f
  2760     0119  02F3               	subwf	___lwdiv@dividend+1,f
  2761     011A                     l1343:
  2762     011A  1474               	bsf	___lwdiv@quotient,0
  2763     011B                     l1345:
  2764     011B  3001               	movlw	1
  2765     011C                     u775:
  2766     011C  1003               	clrc
  2767     011D  0CF1               	rrf	___lwdiv@divisor+1,f
  2768     011E  0CF0               	rrf	___lwdiv@divisor,f
  2769     011F  3EFF               	addlw	-1
  2770     0120  1D03               	skipz
  2771     0121  291C               	goto	u775
  2772     0122                     l1347:
  2773     0122  3001               	movlw	1
  2774     0123  02F6               	subwf	___lwdiv@counter,f
  2775     0124  1D03               	btfss	3,2
  2776     0125  2927               	goto	u781
  2777     0126  2928               	goto	u780
  2778     0127                     u781:
  2779     0127  2903               	goto	l1339
  2780     0128                     u780:
  2781     0128                     l1349:
  2782     0128  0875               	movf	___lwdiv@quotient+1,w
  2783     0129  00F1               	movwf	?___lwdiv+1
  2784     012A  0874               	movf	___lwdiv@quotient,w
  2785     012B  00F0               	movwf	?___lwdiv
  2786     012C                     l625:
  2787     012C  0008               	return
  2788     012D                     __end_of___lwdiv:
  2789                           
  2790                           	psect	text13
  2791     00A9                     __ptext13:	
  2792 ;; *************** function _LCD_putrs *****************
  2793 ;; Defined at:
  2794 ;;		line 136 in file "lcd.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  a               2    6[COMMON] PTR const unsigned char 
  2797 ;;		 -> STR_5(6), STR_3(13), buffer(10), STR_1(10), 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  i               2   11[COMMON] int 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2809 ;;      Params:         2       0       0       0       0
  2810 ;;      Locals:         2       0       0       0       0
  2811 ;;      Temps:          3       0       0       0       0
  2812 ;;      Totals:         7       0       0       0       0
  2813 ;;Total ram usage:        7 bytes
  2814 ;; Hardware stack levels used: 1
  2815 ;; Hardware stack levels required when called: 2
  2816 ;; This function calls:
  2817 ;;		_LCD_putc
  2818 ;; This function is called by:
  2819 ;;		_volt
  2820 ;;		_porcentaje
  2821 ;;		_mil
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825     00A9                     _LCD_putrs:	
  2826                           ;psect for function _LCD_putrs
  2827                           
  2828     00A9                     l1493:	
  2829                           ;incstack = 0
  2830                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2831                           
  2832                           
  2833                           ;lcd.c: 138:     for ( int i = 0; a[i] != '\0'; ++i ) {
  2834     00A9  01FB               	clrf	LCD_putrs@i
  2835     00AA  01FC               	clrf	LCD_putrs@i+1
  2836     00AB  28CE               	goto	l1499
  2837     00AC                     l1495:
  2838                           
  2839                           ;lcd.c: 139:         LCD_putc(a[i]);
  2840     00AC  087B               	movf	LCD_putrs@i,w
  2841     00AD  0776               	addwf	LCD_putrs@a,w
  2842     00AE  00F9               	movwf	??_LCD_putrs+1
  2843     00AF  0877               	movf	LCD_putrs@a+1,w
  2844     00B0  00F8               	movwf	??_LCD_putrs
  2845     00B1  1803               	skipnc
  2846     00B2  0AF8               	incf	??_LCD_putrs,f
  2847     00B3  1FFB               	btfss	LCD_putrs@i,7
  2848     00B4  28B6               	goto	u1170
  2849     00B5  03F8               	decf	??_LCD_putrs,f
  2850     00B6                     u1170:
  2851     00B6  0878               	movf	??_LCD_putrs,w
  2852     00B7  00FA               	movwf	??_LCD_putrs+2
  2853     00B8  087A               	movf	??_LCD_putrs+2,w
  2854     00B9  1283               	bcf	3,5	;RP0=0, select bank0
  2855     00BA  1303               	bcf	3,6	;RP1=0, select bank0
  2856     00BB  00FF               	movwf	btemp+1
  2857     00BC  0879               	movf	??_LCD_putrs+1,w
  2858     00BD  0084               	movwf	4
  2859     00BE  120A  118A  2003  120A  118A  	fcall	stringtab
  2860     00C3  120A  118A  2298  120A  118A  	fcall	_LCD_putc
  2861     00C8                     l1497:
  2862                           
  2863                           ;lcd.c: 140:     }
  2864     00C8  3001               	movlw	1
  2865     00C9  07FB               	addwf	LCD_putrs@i,f
  2866     00CA  1803               	skipnc
  2867     00CB  0AFC               	incf	LCD_putrs@i+1,f
  2868     00CC  3000               	movlw	0
  2869     00CD  07FC               	addwf	LCD_putrs@i+1,f
  2870     00CE                     l1499:
  2871     00CE  087B               	movf	LCD_putrs@i,w
  2872     00CF  0776               	addwf	LCD_putrs@a,w
  2873     00D0  00F9               	movwf	??_LCD_putrs+1
  2874     00D1  0877               	movf	LCD_putrs@a+1,w
  2875     00D2  00F8               	movwf	??_LCD_putrs
  2876     00D3  1803               	skipnc
  2877     00D4  0AF8               	incf	??_LCD_putrs,f
  2878     00D5  1FFB               	btfss	LCD_putrs@i,7
  2879     00D6  28D8               	goto	u1180
  2880     00D7  03F8               	decf	??_LCD_putrs,f
  2881     00D8                     u1180:
  2882     00D8  0878               	movf	??_LCD_putrs,w
  2883     00D9  00FA               	movwf	??_LCD_putrs+2
  2884     00DA  087A               	movf	??_LCD_putrs+2,w
  2885     00DB  1283               	bcf	3,5	;RP0=0, select bank0
  2886     00DC  1303               	bcf	3,6	;RP1=0, select bank0
  2887     00DD  00FF               	movwf	btemp+1
  2888     00DE  0879               	movf	??_LCD_putrs+1,w
  2889     00DF  0084               	movwf	4
  2890     00E0  120A  118A  2003  120A  118A  	fcall	stringtab
  2891     00E5  3A00               	xorlw	0
  2892     00E6  1D03               	skipz
  2893     00E7  28E9               	goto	u1191
  2894     00E8  28EA               	goto	u1190
  2895     00E9                     u1191:
  2896     00E9  28AC               	goto	l1495
  2897     00EA                     u1190:
  2898     00EA                     l259:
  2899     00EA  0008               	return
  2900     00EB                     __end_of_LCD_putrs:
  2901                           
  2902                           	psect	text14
  2903     0298                     __ptext14:	
  2904 ;; *************** function _LCD_putc *****************
  2905 ;; Defined at:
  2906 ;;		line 111 in file "lcd.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  c               1    wreg     unsigned char 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  c               1    5[COMMON] unsigned char 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2920 ;;      Params:         0       0       0       0       0
  2921 ;;      Locals:         1       0       0       0       0
  2922 ;;      Temps:          2       0       0       0       0
  2923 ;;      Totals:         3       0       0       0       0
  2924 ;;Total ram usage:        3 bytes
  2925 ;; Hardware stack levels used: 1
  2926 ;; Hardware stack levels required when called: 1
  2927 ;; This function calls:
  2928 ;;		_LCD_Out
  2929 ;; This function is called by:
  2930 ;;		_LCD_putrs
  2931 ;;		_LCD_puts
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935     0298                     _LCD_putc:	
  2936                           ;psect for function _LCD_putc
  2937                           
  2938                           
  2939                           ;incstack = 0
  2940                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2941                           ;LCD_putc@c stored from wreg
  2942     0298  00F5               	movwf	LCD_putc@c
  2943     0299                     l1457:
  2944                           
  2945                           ;lcd.c: 113:    *(lcd.PORT) |= 1 << lcd.RS;
  2946     0299  1283               	bcf	3,5	;RP0=0, select bank0
  2947     029A  1303               	bcf	3,6	;RP1=0, select bank0
  2948     029B  085F               	movf	_lcd,w
  2949     029C  0084               	movwf	4
  2950     029D  1783               	bsf	3,7
  2951     029E  1C60               	btfss	_lcd+1,0
  2952     029F  1383               	bcf	3,7
  2953     02A0  3001               	movlw	1
  2954     02A1  00F3               	movwf	??_LCD_putc
  2955     02A2  0861               	movf	_lcd+2,w
  2956     02A3  3907               	andlw	7
  2957     02A4  3E01               	addlw	1
  2958     02A5  2AA8               	goto	u1074
  2959     02A6                     u1075:
  2960     02A6  1003               	clrc
  2961     02A7  0DF3               	rlf	??_LCD_putc,f
  2962     02A8                     u1074:
  2963     02A8  3EFF               	addlw	-1
  2964     02A9  1D03               	skipz
  2965     02AA  2AA6               	goto	u1075
  2966     02AB  0873               	movf	??_LCD_putc,w
  2967     02AC  0480               	iorwf	0,f
  2968     02AD                     l1459:
  2969                           
  2970                           ;lcd.c: 114:     LCD_Out((c & 0xF0) >> 4);
  2971     02AD  0875               	movf	LCD_putc@c,w
  2972     02AE  00F3               	movwf	??_LCD_putc
  2973     02AF  3004               	movlw	4
  2974     02B0                     u1085:
  2975     02B0  1003               	clrc
  2976     02B1  0CF3               	rrf	??_LCD_putc,f
  2977     02B2  3EFF               	addlw	-1
  2978     02B3  1D03               	skipz
  2979     02B4  2AB0               	goto	u1085
  2980     02B5  0873               	movf	??_LCD_putc,w
  2981     02B6  390F               	andlw	15
  2982     02B7  120A  118A  264F  120A  118A  	fcall	_LCD_Out
  2983     02BC                     l1461:
  2984                           
  2985                           ;lcd.c: 116:     *(lcd.PORT) |= 1 << lcd.EN;
  2986     02BC  1283               	bcf	3,5	;RP0=0, select bank0
  2987     02BD  1303               	bcf	3,6	;RP1=0, select bank0
  2988     02BE  085F               	movf	_lcd,w
  2989     02BF  0084               	movwf	4
  2990     02C0  1783               	bsf	3,7
  2991     02C1  1C60               	btfss	_lcd+1,0
  2992     02C2  1383               	bcf	3,7
  2993     02C3  3001               	movlw	1
  2994     02C4  00F3               	movwf	??_LCD_putc
  2995     02C5  0C61               	rrf	_lcd+2,w
  2996     02C6  00F4               	movwf	??_LCD_putc+1
  2997     02C7  0CF4               	rrf	??_LCD_putc+1,f
  2998     02C8  0C74               	rrf	??_LCD_putc+1,w
  2999     02C9  3907               	andlw	7
  3000     02CA  3E01               	addlw	1
  3001     02CB  2ACE               	goto	u1094
  3002     02CC                     u1095:
  3003     02CC  1003               	clrc
  3004     02CD  0DF3               	rlf	??_LCD_putc,f
  3005     02CE                     u1094:
  3006     02CE  3EFF               	addlw	-1
  3007     02CF  1D03               	skipz
  3008     02D0  2ACC               	goto	u1095
  3009     02D1  0873               	movf	??_LCD_putc,w
  3010     02D2  0480               	iorwf	0,f
  3011     02D3                     l1463:
  3012                           
  3013                           ;lcd.c: 117:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3014     02D3  300D               	movlw	13
  3015     02D4  00F3               	movwf	??_LCD_putc
  3016     02D5                     u1477:
  3017     02D5  0BF3               	decfsz	??_LCD_putc,f
  3018     02D6  2AD5               	goto	u1477
  3019     02D7                     l1465:
  3020                           
  3021                           ;lcd.c: 118:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3022     02D7  1283               	bcf	3,5	;RP0=0, select bank0
  3023     02D8  1303               	bcf	3,6	;RP1=0, select bank0
  3024     02D9  085F               	movf	_lcd,w
  3025     02DA  0084               	movwf	4
  3026     02DB  1783               	bsf	3,7
  3027     02DC  1C60               	btfss	_lcd+1,0
  3028     02DD  1383               	bcf	3,7
  3029     02DE  3001               	movlw	1
  3030     02DF  00F3               	movwf	??_LCD_putc
  3031     02E0  0C61               	rrf	_lcd+2,w
  3032     02E1  00F4               	movwf	??_LCD_putc+1
  3033     02E2  0CF4               	rrf	??_LCD_putc+1,f
  3034     02E3  0C74               	rrf	??_LCD_putc+1,w
  3035     02E4  3907               	andlw	7
  3036     02E5  3E01               	addlw	1
  3037     02E6  2AE9               	goto	u1104
  3038     02E7                     u1105:
  3039     02E7  1003               	clrc
  3040     02E8  0DF3               	rlf	??_LCD_putc,f
  3041     02E9                     u1104:
  3042     02E9  3EFF               	addlw	-1
  3043     02EA  1D03               	skipz
  3044     02EB  2AE7               	goto	u1105
  3045     02EC  0873               	movf	??_LCD_putc,w
  3046     02ED  3AFF               	xorlw	255
  3047     02EE  0580               	andwf	0,f
  3048     02EF                     l1467:
  3049                           
  3050                           ;lcd.c: 120:     LCD_Out(c & 0x0F);
  3051     02EF  0875               	movf	LCD_putc@c,w
  3052     02F0  390F               	andlw	15
  3053     02F1  120A  118A  264F  120A  118A  	fcall	_LCD_Out
  3054     02F6                     l1469:
  3055                           
  3056                           ;lcd.c: 122:     *(lcd.PORT) |= 1 << lcd.EN;
  3057     02F6  1283               	bcf	3,5	;RP0=0, select bank0
  3058     02F7  1303               	bcf	3,6	;RP1=0, select bank0
  3059     02F8  085F               	movf	_lcd,w
  3060     02F9  0084               	movwf	4
  3061     02FA  1783               	bsf	3,7
  3062     02FB  1C60               	btfss	_lcd+1,0
  3063     02FC  1383               	bcf	3,7
  3064     02FD  3001               	movlw	1
  3065     02FE  00F3               	movwf	??_LCD_putc
  3066     02FF  0C61               	rrf	_lcd+2,w
  3067     0300  00F4               	movwf	??_LCD_putc+1
  3068     0301  0CF4               	rrf	??_LCD_putc+1,f
  3069     0302  0C74               	rrf	??_LCD_putc+1,w
  3070     0303  3907               	andlw	7
  3071     0304  3E01               	addlw	1
  3072     0305  2B08               	goto	u1114
  3073     0306                     u1115:
  3074     0306  1003               	clrc
  3075     0307  0DF3               	rlf	??_LCD_putc,f
  3076     0308                     u1114:
  3077     0308  3EFF               	addlw	-1
  3078     0309  1D03               	skipz
  3079     030A  2B06               	goto	u1115
  3080     030B  0873               	movf	??_LCD_putc,w
  3081     030C  0480               	iorwf	0,f
  3082                           
  3083                           ;lcd.c: 123:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3084     030D  300D               	movlw	13
  3085     030E  00F3               	movwf	??_LCD_putc
  3086     030F                     u1487:
  3087     030F  0BF3               	decfsz	??_LCD_putc,f
  3088     0310  2B0F               	goto	u1487
  3089     0311                     l1471:
  3090                           
  3091                           ;lcd.c: 124:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3092     0311  1283               	bcf	3,5	;RP0=0, select bank0
  3093     0312  1303               	bcf	3,6	;RP1=0, select bank0
  3094     0313  085F               	movf	_lcd,w
  3095     0314  0084               	movwf	4
  3096     0315  1783               	bsf	3,7
  3097     0316  1C60               	btfss	_lcd+1,0
  3098     0317  1383               	bcf	3,7
  3099     0318  3001               	movlw	1
  3100     0319  00F3               	movwf	??_LCD_putc
  3101     031A  0C61               	rrf	_lcd+2,w
  3102     031B  00F4               	movwf	??_LCD_putc+1
  3103     031C  0CF4               	rrf	??_LCD_putc+1,f
  3104     031D  0C74               	rrf	??_LCD_putc+1,w
  3105     031E  3907               	andlw	7
  3106     031F  3E01               	addlw	1
  3107     0320  2B23               	goto	u1124
  3108     0321                     u1125:
  3109     0321  1003               	clrc
  3110     0322  0DF3               	rlf	??_LCD_putc,f
  3111     0323                     u1124:
  3112     0323  3EFF               	addlw	-1
  3113     0324  1D03               	skipz
  3114     0325  2B21               	goto	u1125
  3115     0326  0873               	movf	??_LCD_putc,w
  3116     0327  3AFF               	xorlw	255
  3117     0328  0580               	andwf	0,f
  3118     0329                     l247:
  3119     0329  0008               	return
  3120     032A                     __end_of_LCD_putc:
  3121                           
  3122                           	psect	text15
  3123     05A3                     __ptext15:	
  3124 ;; *************** function _LCD_Init *****************
  3125 ;; Defined at:
  3126 ;;		line 53 in file "lcd.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  display         5    6[COMMON] struct .
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;  cmd             1   13[COMMON] unsigned char 
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  1    wreg      _Bool 
  3133 ;; Registers used:
  3134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3140 ;;      Params:         5       0       0       0       0
  3141 ;;      Locals:         1       0       0       0       0
  3142 ;;      Temps:          2       0       0       0       0
  3143 ;;      Totals:         8       0       0       0       0
  3144 ;;Total ram usage:        8 bytes
  3145 ;; Hardware stack levels used: 1
  3146 ;; Hardware stack levels required when called: 2
  3147 ;; This function calls:
  3148 ;;		_LCD_Write
  3149 ;; This function is called by:
  3150 ;;		_main
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154     05A3                     _LCD_Init:	
  3155                           ;psect for function _LCD_Init
  3156                           
  3157     05A3                     l1577:	
  3158                           ;incstack = 0
  3159                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3160                           
  3161                           
  3162                           ;lcd.c: 55:     lcd = display;
  3163     05A3  305F               	movlw	_lcd& (0+255)
  3164     05A4  0084               	movwf	4
  3165     05A5  0876               	movf	LCD_Init@display,w
  3166     05A6  1383               	bcf	3,7	;select IRP bank0
  3167     05A7  0080               	movwf	0
  3168     05A8  0A84               	incf	4,f
  3169     05A9  0877               	movf	LCD_Init@display+1,w
  3170     05AA  0080               	movwf	0
  3171     05AB  0A84               	incf	4,f
  3172     05AC  0878               	movf	LCD_Init@display+2,w
  3173     05AD  0080               	movwf	0
  3174     05AE  0A84               	incf	4,f
  3175     05AF  0879               	movf	LCD_Init@display+3,w
  3176     05B0  0080               	movwf	0
  3177     05B1  0A84               	incf	4,f
  3178     05B2  087A               	movf	LCD_Init@display+4,w
  3179     05B3  0080               	movwf	0
  3180     05B4                     l1579:
  3181                           
  3182                           ;lcd.c: 64:     if ( lcd.PORT == &PORTA ) {
  3183     05B4  3000               	movlw	0
  3184     05B5  1283               	bcf	3,5	;RP0=0, select bank0
  3185     05B6  1303               	bcf	3,6	;RP1=0, select bank0
  3186     05B7  0660               	xorwf	_lcd+1,w
  3187     05B8  1D03               	skipz
  3188     05B9  2DBC               	goto	u1365
  3189     05BA  3005               	movlw	5
  3190     05BB  065F               	xorwf	_lcd,w
  3191     05BC                     u1365:
  3192     05BC  1D03               	skipz
  3193     05BD  2DBF               	goto	u1361
  3194     05BE  2DC0               	goto	u1360
  3195     05BF                     u1361:
  3196     05BF  2DC4               	goto	l1583
  3197     05C0                     u1360:
  3198     05C0                     l1581:
  3199                           
  3200                           ;lcd.c: 65:         TRISA = 0x00;
  3201     05C0  1683               	bsf	3,5	;RP0=1, select bank1
  3202     05C1  1303               	bcf	3,6	;RP1=0, select bank1
  3203     05C2  0185               	clrf	5	;volatile
  3204                           
  3205                           ;lcd.c: 66:     }
  3206     05C3  2DDF               	goto	l1591
  3207     05C4                     l1583:
  3208     05C4  3000               	movlw	0
  3209     05C5  0660               	xorwf	_lcd+1,w
  3210     05C6  1D03               	skipz
  3211     05C7  2DCA               	goto	u1375
  3212     05C8  3006               	movlw	6
  3213     05C9  065F               	xorwf	_lcd,w
  3214     05CA                     u1375:
  3215     05CA  1D03               	skipz
  3216     05CB  2DCD               	goto	u1371
  3217     05CC  2DCE               	goto	u1370
  3218     05CD                     u1371:
  3219     05CD  2DD2               	goto	l1587
  3220     05CE                     u1370:
  3221     05CE                     l1585:
  3222                           
  3223                           ;lcd.c: 68:         TRISB = 0x00;
  3224     05CE  1683               	bsf	3,5	;RP0=1, select bank1
  3225     05CF  1303               	bcf	3,6	;RP1=0, select bank1
  3226     05D0  0186               	clrf	6	;volatile
  3227                           
  3228                           ;lcd.c: 69:     }
  3229     05D1  2DDF               	goto	l1591
  3230     05D2                     l1587:
  3231     05D2  3000               	movlw	0
  3232     05D3  0660               	xorwf	_lcd+1,w
  3233     05D4  1D03               	skipz
  3234     05D5  2DD8               	goto	u1385
  3235     05D6  3007               	movlw	7
  3236     05D7  065F               	xorwf	_lcd,w
  3237     05D8                     u1385:
  3238     05D8  1D03               	skipz
  3239     05D9  2DDB               	goto	u1381
  3240     05DA  2DDC               	goto	u1380
  3241     05DB                     u1381:
  3242     05DB  2E4E               	goto	l231
  3243     05DC                     u1380:
  3244     05DC                     l1589:
  3245                           
  3246                           ;lcd.c: 71:         TRISC = 0x00;
  3247     05DC  1683               	bsf	3,5	;RP0=1, select bank1
  3248     05DD  1303               	bcf	3,6	;RP1=0, select bank1
  3249     05DE  0187               	clrf	7	;volatile
  3250     05DF                     l1591:	
  3251                           ;lcd.c: 72:     }
  3252                           
  3253                           
  3254                           ;lcd.c: 86:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3255     05DF  301A               	movlw	26
  3256     05E0  00FC               	movwf	??_LCD_Init+1
  3257     05E1  30F8               	movlw	248
  3258     05E2  00FB               	movwf	??_LCD_Init
  3259     05E3                     u1497:
  3260     05E3  0BFB               	decfsz	??_LCD_Init,f
  3261     05E4  2DE3               	goto	u1497
  3262     05E5  0BFC               	decfsz	??_LCD_Init+1,f
  3263     05E6  2DE3               	goto	u1497
  3264     05E7  0000               	nop
  3265     05E8                     l1593:
  3266                           
  3267                           ;lcd.c: 89:     LCD_Write(0x03);
  3268     05E8  3003               	movlw	3
  3269     05E9  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3270     05EE                     l1595:
  3271                           
  3272                           ;lcd.c: 90:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3273     05EE  3007               	movlw	7
  3274     05EF  00FC               	movwf	??_LCD_Init+1
  3275     05F0  307D               	movlw	125
  3276     05F1  00FB               	movwf	??_LCD_Init
  3277     05F2                     u1507:
  3278     05F2  0BFB               	decfsz	??_LCD_Init,f
  3279     05F3  2DF2               	goto	u1507
  3280     05F4  0BFC               	decfsz	??_LCD_Init+1,f
  3281     05F5  2DF2               	goto	u1507
  3282                           
  3283                           ;lcd.c: 91:     LCD_Write(0x03);
  3284     05F6  3003               	movlw	3
  3285     05F7  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3286     05FC                     l1597:
  3287                           
  3288                           ;lcd.c: 92:     _delay((unsigned long)((16)*(4000000/4000.0)));
  3289     05FC  3015               	movlw	21
  3290     05FD  00FC               	movwf	??_LCD_Init+1
  3291     05FE  30C6               	movlw	198
  3292     05FF  00FB               	movwf	??_LCD_Init
  3293     0600                     u1517:
  3294     0600  0BFB               	decfsz	??_LCD_Init,f
  3295     0601  2E00               	goto	u1517
  3296     0602  0BFC               	decfsz	??_LCD_Init+1,f
  3297     0603  2E00               	goto	u1517
  3298     0604  0000               	nop
  3299     0605                     l1599:
  3300                           
  3301                           ;lcd.c: 93:     LCD_Write(0x03);
  3302     0605  3003               	movlw	3
  3303     0606  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3304     060B                     l1601:
  3305                           
  3306                           ;lcd.c: 96:     LCD_Write(0x02);
  3307     060B  3002               	movlw	2
  3308     060C  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3309     0611                     l1603:
  3310     0611  3002               	movlw	2
  3311     0612  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3312     0617                     l1605:
  3313     0617  3008               	movlw	8
  3314     0618  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3315     061D                     l1607:
  3316     061D  3000               	movlw	0
  3317     061E  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3318     0623                     l1609:
  3319     0623  3006               	movlw	6
  3320     0624  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3321     0629                     l1611:
  3322     0629  3008               	movlw	8
  3323     062A  00FD               	movwf	LCD_Init@cmd
  3324     062B                     l1613:
  3325     062B  157D               	bsf	LCD_Init@cmd,2
  3326     062C                     l1619:
  3327     062C  087D               	movf	LCD_Init@cmd,w
  3328     062D  00FB               	movwf	??_LCD_Init
  3329     062E  3004               	movlw	4
  3330     062F                     u1395:
  3331     062F  1003               	clrc
  3332     0630  0CFB               	rrf	??_LCD_Init,f
  3333     0631  3EFF               	addlw	-1
  3334     0632  1D03               	skipz
  3335     0633  2E2F               	goto	u1395
  3336     0634  087B               	movf	??_LCD_Init,w
  3337     0635  390F               	andlw	15
  3338     0636  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3339     063B  087D               	movf	LCD_Init@cmd,w
  3340     063C  390F               	andlw	15
  3341     063D  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3342     0642                     l243:	
  3343                           ;lcd.c: 106:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  3344                           
  3345     0642  3000               	movlw	0
  3346     0643  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3347     0648  3001               	movlw	1
  3348     0649  120A  118A  21BC  120A  118A  	fcall	_LCD_Write
  3349     064E                     l231:
  3350     064E  0008               	return
  3351     064F                     __end_of_LCD_Init:
  3352                           
  3353                           	psect	text16
  3354     01BC                     __ptext16:	
  3355 ;; *************** function _LCD_Write *****************
  3356 ;; Defined at:
  3357 ;;		line 42 in file "lcd.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  c               1    wreg     unsigned char 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  c               1    5[COMMON] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3371 ;;      Params:         0       0       0       0       0
  3372 ;;      Locals:         1       0       0       0       0
  3373 ;;      Temps:          2       0       0       0       0
  3374 ;;      Totals:         3       0       0       0       0
  3375 ;;Total ram usage:        3 bytes
  3376 ;; Hardware stack levels used: 1
  3377 ;; Hardware stack levels required when called: 1
  3378 ;; This function calls:
  3379 ;;		_LCD_Out
  3380 ;; This function is called by:
  3381 ;;		_main
  3382 ;;		_volt
  3383 ;;		_porcentaje
  3384 ;;		_mil
  3385 ;;		_LCD_Init
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389     01BC                     _LCD_Write:	
  3390                           ;psect for function _LCD_Write
  3391                           
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3395                           ;LCD_Write@c stored from wreg
  3396     01BC  00F5               	movwf	LCD_Write@c
  3397     01BD                     l1483:
  3398                           
  3399                           ;lcd.c: 44:     *(lcd.PORT) &= ~(1 << lcd.RS);
  3400     01BD  1283               	bcf	3,5	;RP0=0, select bank0
  3401     01BE  1303               	bcf	3,6	;RP1=0, select bank0
  3402     01BF  085F               	movf	_lcd,w
  3403     01C0  0084               	movwf	4
  3404     01C1  1783               	bsf	3,7
  3405     01C2  1C60               	btfss	_lcd+1,0
  3406     01C3  1383               	bcf	3,7
  3407     01C4  3001               	movlw	1
  3408     01C5  00F3               	movwf	??_LCD_Write
  3409     01C6  0861               	movf	_lcd+2,w
  3410     01C7  3907               	andlw	7
  3411     01C8  3E01               	addlw	1
  3412     01C9  29CC               	goto	u1144
  3413     01CA                     u1145:
  3414     01CA  1003               	clrc
  3415     01CB  0DF3               	rlf	??_LCD_Write,f
  3416     01CC                     u1144:
  3417     01CC  3EFF               	addlw	-1
  3418     01CD  1D03               	skipz
  3419     01CE  29CA               	goto	u1145
  3420     01CF  0873               	movf	??_LCD_Write,w
  3421     01D0  3AFF               	xorlw	255
  3422     01D1  0580               	andwf	0,f
  3423     01D2                     l1485:
  3424                           
  3425                           ;lcd.c: 45:     LCD_Out(c);
  3426     01D2  0875               	movf	LCD_Write@c,w
  3427     01D3  120A  118A  264F  120A  118A  	fcall	_LCD_Out
  3428     01D8                     l1487:
  3429                           
  3430                           ;lcd.c: 47:     *(lcd.PORT) |= 1 << lcd.EN;
  3431     01D8  1283               	bcf	3,5	;RP0=0, select bank0
  3432     01D9  1303               	bcf	3,6	;RP1=0, select bank0
  3433     01DA  085F               	movf	_lcd,w
  3434     01DB  0084               	movwf	4
  3435     01DC  1783               	bsf	3,7
  3436     01DD  1C60               	btfss	_lcd+1,0
  3437     01DE  1383               	bcf	3,7
  3438     01DF  3001               	movlw	1
  3439     01E0  00F3               	movwf	??_LCD_Write
  3440     01E1  0C61               	rrf	_lcd+2,w
  3441     01E2  00F4               	movwf	??_LCD_Write+1
  3442     01E3  0CF4               	rrf	??_LCD_Write+1,f
  3443     01E4  0C74               	rrf	??_LCD_Write+1,w
  3444     01E5  3907               	andlw	7
  3445     01E6  3E01               	addlw	1
  3446     01E7  29EA               	goto	u1154
  3447     01E8                     u1155:
  3448     01E8  1003               	clrc
  3449     01E9  0DF3               	rlf	??_LCD_Write,f
  3450     01EA                     u1154:
  3451     01EA  3EFF               	addlw	-1
  3452     01EB  1D03               	skipz
  3453     01EC  29E8               	goto	u1155
  3454     01ED  0873               	movf	??_LCD_Write,w
  3455     01EE  0480               	iorwf	0,f
  3456     01EF                     l1489:
  3457                           
  3458                           ;lcd.c: 48:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3459     01EF  3006               	movlw	6
  3460     01F0  00F4               	movwf	??_LCD_Write+1
  3461     01F1  3030               	movlw	48
  3462     01F2  00F3               	movwf	??_LCD_Write
  3463     01F3                     u1527:
  3464     01F3  0BF3               	decfsz	??_LCD_Write,f
  3465     01F4  29F3               	goto	u1527
  3466     01F5  0BF4               	decfsz	??_LCD_Write+1,f
  3467     01F6  29F3               	goto	u1527
  3468     01F7  0000               	nop
  3469     01F8                     l1491:
  3470                           
  3471                           ;lcd.c: 49:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3472     01F8  1283               	bcf	3,5	;RP0=0, select bank0
  3473     01F9  1303               	bcf	3,6	;RP1=0, select bank0
  3474     01FA  085F               	movf	_lcd,w
  3475     01FB  0084               	movwf	4
  3476     01FC  1783               	bsf	3,7
  3477     01FD  1C60               	btfss	_lcd+1,0
  3478     01FE  1383               	bcf	3,7
  3479     01FF  3001               	movlw	1
  3480     0200  00F3               	movwf	??_LCD_Write
  3481     0201  0C61               	rrf	_lcd+2,w
  3482     0202  00F4               	movwf	??_LCD_Write+1
  3483     0203  0CF4               	rrf	??_LCD_Write+1,f
  3484     0204  0C74               	rrf	??_LCD_Write+1,w
  3485     0205  3907               	andlw	7
  3486     0206  3E01               	addlw	1
  3487     0207  2A0A               	goto	u1164
  3488     0208                     u1165:
  3489     0208  1003               	clrc
  3490     0209  0DF3               	rlf	??_LCD_Write,f
  3491     020A                     u1164:
  3492     020A  3EFF               	addlw	-1
  3493     020B  1D03               	skipz
  3494     020C  2A08               	goto	u1165
  3495     020D  0873               	movf	??_LCD_Write,w
  3496     020E  3AFF               	xorlw	255
  3497     020F  0580               	andwf	0,f
  3498     0210                     l222:
  3499     0210  0008               	return
  3500     0211                     __end_of_LCD_Write:
  3501                           
  3502                           	psect	text17
  3503     064F                     __ptext17:	
  3504 ;; *************** function _LCD_Out *****************
  3505 ;; Defined at:
  3506 ;;		line 10 in file "lcd.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  c               1    wreg     unsigned char 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  c               1    2[COMMON] unsigned char 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3520 ;;      Params:         0       0       0       0       0
  3521 ;;      Locals:         1       0       0       0       0
  3522 ;;      Temps:          2       0       0       0       0
  3523 ;;      Totals:         3       0       0       0       0
  3524 ;;Total ram usage:        3 bytes
  3525 ;; Hardware stack levels used: 1
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_LCD_Write
  3530 ;;		_LCD_putc
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534     064F                     _LCD_Out:	
  3535                           ;psect for function _LCD_Out
  3536                           
  3537                           
  3538                           ;incstack = 0
  3539                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  3540                           ;LCD_Out@c stored from wreg
  3541     064F  00F2               	movwf	LCD_Out@c
  3542     0650                     l1389:
  3543                           
  3544                           ;lcd.c: 12:     if ( c & 1 ){
  3545     0650  1C72               	btfss	LCD_Out@c,0
  3546     0651  2E53               	goto	u901
  3547     0652  2E54               	goto	u900
  3548     0653                     u901:
  3549     0653  2E69               	goto	l1393
  3550     0654                     u900:
  3551     0654                     l1391:
  3552                           
  3553                           ;lcd.c: 13:         *(lcd.PORT) |= 1 << lcd.D4;
  3554     0654  1283               	bcf	3,5	;RP0=0, select bank0
  3555     0655  1303               	bcf	3,6	;RP1=0, select bank0
  3556     0656  085F               	movf	_lcd,w
  3557     0657  0084               	movwf	4
  3558     0658  1783               	bsf	3,7
  3559     0659  1C60               	btfss	_lcd+1,0
  3560     065A  1383               	bcf	3,7
  3561     065B  3001               	movlw	1
  3562     065C  00F0               	movwf	??_LCD_Out
  3563     065D  0862               	movf	_lcd+3,w
  3564     065E  3907               	andlw	7
  3565     065F  3E01               	addlw	1
  3566     0660  2E63               	goto	u914
  3567     0661                     u915:
  3568     0661  1003               	clrc
  3569     0662  0DF0               	rlf	??_LCD_Out,f
  3570     0663                     u914:
  3571     0663  3EFF               	addlw	-1
  3572     0664  1D03               	skipz
  3573     0665  2E61               	goto	u915
  3574     0666  0870               	movf	??_LCD_Out,w
  3575     0667  0480               	iorwf	0,f
  3576                           
  3577                           ;lcd.c: 14:     }
  3578     0668  2E7E               	goto	l1395
  3579     0669                     l1393:
  3580                           
  3581                           ;lcd.c: 16:          *(lcd.PORT) &= ~(1 << lcd.D4);
  3582     0669  1283               	bcf	3,5	;RP0=0, select bank0
  3583     066A  1303               	bcf	3,6	;RP1=0, select bank0
  3584     066B  085F               	movf	_lcd,w
  3585     066C  0084               	movwf	4
  3586     066D  1783               	bsf	3,7
  3587     066E  1C60               	btfss	_lcd+1,0
  3588     066F  1383               	bcf	3,7
  3589     0670  3001               	movlw	1
  3590     0671  00F0               	movwf	??_LCD_Out
  3591     0672  0862               	movf	_lcd+3,w
  3592     0673  3907               	andlw	7
  3593     0674  3E01               	addlw	1
  3594     0675  2E78               	goto	u924
  3595     0676                     u925:
  3596     0676  1003               	clrc
  3597     0677  0DF0               	rlf	??_LCD_Out,f
  3598     0678                     u924:
  3599     0678  3EFF               	addlw	-1
  3600     0679  1D03               	skipz
  3601     067A  2E76               	goto	u925
  3602     067B  0870               	movf	??_LCD_Out,w
  3603     067C  3AFF               	xorlw	255
  3604     067D  0580               	andwf	0,f
  3605     067E                     l1395:
  3606                           
  3607                           ;lcd.c: 19:     if ( c & 2 ) {
  3608     067E  1CF2               	btfss	LCD_Out@c,1
  3609     067F  2E81               	goto	u931
  3610     0680  2E82               	goto	u930
  3611     0681                     u931:
  3612     0681  2E98               	goto	l1399
  3613     0682                     u930:
  3614     0682                     l1397:
  3615                           
  3616                           ;lcd.c: 20:         *(lcd.PORT) |= 1 << lcd.D5;
  3617     0682  085F               	movf	_lcd,w
  3618     0683  0084               	movwf	4
  3619     0684  1783               	bsf	3,7
  3620     0685  1C60               	btfss	_lcd+1,0
  3621     0686  1383               	bcf	3,7
  3622     0687  3001               	movlw	1
  3623     0688  00F0               	movwf	??_LCD_Out
  3624     0689  0C62               	rrf	_lcd+3,w
  3625     068A  00F1               	movwf	??_LCD_Out+1
  3626     068B  0CF1               	rrf	??_LCD_Out+1,f
  3627     068C  0C71               	rrf	??_LCD_Out+1,w
  3628     068D  3907               	andlw	7
  3629     068E  3E01               	addlw	1
  3630     068F  2E92               	goto	u944
  3631     0690                     u945:
  3632     0690  1003               	clrc
  3633     0691  0DF0               	rlf	??_LCD_Out,f
  3634     0692                     u944:
  3635     0692  3EFF               	addlw	-1
  3636     0693  1D03               	skipz
  3637     0694  2E90               	goto	u945
  3638     0695  0870               	movf	??_LCD_Out,w
  3639     0696  0480               	iorwf	0,f
  3640                           
  3641                           ;lcd.c: 21:     }
  3642     0697  2EAE               	goto	l1401
  3643     0698                     l1399:
  3644                           
  3645                           ;lcd.c: 23:         *(lcd.PORT) &= ~(1 << lcd.D5);
  3646     0698  085F               	movf	_lcd,w
  3647     0699  0084               	movwf	4
  3648     069A  1783               	bsf	3,7
  3649     069B  1C60               	btfss	_lcd+1,0
  3650     069C  1383               	bcf	3,7
  3651     069D  3001               	movlw	1
  3652     069E  00F0               	movwf	??_LCD_Out
  3653     069F  0C62               	rrf	_lcd+3,w
  3654     06A0  00F1               	movwf	??_LCD_Out+1
  3655     06A1  0CF1               	rrf	??_LCD_Out+1,f
  3656     06A2  0C71               	rrf	??_LCD_Out+1,w
  3657     06A3  3907               	andlw	7
  3658     06A4  3E01               	addlw	1
  3659     06A5  2EA8               	goto	u954
  3660     06A6                     u955:
  3661     06A6  1003               	clrc
  3662     06A7  0DF0               	rlf	??_LCD_Out,f
  3663     06A8                     u954:
  3664     06A8  3EFF               	addlw	-1
  3665     06A9  1D03               	skipz
  3666     06AA  2EA6               	goto	u955
  3667     06AB  0870               	movf	??_LCD_Out,w
  3668     06AC  3AFF               	xorlw	255
  3669     06AD  0580               	andwf	0,f
  3670     06AE                     l1401:
  3671                           
  3672                           ;lcd.c: 26:     if ( c & 4 ) {
  3673     06AE  1D72               	btfss	LCD_Out@c,2
  3674     06AF  2EB1               	goto	u961
  3675     06B0  2EB2               	goto	u960
  3676     06B1                     u961:
  3677     06B1  2EC5               	goto	l1405
  3678     06B2                     u960:
  3679     06B2                     l1403:
  3680                           
  3681                           ;lcd.c: 27:         *(lcd.PORT) |= 1 << lcd.D6;
  3682     06B2  085F               	movf	_lcd,w
  3683     06B3  0084               	movwf	4
  3684     06B4  1783               	bsf	3,7
  3685     06B5  1C60               	btfss	_lcd+1,0
  3686     06B6  1383               	bcf	3,7
  3687     06B7  3001               	movlw	1
  3688     06B8  00F0               	movwf	??_LCD_Out
  3689     06B9  0863               	movf	_lcd+4,w
  3690     06BA  3907               	andlw	7
  3691     06BB  3E01               	addlw	1
  3692     06BC  2EBF               	goto	u974
  3693     06BD                     u975:
  3694     06BD  1003               	clrc
  3695     06BE  0DF0               	rlf	??_LCD_Out,f
  3696     06BF                     u974:
  3697     06BF  3EFF               	addlw	-1
  3698     06C0  1D03               	skipz
  3699     06C1  2EBD               	goto	u975
  3700     06C2  0870               	movf	??_LCD_Out,w
  3701     06C3  0480               	iorwf	0,f
  3702                           
  3703                           ;lcd.c: 28:     }
  3704     06C4  2ED8               	goto	l1407
  3705     06C5                     l1405:
  3706                           
  3707                           ;lcd.c: 30:         *(lcd.PORT) &= ~(1 << lcd.D6);
  3708     06C5  085F               	movf	_lcd,w
  3709     06C6  0084               	movwf	4
  3710     06C7  1783               	bsf	3,7
  3711     06C8  1C60               	btfss	_lcd+1,0
  3712     06C9  1383               	bcf	3,7
  3713     06CA  3001               	movlw	1
  3714     06CB  00F0               	movwf	??_LCD_Out
  3715     06CC  0863               	movf	_lcd+4,w
  3716     06CD  3907               	andlw	7
  3717     06CE  3E01               	addlw	1
  3718     06CF  2ED2               	goto	u984
  3719     06D0                     u985:
  3720     06D0  1003               	clrc
  3721     06D1  0DF0               	rlf	??_LCD_Out,f
  3722     06D2                     u984:
  3723     06D2  3EFF               	addlw	-1
  3724     06D3  1D03               	skipz
  3725     06D4  2ED0               	goto	u985
  3726     06D5  0870               	movf	??_LCD_Out,w
  3727     06D6  3AFF               	xorlw	255
  3728     06D7  0580               	andwf	0,f
  3729     06D8                     l1407:
  3730                           
  3731                           ;lcd.c: 33:     if ( c & 8 ) {
  3732     06D8  1DF2               	btfss	LCD_Out@c,3
  3733     06D9  2EDB               	goto	u991
  3734     06DA  2EDC               	goto	u990
  3735     06DB                     u991:
  3736     06DB  2EF2               	goto	l1411
  3737     06DC                     u990:
  3738     06DC                     l1409:
  3739                           
  3740                           ;lcd.c: 34:          *(lcd.PORT) |= 1 << lcd.D7;
  3741     06DC  085F               	movf	_lcd,w
  3742     06DD  0084               	movwf	4
  3743     06DE  1783               	bsf	3,7
  3744     06DF  1C60               	btfss	_lcd+1,0
  3745     06E0  1383               	bcf	3,7
  3746     06E1  3001               	movlw	1
  3747     06E2  00F0               	movwf	??_LCD_Out
  3748     06E3  0C63               	rrf	_lcd+4,w
  3749     06E4  00F1               	movwf	??_LCD_Out+1
  3750     06E5  0CF1               	rrf	??_LCD_Out+1,f
  3751     06E6  0C71               	rrf	??_LCD_Out+1,w
  3752     06E7  3907               	andlw	7
  3753     06E8  3E01               	addlw	1
  3754     06E9  2EEC               	goto	u1004
  3755     06EA                     u1005:
  3756     06EA  1003               	clrc
  3757     06EB  0DF0               	rlf	??_LCD_Out,f
  3758     06EC                     u1004:
  3759     06EC  3EFF               	addlw	-1
  3760     06ED  1D03               	skipz
  3761     06EE  2EEA               	goto	u1005
  3762     06EF  0870               	movf	??_LCD_Out,w
  3763     06F0  0480               	iorwf	0,f
  3764                           
  3765                           ;lcd.c: 35:     }
  3766     06F1  2F08               	goto	l219
  3767     06F2                     l1411:
  3768                           
  3769                           ;lcd.c: 37:          *(lcd.PORT) &= ~(1 << lcd.D7);
  3770     06F2  085F               	movf	_lcd,w
  3771     06F3  0084               	movwf	4
  3772     06F4  1783               	bsf	3,7
  3773     06F5  1C60               	btfss	_lcd+1,0
  3774     06F6  1383               	bcf	3,7
  3775     06F7  3001               	movlw	1
  3776     06F8  00F0               	movwf	??_LCD_Out
  3777     06F9  0C63               	rrf	_lcd+4,w
  3778     06FA  00F1               	movwf	??_LCD_Out+1
  3779     06FB  0CF1               	rrf	??_LCD_Out+1,f
  3780     06FC  0C71               	rrf	??_LCD_Out+1,w
  3781     06FD  3907               	andlw	7
  3782     06FE  3E01               	addlw	1
  3783     06FF  2F02               	goto	u1014
  3784     0700                     u1015:
  3785     0700  1003               	clrc
  3786     0701  0DF0               	rlf	??_LCD_Out,f
  3787     0702                     u1014:
  3788     0702  3EFF               	addlw	-1
  3789     0703  1D03               	skipz
  3790     0704  2F00               	goto	u1015
  3791     0705  0870               	movf	??_LCD_Out,w
  3792     0706  3AFF               	xorlw	255
  3793     0707  0580               	andwf	0,f
  3794     0708                     l219:
  3795     0708  0008               	return
  3796     0709                     __end_of_LCD_Out:
  3797                           
  3798                           	psect	text18
  3799     003B                     __ptext18:	
  3800 ;; *************** function _ADC_read *****************
  3801 ;; Defined at:
  3802 ;;		line 47 in file "main.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  2    0[COMMON] unsigned int 
  3809 ;; Registers used:
  3810 ;;		wreg
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3816 ;;      Params:         2       0       0       0       0
  3817 ;;      Locals:         0       0       0       0       0
  3818 ;;      Temps:          0       0       0       0       0
  3819 ;;      Totals:         2       0       0       0       0
  3820 ;;Total ram usage:        2 bytes
  3821 ;; Hardware stack levels used: 1
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_main
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829     003B                     _ADC_read:	
  3830                           ;psect for function _ADC_read
  3831                           
  3832     003B                     l1571:	
  3833                           ;incstack = 0
  3834                           ; Regs used in _ADC_read: [wreg]
  3835                           
  3836                           
  3837                           ;main.c: 48: 
  3838     003B  283C               	nop2	;2 cycle nop
  3839     003C  283D               	nop2	;2 cycle nop
  3840     003D  0000               	nop
  3841                           
  3842                           ;main.c: 49:         adc_result = ADC_read();
  3843     003E  1283               	bcf	3,5	;RP0=0, select bank0
  3844     003F  1303               	bcf	3,6	;RP1=0, select bank0
  3845     0040  149F               	bsf	31,1	;volatile
  3846     0041                     l58:	
  3847                           ;main.c: 50:         switch(aux)
  3848                           
  3849     0041  189F               	btfsc	31,1	;volatile
  3850     0042  2844               	goto	u1351
  3851     0043  2845               	goto	u1350
  3852     0044                     u1351:
  3853     0044  2841               	goto	l58
  3854     0045                     u1350:
  3855     0045                     l1573:
  3856                           
  3857                           ;main.c: 51:         {
  3858     0045  081E               	movf	30,w	;volatile
  3859     0046  00F1               	movwf	?_ADC_read+1
  3860     0047  1683               	bsf	3,5	;RP0=1, select bank1
  3861     0048  1303               	bcf	3,6	;RP1=0, select bank1
  3862     0049  081E               	movf	30,w	;volatile
  3863     004A  00F0               	movwf	?_ADC_read
  3864     004B                     l61:
  3865     004B  0008               	return
  3866     004C                     __end_of_ADC_read:
  3867                           
  3868                           	psect	text19
  3869     0FD0                     __ptext19:	
  3870 ;; *************** function _ADC_Initialize *****************
  3871 ;; Defined at:
  3872 ;;		line 41 in file "main.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;		None
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;		None
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  1    wreg      void 
  3879 ;; Registers used:
  3880 ;;		None
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3886 ;;      Params:         0       0       0       0       0
  3887 ;;      Locals:         0       0       0       0       0
  3888 ;;      Temps:          0       0       0       0       0
  3889 ;;      Totals:         0       0       0       0       0
  3890 ;;Total ram usage:        0 bytes
  3891 ;; Hardware stack levels used: 1
  3892 ;; This function calls:
  3893 ;;		Nothing
  3894 ;; This function is called by:
  3895 ;;		_main
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899     0FD0                     _ADC_Initialize:	
  3900                           ;psect for function _ADC_Initialize
  3901                           
  3902     0FD0                     l1569:	
  3903                           ;incstack = 0
  3904                           ; Regs used in _ADC_Initialize: []
  3905                           
  3906                           
  3907                           ;main.c: 42:         if(!PORTBbits.RB0)
  3908     0FD0  3001               	movlw	1
  3909     0FD1  1683               	bsf	3,5	;RP0=1, select bank3
  3910     0FD2  1703               	bsf	3,6	;RP1=1, select bank3
  3911     0FD3  0088               	movwf	8	;volatile
  3912                           
  3913                           ;main.c: 43:         {
  3914     0FD4  3081               	movlw	129
  3915     0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  3916     0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  3917     0FD7  009F               	movwf	31	;volatile
  3918                           
  3919                           ;main.c: 44:             aux++;
  3920     0FD8  3080               	movlw	128
  3921     0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  3922     0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  3923     0FDB  009F               	movwf	31	;volatile
  3924     0FDC                     l55:
  3925     0FDC  0008               	return
  3926     0FDD                     __end_of_ADC_Initialize:
  3927     0002                     ___latbits      equ	2
  3928     007E                     btemp           set	126	;btemp
  3929     007E                     wtemp0          set	126
  3930                           
  3931                           	psect	config
  3932                           
  3933                           ;Config register CONFIG1 @ 0x2007
  3934                           ;	Oscillator Selection bits
  3935                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  3936                           ;	Watchdog Timer Enable bit
  3937                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3938                           ;	Power-up Timer Enable bit
  3939                           ;	PWRTE = OFF, PWRT disabled
  3940                           ;	RE3/MCLR pin function select bit
  3941                           ;	MCLRE = 0x1, unprogrammed default
  3942                           ;	Code Protection bit
  3943                           ;	CP = OFF, Program memory code protection is disabled
  3944                           ;	Data Code Protection bit
  3945                           ;	CPD = OFF, Data memory code protection is disabled
  3946                           ;	Brown Out Reset Selection bits
  3947                           ;	BOREN = ON, BOR enabled
  3948                           ;	Internal External Switchover bit
  3949                           ;	IESO = 0x1, unprogrammed default
  3950                           ;	Fail-Safe Clock Monitor Enabled bit
  3951                           ;	FCMEN = 0x1, unprogrammed default
  3952                           ;	Low Voltage Programming Enable bit
  3953                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3954                           ;	In-Circuit Debugger Mode bit
  3955                           ;	DEBUG = 0x1, unprogrammed default
  3956     2007                     	org	8199
  3957     2007  2FF1               	dw	12273
  3958                           
  3959                           ;Config register CONFIG2 @ 0x2008
  3960                           ;	Brown-out Reset Selection bit
  3961                           ;	BOR4V = 0x1, unprogrammed default
  3962                           ;	Flash Program Memory Self Write Enable bits
  3963                           ;	WRT = OFF, Write protection off
  3964     2008                     	org	8200
  3965     2008  3FFF               	dw	16383

Data Sizes:
    Strings     35
    Constant    0
    Data        5
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      68
    BANK1            80      0      32
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    display$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> buffer(BANK0[10]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> buffer(BANK0[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    lcd$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    LCD_putrs@a	PTR const unsigned char  size(2) Largest target is 13
		 -> buffer(BANK0[10]), STR_1(CODE[10]), STR_3(CODE[13]), STR_5(CODE[6]), 

    S22$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    S623$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> buffer(BANK0[10]), 

    S623$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), STR_6(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), STR_6(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMMON[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), STR_6(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_4(CODE[6]), STR_6(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _volt->___aldiv
    _porcentaje->___aldiv
    ___aldiv->___lmul
    _sprintf->_vfprintf
    _vfpfcnvrt->_fputc
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out

Critical Paths under _main in BANK0

    _main->_mil
    _main->_porcentaje
    _main->_volt
    _volt->_sprintf
    _porcentaje->_sprintf
    _mil->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7142
                                             38 BANK0      2     2      0
                     _ADC_Initialize
                           _ADC_read
                           _LCD_Init
                          _LCD_Write
                                _mil
                         _porcentaje
                               _volt
 ---------------------------------------------------------------------------------
 (1) _volt                                                 3     3      0    2489
                                             35 BANK0      3     3      0
                          _LCD_Write
                          _LCD_putrs
                            ___aldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _porcentaje                                           3     3      0    2489
                                             35 BANK0      3     3      0
                          _LCD_Write
                          _LCD_putrs
                            ___aldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8      96
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     304
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _mil                                                  3     3      0    1756
                                             35 BANK0      3     3      0
                          _LCD_Write
                          _LCD_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    1341
                                             16 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             5     1      4    1136
                                             13 COMMON     1     1      0
                                             12 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           13     9      4    1011
                                              0 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                               13     9      4     230
                                              0 COMMON    13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     165
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     168
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _LCD_putrs                                            7     5      2     270
                                              6 COMMON     7     5      2
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (3) _LCD_putc                                             3     3      0     174
                                              3 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     216
                                              6 COMMON     8     3      5
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Write                                            3     3      0     145
                                              3 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (4) _LCD_Out                                              3     3      0     116
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ADC_read
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
   _mil
     _LCD_Write
     _LCD_putrs
       _LCD_putc
         _LCD_Out
     _sprintf
       _vfprintf
         _vfpfcnvrt
           ___lwdiv
           ___lwmod
           _fputc
             _putch
   _porcentaje
     _LCD_Write
     _LCD_putrs
     ___aldiv
       ___lmul (ARG)
     ___lmul
     ___lwdiv
     ___lwmod
     _sprintf
   _volt
     _LCD_Write
     _LCD_putrs
     ___aldiv
     ___lmul
     ___lwdiv
     ___lwmod
     _sprintf

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      32     40.0%
BITBANK1            80      0       0      0.0%
BANK0               80     40      68     85.0%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     113      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Fri Jun 13 18:09:23 2025

                      pc 0002                       l61 004B                       l70 0256  
                     l55 0FDC                       l58 0041                       l84 0500  
                     fsr 0004                      l121 045D                      l222 0210  
                    l118 05A2                      l231 064E                      l410 033E  
                    l219 0708                      l243 0642                      l155 04FF  
                    l420 03C2                      l158 0173                      l247 0329  
                    l192 01BB                      l259 00EA                      l359 0172  
                    l625 012C                      l635 00A8                      l808 0FFF  
                    l852 0070                      l845 07CC                      l837 0749  
                    l864 045C                      l875 0FC7                      u720 00F3  
                    u721 00F2                      u810 0087                      u811 0086  
                    u900 0654                      u740 0103                      u820 0091  
                    u901 0653                      u741 0102                      u821 0090  
                    u805 007B                      u735 00F7                      u760 0114  
                    u840 00A4                      u761 0113                      u841 00A3  
                    u825 008D                      u930 0682                      u914 0663  
                    u850 03C9                      u931 0681                      u915 0661  
                    u755 0104                      u835 0098                      u851 03C8  
                    u924 0678                      u780 0128                      u860 03CF  
                    u925 0676                      u781 0127                      u765 0110  
                    u861 03CE                      u790 0077                      u870 03EE  
                    u775 011C                      u791 0076                      u871 03ED  
                    u960 06B2                      u944 0692                      u880 0420  
                    u961 06B1                      u945 0690                      u881 041F  
                    u954 06A8                      u890 0441                      u955 06A6  
                    u885 041C                      u990 06DC                      u974 06BF  
                    u991 06DB                      u975 06BD                      u984 06D2  
                    u985 06D0          LCD_Init@display 0076                      _lcd 005F  
                    _mil 0173                      fsr0 0004                      indf 0000  
        __end_of_LCD_Out 0709                     l1401 06AE                     l1411 06F2  
                   l1403 06B2                     l1331 00F3                     l1405 06C5  
                   l1341 0114                     l1333 00F6                     l1421 0725  
                   l1413 0709                     l1501 0FDD                     l1407 06D8  
                   l1343 011A                     l1335 00FD                     l1327 00EB  
                   l1431 0761                     l1423 0729                     l1415 0719  
                   l1511 0FF6                     l1503 0FE1                     l1409 06DC  
                   l1601 060B                     l1345 011B                     l1337 00FF  
                   l1329 00ED                     l1361 0083                     l1353 0071  
                   l1441 079A                     l1433 0776                     l1425 0735  
                   l1417 071D                     l1505 0FE5                     l1521 0150  
                   l1611 0629                     l1603 0611                     l1347 0122  
                   l1339 0103                     l1363 0087                     l1355 0077  
                   l1371 00A4                     l1435 077C                     l1427 0743  
                   l1419 0721                     l1451 07B3                     l1507 0FE7  
                   l1531 032D                     l1523 0159                     l1515 012D  
                   l1613 062B                     l1605 0617                     l1461 02BC  
                   l1349 0128                     l1365 0091                     l1357 007A  
                   l1381 03D6                     l1437 0782                     l1429 074B  
                   l1445 07A1                     l1509 0FE9                     l1541 0357  
                   l1533 0331                     l1525 016A                     l1517 0135  
                   l1391 0654                     l1607 061D                     l1471 0311  
                   l1463 02D3                     l1367 0097                     l1359 0081  
                   l1383 03EE                     l1375 03C3                     l1439 0796  
                   l1447 07AC                     l1703 01A3                     l1551 037A  
                   l1543 035F                     l1535 0342                     l1519 0139  
                   l1631 050C                     l1623 0500                     l1711 022D  
                   l1393 0669                     l1609 0623                     l1465 02D7  
                   l1457 0299                     l1369 009E                     l1385 0420  
                   l1377 03C9                     l1473 004C                     l1705 01AC  
                   l1553 038C                     l1545 0362                     l1561 03AA  
                   l1537 034D                     l1529 032A                     l1633 0515  
                   l1721 023A                     l1713 0230                     l1571 003B  
                   l1395 067E                     l1491 01F8                     l1483 01BD  
                   l1619 062C                     l1467 02EF                     l1459 02AD  
                   l1379 03CF                     l1475 0051                     l1563 03AF  
                   l1555 039A                     l1547 036D                     l1539 034F  
                   l1651 0593                     l1643 057E                     l1635 0547  
                   l1731 025A                     l1723 023E                     l1715 0231  
                   l1707 0211                     l1573 0045                     l1397 0682  
                   l1389 0650                     l1485 01D2                     l1581 05C0  
                   l1469 02F6                     l1493 00A9                     l1477 0060  
                   l1565 03BA                     l1557 039B                     l1549 0371  
                   l1661 0469                     l1653 045D                     l1637 055A  
                   l1741 027F                     l1733 0263                     l1725 0244  
                   l1717 0235                     l1709 0216                     l1399 0698  
                   l1487 01D8                     l1591 05DF                     l1583 05C4  
                   l1495 00AC                     l1479 006C                     l1559 03A4  
                   l1663 0472                     l1639 056D                     l1735 0267  
                   l1727 024A                     l1719 0237                     l1569 0FD0  
                   l1489 01EF                     l1593 05E8                     l1585 05CE  
                   l1577 05A3                     l1497 00C8                     l1681 04F0  
                   l1673 04DB                     l1665 04A4                     l1649 058A  
                   l1737 0273                     l1745 0285                     l1729 0250  
                   l1595 05EE                     l1587 05D2                     l1579 05B4  
                   l1499 00CE                     l1691 017F                     l1683 0173  
                   l1667 04B7                     l1739 0279                     l1597 05FC  
                   l1589 05DC                     l1693 0188                     l1669 04CA  
                   l1599 0605                     l1679 04E7                     l1697 0197  
                   l1779 028A                     ?_mil 0070                     STR_1 0020  
                   STR_2 0030                     STR_3 0013                     STR_4 0030  
                   STR_5 002A                     STR_6 0033                     u1004 06EC  
                   u1020 0719                     u1005 06EA                     u1021 0718  
                   u1014 0702                     u1030 0735                     u1015 0700  
                   u1031 0734                     u1104 02E9                     u1040 077C  
                   u1200 0139                     u1105 02E7                     u1041 077B  
                   u1201 0138                     u1114 0308                     u1050 0781  
                   u1130 006C                     u1115 0306                     u1051 0780  
                   u1131 006B                     u1211 0142                     u1124 0323  
                   u1060 07A0                     u1212 0149                     u1125 0321  
                   u1061 079F                     u1213 0150                     u1310 038C  
                   u1311 038B                     u1144 01CC                     u1240 016A  
                   u1400 0250                     u1145 01CA                     u1305 0373  
                   u1241 0169                     u1225 0152                     u1401 024F  
                   u1154 01EA                     u1074 02A8                     u1170 00B6  
                   u1330 03AA                     u1250 0331                     u1410 025A  
                   u1155 01E8                     u1075 02A6                     u1331 03A9  
                   u1315 0388                     u1251 0330                     u1235 015A  
                   u1411 0259                     u1164 020A                     u1180 00D8  
                   u1340 03AF                     u1260 0342                     u1420 0263  
                   u1165 0208                     u1085 02B0                     u1341 03AE  
                   u1325 039C                     u1261 0341                     u1421 0262  
                   u1350 0045                     u1094 02CE                     u1190 00EA  
                   u1270 035F                     u1351 0044                     u1095 02CC  
                   u1191 00E9                     u1271 035E                     u1360 05C0  
                   u1361 05BF                     u1370 05CE                     u1290 0371  
                   u1507 05F2                     u1371 05CD                     u1291 0370  
                   u1380 05DC                     u1517 0600                     u1381 05DB  
                   u1365 05BC                     u1285 0364                     u1527 01F3  
                   u1375 05CA                     u1447 059B                     u1385 05D8  
                   u1457 04F8                     u1395 062F                     u1467 01B4  
                   u1477 02D5                     u1487 030F                     u1497 05E3  
                   _dbuf 00A0                     _main 0211                     _prec 004A  
                   btemp 007E                     _volt 0500                     start 0000  
       __end_of_ADC_read 004C              LCD_Init@cmd 007D                    ??_mil 0043  
       __end_of_LCD_Init 064F         __end_of_LCD_putc 032A          __end_of___aldiv 03C3  
                  ?_main 0070                    _ANSEL 0188                    ?_volt 0070  
        __end_of___lwdiv 012D          __end_of___lwmod 00A9             vfpfcnvrt@fmt 0022  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
    ___lmul@multiplicand 0074                    _flags 0054                    _fputc 03C3  
                  _width 0048                    _putch 0FC7                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 1000  
        __initialization 07CD             __end_of_main 0298             __end_of_volt 05A3  
                 ??_main 007E                   ??_volt 0043                ??_LCD_Out 0070  
      __end_of_LCD_Write 0211        __end_of_LCD_putrs 00EB                   _ADCON0 001F  
                 _ADCON1 009F                   ?_fputc 0070                   _ADRESH 001E  
                 _ADRESL 009E                   ?_putch 0070                   _ANSELH 0189  
           vfprintf@cfmt 007D                   ___lmul 012D                ??___aldiv 007D  
              ??___lwdiv 0074                ??___lwmod 0074                   _buffer 0055  
                 fputc@c 0070                ?_ADC_read 0070                   putch@c 0070  
       __end_of_vfprintf 0071                ??_sprintf 0036  __end_of__initialization 07FC  
              ?_LCD_Init 0076                ?_LCD_putc 0070           __pcstackCOMMON 0070  
           __pidataBANK0 0036            __end_of_fputc 045D               _adc_result 0052  
          __end_of_putch 0FC8                LCD_putc@c 0075               ??_ADC_read 0072  
                ??_fputc 0074                  ??_putch 0070               __pbssBANK0 0048  
             __pbssBANK1 00A0               ??_LCD_Init 007B               ??_LCD_putc 0073  
             __pmaintext 0211                  ?___lmul 0070           ___lmul@product 0079  
                _LCD_Out 064F               __stringtab 0003                  ___aldiv 032A  
                ___lwdiv 00EB                  ___lwmod 0071                ?_vfprintf 002C  
                __ptext1 0500                  __ptext2 045D                  __ptext3 012D  
                __ptext4 032A                  __ptext5 0173                  __ptext6 0FDD  
                __ptext7 004C                  __ptext8 0709                  __ptext9 03C3  
       ___aldiv@dividend 0024                  main@aux 0046                  _sprintf 0FDD  
                clrloop0 0FC9                  _voltaje 0050                _LCD_Write 01BC  
   end_of_initialization 07FC                _LCD_putrs 00A9                  fputc@fp 0072  
      __end_of_vfpfcnvrt 07CD         ___aldiv@quotient 002A         vfpfcnvrt@convarg 0026  
             ??_vfprintf 007D               _porcentaje 045D                _PORTBbits 0006  
             ?_LCD_Write 0070               ?_LCD_putrs 0076           __end_of___lmul 0173  
            vfpfcnvrt@ap 0023              vfpfcnvrt@cp 002A              vfpfcnvrt@fp 0020  
             LCD_Write@c 0075           _ADC_Initialize 0FD0      start_initialization 07CD  
            __end_of_mil 01BC               LCD_putrs@a 0076               LCD_putrs@i 007B  
            vfprintf@fmt 002E                 ??___lmul 0078   __end_of_ADC_Initialize 0FDD  
            __pdataBANK0 005F              ?_porcentaje 0070                 ?_LCD_Out 0070  
              ___latbits 0002            __pcstackBANK0 0020                 LCD_Out@c 0072  
            ??_LCD_Write 0073              ??_LCD_putrs 0078         ___lwdiv@dividend 0072  
               ?___aldiv 0020                 ?___lwdiv 0070                 ?___lwmod 0070  
        ?_ADC_Initialize 0070                __pstrings 0003                 _ADC_read 003B  
       ___lwdiv@quotient 0074                 ?_sprintf 0030          ___aldiv@divisor 0020  
        ___aldiv@counter 0028                 _LCD_Init 05A3                clear_ram0 0FC8  
               _LCD_putc 0298                 _GO_nDONE 00F9                _vfpfcnvrt 0709  
            __stringbase 0012               vfpfcnvrt@c 002B        ___lmul@multiplier 0070  
             vfprintf@ap 002F               vfprintf@fp 002C               ?_vfpfcnvrt 0020  
     __end_of__stringtab 0013               sprintf@fmt 0031          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076                 __ptext10 0FC7                 __ptext11 0071  
               __ptext12 00EB                 __ptext13 00A9                 __ptext14 0298  
               __ptext15 05A3                 __ptext16 01BC                 __ptext17 064F  
               __ptext18 003B                 __ptext19 0FD0                 _part_dec 004C  
               _part_ent 004E                 _vfprintf 004C             ??_porcentaje 0043  
              sprintf@ap 0037         ___lwmod@dividend 0072       __end_of_porcentaje 0500  
       ??_ADC_Initialize 0070                stringcode 000D              ??_vfpfcnvrt 0024  
             _OPTION_REG 0081                 sprintf@f 0038                 sprintf@s 0030  
        ___lwmod@divisor 0070          ___lwmod@counter 0074                 stringdir 000D  
               stringtab 0003             ___aldiv@sign 0029  
