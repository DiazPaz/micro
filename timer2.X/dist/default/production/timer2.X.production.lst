

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Jun 19 11:16:24 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,space=0,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    16                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=3
    17                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    18                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    21                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=3
    22                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=3
    23                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=3
    24                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    26                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=1
    27                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    29                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=2
    30                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,space=0,delta=2
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    42                           	dabs	1,0x7E,2
    43     0000                     
    44                           ; Generated 26/03/2025 GMT
    45                           ; 
    46                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F887 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78     0004                     fsr             equ	4
    79     0004                     fsr0            equ	4
    80     0000                     indf            equ	0
    81     0000                     indf0           equ	0
    82     0002                     pc              equ	2
    83     0002                     pcl             equ	2
    84     000A                     pclath          equ	10
    85     0003                     status          equ	3
    86     0000                     INDF            equ	0	;# 
    87     0001                     TMR0            equ	1	;# 
    88     0002                     PCL             equ	2	;# 
    89     0003                     STATUS          equ	3	;# 
    90     0004                     FSR             equ	4	;# 
    91     0005                     PORTA           equ	5	;# 
    92     0006                     PORTB           equ	6	;# 
    93     0007                     PORTC           equ	7	;# 
    94     0008                     PORTD           equ	8	;# 
    95     0009                     PORTE           equ	9	;# 
    96     000A                     PCLATH          equ	10	;# 
    97     000B                     INTCON          equ	11	;# 
    98     000C                     PIR1            equ	12	;# 
    99     000D                     PIR2            equ	13	;# 
   100     000E                     TMR1            equ	14	;# 
   101     000E                     TMR1L           equ	14	;# 
   102     000F                     TMR1H           equ	15	;# 
   103     0010                     T1CON           equ	16	;# 
   104     0011                     TMR2            equ	17	;# 
   105     0012                     T2CON           equ	18	;# 
   106     0013                     SSPBUF          equ	19	;# 
   107     0014                     SSPCON          equ	20	;# 
   108     0015                     CCPR1           equ	21	;# 
   109     0015                     CCPR1L          equ	21	;# 
   110     0016                     CCPR1H          equ	22	;# 
   111     0017                     CCP1CON         equ	23	;# 
   112     0018                     RCSTA           equ	24	;# 
   113     0019                     TXREG           equ	25	;# 
   114     001A                     RCREG           equ	26	;# 
   115     001B                     CCPR2           equ	27	;# 
   116     001B                     CCPR2L          equ	27	;# 
   117     001C                     CCPR2H          equ	28	;# 
   118     001D                     CCP2CON         equ	29	;# 
   119     001E                     ADRESH          equ	30	;# 
   120     001F                     ADCON0          equ	31	;# 
   121     0081                     OPTION_REG      equ	129	;# 
   122     0085                     TRISA           equ	133	;# 
   123     0086                     TRISB           equ	134	;# 
   124     0087                     TRISC           equ	135	;# 
   125     0088                     TRISD           equ	136	;# 
   126     0089                     TRISE           equ	137	;# 
   127     008C                     PIE1            equ	140	;# 
   128     008D                     PIE2            equ	141	;# 
   129     008E                     PCON            equ	142	;# 
   130     008F                     OSCCON          equ	143	;# 
   131     0090                     OSCTUNE         equ	144	;# 
   132     0091                     SSPCON2         equ	145	;# 
   133     0092                     PR2             equ	146	;# 
   134     0093                     SSPADD          equ	147	;# 
   135     0093                     SSPMSK          equ	147	;# 
   136     0093                     MSK             equ	147	;# 
   137     0094                     SSPSTAT         equ	148	;# 
   138     0095                     WPUB            equ	149	;# 
   139     0096                     IOCB            equ	150	;# 
   140     0097                     VRCON           equ	151	;# 
   141     0098                     TXSTA           equ	152	;# 
   142     0099                     SPBRG           equ	153	;# 
   143     009A                     SPBRGH          equ	154	;# 
   144     009B                     PWM1CON         equ	155	;# 
   145     009C                     ECCPAS          equ	156	;# 
   146     009D                     PSTRCON         equ	157	;# 
   147     009E                     ADRESL          equ	158	;# 
   148     009F                     ADCON1          equ	159	;# 
   149     0105                     WDTCON          equ	261	;# 
   150     0107                     CM1CON0         equ	263	;# 
   151     0108                     CM2CON0         equ	264	;# 
   152     0109                     CM2CON1         equ	265	;# 
   153     010C                     EEDATA          equ	268	;# 
   154     010C                     EEDAT           equ	268	;# 
   155     010D                     EEADR           equ	269	;# 
   156     010E                     EEDATH          equ	270	;# 
   157     010F                     EEADRH          equ	271	;# 
   158     0185                     SRCON           equ	389	;# 
   159     0187                     BAUDCTL         equ	391	;# 
   160     0188                     ANSEL           equ	392	;# 
   161     0189                     ANSELH          equ	393	;# 
   162     018C                     EECON1          equ	396	;# 
   163     018D                     EECON2          equ	397	;# 
   164     0000                     INDF            equ	0	;# 
   165     0001                     TMR0            equ	1	;# 
   166     0002                     PCL             equ	2	;# 
   167     0003                     STATUS          equ	3	;# 
   168     0004                     FSR             equ	4	;# 
   169     0005                     PORTA           equ	5	;# 
   170     0006                     PORTB           equ	6	;# 
   171     0007                     PORTC           equ	7	;# 
   172     0008                     PORTD           equ	8	;# 
   173     0009                     PORTE           equ	9	;# 
   174     000A                     PCLATH          equ	10	;# 
   175     000B                     INTCON          equ	11	;# 
   176     000C                     PIR1            equ	12	;# 
   177     000D                     PIR2            equ	13	;# 
   178     000E                     TMR1            equ	14	;# 
   179     000E                     TMR1L           equ	14	;# 
   180     000F                     TMR1H           equ	15	;# 
   181     0010                     T1CON           equ	16	;# 
   182     0011                     TMR2            equ	17	;# 
   183     0012                     T2CON           equ	18	;# 
   184     0013                     SSPBUF          equ	19	;# 
   185     0014                     SSPCON          equ	20	;# 
   186     0015                     CCPR1           equ	21	;# 
   187     0015                     CCPR1L          equ	21	;# 
   188     0016                     CCPR1H          equ	22	;# 
   189     0017                     CCP1CON         equ	23	;# 
   190     0018                     RCSTA           equ	24	;# 
   191     0019                     TXREG           equ	25	;# 
   192     001A                     RCREG           equ	26	;# 
   193     001B                     CCPR2           equ	27	;# 
   194     001B                     CCPR2L          equ	27	;# 
   195     001C                     CCPR2H          equ	28	;# 
   196     001D                     CCP2CON         equ	29	;# 
   197     001E                     ADRESH          equ	30	;# 
   198     001F                     ADCON0          equ	31	;# 
   199     0081                     OPTION_REG      equ	129	;# 
   200     0085                     TRISA           equ	133	;# 
   201     0086                     TRISB           equ	134	;# 
   202     0087                     TRISC           equ	135	;# 
   203     0088                     TRISD           equ	136	;# 
   204     0089                     TRISE           equ	137	;# 
   205     008C                     PIE1            equ	140	;# 
   206     008D                     PIE2            equ	141	;# 
   207     008E                     PCON            equ	142	;# 
   208     008F                     OSCCON          equ	143	;# 
   209     0090                     OSCTUNE         equ	144	;# 
   210     0091                     SSPCON2         equ	145	;# 
   211     0092                     PR2             equ	146	;# 
   212     0093                     SSPADD          equ	147	;# 
   213     0093                     SSPMSK          equ	147	;# 
   214     0093                     MSK             equ	147	;# 
   215     0094                     SSPSTAT         equ	148	;# 
   216     0095                     WPUB            equ	149	;# 
   217     0096                     IOCB            equ	150	;# 
   218     0097                     VRCON           equ	151	;# 
   219     0098                     TXSTA           equ	152	;# 
   220     0099                     SPBRG           equ	153	;# 
   221     009A                     SPBRGH          equ	154	;# 
   222     009B                     PWM1CON         equ	155	;# 
   223     009C                     ECCPAS          equ	156	;# 
   224     009D                     PSTRCON         equ	157	;# 
   225     009E                     ADRESL          equ	158	;# 
   226     009F                     ADCON1          equ	159	;# 
   227     0105                     WDTCON          equ	261	;# 
   228     0107                     CM1CON0         equ	263	;# 
   229     0108                     CM2CON0         equ	264	;# 
   230     0109                     CM2CON1         equ	265	;# 
   231     010C                     EEDATA          equ	268	;# 
   232     010C                     EEDAT           equ	268	;# 
   233     010D                     EEADR           equ	269	;# 
   234     010E                     EEDATH          equ	270	;# 
   235     010F                     EEADRH          equ	271	;# 
   236     0185                     SRCON           equ	389	;# 
   237     0187                     BAUDCTL         equ	391	;# 
   238     0188                     ANSEL           equ	392	;# 
   239     0189                     ANSELH          equ	393	;# 
   240     018C                     EECON1          equ	396	;# 
   241     018D                     EECON2          equ	397	;# 
   242     0000                     INDF            equ	0	;# 
   243     0001                     TMR0            equ	1	;# 
   244     0002                     PCL             equ	2	;# 
   245     0003                     STATUS          equ	3	;# 
   246     0004                     FSR             equ	4	;# 
   247     0005                     PORTA           equ	5	;# 
   248     0006                     PORTB           equ	6	;# 
   249     0007                     PORTC           equ	7	;# 
   250     0008                     PORTD           equ	8	;# 
   251     0009                     PORTE           equ	9	;# 
   252     000A                     PCLATH          equ	10	;# 
   253     000B                     INTCON          equ	11	;# 
   254     000C                     PIR1            equ	12	;# 
   255     000D                     PIR2            equ	13	;# 
   256     000E                     TMR1            equ	14	;# 
   257     000E                     TMR1L           equ	14	;# 
   258     000F                     TMR1H           equ	15	;# 
   259     0010                     T1CON           equ	16	;# 
   260     0011                     TMR2            equ	17	;# 
   261     0012                     T2CON           equ	18	;# 
   262     0013                     SSPBUF          equ	19	;# 
   263     0014                     SSPCON          equ	20	;# 
   264     0015                     CCPR1           equ	21	;# 
   265     0015                     CCPR1L          equ	21	;# 
   266     0016                     CCPR1H          equ	22	;# 
   267     0017                     CCP1CON         equ	23	;# 
   268     0018                     RCSTA           equ	24	;# 
   269     0019                     TXREG           equ	25	;# 
   270     001A                     RCREG           equ	26	;# 
   271     001B                     CCPR2           equ	27	;# 
   272     001B                     CCPR2L          equ	27	;# 
   273     001C                     CCPR2H          equ	28	;# 
   274     001D                     CCP2CON         equ	29	;# 
   275     001E                     ADRESH          equ	30	;# 
   276     001F                     ADCON0          equ	31	;# 
   277     0081                     OPTION_REG      equ	129	;# 
   278     0085                     TRISA           equ	133	;# 
   279     0086                     TRISB           equ	134	;# 
   280     0087                     TRISC           equ	135	;# 
   281     0088                     TRISD           equ	136	;# 
   282     0089                     TRISE           equ	137	;# 
   283     008C                     PIE1            equ	140	;# 
   284     008D                     PIE2            equ	141	;# 
   285     008E                     PCON            equ	142	;# 
   286     008F                     OSCCON          equ	143	;# 
   287     0090                     OSCTUNE         equ	144	;# 
   288     0091                     SSPCON2         equ	145	;# 
   289     0092                     PR2             equ	146	;# 
   290     0093                     SSPADD          equ	147	;# 
   291     0093                     SSPMSK          equ	147	;# 
   292     0093                     MSK             equ	147	;# 
   293     0094                     SSPSTAT         equ	148	;# 
   294     0095                     WPUB            equ	149	;# 
   295     0096                     IOCB            equ	150	;# 
   296     0097                     VRCON           equ	151	;# 
   297     0098                     TXSTA           equ	152	;# 
   298     0099                     SPBRG           equ	153	;# 
   299     009A                     SPBRGH          equ	154	;# 
   300     009B                     PWM1CON         equ	155	;# 
   301     009C                     ECCPAS          equ	156	;# 
   302     009D                     PSTRCON         equ	157	;# 
   303     009E                     ADRESL          equ	158	;# 
   304     009F                     ADCON1          equ	159	;# 
   305     0105                     WDTCON          equ	261	;# 
   306     0107                     CM1CON0         equ	263	;# 
   307     0108                     CM2CON0         equ	264	;# 
   308     0109                     CM2CON1         equ	265	;# 
   309     010C                     EEDATA          equ	268	;# 
   310     010C                     EEDAT           equ	268	;# 
   311     010D                     EEADR           equ	269	;# 
   312     010E                     EEDATH          equ	270	;# 
   313     010F                     EEADRH          equ	271	;# 
   314     0185                     SRCON           equ	389	;# 
   315     0187                     BAUDCTL         equ	391	;# 
   316     0188                     ANSEL           equ	392	;# 
   317     0189                     ANSELH          equ	393	;# 
   318     018C                     EECON1          equ	396	;# 
   319     018D                     EECON2          equ	397	;# 
   320                           
   321                           	psect	idataBANK1
   322     0EBB                     __pidataBANK1:
   323                           
   324                           ;initializer for _lcd
   325     0EBB  3407               	retlw	7
   326     0EBC  3400               	retlw	0
   327     0EBD  341A               	retlw	26
   328     0EBE  342C               	retlw	44
   329     0EBF  343E               	retlw	62
   330     0006                     _PORTB          set	6
   331     0005                     _PORTA          set	5
   332     001E                     _ADRESH         set	30
   333     001F                     _ADCON0         set	31
   334     000E                     _TMR1L          set	14
   335     000F                     _TMR1H          set	15
   336     0010                     _T1CON          set	16
   337     0007                     _PORTC          set	7
   338     0060                     _TMR1IF         set	96
   339     00F9                     _GO_nDONE       set	249
   340     005F                     _GIE            set	95
   341     005E                     _PEIE           set	94
   342     0087                     _TRISC          set	135
   343     0086                     _TRISB          set	134
   344     0085                     _TRISA          set	133
   345     009E                     _ADRESL         set	158
   346     009F                     _ADCON1         set	159
   347     0460                     _TMR1IE         set	1120
   348     0189                     _ANSELH         set	393
   349     0188                     _ANSEL          set	392
   350                           
   351                           	psect	strings
   352     0800                     __pstrings:
   353     0800                     stringtab:
   354     0800                     __stringtab:
   355                           
   356                           ;	String table - string pointers are 1 byte each
   357     0800  1BFF               	btfsc	btemp+1,7
   358     0801  280A               	ljmp	stringcode
   359     0802  1383               	bcf	3,7
   360     0803  187F               	btfsc	btemp+1,0
   361     0804  1783               	bsf	3,7
   362     0805  0800               	movf	0,w
   363     0806  0A84               	incf	4,f
   364     0807  1903               	skipnz
   365     0808  0AFF               	incf	btemp+1,f
   366     0809  0008               	return
   367     080A                     stringcode:
   368     080A                     stringdir:
   369     080A  3008               	movlw	high stringdir
   370     080B  008A               	movwf	10
   371     080C  0804               	movf	4,w
   372     080D  0A84               	incf	4,f
   373     080E  0782               	addwf	2,f
   374     080F                     __stringbase:
   375     080F  3400               	retlw	0
   376     0810                     __end_of__stringtab:
   377     0810                     STR_2:
   378     0810  3456               	retlw	86	;'V'
   379     0811  346F               	retlw	111	;'o'
   380     0812  346C               	retlw	108	;'l'
   381     0813  3474               	retlw	116	;'t'
   382     0814  3461               	retlw	97	;'a'
   383     0815  346A               	retlw	106	;'j'
   384     0816  3465               	retlw	101	;'e'
   385     0817  3420               	retlw	32	;' '
   386     0818  3431               	retlw	49	;'1'
   387     0819  343A               	retlw	58	;':'
   388     081A  3420               	retlw	32	;' '
   389     081B  3400               	retlw	0
   390     081C                     STR_4:
   391     081C  3425               	retlw	37	;'%'
   392     081D  3430               	retlw	48	;'0'
   393     081E  3432               	retlw	50	;'2'
   394     081F  3475               	retlw	117	;'u'
   395     0820  343A               	retlw	58	;':'
   396     0821  3425               	retlw	37	;'%'
   397     0822  3430               	retlw	48	;'0'
   398     0823  3432               	retlw	50	;'2'
   399     0824  3475               	retlw	117	;'u'
   400     0825  3400               	retlw	0
   401     0826                     STR_1:
   402     0826  3430               	retlw	48	;'0'
   403     0827  3430               	retlw	48	;'0'
   404     0828  343A               	retlw	58	;':'
   405     0829  3430               	retlw	48	;'0'
   406     082A  3430               	retlw	48	;'0'
   407     082B  3400               	retlw	0
   408     082C                     STR_3:
   409     082C  3425               	retlw	37	;'%'
   410     082D  3475               	retlw	117	;'u'
   411     082E  342E               	retlw	46	;'.'
   412     082F  3425               	retlw	37	;'%'
   413     0830  3475               	retlw	117	;'u'
   414     0831  3400               	retlw	0
   415                           
   416                           	psect	cinit
   417     000F                     start_initialization:	
   418                           ; #config settings
   419                           
   420     000F                     __initialization:
   421                           
   422                           ; Initialize objects allocated to BANK1
   423     000F  1683               	bsf	3,5	;RP0=1, select bank1
   424     0010  1303               	bcf	3,6	;RP1=0, select bank1
   425     0011  120A  158A  26BB  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   426     0016  00DE               	movwf	__pdataBANK1& (0+127)
   427     0017  120A  158A  26BC  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   428     001C  00DF               	movwf	(__pdataBANK1+1)& (0+127)
   429     001D  120A  158A  26BD  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   430     0022  00E0               	movwf	(__pdataBANK1+2)& (0+127)
   431     0023  120A  158A  26BE  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   432     0028  00E1               	movwf	(__pdataBANK1+3)& (0+127)
   433     0029  120A  158A  26BF  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
   434     002E  00E2               	movwf	(__pdataBANK1+4)& (0+127)
   435                           
   436                           ; Clear objects allocated to BANK1
   437     002F  1383               	bcf	3,7	;select IRP bank0
   438     0030  30A0               	movlw	low __pbssBANK1
   439     0031  0084               	movwf	4
   440     0032  30C8               	movlw	low (__pbssBANK1+40)
   441     0033  120A  158A  26C0  120A  118A  	fcall	clear_ram0
   442                           
   443                           ; Clear objects allocated to BANK0
   444     0038  1283               	bcf	3,5	;RP0=0, select bank0
   445     0039  1303               	bcf	3,6	;RP1=0, select bank0
   446     003A  01E2               	clrf	__pbssBANK0& (0+127)
   447     003B  01E3               	clrf	(__pbssBANK0+1)& (0+127)
   448     003C  01E4               	clrf	(__pbssBANK0+2)& (0+127)
   449     003D  01E5               	clrf	(__pbssBANK0+3)& (0+127)
   450     003E  01E6               	clrf	(__pbssBANK0+4)& (0+127)
   451                           
   452                           ; Clear objects allocated to COMMON
   453     003F  01FA               	clrf	__pbssCOMMON& (0+127)
   454     0040  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   455     0041                     end_of_initialization:	
   456                           ;End of C runtime variable initialization code
   457                           
   458     0041                     __end_of__initialization:
   459     0041  0183               	clrf	3
   460     0042  120A  118A  2845   	ljmp	_main	;jump to C main() function
   461                           
   462                           	psect	bssCOMMON
   463     007A                     __pbssCOMMON:
   464     007A                     _timer:
   465     007A                     	ds	2
   466                           
   467                           	psect	bssBANK0
   468     0062                     __pbssBANK0:
   469     0062                     _width:
   470     0062                     	ds	2
   471     0064                     _prec:
   472     0064                     	ds	2
   473     0066                     _flags:
   474     0066                     	ds	1
   475                           
   476                           	psect	bssBANK1
   477     00A0                     __pbssBANK1:
   478     00A0                     _count:
   479     00A0                     	ds	2
   480     00A2                     _dbuf:
   481     00A2                     	ds	32
   482     00C2                     _exec:
   483     00C2                     	ds	6
   484                           
   485                           	psect	dataBANK1
   486     00DE                     __pdataBANK1:
   487     00DE                     _lcd:
   488     00DE                     	ds	5
   489                           
   490                           	psect	clrtext
   491     0EC0                     clear_ram0:	
   492                           ;	Called with FSR containing the base address, and
   493                           ;	W with the last address+1
   494                           
   495     0EC0  0064               	clrwdt	;clear the watchdog before getting into this loop
   496     0EC1                     clrloop0:
   497     0EC1  0180               	clrf	0	;clear RAM location pointed to by FSR
   498     0EC2  0A84               	incf	4,f	;increment pointer
   499     0EC3  0604               	xorwf	4,w	;XOR with final address
   500     0EC4  1903               	btfsc	3,2	;have we reached the end yet?
   501     0EC5  3400               	retlw	0	;all done for this memory range, return
   502     0EC6  0604               	xorwf	4,w	;XOR again to restore value
   503     0EC7  2EC1               	goto	clrloop0	;do the next byte
   504                           
   505                           	psect	cstackBANK1
   506     00C8                     __pcstackBANK1:
   507     00C8                     main@buffer1:
   508                           
   509                           ; 10 bytes @ 0x0
   510     00C8                     	ds	10
   511     00D2                     main@adc_result1:
   512                           
   513                           ; 2 bytes @ 0xA
   514     00D2                     	ds	2
   515     00D4                     main@ent1:
   516                           
   517                           ; 2 bytes @ 0xC
   518     00D4                     	ds	2
   519     00D6                     main@dec1:
   520                           
   521                           ; 2 bytes @ 0xE
   522     00D6                     	ds	2
   523     00D8                     _main$918:
   524                           
   525                           ; 2 bytes @ 0x10
   526     00D8                     	ds	2
   527     00DA                     _main$919:
   528                           
   529                           ; 2 bytes @ 0x12
   530     00DA                     	ds	2
   531     00DC                     main@volt1:
   532                           
   533                           ; 2 bytes @ 0x14
   534     00DC                     	ds	2
   535                           
   536                           	psect	cstackCOMMON
   537     0070                     __pcstackCOMMON:
   538     0070                     ?_LCD_Write:
   539     0070                     ?_putch:	
   540                           ; 1 bytes @ 0x0
   541                           
   542     0070                     ?_TMR1_init:	
   543                           ; 1 bytes @ 0x0
   544                           
   545     0070                     ?_ADC_init:	
   546                           ; 1 bytes @ 0x0
   547                           
   548     0070                     ?_ICR:	
   549                           ; 1 bytes @ 0x0
   550                           
   551     0070                     ?_main:	
   552                           ; 1 bytes @ 0x0
   553                           
   554     0070                     ?_LCD_Out:	
   555                           ; 1 bytes @ 0x0
   556                           
   557     0070                     ?_LCD_putc:	
   558                           ; 1 bytes @ 0x0
   559                           
   560     0070                     putch@c:	
   561                           ; 1 bytes @ 0x0
   562                           
   563     0070                     ??_ICR:	
   564                           ; 1 bytes @ 0x0
   565                           
   566                           
   567                           ; 1 bytes @ 0x0
   568     0070                     	ds	2
   569     0072                     ?_fputc:
   570     0072                     ?_ADC_read:	
   571                           ; 2 bytes @ 0x2
   572                           
   573     0072                     ?___wmul:	
   574                           ; 2 bytes @ 0x2
   575                           
   576     0072                     ?___lwdiv:	
   577                           ; 2 bytes @ 0x2
   578                           
   579     0072                     ?___lwmod:	
   580                           ; 2 bytes @ 0x2
   581                           
   582     0072                     ?___lmul:	
   583                           ; 2 bytes @ 0x2
   584                           
   585     0072                     ___wmul@multiplier:	
   586                           ; 4 bytes @ 0x2
   587                           
   588     0072                     ___lwdiv@divisor:	
   589                           ; 2 bytes @ 0x2
   590                           
   591     0072                     ___lwmod@divisor:	
   592                           ; 2 bytes @ 0x2
   593                           
   594     0072                     fputc@c:	
   595                           ; 2 bytes @ 0x2
   596                           
   597     0072                     ___lmul@multiplier:	
   598                           ; 2 bytes @ 0x2
   599                           
   600     0072                     ??_putch:	
   601                           ; 4 bytes @ 0x2
   602                           
   603     0072                     ??_TMR1_init:	
   604                           ; 1 bytes @ 0x2
   605                           
   606     0072                     ??_ADC_init:	
   607                           ; 1 bytes @ 0x2
   608                           
   609     0072                     ??_LCD_Out:	
   610                           ; 1 bytes @ 0x2
   611                           
   612                           
   613                           ; 1 bytes @ 0x2
   614     0072                     	ds	2
   615     0074                     LCD_Out@c:
   616     0074                     ___wmul@multiplicand:	
   617                           ; 1 bytes @ 0x4
   618                           
   619     0074                     ___lwdiv@dividend:	
   620                           ; 2 bytes @ 0x4
   621                           
   622     0074                     ___lwmod@dividend:	
   623                           ; 2 bytes @ 0x4
   624                           
   625     0074                     fputc@fp:	
   626                           ; 2 bytes @ 0x4
   627                           
   628     0074                     ??_ADC_read:	
   629                           ; 2 bytes @ 0x4
   630                           
   631                           
   632                           ; 1 bytes @ 0x4
   633     0074                     	ds	1
   634     0075                     ??_LCD_Write:
   635     0075                     ??_LCD_putc:	
   636                           ; 1 bytes @ 0x5
   637                           
   638                           
   639                           ; 1 bytes @ 0x5
   640     0075                     	ds	1
   641     0076                     ?_fputs:
   642     0076                     ADC_read@channel:	
   643                           ; 2 bytes @ 0x6
   644                           
   645     0076                     ___lwmod@counter:	
   646                           ; 1 bytes @ 0x6
   647                           
   648     0076                     fputs@s:	
   649                           ; 1 bytes @ 0x6
   650                           
   651     0076                     ___wmul@product:	
   652                           ; 1 bytes @ 0x6
   653                           
   654     0076                     ___lwdiv@quotient:	
   655                           ; 2 bytes @ 0x6
   656                           
   657     0076                     ___lmul@multiplicand:	
   658                           ; 2 bytes @ 0x6
   659                           
   660     0076                     ??___wmul:	
   661                           ; 4 bytes @ 0x6
   662                           
   663     0076                     ??___lwdiv:	
   664                           ; 1 bytes @ 0x6
   665                           
   666     0076                     ??___lwmod:	
   667                           ; 1 bytes @ 0x6
   668                           
   669                           
   670                           ; 1 bytes @ 0x6
   671     0076                     	ds	1
   672     0077                     LCD_Write@c:
   673     0077                     LCD_putc@c:	
   674                           ; 1 bytes @ 0x7
   675                           
   676     0077                     fputs@fp:	
   677                           ; 1 bytes @ 0x7
   678                           
   679                           
   680                           ; 2 bytes @ 0x7
   681     0077                     	ds	1
   682     0078                     ?_LCD_putrs:
   683     0078                     ?_LCD_puts:	
   684                           ; 1 bytes @ 0x8
   685                           
   686     0078                     ?_read_prec_or_width:	
   687                           ; 1 bytes @ 0x8
   688                           
   689     0078                     LCD_puts@a:	
   690                           ; 2 bytes @ 0x8
   691                           
   692     0078                     ___lwdiv@counter:	
   693                           ; 1 bytes @ 0x8
   694                           
   695     0078                     read_prec_or_width@fmt:	
   696                           ; 1 bytes @ 0x8
   697                           
   698     0078                     LCD_putrs@a:	
   699                           ; 1 bytes @ 0x8
   700                           
   701     0078                     ??_LCD_Init:	
   702                           ; 2 bytes @ 0x8
   703                           
   704                           
   705                           ; 1 bytes @ 0x8
   706     0078                     	ds	1
   707     0079                     read_prec_or_width@ap:
   708     0079                     ??_LCD_puts:	
   709                           ; 1 bytes @ 0x9
   710                           
   711     0079                     ??_pad:	
   712                           ; 1 bytes @ 0x9
   713                           
   714                           
   715                           ; 1 bytes @ 0x9
   716     0079                     	ds	1
   717     007A                     ??_vfprintf:
   718     007A                     ??_main:	
   719                           ; 1 bytes @ 0xA
   720                           
   721     007A                     ??_utoa:	
   722                           ; 1 bytes @ 0xA
   723                           
   724     007A                     ??_read_prec_or_width:	
   725                           ; 1 bytes @ 0xA
   726                           
   727                           
   728                           	psect	cstackBANK0
   729     0020                     __pcstackBANK0:	
   730                           ; 1 bytes @ 0xA
   731                           
   732     0020                     ?_LCD_Init:
   733     0020                     read_prec_or_width@c:	
   734                           ; 1 bytes @ 0x0
   735                           
   736     0020                     LCD_puts@i:	
   737                           ; 1 bytes @ 0x0
   738                           
   739     0020                     LCD_Init@display:	
   740                           ; 2 bytes @ 0x0
   741                           
   742     0020                     ??_LCD_putrs:	
   743                           ; 5 bytes @ 0x0
   744                           
   745     0020                     ??_fputc:	
   746                           ; 1 bytes @ 0x0
   747                           
   748     0020                     ??___lmul:	
   749                           ; 1 bytes @ 0x0
   750                           
   751                           
   752                           ; 1 bytes @ 0x0
   753     0020                     	ds	1
   754     0021                     read_prec_or_width@n:
   755     0021                     ___lmul@product:	
   756                           ; 2 bytes @ 0x1
   757                           
   758                           
   759                           ; 4 bytes @ 0x1
   760     0021                     	ds	2
   761     0023                     LCD_putrs@i:
   762                           
   763                           ; 2 bytes @ 0x3
   764     0023                     	ds	2
   765     0025                     ?___aldiv:
   766     0025                     LCD_Init@cmd:	
   767                           ; 4 bytes @ 0x5
   768                           
   769     0025                     ___aldiv@divisor:	
   770                           ; 1 bytes @ 0x5
   771                           
   772                           
   773                           ; 4 bytes @ 0x5
   774     0025                     	ds	4
   775     0029                     ___aldiv@dividend:
   776     0029                     ??_fputs:	
   777                           ; 4 bytes @ 0x9
   778                           
   779                           
   780                           ; 1 bytes @ 0x9
   781     0029                     	ds	2
   782     002B                     fputs@c:
   783                           
   784                           ; 1 bytes @ 0xB
   785     002B                     	ds	1
   786     002C                     fputs@i:
   787                           
   788                           ; 2 bytes @ 0xC
   789     002C                     	ds	1
   790     002D                     ??___aldiv:
   791                           
   792                           ; 1 bytes @ 0xD
   793     002D                     	ds	1
   794     002E                     ?_pad:
   795     002E                     ___aldiv@counter:	
   796                           ; 1 bytes @ 0xE
   797                           
   798     002E                     pad@fp:	
   799                           ; 1 bytes @ 0xE
   800                           
   801                           
   802                           ; 2 bytes @ 0xE
   803     002E                     	ds	1
   804     002F                     ___aldiv@sign:
   805                           
   806                           ; 1 bytes @ 0xF
   807     002F                     	ds	1
   808     0030                     pad@buf:
   809     0030                     ___aldiv@quotient:	
   810                           ; 1 bytes @ 0x10
   811                           
   812                           
   813                           ; 4 bytes @ 0x10
   814     0030                     	ds	1
   815     0031                     pad@p:
   816                           
   817                           ; 2 bytes @ 0x11
   818     0031                     	ds	2
   819     0033                     pad@i:
   820                           
   821                           ; 2 bytes @ 0x13
   822     0033                     	ds	2
   823     0035                     ?_utoa:
   824     0035                     utoa@fp:	
   825                           ; 1 bytes @ 0x15
   826                           
   827                           
   828                           ; 2 bytes @ 0x15
   829     0035                     	ds	2
   830     0037                     utoa@d:
   831                           
   832                           ; 2 bytes @ 0x17
   833     0037                     	ds	2
   834     0039                     utoa@p:
   835                           
   836                           ; 1 bytes @ 0x19
   837     0039                     	ds	1
   838     003A                     utoa@w:
   839                           
   840                           ; 2 bytes @ 0x1A
   841     003A                     	ds	2
   842     003C                     utoa@i:
   843                           
   844                           ; 2 bytes @ 0x1C
   845     003C                     	ds	2
   846     003E                     ?_vfpfcnvrt:
   847     003E                     vfpfcnvrt@fp:	
   848                           ; 1 bytes @ 0x1E
   849                           
   850                           
   851                           ; 2 bytes @ 0x1E
   852     003E                     	ds	2
   853     0040                     vfpfcnvrt@fmt:
   854                           
   855                           ; 1 bytes @ 0x20
   856     0040                     	ds	1
   857     0041                     vfpfcnvrt@ap:
   858                           
   859                           ; 1 bytes @ 0x21
   860     0041                     	ds	1
   861     0042                     ??_vfpfcnvrt:
   862                           
   863                           ; 1 bytes @ 0x22
   864     0042                     	ds	2
   865     0044                     vfpfcnvrt@convarg:
   866                           
   867                           ; 4 bytes @ 0x24
   868     0044                     	ds	4
   869     0048                     vfpfcnvrt@done:
   870                           
   871                           ; 1 bytes @ 0x28
   872     0048                     	ds	1
   873     0049                     vfpfcnvrt@cp:
   874                           
   875                           ; 1 bytes @ 0x29
   876     0049                     	ds	1
   877     004A                     ?_vfprintf:
   878     004A                     vfprintf@fp:	
   879                           ; 2 bytes @ 0x2A
   880                           
   881                           
   882                           ; 2 bytes @ 0x2A
   883     004A                     	ds	2
   884     004C                     vfprintf@fmt:
   885                           
   886                           ; 1 bytes @ 0x2C
   887     004C                     	ds	1
   888     004D                     vfprintf@ap:
   889                           
   890                           ; 1 bytes @ 0x2D
   891     004D                     	ds	1
   892     004E                     vfprintf@cfmt:
   893                           
   894                           ; 1 bytes @ 0x2E
   895     004E                     	ds	1
   896     004F                     ?_sprintf:
   897     004F                     sprintf@s:	
   898                           ; 2 bytes @ 0x2F
   899                           
   900                           
   901                           ; 1 bytes @ 0x2F
   902     004F                     	ds	1
   903     0050                     sprintf@fmt:
   904                           
   905                           ; 1 bytes @ 0x30
   906     0050                     	ds	5
   907     0055                     ??_sprintf:
   908                           
   909                           ; 1 bytes @ 0x35
   910     0055                     	ds	1
   911     0056                     sprintf@ap:
   912                           
   913                           ; 1 bytes @ 0x36
   914     0056                     	ds	1
   915     0057                     sprintf@f:
   916                           
   917                           ; 11 bytes @ 0x37
   918     0057                     	ds	11
   919                           
   920                           	psect	maintext
   921     0045                     __pmaintext:	
   922 ;;
   923 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   924 ;;
   925 ;; *************** function _main *****************
   926 ;; Defined at:
   927 ;;		line 74 in file "main.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  volt1           2   20[BANK1 ] unsigned int 
   932 ;;  dec1            2   14[BANK1 ] unsigned int 
   933 ;;  ent1            2   12[BANK1 ] unsigned int 
   934 ;;  adc_result1     2   10[BANK1 ] unsigned int 
   935 ;;  buffer1        10    0[BANK1 ] unsigned char [10]
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : B00/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   945 ;;      Params:         0       0       0       0       0
   946 ;;      Locals:         0       0      22       0       0
   947 ;;      Temps:          0       0       0       0       0
   948 ;;      Totals:         0       0      22       0       0
   949 ;;Total ram usage:       22 bytes
   950 ;; Hardware stack levels required when called: 9
   951 ;; This function calls:
   952 ;;		_ADC_init
   953 ;;		_ADC_read
   954 ;;		_LCD_Init
   955 ;;		_LCD_Write
   956 ;;		_LCD_putrs
   957 ;;		_LCD_puts
   958 ;;		_TMR1_init
   959 ;;		___aldiv
   960 ;;		___lmul
   961 ;;		___lwdiv
   962 ;;		___lwmod
   963 ;;		_sprintf
   964 ;; This function is called by:
   965 ;;		Startup code after reset
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969     0045                     _main:	
   970                           ;psect for function _main
   971                           
   972     0045                     l2133:	
   973                           ;incstack = 0
   974 ;; hardware stack exceeded
   975                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   976                           
   977                           
   978                           ;main.c: 76:         unsigned int volt1 = (adc_result1 * 50000) / 1023;
   979     0045  120A  158A  26D6  120A  118A  	fcall	_TMR1_init
   980     004A                     l2135:
   981                           
   982                           ;main.c: 77:         unsigned int ent1 = volt1 / 10000;
   983     004A  3020               	movlw	LCD_Init@display& (0+255)
   984     004B  0084               	movwf	4
   985     004C  1683               	bsf	3,5	;RP0=1, select bank1
   986     004D  1303               	bcf	3,6	;RP1=0, select bank1
   987     004E  085E               	movf	_lcd^(0+128),w
   988     004F  1383               	bcf	3,7	;select IRP bank0
   989     0050  0080               	movwf	0
   990     0051  0A84               	incf	4,f
   991     0052  085F               	movf	(_lcd^(0+128)+1),w
   992     0053  0080               	movwf	0
   993     0054  0A84               	incf	4,f
   994     0055  0860               	movf	(_lcd^(0+128)+2),w
   995     0056  0080               	movwf	0
   996     0057  0A84               	incf	4,f
   997     0058  0861               	movf	(_lcd^(0+128)+3),w
   998     0059  0080               	movwf	0
   999     005A  0A84               	incf	4,f
  1000     005B  0862               	movf	(_lcd^(0+128)+4),w
  1001     005C  0080               	movwf	0
  1002     005D  120A  118A  230F  120A  118A  	fcall	_LCD_Init
  1003     0062                     l2137:
  1004                           
  1005                           ;main.c: 78:         unsigned int dec1 = volt1 % 10000;;main.c: 79:         sprintf(buff
      +                          er1, "%u.%u",ent1,dec1);
  1006     0062  120A  158A  26C8  120A  118A  	fcall	_ADC_init
  1007     0067                     l74:	
  1008                           ;main.c: 81: 
  1009                           
  1010     0067  3000               	movlw	0
  1011     0068  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1012     006D  3001               	movlw	1
  1013     006E  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1014     0073                     l2141:
  1015     0073  300C               	movlw	12
  1016     0074  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1017     0079  3000               	movlw	0
  1018     007A  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1019     007F                     l2147:
  1020                           
  1021                           ;main.c: 85:     }
  1022     007F  3017               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1023     0080  00F8               	movwf	LCD_putrs@a
  1024     0081  3080               	movlw	128
  1025     0082  00F9               	movwf	LCD_putrs@a+1
  1026     0083  120A  118A  274B  120A  118A  	fcall	_LCD_putrs
  1027     0088                     l2149:
  1028     0088  3008               	movlw	8
  1029     0089  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1030     008E                     l2151:
  1031     008E  3000               	movlw	0
  1032     008F  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1033     0094                     l2159:
  1034     0094  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1035     0095  00F8               	movwf	LCD_putrs@a
  1036     0096  3080               	movlw	128
  1037     0097  00F9               	movwf	LCD_putrs@a+1
  1038     0098  120A  118A  274B  120A  118A  	fcall	_LCD_putrs
  1039     009D                     l2161:
  1040     009D  3008               	movlw	8
  1041     009E  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1042     00A3                     l2163:
  1043     00A3  300B               	movlw	11
  1044     00A4  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1045     00A9                     l2171:
  1046     00A9  3000               	movlw	0
  1047     00AA  120A  158A  2773  120A  118A  	fcall	_ADC_read
  1048     00AF  0873               	movf	?_ADC_read+1,w
  1049     00B0  1683               	bsf	3,5	;RP0=1, select bank1
  1050     00B1  1303               	bcf	3,6	;RP1=0, select bank1
  1051     00B2  00D3               	movwf	(main@adc_result1+1)^(0+128)
  1052     00B3  0872               	movf	?_ADC_read,w
  1053     00B4  00D2               	movwf	main@adc_result1^(0+128)
  1054     00B5                     l2173:
  1055     00B5  3000               	movlw	0
  1056     00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1057     00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1058     00B8  00A8               	movwf	___aldiv@divisor+3
  1059     00B9  3000               	movlw	0
  1060     00BA  00A7               	movwf	___aldiv@divisor+2
  1061     00BB  3003               	movlw	3
  1062     00BC  00A6               	movwf	___aldiv@divisor+1
  1063     00BD  30FF               	movlw	255
  1064     00BE  00A5               	movwf	___aldiv@divisor
  1065     00BF  1683               	bsf	3,5	;RP0=1, select bank1
  1066     00C0  1303               	bcf	3,6	;RP1=0, select bank1
  1067     00C1  0852               	movf	main@adc_result1^(0+128),w
  1068     00C2  00F2               	movwf	___lmul@multiplier
  1069     00C3  0853               	movf	(main@adc_result1+1)^(0+128),w
  1070     00C4  00F3               	movwf	___lmul@multiplier+1
  1071     00C5  01F4               	clrf	___lmul@multiplier+2
  1072     00C6  01F5               	clrf	___lmul@multiplier+3
  1073     00C7  3000               	movlw	0
  1074     00C8  00F9               	movwf	___lmul@multiplicand+3
  1075     00C9  3000               	movlw	0
  1076     00CA  00F8               	movwf	___lmul@multiplicand+2
  1077     00CB  30C3               	movlw	195
  1078     00CC  00F7               	movwf	___lmul@multiplicand+1
  1079     00CD  3050               	movlw	80
  1080     00CE  00F6               	movwf	___lmul@multiplicand
  1081     00CF  120A  118A  2703  120A  118A  	fcall	___lmul
  1082     00D4  0875               	movf	?___lmul+3,w
  1083     00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1084     00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1085     00D7  00AC               	movwf	___aldiv@dividend+3
  1086     00D8  0874               	movf	?___lmul+2,w
  1087     00D9  00AB               	movwf	___aldiv@dividend+2
  1088     00DA  0873               	movf	?___lmul+1,w
  1089     00DB  00AA               	movwf	___aldiv@dividend+1
  1090     00DC  0872               	movf	?___lmul,w
  1091     00DD  00A9               	movwf	___aldiv@dividend
  1092     00DE  120A  118A  245B  120A  118A  	fcall	___aldiv
  1093     00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1094     00E4  1303               	bcf	3,6	;RP1=0, select bank0
  1095     00E5  0826               	movf	?___aldiv+1,w
  1096     00E6  1683               	bsf	3,5	;RP0=1, select bank1
  1097     00E7  1303               	bcf	3,6	;RP1=0, select bank1
  1098     00E8  00DD               	movwf	(main@volt1+1)^(0+128)
  1099     00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1100     00EA  1303               	bcf	3,6	;RP1=0, select bank0
  1101     00EB  0825               	movf	?___aldiv,w
  1102     00EC  1683               	bsf	3,5	;RP0=1, select bank1
  1103     00ED  1303               	bcf	3,6	;RP1=0, select bank1
  1104     00EE  00DC               	movwf	main@volt1^(0+128)
  1105     00EF                     l2175:
  1106     00EF  3010               	movlw	16
  1107     00F0  00F2               	movwf	___lwdiv@divisor
  1108     00F1  3027               	movlw	39
  1109     00F2  00F3               	movwf	___lwdiv@divisor+1
  1110     00F3  085D               	movf	(main@volt1+1)^(0+128),w
  1111     00F4  00F5               	movwf	___lwdiv@dividend+1
  1112     00F5  085C               	movf	main@volt1^(0+128),w
  1113     00F6  00F4               	movwf	___lwdiv@dividend
  1114     00F7  120A  118A  2791  120A  118A  	fcall	___lwdiv
  1115     00FC  0873               	movf	?___lwdiv+1,w
  1116     00FD  1683               	bsf	3,5	;RP0=1, select bank1
  1117     00FE  1303               	bcf	3,6	;RP1=0, select bank1
  1118     00FF  00D5               	movwf	(main@ent1+1)^(0+128)
  1119     0100  0872               	movf	?___lwdiv,w
  1120     0101  00D4               	movwf	main@ent1^(0+128)
  1121     0102                     l2177:
  1122     0102  3010               	movlw	16
  1123     0103  00F2               	movwf	___lwmod@divisor
  1124     0104  3027               	movlw	39
  1125     0105  00F3               	movwf	___lwmod@divisor+1
  1126     0106  085D               	movf	(main@volt1+1)^(0+128),w
  1127     0107  00F5               	movwf	___lwmod@dividend+1
  1128     0108  085C               	movf	main@volt1^(0+128),w
  1129     0109  00F4               	movwf	___lwmod@dividend
  1130     010A  120A  158A  27C8  120A  118A  	fcall	___lwmod
  1131     010F  0873               	movf	?___lwmod+1,w
  1132     0110  1683               	bsf	3,5	;RP0=1, select bank1
  1133     0111  1303               	bcf	3,6	;RP1=0, select bank1
  1134     0112  00D7               	movwf	(main@dec1+1)^(0+128)
  1135     0113  0872               	movf	?___lwmod,w
  1136     0114  00D6               	movwf	main@dec1^(0+128)
  1137     0115                     l2179:
  1138     0115  30C8               	movlw	(low (main@buffer1| 0))& (0+255)
  1139     0116  1283               	bcf	3,5	;RP0=0, select bank0
  1140     0117  1303               	bcf	3,6	;RP1=0, select bank0
  1141     0118  00CF               	movwf	sprintf@s
  1142     0119  301D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1143     011A  00D0               	movwf	sprintf@fmt
  1144     011B  1683               	bsf	3,5	;RP0=1, select bank1
  1145     011C  1303               	bcf	3,6	;RP1=0, select bank1
  1146     011D  0855               	movf	(main@ent1+1)^(0+128),w
  1147     011E  1283               	bcf	3,5	;RP0=0, select bank0
  1148     011F  1303               	bcf	3,6	;RP1=0, select bank0
  1149     0120  00D2               	movwf	?_sprintf+3
  1150     0121  1683               	bsf	3,5	;RP0=1, select bank1
  1151     0122  1303               	bcf	3,6	;RP1=0, select bank1
  1152     0123  0854               	movf	main@ent1^(0+128),w
  1153     0124  1283               	bcf	3,5	;RP0=0, select bank0
  1154     0125  1303               	bcf	3,6	;RP1=0, select bank0
  1155     0126  00D1               	movwf	?_sprintf+2
  1156     0127  1683               	bsf	3,5	;RP0=1, select bank1
  1157     0128  1303               	bcf	3,6	;RP1=0, select bank1
  1158     0129  0857               	movf	(main@dec1+1)^(0+128),w
  1159     012A  1283               	bcf	3,5	;RP0=0, select bank0
  1160     012B  1303               	bcf	3,6	;RP1=0, select bank0
  1161     012C  00D4               	movwf	?_sprintf+5
  1162     012D  1683               	bsf	3,5	;RP0=1, select bank1
  1163     012E  1303               	bcf	3,6	;RP1=0, select bank1
  1164     012F  0856               	movf	main@dec1^(0+128),w
  1165     0130  1283               	bcf	3,5	;RP0=0, select bank0
  1166     0131  1303               	bcf	3,6	;RP1=0, select bank0
  1167     0132  00D3               	movwf	?_sprintf+4
  1168     0133  120A  158A  2707  120A  118A  	fcall	_sprintf
  1169     0138                     l2181:
  1170     0138  30C8               	movlw	(low (main@buffer1| 0))& (0+255)
  1171     0139  00F8               	movwf	LCD_putrs@a
  1172     013A  3000               	movlw	0
  1173     013B  00F9               	movwf	LCD_putrs@a+1
  1174     013C  120A  118A  274B  120A  118A  	fcall	_LCD_putrs
  1175     0141                     l2185:
  1176     0141  300C               	movlw	12
  1177     0142  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1178     0147  3000               	movlw	0
  1179     0148  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  1180     014D                     l2191:
  1181     014D  303C               	movlw	60
  1182     014E  00F2               	movwf	___lwdiv@divisor
  1183     014F  3000               	movlw	0
  1184     0150  00F3               	movwf	___lwdiv@divisor+1
  1185     0151  1683               	bsf	3,5	;RP0=1, select bank1
  1186     0152  1303               	bcf	3,6	;RP1=0, select bank1
  1187     0153  0821               	movf	(_count+1)^(0+128),w	;volatile
  1188     0154  00F5               	movwf	___lwdiv@dividend+1
  1189     0155  0820               	movf	_count^(0+128),w	;volatile
  1190     0156  00F4               	movwf	___lwdiv@dividend
  1191     0157  120A  118A  2791  120A  118A  	fcall	___lwdiv
  1192     015C  0873               	movf	?___lwdiv+1,w
  1193     015D  1683               	bsf	3,5	;RP0=1, select bank1
  1194     015E  1303               	bcf	3,6	;RP1=0, select bank1
  1195     015F  00D9               	movwf	(_main$918+1)^(0+128)
  1196     0160  0872               	movf	?___lwdiv,w
  1197     0161  00D8               	movwf	_main$918^(0+128)
  1198     0162                     l2193:
  1199     0162  303C               	movlw	60
  1200     0163  00F2               	movwf	___lwmod@divisor
  1201     0164  3000               	movlw	0
  1202     0165  00F3               	movwf	___lwmod@divisor+1
  1203     0166  0821               	movf	(_count+1)^(0+128),w	;volatile
  1204     0167  00F5               	movwf	___lwmod@dividend+1
  1205     0168  0820               	movf	_count^(0+128),w	;volatile
  1206     0169  00F4               	movwf	___lwmod@dividend
  1207     016A  120A  158A  27C8  120A  118A  	fcall	___lwmod
  1208     016F  0873               	movf	?___lwmod+1,w
  1209     0170  1683               	bsf	3,5	;RP0=1, select bank1
  1210     0171  1303               	bcf	3,6	;RP1=0, select bank1
  1211     0172  00DB               	movwf	(_main$919+1)^(0+128)
  1212     0173  0872               	movf	?___lwmod,w
  1213     0174  00DA               	movwf	_main$919^(0+128)
  1214     0175                     l2195:
  1215     0175  30C2               	movlw	(low (_exec| 0))& (0+255)
  1216     0176  1283               	bcf	3,5	;RP0=0, select bank0
  1217     0177  1303               	bcf	3,6	;RP1=0, select bank0
  1218     0178  00CF               	movwf	sprintf@s
  1219     0179  300D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1220     017A  00D0               	movwf	sprintf@fmt
  1221     017B  1683               	bsf	3,5	;RP0=1, select bank1
  1222     017C  1303               	bcf	3,6	;RP1=0, select bank1
  1223     017D  0859               	movf	(_main$918+1)^(0+128),w
  1224     017E  1283               	bcf	3,5	;RP0=0, select bank0
  1225     017F  1303               	bcf	3,6	;RP1=0, select bank0
  1226     0180  00D2               	movwf	?_sprintf+3
  1227     0181  1683               	bsf	3,5	;RP0=1, select bank1
  1228     0182  1303               	bcf	3,6	;RP1=0, select bank1
  1229     0183  0858               	movf	_main$918^(0+128),w
  1230     0184  1283               	bcf	3,5	;RP0=0, select bank0
  1231     0185  1303               	bcf	3,6	;RP1=0, select bank0
  1232     0186  00D1               	movwf	?_sprintf+2
  1233     0187  1683               	bsf	3,5	;RP0=1, select bank1
  1234     0188  1303               	bcf	3,6	;RP1=0, select bank1
  1235     0189  085B               	movf	(_main$919+1)^(0+128),w
  1236     018A  1283               	bcf	3,5	;RP0=0, select bank0
  1237     018B  1303               	bcf	3,6	;RP1=0, select bank0
  1238     018C  00D4               	movwf	?_sprintf+5
  1239     018D  1683               	bsf	3,5	;RP0=1, select bank1
  1240     018E  1303               	bcf	3,6	;RP1=0, select bank1
  1241     018F  085A               	movf	_main$919^(0+128),w
  1242     0190  1283               	bcf	3,5	;RP0=0, select bank0
  1243     0191  1303               	bcf	3,6	;RP1=0, select bank0
  1244     0192  00D3               	movwf	?_sprintf+4
  1245     0193  120A  158A  2707  120A  118A  	fcall	_sprintf
  1246     0198                     l2197:
  1247     0198  30C2               	movlw	(low (_exec| 0))& (0+255)
  1248     0199  00F8               	movwf	LCD_puts@a
  1249     019A  120A  158A  272A  120A  118A  	fcall	_LCD_puts
  1250     019F  2888               	goto	l2149
  1251     01A0  120A  118A  280C   	ljmp	start
  1252     01A3                     __end_of_main:
  1253                           
  1254                           	psect	text1
  1255     0F07                     __ptext1:	
  1256 ;; *************** function _sprintf *****************
  1257 ;; Defined at:
  1258 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;  s               1   47[BANK0 ] PTR unsigned char 
  1261 ;;		 -> exec(6), main@buffer1(10), 
  1262 ;;  fmt             1   48[BANK0 ] PTR const unsigned char 
  1263 ;;		 -> STR_4(10), STR_3(6), 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  f              11   55[BANK0 ] struct _IO_FILE
  1266 ;;  ret             2    0        int 
  1267 ;;  ap              1   54[BANK0 ] PTR void [1]
  1268 ;;		 -> ?_sprintf(2), 
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  2   47[BANK0 ] int 
  1271 ;; Registers used:
  1272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1278 ;;      Params:         0       6       0       0       0
  1279 ;;      Locals:         0      12       0       0       0
  1280 ;;      Temps:          0       1       0       0       0
  1281 ;;      Totals:         0      19       0       0       0
  1282 ;;Total ram usage:       19 bytes
  1283 ;; Hardware stack levels used: 1
  1284 ;; Hardware stack levels required when called: 8
  1285 ;; This function calls:
  1286 ;;		_vfprintf
  1287 ;; This function is called by:
  1288 ;;		_main
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292     0F07                     _sprintf:	
  1293                           ;psect for function _sprintf
  1294                           
  1295     0F07                     l2057:	
  1296                           ;incstack = 0
  1297 ;; hardware stack exceeded
  1298                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1299                           
  1300     0F07  3051               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1301     0F08  1283               	bcf	3,5	;RP0=0, select bank0
  1302     0F09  1303               	bcf	3,6	;RP1=0, select bank0
  1303     0F0A  00D6               	movwf	sprintf@ap
  1304     0F0B                     l2059:
  1305     0F0B  084F               	movf	sprintf@s,w
  1306     0F0C  00D7               	movwf	sprintf@f
  1307     0F0D  3000               	movlw	0
  1308     0F0E  00D8               	movwf	sprintf@f+1
  1309     0F0F                     l2061:
  1310     0F0F  01D9               	clrf	sprintf@f+2
  1311     0F10  01DA               	clrf	sprintf@f+3
  1312     0F11                     l2063:
  1313     0F11  01E0               	clrf	sprintf@f+9
  1314     0F12  01E1               	clrf	sprintf@f+10
  1315     0F13                     l2065:
  1316     0F13  3057               	movlw	low sprintf@f
  1317     0F14  00CA               	movwf	vfprintf@fp
  1318     0F15  3000               	movlw	high sprintf@f
  1319     0F16  00CB               	movwf	vfprintf@fp+1
  1320     0F17  0850               	movf	sprintf@fmt,w
  1321     0F18  00CC               	movwf	vfprintf@fmt
  1322     0F19  3056               	movlw	(low (sprintf@ap| 0))& (0+255)
  1323     0F1A  00CD               	movwf	vfprintf@ap
  1324     0F1B  120A  158A  26E4  120A  158A  	fcall	_vfprintf
  1325     0F20                     l2067:
  1326     0F20  1283               	bcf	3,5	;RP0=0, select bank0
  1327     0F21  1303               	bcf	3,6	;RP1=0, select bank0
  1328     0F22  0859               	movf	sprintf@f+2,w
  1329     0F23  074F               	addwf	sprintf@s,w
  1330     0F24  00D5               	movwf	??_sprintf
  1331     0F25  0855               	movf	??_sprintf,w
  1332     0F26  0084               	movwf	4
  1333     0F27  1383               	bcf	3,7	;select IRP bank0
  1334     0F28  0180               	clrf	0
  1335     0F29                     l763:
  1336     0F29  0008               	return
  1337     0F2A                     __end_of_sprintf:
  1338                           
  1339                           	psect	text2
  1340     0EE4                     __ptext2:	
  1341 ;; *************** function _vfprintf *****************
  1342 ;; Defined at:
  1343 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  fp              2   42[BANK0 ] PTR struct _IO_FILE
  1346 ;;		 -> sprintf@f(11), 
  1347 ;;  fmt             1   44[BANK0 ] PTR const unsigned char 
  1348 ;;		 -> STR_4(10), STR_3(6), 
  1349 ;;  ap              1   45[BANK0 ] PTR PTR void 
  1350 ;;		 -> sprintf@ap(1), 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;  cfmt            1   46[BANK0 ] PTR unsigned char 
  1353 ;;		 -> STR_4(10), STR_3(6), 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  2   42[BANK0 ] int 
  1356 ;; Registers used:
  1357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1363 ;;      Params:         0       4       0       0       0
  1364 ;;      Locals:         0       1       0       0       0
  1365 ;;      Temps:          0       0       0       0       0
  1366 ;;      Totals:         0       5       0       0       0
  1367 ;;Total ram usage:        5 bytes
  1368 ;; Hardware stack levels used: 1
  1369 ;; Hardware stack levels required when called: 7
  1370 ;; This function calls:
  1371 ;;		_vfpfcnvrt
  1372 ;; This function is called by:
  1373 ;;		_sprintf
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377     0EE4                     _vfprintf:	
  1378                           ;psect for function _vfprintf
  1379                           
  1380     0EE4                     l1993:	
  1381                           ;incstack = 0
  1382 ;; hardware stack exceeded
  1383                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1384                           
  1385                           
  1386                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1387     0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  1388     0EE5  1303               	bcf	3,6	;RP1=0, select bank0
  1389     0EE6  084C               	movf	vfprintf@fmt,w
  1390     0EE7  00CE               	movwf	vfprintf@cfmt
  1391                           
  1392                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1393     0EE8  2EF6               	goto	l1997
  1394     0EE9                     l1995:
  1395                           
  1396                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1397     0EE9  084A               	movf	vfprintf@fp,w
  1398     0EEA  00BE               	movwf	vfpfcnvrt@fp
  1399     0EEB  084B               	movf	vfprintf@fp+1,w
  1400     0EEC  00BF               	movwf	vfpfcnvrt@fp+1
  1401     0EED  304E               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1402     0EEE  00C0               	movwf	vfpfcnvrt@fmt
  1403     0EEF  084D               	movf	vfprintf@ap,w
  1404     0EF0  00C1               	movwf	vfpfcnvrt@ap
  1405     0EF1  120A  118A  225D  120A  158A  	fcall	_vfpfcnvrt
  1406     0EF6                     l1997:
  1407                           
  1408                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1409     0EF6  1283               	bcf	3,5	;RP0=0, select bank0
  1410     0EF7  1303               	bcf	3,6	;RP1=0, select bank0
  1411     0EF8  084E               	movf	vfprintf@cfmt,w
  1412     0EF9  0084               	movwf	4
  1413     0EFA  120A  158A  200A  120A  158A  	fcall	stringdir
  1414     0EFF  3A00               	xorlw	0
  1415     0F00  1D03               	skipz
  1416     0F01  2F03               	goto	u2101
  1417     0F02  2F04               	goto	u2100
  1418     0F03                     u2101:
  1419     0F03  2EE9               	goto	l1995
  1420     0F04                     u2100:
  1421     0F04                     l1999:
  1422                           
  1423                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1424     0F04  01CA               	clrf	?_vfprintf
  1425     0F05  01CB               	clrf	?_vfprintf+1
  1426     0F06                     l828:
  1427     0F06  0008               	return
  1428     0F07                     __end_of_vfprintf:
  1429                           
  1430                           	psect	text3
  1431     025D                     __ptext3:	
  1432 ;; *************** function _vfpfcnvrt *****************
  1433 ;; Defined at:
  1434 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  fp              2   30[BANK0 ] PTR struct _IO_FILE
  1437 ;;		 -> sprintf@f(11), 
  1438 ;;  fmt             1   32[BANK0 ] PTR PTR unsigned char 
  1439 ;;		 -> vfprintf@cfmt(1), 
  1440 ;;  ap              1   33[BANK0 ] PTR PTR void 
  1441 ;;		 -> sprintf@ap(1), 
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;  convarg         4   36[BANK0 ] struct .
  1444 ;;  cp              1   41[BANK0 ] PTR unsigned char 
  1445 ;;		 -> STR_4(10), STR_3(6), 
  1446 ;;  done            1   40[BANK0 ] _Bool 
  1447 ;;  c               1    0        unsigned char 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1457 ;;      Params:         0       4       0       0       0
  1458 ;;      Locals:         0       6       0       0       0
  1459 ;;      Temps:          0       2       0       0       0
  1460 ;;      Totals:         0      12       0       0       0
  1461 ;;Total ram usage:       12 bytes
  1462 ;; Hardware stack levels used: 1
  1463 ;; Hardware stack levels required when called: 6
  1464 ;; This function calls:
  1465 ;;		_fputc
  1466 ;;		_read_prec_or_width
  1467 ;;		_utoa
  1468 ;; This function is called by:
  1469 ;;		_vfprintf
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473     025D                     _vfpfcnvrt:	
  1474                           ;psect for function _vfpfcnvrt
  1475                           
  1476     025D                     l1915:	
  1477                           ;incstack = 0
  1478 ;; hardware stack exceeded
  1479                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1480                           
  1481                           
  1482                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1483     025D  1283               	bcf	3,5	;RP0=0, select bank0
  1484     025E  1303               	bcf	3,6	;RP1=0, select bank0
  1485     025F  0840               	movf	vfpfcnvrt@fmt,w
  1486     0260  0084               	movwf	4
  1487     0261  1383               	bcf	3,7	;select IRP bank0
  1488     0262  0800               	movf	0,w
  1489     0263  0084               	movwf	4
  1490     0264  120A  158A  200A  120A  118A  	fcall	stringdir
  1491     0269  3A25               	xorlw	37
  1492     026A  1D03               	skipz
  1493     026B  2A6D               	goto	u1971
  1494     026C  2A6E               	goto	u1970
  1495     026D                     u1971:
  1496     026D  2AF5               	goto	l1961
  1497     026E                     u1970:
  1498     026E                     l1917:
  1499                           
  1500                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1501     026E  0840               	movf	vfpfcnvrt@fmt,w
  1502     026F  0084               	movwf	4
  1503     0270  3001               	movlw	1
  1504     0271  0780               	addwf	0,f
  1505     0272                     l1919:
  1506                           
  1507                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1508     0272  01E2               	clrf	_width
  1509     0273  01E3               	clrf	_width+1
  1510     0274  3000               	movlw	0
  1511     0275  00E6               	movwf	_flags
  1512     0276                     l1921:
  1513                           
  1514                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1515     0276  30FF               	movlw	255
  1516     0277  00E4               	movwf	_prec
  1517     0278  30FF               	movlw	255
  1518     0279  00E5               	movwf	_prec+1
  1519     027A                     l1923:
  1520                           
  1521                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1522     027A  01C8               	clrf	vfpfcnvrt@done
  1523                           
  1524                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1525     027B  2A92               	goto	l1931
  1526     027C                     l811:	
  1527                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  1528                           
  1529                           
  1530                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1531     027C  14E6               	bsf	_flags,1
  1532     027D                     l1925:
  1533                           
  1534                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1535     027D  0840               	movf	vfpfcnvrt@fmt,w
  1536     027E  0084               	movwf	4
  1537     027F  3001               	movlw	1
  1538     0280  0780               	addwf	0,f
  1539                           
  1540                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1541     0281  2A92               	goto	l1931
  1542     0282                     l813:	
  1543                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  1544                           
  1545                           
  1546                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1547     0282  3001               	movlw	1
  1548     0283  00C8               	movwf	vfpfcnvrt@done
  1549                           
  1550                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1551     0284  2A92               	goto	l1931
  1552     0285                     l1929:
  1553     0285  0840               	movf	vfpfcnvrt@fmt,w
  1554     0286  0084               	movwf	4
  1555     0287  0800               	movf	0,w
  1556     0288  0084               	movwf	4
  1557     0289  120A  158A  200A  120A  118A  	fcall	stringdir
  1558                           
  1559                           ; Switch size 1, requested type "simple"
  1560                           ; Number of cases is 1, Range of values is 48 to 48
  1561                           ; switch strategies available:
  1562                           ; Name         Instructions Cycles
  1563                           ; simple_byte            4     3 (average)
  1564                           ; direct_byte           14    11 (fixed)
  1565                           ; jumptable            263     9 (fixed)
  1566                           ;	Chosen strategy is simple_byte
  1567     028E  3A30               	xorlw	48	; case 48
  1568     028F  1903               	skipnz
  1569     0290  2A7C               	goto	l811
  1570     0291  2A82               	goto	l813
  1571     0292                     l1931:
  1572                           
  1573                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1574     0292  0848               	movf	vfpfcnvrt@done,w
  1575     0293  1903               	btfsc	3,2
  1576     0294  2A96               	goto	u1981
  1577     0295  2A97               	goto	u1980
  1578     0296                     u1981:
  1579     0296  2A85               	goto	l1929
  1580     0297                     u1980:
  1581     0297                     l1933:
  1582                           
  1583                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1584     0297  0840               	movf	vfpfcnvrt@fmt,w
  1585     0298  00F8               	movwf	read_prec_or_width@fmt
  1586     0299  0841               	movf	vfpfcnvrt@ap,w
  1587     029A  00F9               	movwf	read_prec_or_width@ap
  1588     029B  120A  118A  2604  120A  118A  	fcall	_read_prec_or_width
  1589     02A0  0879               	movf	?_read_prec_or_width+1,w
  1590     02A1  1283               	bcf	3,5	;RP0=0, select bank0
  1591     02A2  1303               	bcf	3,6	;RP1=0, select bank0
  1592     02A3  00E3               	movwf	_width+1
  1593     02A4  0878               	movf	?_read_prec_or_width,w
  1594     02A5  00E2               	movwf	_width
  1595     02A6                     l1935:
  1596                           
  1597                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1598     02A6  1FE3               	btfss	_width+1,7
  1599     02A7  2AA9               	goto	u1991
  1600     02A8  2AAA               	goto	u1990
  1601     02A9                     u1991:
  1602     02A9  2AB0               	goto	l1941
  1603     02AA                     u1990:
  1604     02AA                     l1937:
  1605                           
  1606                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1607     02AA  1466               	bsf	_flags,0
  1608     02AB                     l1939:
  1609                           
  1610                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1611     02AB  09E2               	comf	_width,f
  1612     02AC  09E3               	comf	_width+1,f
  1613     02AD  0AE2               	incf	_width,f
  1614     02AE  1903               	skipnz
  1615     02AF  0AE3               	incf	_width+1,f
  1616     02B0                     l1941:
  1617                           
  1618                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1439:   if (0
  1619     02B0  0840               	movf	vfpfcnvrt@fmt,w
  1620     02B1  0084               	movwf	4
  1621     02B2  1383               	bcf	3,7	;select IRP bank0
  1622     02B3  0800               	movf	0,w
  1623     02B4  00C9               	movwf	vfpfcnvrt@cp
  1624     02B5                     l1943:
  1625     02B5  0849               	movf	vfpfcnvrt@cp,w
  1626     02B6  0084               	movwf	4
  1627     02B7  120A  158A  200A  120A  118A  	fcall	stringdir
  1628     02BC  3A75               	xorlw	117
  1629     02BD  1D03               	skipz
  1630     02BE  2AC0               	goto	u2001
  1631     02BF  2AC1               	goto	u2000
  1632     02C0                     u2001:
  1633     02C0  2AED               	goto	l1957
  1634     02C1                     u2000:
  1635     02C1                     l1945:
  1636                           
  1637                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1638     02C1  0841               	movf	vfpfcnvrt@ap,w
  1639     02C2  0084               	movwf	4
  1640     02C3  0800               	movf	0,w
  1641     02C4  00FF               	movwf	btemp+1
  1642     02C5  3002               	movlw	2
  1643     02C6  0780               	addwf	0,f
  1644     02C7  087F               	movf	btemp+1,w
  1645     02C8  0084               	movwf	4
  1646     02C9  0800               	movf	0,w
  1647     02CA  00C4               	movwf	vfpfcnvrt@convarg
  1648     02CB  0A84               	incf	4,f
  1649     02CC  0800               	movf	0,w
  1650     02CD  00C5               	movwf	vfpfcnvrt@convarg+1
  1651     02CE                     l1947:
  1652                           
  1653                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1654     02CE  0840               	movf	vfpfcnvrt@fmt,w
  1655     02CF  0084               	movwf	4
  1656     02D0  0849               	movf	vfpfcnvrt@cp,w
  1657     02D1  3E01               	addlw	1
  1658     02D2  0080               	movwf	0
  1659                           
  1660                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1661     02D3  2AE2               	goto	l1955
  1662     02D4                     l1949:
  1663                           
  1664                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1542:      return
      +                           (void) utoa(fp, convarg.uint);;	Return value of _vfpfcnvrt is never used
  1665     02D4  083E               	movf	vfpfcnvrt@fp,w
  1666     02D5  00B5               	movwf	utoa@fp
  1667     02D6  083F               	movf	vfpfcnvrt@fp+1,w
  1668     02D7  00B6               	movwf	utoa@fp+1
  1669     02D8  0845               	movf	vfpfcnvrt@convarg+1,w
  1670     02D9  00B8               	movwf	utoa@d+1
  1671     02DA  0844               	movf	vfpfcnvrt@convarg,w
  1672     02DB  00B7               	movwf	utoa@d
  1673     02DC  120A  118A  2586  120A  118A  	fcall	_utoa
  1674     02E1  2B0E               	goto	l821
  1675     02E2                     l1955:
  1676     02E2  0849               	movf	vfpfcnvrt@cp,w
  1677     02E3  0084               	movwf	4
  1678     02E4  120A  158A  200A  120A  118A  	fcall	stringdir
  1679                           
  1680                           ; Switch size 1, requested type "simple"
  1681                           ; Number of cases is 1, Range of values is 117 to 117
  1682                           ; switch strategies available:
  1683                           ; Name         Instructions Cycles
  1684                           ; simple_byte            4     3 (average)
  1685                           ; direct_byte           14    11 (fixed)
  1686                           ; jumptable            263     9 (fixed)
  1687                           ;	Chosen strategy is simple_byte
  1688     02E9  3A75               	xorlw	117	; case 117
  1689     02EA  1903               	skipnz
  1690     02EB  2AD4               	goto	l1949
  1691     02EC  2AED               	goto	l1957
  1692     02ED                     l1957:
  1693                           
  1694                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1695     02ED  1283               	bcf	3,5	;RP0=0, select bank0
  1696     02EE  1303               	bcf	3,6	;RP1=0, select bank0
  1697     02EF  0840               	movf	vfpfcnvrt@fmt,w
  1698     02F0  0084               	movwf	4
  1699     02F1  3001               	movlw	1
  1700     02F2  1383               	bcf	3,7	;select IRP bank0
  1701     02F3  0780               	addwf	0,f
  1702     02F4  2B0E               	goto	l821
  1703     02F5                     l1961:
  1704                           
  1705                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1706     02F5  0840               	movf	vfpfcnvrt@fmt,w
  1707     02F6  0084               	movwf	4
  1708     02F7  0800               	movf	0,w
  1709     02F8  0084               	movwf	4
  1710     02F9  120A  158A  200A  120A  118A  	fcall	stringdir
  1711     02FE  00C2               	movwf	??_vfpfcnvrt
  1712     02FF  01C3               	clrf	??_vfpfcnvrt+1
  1713     0300  0842               	movf	??_vfpfcnvrt,w
  1714     0301  00F2               	movwf	fputc@c
  1715     0302  0843               	movf	??_vfpfcnvrt+1,w
  1716     0303  00F3               	movwf	fputc@c+1
  1717     0304  083E               	movf	vfpfcnvrt@fp,w
  1718     0305  00F4               	movwf	fputc@fp
  1719     0306  083F               	movf	vfpfcnvrt@fp+1,w
  1720     0307  00F5               	movwf	fputc@fp+1
  1721     0308  120A  118A  23BB  120A  118A  	fcall	_fputc
  1722     030D  2AED               	goto	l1957
  1723     030E                     l821:
  1724     030E  0008               	return
  1725     030F                     __end_of_vfpfcnvrt:
  1726                           
  1727                           	psect	text4
  1728     0586                     __ptext4:	
  1729 ;; *************** function _utoa *****************
  1730 ;; Defined at:
  1731 ;;		line 1001 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  fp              2   21[BANK0 ] PTR struct _IO_FILE
  1734 ;;		 -> sprintf@f(11), 
  1735 ;;  d               2   23[BANK0 ] unsigned int 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  i               2   28[BANK0 ] int 
  1738 ;;  w               2   26[BANK0 ] int 
  1739 ;;  p               1   25[BANK0 ] _Bool 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1749 ;;      Params:         0       4       0       0       0
  1750 ;;      Locals:         0       5       0       0       0
  1751 ;;      Temps:          0       0       0       0       0
  1752 ;;      Totals:         0       9       0       0       0
  1753 ;;Total ram usage:        9 bytes
  1754 ;; Hardware stack levels used: 1
  1755 ;; Hardware stack levels required when called: 5
  1756 ;; This function calls:
  1757 ;;		___lwdiv
  1758 ;;		___lwmod
  1759 ;;		_pad
  1760 ;; This function is called by:
  1761 ;;		_vfpfcnvrt
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765     0586                     _utoa:	
  1766                           ;psect for function _utoa
  1767                           
  1768     0586                     l1861:	
  1769                           ;incstack = 0
  1770 ;; hardware stack exceeded
  1771                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1772                           
  1773                           
  1774                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1001: static void
      +                           utoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1002: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 1003:     int i, w;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprn
      +                          t.c: 1007:  _Bool p = 1;
  1775     0586  3001               	movlw	1
  1776     0587  1283               	bcf	3,5	;RP0=0, select bank0
  1777     0588  1303               	bcf	3,6	;RP1=0, select bank0
  1778     0589  00B9               	movwf	utoa@p
  1779     058A                     l1863:
  1780                           
  1781                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1019:     w = wid
      +                          th;
  1782     058A  0863               	movf	_width+1,w
  1783     058B  00BB               	movwf	utoa@w+1
  1784     058C  0862               	movf	_width,w
  1785     058D  00BA               	movwf	utoa@w
  1786                           
  1787                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1022:     i = siz
      +                          eof(dbuf) - 1;
  1788     058E  301F               	movlw	31
  1789     058F  00BC               	movwf	utoa@i
  1790     0590  3000               	movlw	0
  1791     0591  00BD               	movwf	utoa@i+1
  1792     0592                     l1865:
  1793                           
  1794                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1023:     dbuf[i]
      +                           = '\0';
  1795     0592  1683               	bsf	3,5	;RP0=1, select bank1
  1796     0593  1303               	bcf	3,6	;RP1=0, select bank1
  1797     0594  01C1               	clrf	(_dbuf^(0+128)+31)
  1798                           
  1799                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1024:     while (
      +                          i && (d != 0
  1800     0595  2DCC               	goto	l1877
  1801     0596                     l1867:
  1802                           
  1803                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1033:     )) {;C:
      +                          \Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1034:         --i;
  1804     0596  30FF               	movlw	255
  1805     0597  07BC               	addwf	utoa@i,f
  1806     0598  1803               	skipnc
  1807     0599  0ABD               	incf	utoa@i+1,f
  1808     059A  30FF               	movlw	255
  1809     059B  07BD               	addwf	utoa@i+1,f
  1810     059C                     l1869:
  1811                           
  1812                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1035:         dbu
      +                          f[i] = '0' + (d % 10);
  1813     059C  083C               	movf	utoa@i,w
  1814     059D  3EA2               	addlw	(low (_dbuf| 0))& (0+255)
  1815     059E  0084               	movwf	4
  1816     059F  300A               	movlw	10
  1817     05A0  00F2               	movwf	___lwmod@divisor
  1818     05A1  3000               	movlw	0
  1819     05A2  00F3               	movwf	___lwmod@divisor+1
  1820     05A3  0838               	movf	utoa@d+1,w
  1821     05A4  00F5               	movwf	___lwmod@dividend+1
  1822     05A5  0837               	movf	utoa@d,w
  1823     05A6  00F4               	movwf	___lwmod@dividend
  1824     05A7  120A  158A  27C8  120A  118A  	fcall	___lwmod
  1825     05AC  0872               	movf	?___lwmod,w
  1826     05AD  3E30               	addlw	48
  1827     05AE  1383               	bcf	3,7	;select IRP bank1
  1828     05AF  0080               	movwf	0
  1829     05B0                     l1871:
  1830                           
  1831                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1039:   p = 0;
  1832     05B0  1283               	bcf	3,5	;RP0=0, select bank0
  1833     05B1  1303               	bcf	3,6	;RP1=0, select bank0
  1834     05B2  01B9               	clrf	utoa@p
  1835     05B3                     l1873:
  1836                           
  1837                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1041:         --w
      +                          ;
  1838     05B3  30FF               	movlw	255
  1839     05B4  07BA               	addwf	utoa@w,f
  1840     05B5  1803               	skipnc
  1841     05B6  0ABB               	incf	utoa@w+1,f
  1842     05B7  30FF               	movlw	255
  1843     05B8  07BB               	addwf	utoa@w+1,f
  1844     05B9                     l1875:
  1845                           
  1846                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1042:         d =
      +                           d / 10;
  1847     05B9  300A               	movlw	10
  1848     05BA  00F2               	movwf	___lwdiv@divisor
  1849     05BB  3000               	movlw	0
  1850     05BC  00F3               	movwf	___lwdiv@divisor+1
  1851     05BD  0838               	movf	utoa@d+1,w
  1852     05BE  00F5               	movwf	___lwdiv@dividend+1
  1853     05BF  0837               	movf	utoa@d,w
  1854     05C0  00F4               	movwf	___lwdiv@dividend
  1855     05C1  120A  118A  2791  120A  118A  	fcall	___lwdiv
  1856     05C6  0873               	movf	?___lwdiv+1,w
  1857     05C7  1283               	bcf	3,5	;RP0=0, select bank0
  1858     05C8  1303               	bcf	3,6	;RP1=0, select bank0
  1859     05C9  00B8               	movwf	utoa@d+1
  1860     05CA  0872               	movf	?___lwdiv,w
  1861     05CB  00B7               	movwf	utoa@d
  1862     05CC                     l1877:
  1863                           
  1864                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1024:     while (
      +                          i && (d != 0
  1865     05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1866     05CD  083C               	movf	utoa@i,w
  1867     05CE  043D               	iorwf	utoa@i+1,w
  1868     05CF  1903               	btfsc	3,2
  1869     05D0  2DD2               	goto	u1801
  1870     05D1  2DD3               	goto	u1800
  1871     05D2                     u1801:
  1872     05D2  2DF1               	goto	l1887
  1873     05D3                     u1800:
  1874     05D3                     l1879:
  1875     05D3  0837               	movf	utoa@d,w
  1876     05D4  0438               	iorwf	utoa@d+1,w
  1877     05D5  1D03               	btfss	3,2
  1878     05D6  2DD8               	goto	u1811
  1879     05D7  2DD9               	goto	u1810
  1880     05D8                     u1811:
  1881     05D8  2D96               	goto	l1867
  1882     05D9                     u1810:
  1883     05D9                     l1881:
  1884     05D9  0839               	movf	utoa@p,w
  1885     05DA  1D03               	btfss	3,2
  1886     05DB  2DDD               	goto	u1821
  1887     05DC  2DDE               	goto	u1820
  1888     05DD                     u1821:
  1889     05DD  2D96               	goto	l1867
  1890     05DE                     u1820:
  1891     05DE                     l1883:
  1892     05DE  083B               	movf	utoa@w+1,w
  1893     05DF  3A80               	xorlw	128
  1894     05E0  00FF               	movwf	btemp+1
  1895     05E1  3080               	movlw	128
  1896     05E2  027F               	subwf	btemp+1,w
  1897     05E3  1D03               	skipz
  1898     05E4  2DE7               	goto	u1835
  1899     05E5  3001               	movlw	1
  1900     05E6  023A               	subwf	utoa@w,w
  1901     05E7                     u1835:
  1902     05E7  1C03               	skipc
  1903     05E8  2DEA               	goto	u1831
  1904     05E9  2DEB               	goto	u1830
  1905     05EA                     u1831:
  1906     05EA  2DF1               	goto	l1887
  1907     05EB                     u1830:
  1908     05EB                     l1885:
  1909     05EB  1283               	bcf	3,5	;RP0=0, select bank0
  1910     05EC  1303               	bcf	3,6	;RP1=0, select bank0
  1911     05ED  18E6               	btfsc	_flags,1
  1912     05EE  2DF0               	goto	u1841
  1913     05EF  2DF1               	goto	u1840
  1914     05F0                     u1841:
  1915     05F0  2D96               	goto	l1867
  1916     05F1                     u1840:
  1917     05F1                     l1887:
  1918                           
  1919                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1046:     return 
      +                          (void) pad(fp, &dbuf[i], w);
  1920     05F1  1283               	bcf	3,5	;RP0=0, select bank0
  1921     05F2  1303               	bcf	3,6	;RP1=0, select bank0
  1922     05F3  0835               	movf	utoa@fp,w
  1923     05F4  00AE               	movwf	pad@fp
  1924     05F5  0836               	movf	utoa@fp+1,w
  1925     05F6  00AF               	movwf	pad@fp+1
  1926     05F7  083C               	movf	utoa@i,w
  1927     05F8  3EA2               	addlw	(low (_dbuf| 0))& (0+255)
  1928     05F9  00B0               	movwf	pad@buf
  1929     05FA  083B               	movf	utoa@w+1,w
  1930     05FB  00B2               	movwf	pad@p+1
  1931     05FC  083A               	movf	utoa@w,w
  1932     05FD  00B1               	movwf	pad@p
  1933     05FE  120A  118A  26B0  120A  118A  	fcall	_pad
  1934     0603                     l796:
  1935     0603  0008               	return
  1936     0604                     __end_of_utoa:
  1937                           
  1938                           	psect	text5
  1939     06B0                     __ptext5:	
  1940 ;; *************** function _pad *****************
  1941 ;; Defined at:
  1942 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  fp              2   14[BANK0 ] PTR struct _IO_FILE
  1945 ;;		 -> sprintf@f(11), 
  1946 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  1947 ;;		 -> dbuf(32), 
  1948 ;;  p               2   17[BANK0 ] int 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;  i               2   19[BANK0 ] int 
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1960 ;;      Params:         0       5       0       0       0
  1961 ;;      Locals:         0       2       0       0       0
  1962 ;;      Temps:          1       0       0       0       0
  1963 ;;      Totals:         1       7       0       0       0
  1964 ;;Total ram usage:        8 bytes
  1965 ;; Hardware stack levels used: 1
  1966 ;; Hardware stack levels required when called: 4
  1967 ;; This function calls:
  1968 ;;		_fputc
  1969 ;;		_fputs
  1970 ;; This function is called by:
  1971 ;;		_utoa
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975     06B0                     _pad:	
  1976                           ;psect for function _pad
  1977                           
  1978     06B0                     l1845:	
  1979                           ;incstack = 0
  1980 ;; hardware stack exceeded
  1981                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1982                           
  1983                           
  1984                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  1985     06B0  1283               	bcf	3,5	;RP0=0, select bank0
  1986     06B1  1303               	bcf	3,6	;RP1=0, select bank0
  1987     06B2  1C66               	btfss	_flags,0
  1988     06B3  2EB5               	goto	u1761
  1989     06B4  2EB6               	goto	u1760
  1990     06B5                     u1761:
  1991     06B5  2EC1               	goto	l1849
  1992     06B6                     u1760:
  1993     06B6                     l1847:
  1994                           
  1995                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  1996     06B6  0830               	movf	pad@buf,w
  1997     06B7  00F6               	movwf	fputs@s
  1998     06B8  082E               	movf	pad@fp,w
  1999     06B9  00F7               	movwf	fputs@fp
  2000     06BA  082F               	movf	pad@fp+1,w
  2001     06BB  00F8               	movwf	fputs@fp+1
  2002     06BC  120A  158A  279D  120A  118A  	fcall	_fputs
  2003     06C1                     l1849:
  2004                           
  2005                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2006     06C1  1283               	bcf	3,5	;RP0=0, select bank0
  2007     06C2  1303               	bcf	3,6	;RP1=0, select bank0
  2008     06C3  1FB2               	btfss	pad@p+1,7
  2009     06C4  2EC6               	goto	u1771
  2010     06C5  2EC7               	goto	u1770
  2011     06C6                     u1771:
  2012     06C6  2EC9               	goto	l781
  2013     06C7                     u1770:
  2014     06C7                     l1851:
  2015                           
  2016                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2017     06C7  01B1               	clrf	pad@p
  2018     06C8  01B2               	clrf	pad@p+1
  2019     06C9                     l781:	
  2020                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 207:  }
  2021                           
  2022                           
  2023                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2024     06C9  01B3               	clrf	pad@i
  2025     06CA  01B4               	clrf	pad@i+1
  2026                           
  2027                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2028     06CB  2EE3               	goto	l1857
  2029     06CC                     l1853:
  2030                           
  2031                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2032     06CC  3020               	movlw	32
  2033     06CD  00F2               	movwf	fputc@c
  2034     06CE  3000               	movlw	0
  2035     06CF  00F3               	movwf	fputc@c+1
  2036     06D0  1283               	bcf	3,5	;RP0=0, select bank0
  2037     06D1  1303               	bcf	3,6	;RP1=0, select bank0
  2038     06D2  082E               	movf	pad@fp,w
  2039     06D3  00F4               	movwf	fputc@fp
  2040     06D4  082F               	movf	pad@fp+1,w
  2041     06D5  00F5               	movwf	fputc@fp+1
  2042     06D6  120A  118A  23BB  120A  118A  	fcall	_fputc
  2043     06DB                     l1855:
  2044                           
  2045                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2046     06DB  3001               	movlw	1
  2047     06DC  1283               	bcf	3,5	;RP0=0, select bank0
  2048     06DD  1303               	bcf	3,6	;RP1=0, select bank0
  2049     06DE  07B3               	addwf	pad@i,f
  2050     06DF  1803               	skipnc
  2051     06E0  0AB4               	incf	pad@i+1,f
  2052     06E1  3000               	movlw	0
  2053     06E2  07B4               	addwf	pad@i+1,f
  2054     06E3                     l1857:
  2055                           
  2056                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2057     06E3  0834               	movf	pad@i+1,w
  2058     06E4  3A80               	xorlw	128
  2059     06E5  00F9               	movwf	??_pad
  2060     06E6  0832               	movf	pad@p+1,w
  2061     06E7  3A80               	xorlw	128
  2062     06E8  0279               	subwf	??_pad,w
  2063     06E9  1D03               	skipz
  2064     06EA  2EED               	goto	u1785
  2065     06EB  0831               	movf	pad@p,w
  2066     06EC  0233               	subwf	pad@i,w
  2067     06ED                     u1785:
  2068     06ED  1C03               	skipc
  2069     06EE  2EF0               	goto	u1781
  2070     06EF  2EF1               	goto	u1780
  2071     06F0                     u1781:
  2072     06F0  2ECC               	goto	l1853
  2073     06F1                     u1780:
  2074     06F1                     l784:
  2075                           
  2076                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2077     06F1  1283               	bcf	3,5	;RP0=0, select bank0
  2078     06F2  1303               	bcf	3,6	;RP1=0, select bank0
  2079     06F3  1866               	btfsc	_flags,0
  2080     06F4  2EF6               	goto	u1791
  2081     06F5  2EF7               	goto	u1790
  2082     06F6                     u1791:
  2083     06F6  2F02               	goto	l786
  2084     06F7                     u1790:
  2085     06F7                     l1859:
  2086                           
  2087                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2088     06F7  0830               	movf	pad@buf,w
  2089     06F8  00F6               	movwf	fputs@s
  2090     06F9  082E               	movf	pad@fp,w
  2091     06FA  00F7               	movwf	fputs@fp
  2092     06FB  082F               	movf	pad@fp+1,w
  2093     06FC  00F8               	movwf	fputs@fp+1
  2094     06FD  120A  158A  279D  120A  118A  	fcall	_fputs
  2095     0702                     l786:
  2096     0702  0008               	return
  2097     0703                     __end_of_pad:
  2098                           
  2099                           	psect	text6
  2100     0F9D                     __ptext6:	
  2101 ;; *************** function _fputs *****************
  2102 ;; Defined at:
  2103 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputs.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  s               1    6[COMMON] PTR const unsigned char 
  2106 ;;		 -> dbuf(32), 
  2107 ;;  fp              2    7[COMMON] PTR struct _IO_FILE
  2108 ;;		 -> sprintf@f(11), 
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;  i               2   12[BANK0 ] int 
  2111 ;;  c               1   11[BANK0 ] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  2    6[COMMON] int 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2121 ;;      Params:         3       0       0       0       0
  2122 ;;      Locals:         0       3       0       0       0
  2123 ;;      Temps:          0       2       0       0       0
  2124 ;;      Totals:         3       5       0       0       0
  2125 ;;Total ram usage:        8 bytes
  2126 ;; Hardware stack levels used: 1
  2127 ;; Hardware stack levels required when called: 3
  2128 ;; This function calls:
  2129 ;;		_fputc
  2130 ;; This function is called by:
  2131 ;;		_pad
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135     0F9D                     _fputs:	
  2136                           ;psect for function _fputs
  2137                           
  2138     0F9D                     l1837:	
  2139                           ;incstack = 0
  2140 ;; hardware stack exceeded
  2141                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2142                           
  2143     0F9D  1283               	bcf	3,5	;RP0=0, select bank0
  2144     0F9E  1303               	bcf	3,6	;RP1=0, select bank0
  2145     0F9F  01AC               	clrf	fputs@i
  2146     0FA0  01AD               	clrf	fputs@i+1
  2147     0FA1  2FBA               	goto	l1843
  2148     0FA2                     l1839:
  2149     0FA2  082B               	movf	fputs@c,w
  2150     0FA3  00A9               	movwf	??_fputs
  2151     0FA4  01AA               	clrf	??_fputs+1
  2152     0FA5  0829               	movf	??_fputs,w
  2153     0FA6  00F2               	movwf	fputc@c
  2154     0FA7  082A               	movf	??_fputs+1,w
  2155     0FA8  00F3               	movwf	fputc@c+1
  2156     0FA9  0877               	movf	fputs@fp,w
  2157     0FAA  00F4               	movwf	fputc@fp
  2158     0FAB  0878               	movf	fputs@fp+1,w
  2159     0FAC  00F5               	movwf	fputc@fp+1
  2160     0FAD  120A  118A  23BB  120A  158A  	fcall	_fputc
  2161     0FB2                     l1841:
  2162     0FB2  3001               	movlw	1
  2163     0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  2164     0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  2165     0FB5  07AC               	addwf	fputs@i,f
  2166     0FB6  1803               	skipnc
  2167     0FB7  0AAD               	incf	fputs@i+1,f
  2168     0FB8  3000               	movlw	0
  2169     0FB9  07AD               	addwf	fputs@i+1,f
  2170     0FBA                     l1843:
  2171     0FBA  082C               	movf	fputs@i,w
  2172     0FBB  0776               	addwf	fputs@s,w
  2173     0FBC  00A9               	movwf	??_fputs
  2174     0FBD  0829               	movf	??_fputs,w
  2175     0FBE  0084               	movwf	4
  2176     0FBF  1383               	bcf	3,7	;select IRP bank0
  2177     0FC0  0800               	movf	0,w
  2178     0FC1  00AB               	movwf	fputs@c
  2179     0FC2  082B               	movf	fputs@c,w
  2180     0FC3  1D03               	btfss	3,2
  2181     0FC4  2FC6               	goto	u1751
  2182     0FC5  2FC7               	goto	u1750
  2183     0FC6                     u1751:
  2184     0FC6  2FA2               	goto	l1839
  2185     0FC7                     u1750:
  2186     0FC7                     l848:
  2187     0FC7  0008               	return
  2188     0FC8                     __end_of_fputs:
  2189                           
  2190                           	psect	text7
  2191     03BB                     __ptext7:	
  2192 ;; *************** function _fputc *****************
  2193 ;; Defined at:
  2194 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  c               2    2[COMMON] int 
  2197 ;;  fp              2    4[COMMON] PTR struct _IO_FILE
  2198 ;;		 -> sprintf@f(11), 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  2    2[COMMON] int 
  2203 ;; Registers used:
  2204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2210 ;;      Params:         4       0       0       0       0
  2211 ;;      Locals:         0       0       0       0       0
  2212 ;;      Temps:          0       9       0       0       0
  2213 ;;      Totals:         4       9       0       0       0
  2214 ;;Total ram usage:       13 bytes
  2215 ;; Hardware stack levels used: 1
  2216 ;; Hardware stack levels required when called: 2
  2217 ;; This function calls:
  2218 ;;		_putch
  2219 ;; This function is called by:
  2220 ;;		_pad
  2221 ;;		_vfpfcnvrt
  2222 ;;		_fputs
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226     03BB                     _fputc:	
  2227                           ;psect for function _fputc
  2228                           
  2229     03BB                     l1345:	
  2230                           ;incstack = 0
  2231 ;; hardware stack exceeded
  2232                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2233                           
  2234     03BB  0874               	movf	fputc@fp,w
  2235     03BC  0475               	iorwf	fputc@fp+1,w
  2236     03BD  1903               	btfsc	3,2
  2237     03BE  2BC0               	goto	u881
  2238     03BF  2BC1               	goto	u880
  2239     03C0                     u881:
  2240     03C0  2BC7               	goto	l1349
  2241     03C1                     u880:
  2242     03C1                     l1347:
  2243     03C1  0874               	movf	fputc@fp,w
  2244     03C2  0475               	iorwf	fputc@fp+1,w
  2245     03C3  1D03               	btfss	3,2
  2246     03C4  2BC6               	goto	u891
  2247     03C5  2BC7               	goto	u890
  2248     03C6                     u891:
  2249     03C6  2BCE               	goto	l1351
  2250     03C7                     u890:
  2251     03C7                     l1349:
  2252     03C7  0872               	movf	fputc@c,w
  2253     03C8  120A  118A  2003  120A  118A  	fcall	_putch
  2254     03CD  2C5A               	goto	l840
  2255     03CE                     l1351:
  2256     03CE  0874               	movf	fputc@fp,w
  2257     03CF  3E09               	addlw	9
  2258     03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2259     03D1  1303               	bcf	3,6	;RP1=0, select bank0
  2260     03D2  00A0               	movwf	??_fputc
  2261     03D3  0875               	movf	fputc@fp+1,w
  2262     03D4  1803               	skipnc
  2263     03D5  3E01               	addlw	1
  2264     03D6  3E00               	addlw	0
  2265     03D7  00A1               	movwf	??_fputc+1
  2266     03D8  0820               	movf	??_fputc,w
  2267     03D9  0084               	movwf	4
  2268     03DA  1783               	bsf	3,7
  2269     03DB  1C21               	btfss	??_fputc+1,0
  2270     03DC  1383               	bcf	3,7
  2271     03DD  0800               	movf	0,w
  2272     03DE  00A2               	movwf	??_fputc+2
  2273     03DF  0A84               	incf	4,f
  2274     03E0  0800               	movf	0,w
  2275     03E1  00A3               	movwf	??_fputc+3
  2276     03E2  0822               	movf	??_fputc+2,w
  2277     03E3  0423               	iorwf	??_fputc+3,w
  2278     03E4  1903               	btfsc	3,2
  2279     03E5  2BE7               	goto	u901
  2280     03E6  2BE8               	goto	u900
  2281     03E7                     u901:
  2282     03E7  2C1A               	goto	l1355
  2283     03E8                     u900:
  2284     03E8                     l1353:
  2285     03E8  0874               	movf	fputc@fp,w
  2286     03E9  3E09               	addlw	9
  2287     03EA  00A0               	movwf	??_fputc
  2288     03EB  0875               	movf	fputc@fp+1,w
  2289     03EC  1803               	skipnc
  2290     03ED  3E01               	addlw	1
  2291     03EE  3E00               	addlw	0
  2292     03EF  00A1               	movwf	??_fputc+1
  2293     03F0  0820               	movf	??_fputc,w
  2294     03F1  0084               	movwf	4
  2295     03F2  1783               	bsf	3,7
  2296     03F3  1C21               	btfss	??_fputc+1,0
  2297     03F4  1383               	bcf	3,7
  2298     03F5  0800               	movf	0,w
  2299     03F6  00A2               	movwf	??_fputc+2
  2300     03F7  0A84               	incf	4,f
  2301     03F8  0800               	movf	0,w
  2302     03F9  00A3               	movwf	??_fputc+3
  2303     03FA  0874               	movf	fputc@fp,w
  2304     03FB  3E02               	addlw	2
  2305     03FC  00A4               	movwf	??_fputc+4
  2306     03FD  0875               	movf	fputc@fp+1,w
  2307     03FE  1803               	skipnc
  2308     03FF  3E01               	addlw	1
  2309     0400  3E00               	addlw	0
  2310     0401  00A5               	movwf	??_fputc+5
  2311     0402  0824               	movf	??_fputc+4,w
  2312     0403  0084               	movwf	4
  2313     0404  1783               	bsf	3,7
  2314     0405  1C25               	btfss	??_fputc+5,0
  2315     0406  1383               	bcf	3,7
  2316     0407  0800               	movf	0,w
  2317     0408  00A6               	movwf	??_fputc+6
  2318     0409  0A84               	incf	4,f
  2319     040A  0800               	movf	0,w
  2320     040B  00A7               	movwf	??_fputc+7
  2321     040C  0827               	movf	??_fputc+7,w
  2322     040D  3A80               	xorlw	128
  2323     040E  00A8               	movwf	??_fputc+8
  2324     040F  0823               	movf	??_fputc+3,w
  2325     0410  3A80               	xorlw	128
  2326     0411  0228               	subwf	??_fputc+8,w
  2327     0412  1D03               	skipz
  2328     0413  2C16               	goto	u915
  2329     0414  0822               	movf	??_fputc+2,w
  2330     0415  0226               	subwf	??_fputc+6,w
  2331     0416                     u915:
  2332     0416  1803               	skipnc
  2333     0417  2C19               	goto	u911
  2334     0418  2C1A               	goto	u910
  2335     0419                     u911:
  2336     0419  2C5A               	goto	l840
  2337     041A                     u910:
  2338     041A                     l1355:
  2339     041A  0874               	movf	fputc@fp,w
  2340     041B  0084               	movwf	4
  2341     041C  1783               	bsf	3,7
  2342     041D  1C75               	btfss	fputc@fp+1,0
  2343     041E  1383               	bcf	3,7
  2344     041F  0800               	movf	0,w
  2345     0420  1283               	bcf	3,5	;RP0=0, select bank0
  2346     0421  1303               	bcf	3,6	;RP1=0, select bank0
  2347     0422  00A0               	movwf	??_fputc
  2348     0423  0A84               	incf	4,f
  2349     0424  0800               	movf	0,w
  2350     0425  00A1               	movwf	??_fputc+1
  2351     0426  0874               	movf	fputc@fp,w
  2352     0427  3E02               	addlw	2
  2353     0428  00A2               	movwf	??_fputc+2
  2354     0429  0875               	movf	fputc@fp+1,w
  2355     042A  1803               	skipnc
  2356     042B  3E01               	addlw	1
  2357     042C  3E00               	addlw	0
  2358     042D  00A3               	movwf	??_fputc+3
  2359     042E  0822               	movf	??_fputc+2,w
  2360     042F  0084               	movwf	4
  2361     0430  1783               	bsf	3,7
  2362     0431  1C23               	btfss	??_fputc+3,0
  2363     0432  1383               	bcf	3,7
  2364     0433  0800               	movf	0,w
  2365     0434  0720               	addwf	??_fputc,w
  2366     0435  00A5               	movwf	??_fputc+5
  2367     0436  0821               	movf	??_fputc+1,w
  2368     0437  00A4               	movwf	??_fputc+4
  2369     0438  1803               	skipnc
  2370     0439  0AA4               	incf	??_fputc+4,f
  2371     043A  1F80               	btfss	0,7
  2372     043B  2C3D               	goto	u920
  2373     043C  03A4               	decf	??_fputc+4,f
  2374     043D                     u920:
  2375     043D  1283               	bcf	3,5	;RP0=0, select bank0
  2376     043E  1303               	bcf	3,6	;RP1=0, select bank0
  2377     043F  0824               	movf	??_fputc+4,w
  2378     0440  00A6               	movwf	??_fputc+6
  2379     0441  0825               	movf	??_fputc+5,w
  2380     0442  0084               	movwf	4
  2381     0443  1783               	bsf	3,7
  2382     0444  1C26               	btfss	??_fputc+6,0
  2383     0445  1383               	bcf	3,7
  2384     0446  0872               	movf	fputc@c,w
  2385     0447  0080               	movwf	0
  2386     0448  0874               	movf	fputc@fp,w
  2387     0449  3E02               	addlw	2
  2388     044A  00A0               	movwf	??_fputc
  2389     044B  0875               	movf	fputc@fp+1,w
  2390     044C  1803               	skipnc
  2391     044D  3E01               	addlw	1
  2392     044E  3E00               	addlw	0
  2393     044F  00A1               	movwf	??_fputc+1
  2394     0450  0820               	movf	??_fputc,w
  2395     0451  0084               	movwf	4
  2396     0452  1783               	bsf	3,7
  2397     0453  1C21               	btfss	??_fputc+1,0
  2398     0454  1383               	bcf	3,7
  2399     0455  3001               	movlw	1
  2400     0456  0780               	addwf	0,f
  2401     0457  0A84               	incf	4,f
  2402     0458  1803               	skipnc
  2403     0459  0A80               	incf	0,f
  2404     045A                     l840:
  2405     045A  0008               	return
  2406     045B                     __end_of_fputc:
  2407                           
  2408                           	psect	text8
  2409     0003                     __ptext8:	
  2410 ;; *************** function _putch *****************
  2411 ;; Defined at:
  2412 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  c               1    wreg     unsigned char 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  c               1    0[COMMON] unsigned char 
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  1    wreg      void 
  2419 ;; Registers used:
  2420 ;;		wreg
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2426 ;;      Params:         0       0       0       0       0
  2427 ;;      Locals:         0       0       0       0       0
  2428 ;;      Temps:          0       0       0       0       0
  2429 ;;      Totals:         0       0       0       0       0
  2430 ;;Total ram usage:        0 bytes
  2431 ;; Hardware stack levels used: 1
  2432 ;; Hardware stack levels required when called: 1
  2433 ;; This function calls:
  2434 ;;		Nothing
  2435 ;; This function is called by:
  2436 ;;		_fputc
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440     0003                     _putch:	
  2441                           ;psect for function _putch
  2442                           
  2443     0003                     l851:	
  2444                           ;incstack = 0
  2445 ;; hardware stack exceeded
  2446                           ; Regs used in _putch: [wreg]
  2447                           
  2448     0003  0008               	return
  2449     0004                     __end_of_putch:
  2450                           
  2451                           	psect	text9
  2452     0FC8                     __ptext9:	
  2453 ;; *************** function ___lwmod *****************
  2454 ;; Defined at:
  2455 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  divisor         2    2[COMMON] unsigned int 
  2458 ;;  dividend        2    4[COMMON] unsigned int 
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  counter         1    6[COMMON] unsigned char 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  2    2[COMMON] unsigned int 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2470 ;;      Params:         4       0       0       0       0
  2471 ;;      Locals:         1       0       0       0       0
  2472 ;;      Temps:          0       0       0       0       0
  2473 ;;      Totals:         5       0       0       0       0
  2474 ;;Total ram usage:        5 bytes
  2475 ;; Hardware stack levels used: 1
  2476 ;; Hardware stack levels required when called: 1
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_main
  2481 ;;		_utoa
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485     0FC8                     ___lwmod:	
  2486                           ;psect for function ___lwmod
  2487                           
  2488     0FC8                     l1407:	
  2489                           ;incstack = 0
  2490                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2491                           
  2492     0FC8  0872               	movf	___lwmod@divisor,w
  2493     0FC9  0473               	iorwf	___lwmod@divisor+1,w
  2494     0FCA  1903               	btfsc	3,2
  2495     0FCB  2FCD               	goto	u1051
  2496     0FCC  2FCE               	goto	u1050
  2497     0FCD                     u1051:
  2498     0FCD  2FFB               	goto	l1425
  2499     0FCE                     u1050:
  2500     0FCE                     l1409:
  2501     0FCE  3001               	movlw	1
  2502     0FCF  00F6               	movwf	___lwmod@counter
  2503     0FD0  2FDA               	goto	l1415
  2504     0FD1                     l1411:
  2505     0FD1  3001               	movlw	1
  2506     0FD2                     u1065:
  2507     0FD2  1003               	clrc
  2508     0FD3  0DF2               	rlf	___lwmod@divisor,f
  2509     0FD4  0DF3               	rlf	___lwmod@divisor+1,f
  2510     0FD5  3EFF               	addlw	-1
  2511     0FD6  1D03               	skipz
  2512     0FD7  2FD2               	goto	u1065
  2513     0FD8                     l1413:
  2514     0FD8  3001               	movlw	1
  2515     0FD9  07F6               	addwf	___lwmod@counter,f
  2516     0FDA                     l1415:
  2517     0FDA  1FF3               	btfss	___lwmod@divisor+1,7
  2518     0FDB  2FDD               	goto	u1071
  2519     0FDC  2FDE               	goto	u1070
  2520     0FDD                     u1071:
  2521     0FDD  2FD1               	goto	l1411
  2522     0FDE                     u1070:
  2523     0FDE                     l1417:
  2524     0FDE  0873               	movf	___lwmod@divisor+1,w
  2525     0FDF  0275               	subwf	___lwmod@dividend+1,w
  2526     0FE0  1D03               	skipz
  2527     0FE1  2FE4               	goto	u1085
  2528     0FE2  0872               	movf	___lwmod@divisor,w
  2529     0FE3  0274               	subwf	___lwmod@dividend,w
  2530     0FE4                     u1085:
  2531     0FE4  1C03               	skipc
  2532     0FE5  2FE7               	goto	u1081
  2533     0FE6  2FE8               	goto	u1080
  2534     0FE7                     u1081:
  2535     0FE7  2FEE               	goto	l1421
  2536     0FE8                     u1080:
  2537     0FE8                     l1419:
  2538     0FE8  0872               	movf	___lwmod@divisor,w
  2539     0FE9  02F4               	subwf	___lwmod@dividend,f
  2540     0FEA  0873               	movf	___lwmod@divisor+1,w
  2541     0FEB  1C03               	skipc
  2542     0FEC  03F5               	decf	___lwmod@dividend+1,f
  2543     0FED  02F5               	subwf	___lwmod@dividend+1,f
  2544     0FEE                     l1421:
  2545     0FEE  3001               	movlw	1
  2546     0FEF                     u1095:
  2547     0FEF  1003               	clrc
  2548     0FF0  0CF3               	rrf	___lwmod@divisor+1,f
  2549     0FF1  0CF2               	rrf	___lwmod@divisor,f
  2550     0FF2  3EFF               	addlw	-1
  2551     0FF3  1D03               	skipz
  2552     0FF4  2FEF               	goto	u1095
  2553     0FF5                     l1423:
  2554     0FF5  3001               	movlw	1
  2555     0FF6  02F6               	subwf	___lwmod@counter,f
  2556     0FF7  1D03               	btfss	3,2
  2557     0FF8  2FFA               	goto	u1101
  2558     0FF9  2FFB               	goto	u1100
  2559     0FFA                     u1101:
  2560     0FFA  2FDE               	goto	l1417
  2561     0FFB                     u1100:
  2562     0FFB                     l1425:
  2563     0FFB  0875               	movf	___lwmod@dividend+1,w
  2564     0FFC  00F3               	movwf	?___lwmod+1
  2565     0FFD  0874               	movf	___lwmod@dividend,w
  2566     0FFE  00F2               	movwf	?___lwmod
  2567     0FFF                     l590:
  2568     0FFF  0008               	return
  2569     1000                     __end_of___lwmod:
  2570                           
  2571                           	psect	text10
  2572     0791                     __ptext10:	
  2573 ;; *************** function ___lwdiv *****************
  2574 ;; Defined at:
  2575 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  divisor         2    2[COMMON] unsigned int 
  2578 ;;  dividend        2    4[COMMON] unsigned int 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;  quotient        2    6[COMMON] unsigned int 
  2581 ;;  counter         1    8[COMMON] unsigned char 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  2    2[COMMON] unsigned int 
  2584 ;; Registers used:
  2585 ;;		wreg, status,2, status,0
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2591 ;;      Params:         4       0       0       0       0
  2592 ;;      Locals:         3       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0
  2594 ;;      Totals:         7       0       0       0       0
  2595 ;;Total ram usage:        7 bytes
  2596 ;; Hardware stack levels used: 1
  2597 ;; Hardware stack levels required when called: 1
  2598 ;; This function calls:
  2599 ;;		Nothing
  2600 ;; This function is called by:
  2601 ;;		_main
  2602 ;;		_utoa
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606     0791                     ___lwdiv:	
  2607                           ;psect for function ___lwdiv
  2608                           
  2609     0791                     l1381:	
  2610                           ;incstack = 0
  2611                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2612                           
  2613     0791  01F6               	clrf	___lwdiv@quotient
  2614     0792  01F7               	clrf	___lwdiv@quotient+1
  2615     0793                     l1383:
  2616     0793  0872               	movf	___lwdiv@divisor,w
  2617     0794  0473               	iorwf	___lwdiv@divisor+1,w
  2618     0795  1903               	btfsc	3,2
  2619     0796  2F98               	goto	u981
  2620     0797  2F99               	goto	u980
  2621     0798                     u981:
  2622     0798  2FCE               	goto	l1403
  2623     0799                     u980:
  2624     0799                     l1385:
  2625     0799  3001               	movlw	1
  2626     079A  00F8               	movwf	___lwdiv@counter
  2627     079B  2FA5               	goto	l1391
  2628     079C                     l1387:
  2629     079C  3001               	movlw	1
  2630     079D                     u995:
  2631     079D  1003               	clrc
  2632     079E  0DF2               	rlf	___lwdiv@divisor,f
  2633     079F  0DF3               	rlf	___lwdiv@divisor+1,f
  2634     07A0  3EFF               	addlw	-1
  2635     07A1  1D03               	skipz
  2636     07A2  2F9D               	goto	u995
  2637     07A3                     l1389:
  2638     07A3  3001               	movlw	1
  2639     07A4  07F8               	addwf	___lwdiv@counter,f
  2640     07A5                     l1391:
  2641     07A5  1FF3               	btfss	___lwdiv@divisor+1,7
  2642     07A6  2FA8               	goto	u1001
  2643     07A7  2FA9               	goto	u1000
  2644     07A8                     u1001:
  2645     07A8  2F9C               	goto	l1387
  2646     07A9                     u1000:
  2647     07A9                     l1393:
  2648     07A9  3001               	movlw	1
  2649     07AA                     u1015:
  2650     07AA  1003               	clrc
  2651     07AB  0DF6               	rlf	___lwdiv@quotient,f
  2652     07AC  0DF7               	rlf	___lwdiv@quotient+1,f
  2653     07AD  3EFF               	addlw	-1
  2654     07AE  1D03               	skipz
  2655     07AF  2FAA               	goto	u1015
  2656     07B0  0873               	movf	___lwdiv@divisor+1,w
  2657     07B1  0275               	subwf	___lwdiv@dividend+1,w
  2658     07B2  1D03               	skipz
  2659     07B3  2FB6               	goto	u1025
  2660     07B4  0872               	movf	___lwdiv@divisor,w
  2661     07B5  0274               	subwf	___lwdiv@dividend,w
  2662     07B6                     u1025:
  2663     07B6  1C03               	skipc
  2664     07B7  2FB9               	goto	u1021
  2665     07B8  2FBA               	goto	u1020
  2666     07B9                     u1021:
  2667     07B9  2FC1               	goto	l1399
  2668     07BA                     u1020:
  2669     07BA                     l1395:
  2670     07BA  0872               	movf	___lwdiv@divisor,w
  2671     07BB  02F4               	subwf	___lwdiv@dividend,f
  2672     07BC  0873               	movf	___lwdiv@divisor+1,w
  2673     07BD  1C03               	skipc
  2674     07BE  03F5               	decf	___lwdiv@dividend+1,f
  2675     07BF  02F5               	subwf	___lwdiv@dividend+1,f
  2676     07C0                     l1397:
  2677     07C0  1476               	bsf	___lwdiv@quotient,0
  2678     07C1                     l1399:
  2679     07C1  3001               	movlw	1
  2680     07C2                     u1035:
  2681     07C2  1003               	clrc
  2682     07C3  0CF3               	rrf	___lwdiv@divisor+1,f
  2683     07C4  0CF2               	rrf	___lwdiv@divisor,f
  2684     07C5  3EFF               	addlw	-1
  2685     07C6  1D03               	skipz
  2686     07C7  2FC2               	goto	u1035
  2687     07C8                     l1401:
  2688     07C8  3001               	movlw	1
  2689     07C9  02F8               	subwf	___lwdiv@counter,f
  2690     07CA  1D03               	btfss	3,2
  2691     07CB  2FCD               	goto	u1041
  2692     07CC  2FCE               	goto	u1040
  2693     07CD                     u1041:
  2694     07CD  2FA9               	goto	l1393
  2695     07CE                     u1040:
  2696     07CE                     l1403:
  2697     07CE  0877               	movf	___lwdiv@quotient+1,w
  2698     07CF  00F3               	movwf	?___lwdiv+1
  2699     07D0  0876               	movf	___lwdiv@quotient,w
  2700     07D1  00F2               	movwf	?___lwdiv
  2701     07D2                     l580:
  2702     07D2  0008               	return
  2703     07D3                     __end_of___lwdiv:
  2704                           
  2705                           	psect	text11
  2706     0604                     __ptext11:	
  2707 ;; *************** function _read_prec_or_width *****************
  2708 ;; Defined at:
  2709 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  fmt             1    8[COMMON] PTR PTR const unsigned c
  2712 ;;		 -> vfprintf@cfmt(1), 
  2713 ;;  ap              1    9[COMMON] PTR PTR void [1]
  2714 ;;		 -> sprintf@ap(1), 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  c               1    0[BANK0 ] unsigned char 
  2717 ;;  n               2    1[BANK0 ] int 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  2    8[COMMON] int 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2727 ;;      Params:         2       0       0       0       0
  2728 ;;      Locals:         0       3       0       0       0
  2729 ;;      Temps:          0       0       0       0       0
  2730 ;;      Totals:         2       3       0       0       0
  2731 ;;Total ram usage:        5 bytes
  2732 ;; Hardware stack levels used: 1
  2733 ;; Hardware stack levels required when called: 2
  2734 ;; This function calls:
  2735 ;;		___wmul
  2736 ;; This function is called by:
  2737 ;;		_vfpfcnvrt
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741     0604                     _read_prec_or_width:	
  2742                           ;psect for function _read_prec_or_width
  2743                           
  2744     0604                     l1475:	
  2745                           ;incstack = 0
  2746                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2747                           
  2748                           
  2749                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  2750     0604  1283               	bcf	3,5	;RP0=0, select bank0
  2751     0605  1303               	bcf	3,6	;RP1=0, select bank0
  2752     0606  01A1               	clrf	read_prec_or_width@n
  2753     0607  01A2               	clrf	read_prec_or_width@n+1
  2754     0608                     l1477:
  2755                           
  2756                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  2757     0608  0878               	movf	read_prec_or_width@fmt,w
  2758     0609  0084               	movwf	4
  2759     060A  1383               	bcf	3,7	;select IRP bank0
  2760     060B  0800               	movf	0,w
  2761     060C  0084               	movwf	4
  2762     060D  120A  158A  200A  120A  118A  	fcall	stringdir
  2763     0612  3A2A               	xorlw	42
  2764     0613  1D03               	skipz
  2765     0614  2E16               	goto	u1201
  2766     0615  2E17               	goto	u1200
  2767     0616                     u1201:
  2768     0616  2E45               	goto	l1487
  2769     0617                     u1200:
  2770     0617                     l1479:
  2771                           
  2772                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  2773     0617  0878               	movf	read_prec_or_width@fmt,w
  2774     0618  0084               	movwf	4
  2775     0619  3001               	movlw	1
  2776     061A  0780               	addwf	0,f
  2777     061B                     l1481:
  2778                           
  2779                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2780     061B  0879               	movf	read_prec_or_width@ap,w
  2781     061C  0084               	movwf	4
  2782     061D  0800               	movf	0,w
  2783     061E  00FF               	movwf	btemp+1
  2784     061F  3002               	movlw	2
  2785     0620  0780               	addwf	0,f
  2786     0621  087F               	movf	btemp+1,w
  2787     0622  0084               	movwf	4
  2788     0623  0800               	movf	0,w
  2789     0624  00A1               	movwf	read_prec_or_width@n
  2790     0625  0A84               	incf	4,f
  2791     0626  0800               	movf	0,w
  2792     0627  00A2               	movwf	read_prec_or_width@n+1
  2793                           
  2794                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2795     0628  2E56               	goto	l1489
  2796     0629                     l1483:
  2797                           
  2798                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2799     0629  0822               	movf	read_prec_or_width@n+1,w
  2800     062A  00F3               	movwf	___wmul@multiplier+1
  2801     062B  0821               	movf	read_prec_or_width@n,w
  2802     062C  00F2               	movwf	___wmul@multiplier
  2803     062D  300A               	movlw	10
  2804     062E  00F4               	movwf	___wmul@multiplicand
  2805     062F  3000               	movlw	0
  2806     0630  00F5               	movwf	___wmul@multiplicand+1
  2807     0631  120A  158A  274E  120A  118A  	fcall	___wmul
  2808     0636  1283               	bcf	3,5	;RP0=0, select bank0
  2809     0637  1303               	bcf	3,6	;RP1=0, select bank0
  2810     0638  0820               	movf	read_prec_or_width@c,w
  2811     0639  0772               	addwf	?___wmul,w
  2812     063A  00A1               	movwf	read_prec_or_width@n
  2813     063B  3000               	movlw	0
  2814     063C  1803               	skipnc
  2815     063D  3001               	movlw	1
  2816     063E  0773               	addwf	?___wmul+1,w
  2817     063F  00A2               	movwf	read_prec_or_width@n+1
  2818     0640                     l1485:
  2819                           
  2820                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2821     0640  0878               	movf	read_prec_or_width@fmt,w
  2822     0641  0084               	movwf	4
  2823     0642  3001               	movlw	1
  2824     0643  1383               	bcf	3,7	;select IRP bank0
  2825     0644  0780               	addwf	0,f
  2826     0645                     l1487:
  2827                           
  2828                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2829     0645  0878               	movf	read_prec_or_width@fmt,w
  2830     0646  0084               	movwf	4
  2831     0647  0800               	movf	0,w
  2832     0648  0084               	movwf	4
  2833     0649  120A  158A  200A  120A  118A  	fcall	stringdir
  2834     064E  3ED0               	addlw	208
  2835     064F  00A0               	movwf	read_prec_or_width@c
  2836     0650  300A               	movlw	10
  2837     0651  0220               	subwf	read_prec_or_width@c,w
  2838     0652  1C03               	skipc
  2839     0653  2E55               	goto	u1211
  2840     0654  2E56               	goto	u1210
  2841     0655                     u1211:
  2842     0655  2E29               	goto	l1483
  2843     0656                     u1210:
  2844     0656                     l1489:
  2845                           
  2846                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2847     0656  0822               	movf	read_prec_or_width@n+1,w
  2848     0657  00F9               	movwf	?_read_prec_or_width+1
  2849     0658  0821               	movf	read_prec_or_width@n,w
  2850     0659  00F8               	movwf	?_read_prec_or_width
  2851     065A                     l804:
  2852     065A  0008               	return
  2853     065B                     __end_of_read_prec_or_width:
  2854                           
  2855                           	psect	text12
  2856     0F4E                     __ptext12:	
  2857 ;; *************** function ___wmul *****************
  2858 ;; Defined at:
  2859 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  multiplier      2    2[COMMON] unsigned int 
  2862 ;;  multiplicand    2    4[COMMON] unsigned int 
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  product         2    6[COMMON] unsigned int 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  2    2[COMMON] unsigned int 
  2867 ;; Registers used:
  2868 ;;		wreg, status,2, status,0
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2874 ;;      Params:         4       0       0       0       0
  2875 ;;      Locals:         2       0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0
  2877 ;;      Totals:         6       0       0       0       0
  2878 ;;Total ram usage:        6 bytes
  2879 ;; Hardware stack levels used: 1
  2880 ;; Hardware stack levels required when called: 1
  2881 ;; This function calls:
  2882 ;;		Nothing
  2883 ;; This function is called by:
  2884 ;;		_read_prec_or_width
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888     0F4E                     ___wmul:	
  2889                           ;psect for function ___wmul
  2890                           
  2891     0F4E                     l1367:	
  2892                           ;incstack = 0
  2893                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2894                           
  2895     0F4E  01F6               	clrf	___wmul@product
  2896     0F4F  01F7               	clrf	___wmul@product+1
  2897     0F50                     l1369:
  2898     0F50  1C72               	btfss	___wmul@multiplier,0
  2899     0F51  2F53               	goto	u941
  2900     0F52  2F54               	goto	u940
  2901     0F53                     u941:
  2902     0F53  2F5A               	goto	l300
  2903     0F54                     u940:
  2904     0F54                     l1371:
  2905     0F54  0874               	movf	___wmul@multiplicand,w
  2906     0F55  07F6               	addwf	___wmul@product,f
  2907     0F56  1803               	skipnc
  2908     0F57  0AF7               	incf	___wmul@product+1,f
  2909     0F58  0875               	movf	___wmul@multiplicand+1,w
  2910     0F59  07F7               	addwf	___wmul@product+1,f
  2911     0F5A                     l300:
  2912     0F5A  3001               	movlw	1
  2913     0F5B                     u955:
  2914     0F5B  1003               	clrc
  2915     0F5C  0DF4               	rlf	___wmul@multiplicand,f
  2916     0F5D  0DF5               	rlf	___wmul@multiplicand+1,f
  2917     0F5E  3EFF               	addlw	-1
  2918     0F5F  1D03               	skipz
  2919     0F60  2F5B               	goto	u955
  2920     0F61                     l1373:
  2921     0F61  3001               	movlw	1
  2922     0F62                     u965:
  2923     0F62  1003               	clrc
  2924     0F63  0CF3               	rrf	___wmul@multiplier+1,f
  2925     0F64  0CF2               	rrf	___wmul@multiplier,f
  2926     0F65  3EFF               	addlw	-1
  2927     0F66  1D03               	skipz
  2928     0F67  2F62               	goto	u965
  2929     0F68                     l1375:
  2930     0F68  0872               	movf	___wmul@multiplier,w
  2931     0F69  0473               	iorwf	___wmul@multiplier+1,w
  2932     0F6A  1D03               	btfss	3,2
  2933     0F6B  2F6D               	goto	u971
  2934     0F6C  2F6E               	goto	u970
  2935     0F6D                     u971:
  2936     0F6D  2F50               	goto	l1369
  2937     0F6E                     u970:
  2938     0F6E                     l1377:
  2939     0F6E  0877               	movf	___wmul@product+1,w
  2940     0F6F  00F3               	movwf	?___wmul+1
  2941     0F70  0876               	movf	___wmul@product,w
  2942     0F71  00F2               	movwf	?___wmul
  2943     0F72                     l302:
  2944     0F72  0008               	return
  2945     0F73                     __end_of___wmul:
  2946                           
  2947                           	psect	text13
  2948     0703                     __ptext13:	
  2949 ;; *************** function ___lmul *****************
  2950 ;; Defined at:
  2951 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul32.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  multiplier      4    2[COMMON] unsigned long 
  2954 ;;  multiplicand    4    6[COMMON] unsigned long 
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  product         4    1[BANK0 ] unsigned long 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  4    2[COMMON] unsigned long 
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2966 ;;      Params:         8       0       0       0       0
  2967 ;;      Locals:         0       4       0       0       0
  2968 ;;      Temps:          0       1       0       0       0
  2969 ;;      Totals:         8       5       0       0       0
  2970 ;;Total ram usage:       13 bytes
  2971 ;; Hardware stack levels used: 1
  2972 ;; Hardware stack levels required when called: 1
  2973 ;; This function calls:
  2974 ;;		Nothing
  2975 ;; This function is called by:
  2976 ;;		_main
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980     0703                     ___lmul:	
  2981                           ;psect for function ___lmul
  2982                           
  2983     0703                     l2079:	
  2984                           ;incstack = 0
  2985                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2986                           
  2987     0703  3000               	movlw	0
  2988     0704  1283               	bcf	3,5	;RP0=0, select bank0
  2989     0705  1303               	bcf	3,6	;RP1=0, select bank0
  2990     0706  00A4               	movwf	___lmul@product+3
  2991     0707  3000               	movlw	0
  2992     0708  00A3               	movwf	___lmul@product+2
  2993     0709  3000               	movlw	0
  2994     070A  00A2               	movwf	___lmul@product+1
  2995     070B  3000               	movlw	0
  2996     070C  00A1               	movwf	___lmul@product
  2997     070D                     l2081:
  2998     070D  1C72               	btfss	___lmul@multiplier,0
  2999     070E  2F10               	goto	u2191
  3000     070F  2F11               	goto	u2190
  3001     0710                     u2191:
  3002     0710  2F28               	goto	l2085
  3003     0711                     u2190:
  3004     0711                     l2083:
  3005     0711  0876               	movf	___lmul@multiplicand,w
  3006     0712  07A1               	addwf	___lmul@product,f
  3007     0713  0877               	movf	___lmul@multiplicand+1,w
  3008     0714  1103               	clrz
  3009     0715  1803               	skipnc
  3010     0716  3E01               	addlw	1
  3011     0717  1903               	skipnz
  3012     0718  2F1A               	goto	u2201
  3013     0719  07A2               	addwf	___lmul@product+1,f
  3014     071A                     u2201:
  3015     071A  0878               	movf	___lmul@multiplicand+2,w
  3016     071B  1103               	clrz
  3017     071C  1803               	skipnc
  3018     071D  3E01               	addlw	1
  3019     071E  1903               	skipnz
  3020     071F  2F21               	goto	u2202
  3021     0720  07A3               	addwf	___lmul@product+2,f
  3022     0721                     u2202:
  3023     0721  0879               	movf	___lmul@multiplicand+3,w
  3024     0722  1103               	clrz
  3025     0723  1803               	skipnc
  3026     0724  3E01               	addlw	1
  3027     0725  1903               	skipnz
  3028     0726  2F28               	goto	u2203
  3029     0727  07A4               	addwf	___lmul@product+3,f
  3030     0728                     u2203:
  3031     0728                     l2085:
  3032     0728  3001               	movlw	1
  3033     0729  00A0               	movwf	??___lmul
  3034     072A                     u2215:
  3035     072A  1003               	clrc
  3036     072B  0DF6               	rlf	___lmul@multiplicand,f
  3037     072C  0DF7               	rlf	___lmul@multiplicand+1,f
  3038     072D  0DF8               	rlf	___lmul@multiplicand+2,f
  3039     072E  0DF9               	rlf	___lmul@multiplicand+3,f
  3040     072F  0BA0               	decfsz	??___lmul,f
  3041     0730  2F2A               	goto	u2215
  3042     0731                     l2087:
  3043     0731  3001               	movlw	1
  3044     0732                     u2225:
  3045     0732  1003               	clrc
  3046     0733  0CF5               	rrf	___lmul@multiplier+3,f
  3047     0734  0CF4               	rrf	___lmul@multiplier+2,f
  3048     0735  0CF3               	rrf	___lmul@multiplier+1,f
  3049     0736  0CF2               	rrf	___lmul@multiplier,f
  3050     0737  3EFF               	addlw	-1
  3051     0738  1D03               	skipz
  3052     0739  2F32               	goto	u2225
  3053     073A  0875               	movf	___lmul@multiplier+3,w
  3054     073B  0474               	iorwf	___lmul@multiplier+2,w
  3055     073C  0473               	iorwf	___lmul@multiplier+1,w
  3056     073D  0472               	iorwf	___lmul@multiplier,w
  3057     073E  1D03               	skipz
  3058     073F  2F41               	goto	u2231
  3059     0740  2F42               	goto	u2230
  3060     0741                     u2231:
  3061     0741  2F0D               	goto	l2081
  3062     0742                     u2230:
  3063     0742                     l2089:
  3064     0742  0824               	movf	___lmul@product+3,w
  3065     0743  00F5               	movwf	?___lmul+3
  3066     0744  0823               	movf	___lmul@product+2,w
  3067     0745  00F4               	movwf	?___lmul+2
  3068     0746  0822               	movf	___lmul@product+1,w
  3069     0747  00F3               	movwf	?___lmul+1
  3070     0748  0821               	movf	___lmul@product,w
  3071     0749  00F2               	movwf	?___lmul
  3072     074A                     l314:
  3073     074A  0008               	return
  3074     074B                     __end_of___lmul:
  3075                           
  3076                           	psect	text14
  3077     045B                     __ptext14:	
  3078 ;; *************** function ___aldiv *****************
  3079 ;; Defined at:
  3080 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\aldiv.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  divisor         4    5[BANK0 ] long 
  3083 ;;  dividend        4    9[BANK0 ] long 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  quotient        4   16[BANK0 ] long 
  3086 ;;  sign            1   15[BANK0 ] unsigned char 
  3087 ;;  counter         1   14[BANK0 ] unsigned char 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  4    5[BANK0 ] long 
  3090 ;; Registers used:
  3091 ;;		wreg, status,2, status,0
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3097 ;;      Params:         0       8       0       0       0
  3098 ;;      Locals:         0       6       0       0       0
  3099 ;;      Temps:          0       1       0       0       0
  3100 ;;      Totals:         0      15       0       0       0
  3101 ;;Total ram usage:       15 bytes
  3102 ;; Hardware stack levels used: 1
  3103 ;; Hardware stack levels required when called: 1
  3104 ;; This function calls:
  3105 ;;		Nothing
  3106 ;; This function is called by:
  3107 ;;		_main
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111     045B                     ___aldiv:	
  3112                           ;psect for function ___aldiv
  3113                           
  3114     045B                     l2093:	
  3115                           ;incstack = 0
  3116                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3117                           
  3118     045B  1283               	bcf	3,5	;RP0=0, select bank0
  3119     045C  1303               	bcf	3,6	;RP1=0, select bank0
  3120     045D  01AF               	clrf	___aldiv@sign
  3121     045E                     l2095:
  3122     045E  1FA8               	btfss	___aldiv@divisor+3,7
  3123     045F  2C61               	goto	u2241
  3124     0460  2C62               	goto	u2240
  3125     0461                     u2241:
  3126     0461  2C6F               	goto	l365
  3127     0462                     u2240:
  3128     0462                     l2097:
  3129     0462  09A5               	comf	___aldiv@divisor,f
  3130     0463  09A6               	comf	___aldiv@divisor+1,f
  3131     0464  09A7               	comf	___aldiv@divisor+2,f
  3132     0465  09A8               	comf	___aldiv@divisor+3,f
  3133     0466  0AA5               	incf	___aldiv@divisor,f
  3134     0467  1903               	skipnz
  3135     0468  0AA6               	incf	___aldiv@divisor+1,f
  3136     0469  1903               	skipnz
  3137     046A  0AA7               	incf	___aldiv@divisor+2,f
  3138     046B  1903               	skipnz
  3139     046C  0AA8               	incf	___aldiv@divisor+3,f
  3140     046D  3001               	movlw	1
  3141     046E  00AF               	movwf	___aldiv@sign
  3142     046F                     l365:
  3143     046F  1FAC               	btfss	___aldiv@dividend+3,7
  3144     0470  2C72               	goto	u2251
  3145     0471  2C73               	goto	u2250
  3146     0472                     u2251:
  3147     0472  2C80               	goto	l2103
  3148     0473                     u2250:
  3149     0473                     l2099:
  3150     0473  09A9               	comf	___aldiv@dividend,f
  3151     0474  09AA               	comf	___aldiv@dividend+1,f
  3152     0475  09AB               	comf	___aldiv@dividend+2,f
  3153     0476  09AC               	comf	___aldiv@dividend+3,f
  3154     0477  0AA9               	incf	___aldiv@dividend,f
  3155     0478  1903               	skipnz
  3156     0479  0AAA               	incf	___aldiv@dividend+1,f
  3157     047A  1903               	skipnz
  3158     047B  0AAB               	incf	___aldiv@dividend+2,f
  3159     047C  1903               	skipnz
  3160     047D  0AAC               	incf	___aldiv@dividend+3,f
  3161     047E                     l2101:
  3162     047E  3001               	movlw	1
  3163     047F  06AF               	xorwf	___aldiv@sign,f
  3164     0480                     l2103:
  3165     0480  3000               	movlw	0
  3166     0481  00B3               	movwf	___aldiv@quotient+3
  3167     0482  3000               	movlw	0
  3168     0483  00B2               	movwf	___aldiv@quotient+2
  3169     0484  3000               	movlw	0
  3170     0485  00B1               	movwf	___aldiv@quotient+1
  3171     0486  3000               	movlw	0
  3172     0487  00B0               	movwf	___aldiv@quotient
  3173     0488                     l2105:
  3174     0488  0828               	movf	___aldiv@divisor+3,w
  3175     0489  0427               	iorwf	___aldiv@divisor+2,w
  3176     048A  0426               	iorwf	___aldiv@divisor+1,w
  3177     048B  0425               	iorwf	___aldiv@divisor,w
  3178     048C  1903               	skipnz
  3179     048D  2C8F               	goto	u2261
  3180     048E  2C90               	goto	u2260
  3181     048F                     u2261:
  3182     048F  2CDB               	goto	l2125
  3183     0490                     u2260:
  3184     0490                     l2107:
  3185     0490  3001               	movlw	1
  3186     0491  00AE               	movwf	___aldiv@counter
  3187     0492  2C9E               	goto	l2111
  3188     0493                     l2109:
  3189     0493  3001               	movlw	1
  3190     0494  00AD               	movwf	??___aldiv
  3191     0495                     u2275:
  3192     0495  1003               	clrc
  3193     0496  0DA5               	rlf	___aldiv@divisor,f
  3194     0497  0DA6               	rlf	___aldiv@divisor+1,f
  3195     0498  0DA7               	rlf	___aldiv@divisor+2,f
  3196     0499  0DA8               	rlf	___aldiv@divisor+3,f
  3197     049A  0BAD               	decfsz	??___aldiv,f
  3198     049B  2C95               	goto	u2275
  3199     049C  3001               	movlw	1
  3200     049D  07AE               	addwf	___aldiv@counter,f
  3201     049E                     l2111:
  3202     049E  1FA8               	btfss	___aldiv@divisor+3,7
  3203     049F  2CA1               	goto	u2281
  3204     04A0  2CA2               	goto	u2280
  3205     04A1                     u2281:
  3206     04A1  2C93               	goto	l2109
  3207     04A2                     u2280:
  3208     04A2                     l2113:
  3209     04A2  3001               	movlw	1
  3210     04A3  00AD               	movwf	??___aldiv
  3211     04A4                     u2295:
  3212     04A4  1003               	clrc
  3213     04A5  0DB0               	rlf	___aldiv@quotient,f
  3214     04A6  0DB1               	rlf	___aldiv@quotient+1,f
  3215     04A7  0DB2               	rlf	___aldiv@quotient+2,f
  3216     04A8  0DB3               	rlf	___aldiv@quotient+3,f
  3217     04A9  0BAD               	decfsz	??___aldiv,f
  3218     04AA  2CA4               	goto	u2295
  3219     04AB                     l2115:
  3220     04AB  0828               	movf	___aldiv@divisor+3,w
  3221     04AC  022C               	subwf	___aldiv@dividend+3,w
  3222     04AD  1D03               	skipz
  3223     04AE  2CB9               	goto	u2305
  3224     04AF  0827               	movf	___aldiv@divisor+2,w
  3225     04B0  022B               	subwf	___aldiv@dividend+2,w
  3226     04B1  1D03               	skipz
  3227     04B2  2CB9               	goto	u2305
  3228     04B3  0826               	movf	___aldiv@divisor+1,w
  3229     04B4  022A               	subwf	___aldiv@dividend+1,w
  3230     04B5  1D03               	skipz
  3231     04B6  2CB9               	goto	u2305
  3232     04B7  0825               	movf	___aldiv@divisor,w
  3233     04B8  0229               	subwf	___aldiv@dividend,w
  3234     04B9                     u2305:
  3235     04B9  1C03               	skipc
  3236     04BA  2CBC               	goto	u2301
  3237     04BB  2CBD               	goto	u2300
  3238     04BC                     u2301:
  3239     04BC  2CCC               	goto	l2121
  3240     04BD                     u2300:
  3241     04BD                     l2117:
  3242     04BD  0825               	movf	___aldiv@divisor,w
  3243     04BE  02A9               	subwf	___aldiv@dividend,f
  3244     04BF  0826               	movf	___aldiv@divisor+1,w
  3245     04C0  1C03               	skipc
  3246     04C1  0F26               	incfsz	___aldiv@divisor+1,w
  3247     04C2  02AA               	subwf	___aldiv@dividend+1,f
  3248     04C3  0827               	movf	___aldiv@divisor+2,w
  3249     04C4  1C03               	skipc
  3250     04C5  0F27               	incfsz	___aldiv@divisor+2,w
  3251     04C6  02AB               	subwf	___aldiv@dividend+2,f
  3252     04C7  0828               	movf	___aldiv@divisor+3,w
  3253     04C8  1C03               	skipc
  3254     04C9  0F28               	incfsz	___aldiv@divisor+3,w
  3255     04CA  02AC               	subwf	___aldiv@dividend+3,f
  3256     04CB                     l2119:
  3257     04CB  1430               	bsf	___aldiv@quotient,0
  3258     04CC                     l2121:
  3259     04CC  3001               	movlw	1
  3260     04CD                     u2315:
  3261     04CD  1003               	clrc
  3262     04CE  0CA8               	rrf	___aldiv@divisor+3,f
  3263     04CF  0CA7               	rrf	___aldiv@divisor+2,f
  3264     04D0  0CA6               	rrf	___aldiv@divisor+1,f
  3265     04D1  0CA5               	rrf	___aldiv@divisor,f
  3266     04D2  3EFF               	addlw	-1
  3267     04D3  1D03               	skipz
  3268     04D4  2CCD               	goto	u2315
  3269     04D5                     l2123:
  3270     04D5  3001               	movlw	1
  3271     04D6  02AE               	subwf	___aldiv@counter,f
  3272     04D7  1D03               	btfss	3,2
  3273     04D8  2CDA               	goto	u2321
  3274     04D9  2CDB               	goto	u2320
  3275     04DA                     u2321:
  3276     04DA  2CA2               	goto	l2113
  3277     04DB                     u2320:
  3278     04DB                     l2125:
  3279     04DB  082F               	movf	___aldiv@sign,w
  3280     04DC  1903               	btfsc	3,2
  3281     04DD  2CDF               	goto	u2331
  3282     04DE  2CE0               	goto	u2330
  3283     04DF                     u2331:
  3284     04DF  2CEB               	goto	l2129
  3285     04E0                     u2330:
  3286     04E0                     l2127:
  3287     04E0  09B0               	comf	___aldiv@quotient,f
  3288     04E1  09B1               	comf	___aldiv@quotient+1,f
  3289     04E2  09B2               	comf	___aldiv@quotient+2,f
  3290     04E3  09B3               	comf	___aldiv@quotient+3,f
  3291     04E4  0AB0               	incf	___aldiv@quotient,f
  3292     04E5  1903               	skipnz
  3293     04E6  0AB1               	incf	___aldiv@quotient+1,f
  3294     04E7  1903               	skipnz
  3295     04E8  0AB2               	incf	___aldiv@quotient+2,f
  3296     04E9  1903               	skipnz
  3297     04EA  0AB3               	incf	___aldiv@quotient+3,f
  3298     04EB                     l2129:
  3299     04EB  0833               	movf	___aldiv@quotient+3,w
  3300     04EC  00A8               	movwf	?___aldiv+3
  3301     04ED  0832               	movf	___aldiv@quotient+2,w
  3302     04EE  00A7               	movwf	?___aldiv+2
  3303     04EF  0831               	movf	___aldiv@quotient+1,w
  3304     04F0  00A6               	movwf	?___aldiv+1
  3305     04F1  0830               	movf	___aldiv@quotient,w
  3306     04F2  00A5               	movwf	?___aldiv
  3307     04F3                     l375:
  3308     04F3  0008               	return
  3309     04F4                     __end_of___aldiv:
  3310                           
  3311                           	psect	text15
  3312     0ED6                     __ptext15:	
  3313 ;; *************** function _TMR1_init *****************
  3314 ;; Defined at:
  3315 ;;		line 27 in file "main.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		None
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3329 ;;      Params:         0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0
  3331 ;;      Temps:          0       0       0       0       0
  3332 ;;      Totals:         0       0       0       0       0
  3333 ;;Total ram usage:        0 bytes
  3334 ;; Hardware stack levels used: 1
  3335 ;; Hardware stack levels required when called: 1
  3336 ;; This function calls:
  3337 ;;		Nothing
  3338 ;; This function is called by:
  3339 ;;		_main
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343     0ED6                     _TMR1_init:	
  3344                           ;psect for function _TMR1_init
  3345                           
  3346     0ED6                     l1605:	
  3347                           ;incstack = 0
  3348                           ; Regs used in _TMR1_init: []
  3349                           
  3350                           
  3351                           ;main.c: 29:     ADCON0 &= 0x83;
  3352     0ED6  3031               	movlw	49
  3353     0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  3354     0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  3355     0ED9  0090               	movwf	16	;volatile
  3356                           
  3357                           ;main.c: 30:     ADCON0 |= channel << 2;
  3358     0EDA  300B               	movlw	11
  3359     0EDB  008F               	movwf	15	;volatile
  3360                           
  3361                           ;main.c: 31:     _delay((unsigned long)((2)*(4000000/4000.0)));
  3362     0EDC  30DC               	movlw	220
  3363     0EDD  008E               	movwf	14	;volatile
  3364                           
  3365                           ;main.c: 32:     GO_nDONE = 1;
  3366     0EDE  1683               	bsf	3,5	;RP0=1, select bank1
  3367     0EDF  1303               	bcf	3,6	;RP1=0, select bank1
  3368     0EE0  140C               	bsf	12,0	;volatile
  3369                           
  3370                           ;main.c: 33:     while(GO_nDONE);
  3371     0EE1  170B               	bsf	11,6	;volatile
  3372                           
  3373                           ;main.c: 34:     return ((ADRESH<<8)+ADRESL);
  3374     0EE2  178B               	bsf	11,7	;volatile
  3375     0EE3                     l53:
  3376     0EE3  0008               	return
  3377     0EE4                     __end_of_TMR1_init:
  3378                           
  3379                           	psect	text16
  3380     0F2A                     __ptext16:	
  3381 ;; *************** function _LCD_puts *****************
  3382 ;; Defined at:
  3383 ;;		line 128 in file "lcd.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;  a               1    8[COMMON] PTR unsigned char 
  3386 ;;		 -> exec(6), 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  i               2    0[BANK0 ] int 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      void 
  3391 ;; Registers used:
  3392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3398 ;;      Params:         1       0       0       0       0
  3399 ;;      Locals:         0       2       0       0       0
  3400 ;;      Temps:          1       0       0       0       0
  3401 ;;      Totals:         2       2       0       0       0
  3402 ;;Total ram usage:        4 bytes
  3403 ;; Hardware stack levels used: 1
  3404 ;; Hardware stack levels required when called: 3
  3405 ;; This function calls:
  3406 ;;		_LCD_putc
  3407 ;; This function is called by:
  3408 ;;		_main
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412     0F2A                     _LCD_puts:	
  3413                           ;psect for function _LCD_puts
  3414                           
  3415     0F2A                     l2071:	
  3416                           ;incstack = 0
  3417                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3418                           
  3419                           
  3420                           ;lcd.c: 130:     for ( int i = 0; a[i] != '\0'; ++i ) {
  3421     0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  3422     0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  3423     0F2C  01A0               	clrf	LCD_puts@i
  3424     0F2D  01A1               	clrf	LCD_puts@i+1
  3425     0F2E  2F42               	goto	l2077
  3426     0F2F                     l2073:
  3427                           
  3428                           ;lcd.c: 131:         LCD_putc(a[i]);
  3429     0F2F  0820               	movf	LCD_puts@i,w
  3430     0F30  0778               	addwf	LCD_puts@a,w
  3431     0F31  00F9               	movwf	??_LCD_puts
  3432     0F32  0879               	movf	??_LCD_puts,w
  3433     0F33  0084               	movwf	4
  3434     0F34  0800               	movf	0,w
  3435     0F35  120A  118A  24F4  120A  158A  	fcall	_LCD_putc
  3436     0F3A                     l2075:
  3437                           
  3438                           ;lcd.c: 132:     }
  3439     0F3A  3001               	movlw	1
  3440     0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  3441     0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  3442     0F3D  07A0               	addwf	LCD_puts@i,f
  3443     0F3E  1803               	skipnc
  3444     0F3F  0AA1               	incf	LCD_puts@i+1,f
  3445     0F40  3000               	movlw	0
  3446     0F41  07A1               	addwf	LCD_puts@i+1,f
  3447     0F42                     l2077:
  3448     0F42  0820               	movf	LCD_puts@i,w
  3449     0F43  0778               	addwf	LCD_puts@a,w
  3450     0F44  00F9               	movwf	??_LCD_puts
  3451     0F45  0879               	movf	??_LCD_puts,w
  3452     0F46  0084               	movwf	4
  3453     0F47  1383               	bcf	3,7	;select IRP bank0
  3454     0F48  0800               	movf	0,w
  3455     0F49  1D03               	btfss	3,2
  3456     0F4A  2F4C               	goto	u2181
  3457     0F4B  2F4D               	goto	u2180
  3458     0F4C                     u2181:
  3459     0F4C  2F2F               	goto	l2073
  3460     0F4D                     u2180:
  3461     0F4D                     l208:
  3462     0F4D  0008               	return
  3463     0F4E                     __end_of_LCD_puts:
  3464                           
  3465                           	psect	text17
  3466     074B                     __ptext17:	
  3467 ;; *************** function _LCD_putrs *****************
  3468 ;; Defined at:
  3469 ;;		line 136 in file "lcd.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  a               2    8[COMMON] PTR const unsigned char 
  3472 ;;		 -> main@buffer1(10), STR_2(12), STR_1(6), 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  i               2    3[BANK0 ] int 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      void 
  3477 ;; Registers used:
  3478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3484 ;;      Params:         2       0       0       0       0
  3485 ;;      Locals:         0       2       0       0       0
  3486 ;;      Temps:          0       3       0       0       0
  3487 ;;      Totals:         2       5       0       0       0
  3488 ;;Total ram usage:        7 bytes
  3489 ;; Hardware stack levels used: 1
  3490 ;; Hardware stack levels required when called: 3
  3491 ;; This function calls:
  3492 ;;		_LCD_putc
  3493 ;; This function is called by:
  3494 ;;		_main
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498     074B                     _LCD_putrs:	
  3499                           ;psect for function _LCD_putrs
  3500                           
  3501     074B                     l2049:	
  3502                           ;incstack = 0
  3503                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3504                           
  3505                           
  3506                           ;lcd.c: 138:     for ( int i = 0; a[i] != '\0'; ++i ) {
  3507     074B  1283               	bcf	3,5	;RP0=0, select bank0
  3508     074C  1303               	bcf	3,6	;RP1=0, select bank0
  3509     074D  01A3               	clrf	LCD_putrs@i
  3510     074E  01A4               	clrf	LCD_putrs@i+1
  3511     074F  2F74               	goto	l2055
  3512     0750                     l2051:
  3513                           
  3514                           ;lcd.c: 139:         LCD_putc(a[i]);
  3515     0750  0823               	movf	LCD_putrs@i,w
  3516     0751  0778               	addwf	LCD_putrs@a,w
  3517     0752  00A1               	movwf	??_LCD_putrs+1
  3518     0753  0879               	movf	LCD_putrs@a+1,w
  3519     0754  00A0               	movwf	??_LCD_putrs
  3520     0755  1803               	skipnc
  3521     0756  0AA0               	incf	??_LCD_putrs,f
  3522     0757  1FA3               	btfss	LCD_putrs@i,7
  3523     0758  2F5A               	goto	u2150
  3524     0759  03A0               	decf	??_LCD_putrs,f
  3525     075A                     u2150:
  3526     075A  1283               	bcf	3,5	;RP0=0, select bank0
  3527     075B  1303               	bcf	3,6	;RP1=0, select bank0
  3528     075C  0820               	movf	??_LCD_putrs,w
  3529     075D  00A2               	movwf	??_LCD_putrs+2
  3530     075E  0822               	movf	??_LCD_putrs+2,w
  3531     075F  00FF               	movwf	btemp+1
  3532     0760  0821               	movf	??_LCD_putrs+1,w
  3533     0761  0084               	movwf	4
  3534     0762  120A  158A  2000  120A  118A  	fcall	stringtab
  3535     0767  120A  118A  24F4  120A  118A  	fcall	_LCD_putc
  3536     076C                     l2053:
  3537                           
  3538                           ;lcd.c: 140:     }
  3539     076C  3001               	movlw	1
  3540     076D  1283               	bcf	3,5	;RP0=0, select bank0
  3541     076E  1303               	bcf	3,6	;RP1=0, select bank0
  3542     076F  07A3               	addwf	LCD_putrs@i,f
  3543     0770  1803               	skipnc
  3544     0771  0AA4               	incf	LCD_putrs@i+1,f
  3545     0772  3000               	movlw	0
  3546     0773  07A4               	addwf	LCD_putrs@i+1,f
  3547     0774                     l2055:
  3548     0774  0823               	movf	LCD_putrs@i,w
  3549     0775  0778               	addwf	LCD_putrs@a,w
  3550     0776  00A1               	movwf	??_LCD_putrs+1
  3551     0777  0879               	movf	LCD_putrs@a+1,w
  3552     0778  00A0               	movwf	??_LCD_putrs
  3553     0779  1803               	skipnc
  3554     077A  0AA0               	incf	??_LCD_putrs,f
  3555     077B  1FA3               	btfss	LCD_putrs@i,7
  3556     077C  2F7E               	goto	u2160
  3557     077D  03A0               	decf	??_LCD_putrs,f
  3558     077E                     u2160:
  3559     077E  1283               	bcf	3,5	;RP0=0, select bank0
  3560     077F  1303               	bcf	3,6	;RP1=0, select bank0
  3561     0780  0820               	movf	??_LCD_putrs,w
  3562     0781  00A2               	movwf	??_LCD_putrs+2
  3563     0782  0822               	movf	??_LCD_putrs+2,w
  3564     0783  00FF               	movwf	btemp+1
  3565     0784  0821               	movf	??_LCD_putrs+1,w
  3566     0785  0084               	movwf	4
  3567     0786  120A  158A  2000  120A  118A  	fcall	stringtab
  3568     078B  3A00               	xorlw	0
  3569     078C  1D03               	skipz
  3570     078D  2F8F               	goto	u2171
  3571     078E  2F90               	goto	u2170
  3572     078F                     u2171:
  3573     078F  2F50               	goto	l2051
  3574     0790                     u2170:
  3575     0790                     l214:
  3576     0790  0008               	return
  3577     0791                     __end_of_LCD_putrs:
  3578                           
  3579                           	psect	text18
  3580     04F4                     __ptext18:	
  3581 ;; *************** function _LCD_putc *****************
  3582 ;; Defined at:
  3583 ;;		line 111 in file "lcd.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;  c               1    wreg     unsigned char 
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;  c               1    7[COMMON] unsigned char 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      void 
  3590 ;; Registers used:
  3591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3597 ;;      Params:         0       0       0       0       0
  3598 ;;      Locals:         1       0       0       0       0
  3599 ;;      Temps:          2       0       0       0       0
  3600 ;;      Totals:         3       0       0       0       0
  3601 ;;Total ram usage:        3 bytes
  3602 ;; Hardware stack levels used: 1
  3603 ;; Hardware stack levels required when called: 2
  3604 ;; This function calls:
  3605 ;;		_LCD_Out
  3606 ;; This function is called by:
  3607 ;;		_LCD_puts
  3608 ;;		_LCD_putrs
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612     04F4                     _LCD_putc:	
  3613                           ;psect for function _LCD_putc
  3614                           
  3615                           
  3616                           ;incstack = 0
  3617                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3618                           ;LCD_putc@c stored from wreg
  3619     04F4  00F7               	movwf	LCD_putc@c
  3620     04F5                     l1977:
  3621                           
  3622                           ;lcd.c: 113:    *(lcd.PORT) |= 1 << lcd.RS;
  3623     04F5  1683               	bsf	3,5	;RP0=1, select bank1
  3624     04F6  1303               	bcf	3,6	;RP1=0, select bank1
  3625     04F7  085E               	movf	_lcd^(0+128),w
  3626     04F8  0084               	movwf	4
  3627     04F9  1783               	bsf	3,7
  3628     04FA  1C5F               	btfss	(_lcd+1)^(0+128),0
  3629     04FB  1383               	bcf	3,7
  3630     04FC  3001               	movlw	1
  3631     04FD  00F5               	movwf	??_LCD_putc
  3632     04FE  0860               	movf	(_lcd^(0+128)+2),w
  3633     04FF  3907               	andlw	7
  3634     0500  3E01               	addlw	1
  3635     0501  2D04               	goto	u2044
  3636     0502                     u2045:
  3637     0502  1003               	clrc
  3638     0503  0DF5               	rlf	??_LCD_putc,f
  3639     0504                     u2044:
  3640     0504  3EFF               	addlw	-1
  3641     0505  1D03               	skipz
  3642     0506  2D02               	goto	u2045
  3643     0507  0875               	movf	??_LCD_putc,w
  3644     0508  0480               	iorwf	0,f
  3645     0509                     l1979:
  3646                           
  3647                           ;lcd.c: 114:     LCD_Out((c & 0xF0) >> 4);
  3648     0509  0877               	movf	LCD_putc@c,w
  3649     050A  00F5               	movwf	??_LCD_putc
  3650     050B  3004               	movlw	4
  3651     050C                     u2055:
  3652     050C  1003               	clrc
  3653     050D  0CF5               	rrf	??_LCD_putc,f
  3654     050E  3EFF               	addlw	-1
  3655     050F  1D03               	skipz
  3656     0510  2D0C               	goto	u2055
  3657     0511  0875               	movf	??_LCD_putc,w
  3658     0512  390F               	andlw	15
  3659     0513  120A  118A  21A3  120A  118A  	fcall	_LCD_Out
  3660     0518                     l1981:
  3661                           
  3662                           ;lcd.c: 116:     *(lcd.PORT) |= 1 << lcd.EN;
  3663     0518  1683               	bsf	3,5	;RP0=1, select bank1
  3664     0519  1303               	bcf	3,6	;RP1=0, select bank1
  3665     051A  085E               	movf	_lcd^(0+128),w
  3666     051B  0084               	movwf	4
  3667     051C  1783               	bsf	3,7
  3668     051D  1C5F               	btfss	(_lcd+1)^(0+128),0
  3669     051E  1383               	bcf	3,7
  3670     051F  3001               	movlw	1
  3671     0520  00F5               	movwf	??_LCD_putc
  3672     0521  0C60               	rrf	(_lcd^(0+128)+2),w
  3673     0522  00F6               	movwf	??_LCD_putc+1
  3674     0523  0CF6               	rrf	??_LCD_putc+1,f
  3675     0524  0C76               	rrf	??_LCD_putc+1,w
  3676     0525  3907               	andlw	7
  3677     0526  3E01               	addlw	1
  3678     0527  2D2A               	goto	u2064
  3679     0528                     u2065:
  3680     0528  1003               	clrc
  3681     0529  0DF5               	rlf	??_LCD_putc,f
  3682     052A                     u2064:
  3683     052A  3EFF               	addlw	-1
  3684     052B  1D03               	skipz
  3685     052C  2D28               	goto	u2065
  3686     052D  0875               	movf	??_LCD_putc,w
  3687     052E  0480               	iorwf	0,f
  3688     052F                     l1983:
  3689                           
  3690                           ;lcd.c: 117:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3691     052F  300D               	movlw	13
  3692     0530  00F5               	movwf	??_LCD_putc
  3693     0531                     u2347:
  3694     0531  0BF5               	decfsz	??_LCD_putc,f
  3695     0532  2D31               	goto	u2347
  3696     0533                     l1985:
  3697                           
  3698                           ;lcd.c: 118:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3699     0533  1683               	bsf	3,5	;RP0=1, select bank1
  3700     0534  1303               	bcf	3,6	;RP1=0, select bank1
  3701     0535  085E               	movf	_lcd^(0+128),w
  3702     0536  0084               	movwf	4
  3703     0537  1783               	bsf	3,7
  3704     0538  1C5F               	btfss	(_lcd+1)^(0+128),0
  3705     0539  1383               	bcf	3,7
  3706     053A  3001               	movlw	1
  3707     053B  00F5               	movwf	??_LCD_putc
  3708     053C  0C60               	rrf	(_lcd^(0+128)+2),w
  3709     053D  00F6               	movwf	??_LCD_putc+1
  3710     053E  0CF6               	rrf	??_LCD_putc+1,f
  3711     053F  0C76               	rrf	??_LCD_putc+1,w
  3712     0540  3907               	andlw	7
  3713     0541  3E01               	addlw	1
  3714     0542  2D45               	goto	u2074
  3715     0543                     u2075:
  3716     0543  1003               	clrc
  3717     0544  0DF5               	rlf	??_LCD_putc,f
  3718     0545                     u2074:
  3719     0545  3EFF               	addlw	-1
  3720     0546  1D03               	skipz
  3721     0547  2D43               	goto	u2075
  3722     0548  0875               	movf	??_LCD_putc,w
  3723     0549  3AFF               	xorlw	255
  3724     054A  0580               	andwf	0,f
  3725     054B                     l1987:
  3726                           
  3727                           ;lcd.c: 120:     LCD_Out(c & 0x0F);
  3728     054B  0877               	movf	LCD_putc@c,w
  3729     054C  390F               	andlw	15
  3730     054D  120A  118A  21A3  120A  118A  	fcall	_LCD_Out
  3731     0552                     l1989:
  3732                           
  3733                           ;lcd.c: 122:     *(lcd.PORT) |= 1 << lcd.EN;
  3734     0552  1683               	bsf	3,5	;RP0=1, select bank1
  3735     0553  1303               	bcf	3,6	;RP1=0, select bank1
  3736     0554  085E               	movf	_lcd^(0+128),w
  3737     0555  0084               	movwf	4
  3738     0556  1783               	bsf	3,7
  3739     0557  1C5F               	btfss	(_lcd+1)^(0+128),0
  3740     0558  1383               	bcf	3,7
  3741     0559  3001               	movlw	1
  3742     055A  00F5               	movwf	??_LCD_putc
  3743     055B  0C60               	rrf	(_lcd^(0+128)+2),w
  3744     055C  00F6               	movwf	??_LCD_putc+1
  3745     055D  0CF6               	rrf	??_LCD_putc+1,f
  3746     055E  0C76               	rrf	??_LCD_putc+1,w
  3747     055F  3907               	andlw	7
  3748     0560  3E01               	addlw	1
  3749     0561  2D64               	goto	u2084
  3750     0562                     u2085:
  3751     0562  1003               	clrc
  3752     0563  0DF5               	rlf	??_LCD_putc,f
  3753     0564                     u2084:
  3754     0564  3EFF               	addlw	-1
  3755     0565  1D03               	skipz
  3756     0566  2D62               	goto	u2085
  3757     0567  0875               	movf	??_LCD_putc,w
  3758     0568  0480               	iorwf	0,f
  3759                           
  3760                           ;lcd.c: 123:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3761     0569  300D               	movlw	13
  3762     056A  00F5               	movwf	??_LCD_putc
  3763     056B                     u2357:
  3764     056B  0BF5               	decfsz	??_LCD_putc,f
  3765     056C  2D6B               	goto	u2357
  3766     056D                     l1991:
  3767                           
  3768                           ;lcd.c: 124:     *(lcd.PORT) &= ~(1 << lcd.EN);
  3769     056D  1683               	bsf	3,5	;RP0=1, select bank1
  3770     056E  1303               	bcf	3,6	;RP1=0, select bank1
  3771     056F  085E               	movf	_lcd^(0+128),w
  3772     0570  0084               	movwf	4
  3773     0571  1783               	bsf	3,7
  3774     0572  1C5F               	btfss	(_lcd+1)^(0+128),0
  3775     0573  1383               	bcf	3,7
  3776     0574  3001               	movlw	1
  3777     0575  00F5               	movwf	??_LCD_putc
  3778     0576  0C60               	rrf	(_lcd^(0+128)+2),w
  3779     0577  00F6               	movwf	??_LCD_putc+1
  3780     0578  0CF6               	rrf	??_LCD_putc+1,f
  3781     0579  0C76               	rrf	??_LCD_putc+1,w
  3782     057A  3907               	andlw	7
  3783     057B  3E01               	addlw	1
  3784     057C  2D7F               	goto	u2094
  3785     057D                     u2095:
  3786     057D  1003               	clrc
  3787     057E  0DF5               	rlf	??_LCD_putc,f
  3788     057F                     u2094:
  3789     057F  3EFF               	addlw	-1
  3790     0580  1D03               	skipz
  3791     0581  2D7D               	goto	u2095
  3792     0582  0875               	movf	??_LCD_putc,w
  3793     0583  3AFF               	xorlw	255
  3794     0584  0580               	andwf	0,f
  3795     0585                     l202:
  3796     0585  0008               	return
  3797     0586                     __end_of_LCD_putc:
  3798                           
  3799                           	psect	text19
  3800     030F                     __ptext19:	
  3801 ;; *************** function _LCD_Init *****************
  3802 ;; Defined at:
  3803 ;;		line 53 in file "lcd.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  display         5    0[BANK0 ] struct .
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  cmd             1    5[BANK0 ] unsigned char 
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      _Bool 
  3810 ;; Registers used:
  3811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3817 ;;      Params:         0       5       0       0       0
  3818 ;;      Locals:         0       1       0       0       0
  3819 ;;      Temps:          2       0       0       0       0
  3820 ;;      Totals:         2       6       0       0       0
  3821 ;;Total ram usage:        8 bytes
  3822 ;; Hardware stack levels used: 1
  3823 ;; Hardware stack levels required when called: 3
  3824 ;; This function calls:
  3825 ;;		_LCD_Write
  3826 ;; This function is called by:
  3827 ;;		_main
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831     030F                     _LCD_Init:	
  3832                           ;psect for function _LCD_Init
  3833                           
  3834     030F                     l2003:	
  3835                           ;incstack = 0
  3836                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3837                           
  3838                           
  3839                           ;lcd.c: 55:     lcd = display;
  3840     030F  30DE               	movlw	_lcd& (0+255)
  3841     0310  0084               	movwf	4
  3842     0311  1283               	bcf	3,5	;RP0=0, select bank0
  3843     0312  1303               	bcf	3,6	;RP1=0, select bank0
  3844     0313  0820               	movf	LCD_Init@display,w
  3845     0314  1383               	bcf	3,7	;select IRP bank1
  3846     0315  0080               	movwf	0
  3847     0316  0A84               	incf	4,f
  3848     0317  0821               	movf	LCD_Init@display+1,w
  3849     0318  0080               	movwf	0
  3850     0319  0A84               	incf	4,f
  3851     031A  0822               	movf	LCD_Init@display+2,w
  3852     031B  0080               	movwf	0
  3853     031C  0A84               	incf	4,f
  3854     031D  0823               	movf	LCD_Init@display+3,w
  3855     031E  0080               	movwf	0
  3856     031F  0A84               	incf	4,f
  3857     0320  0824               	movf	LCD_Init@display+4,w
  3858     0321  0080               	movwf	0
  3859     0322                     l2005:
  3860                           
  3861                           ;lcd.c: 64:     if ( lcd.PORT == &PORTA ) {
  3862     0322  3000               	movlw	0
  3863     0323  1683               	bsf	3,5	;RP0=1, select bank1
  3864     0324  1303               	bcf	3,6	;RP1=0, select bank1
  3865     0325  065F               	xorwf	(_lcd+1)^(0+128),w
  3866     0326  1D03               	skipz
  3867     0327  2B2A               	goto	u2115
  3868     0328  3005               	movlw	5
  3869     0329  065E               	xorwf	_lcd^(0+128),w
  3870     032A                     u2115:
  3871     032A  1D03               	skipz
  3872     032B  2B2D               	goto	u2111
  3873     032C  2B2E               	goto	u2110
  3874     032D                     u2111:
  3875     032D  2B30               	goto	l2009
  3876     032E                     u2110:
  3877     032E                     l2007:
  3878                           
  3879                           ;lcd.c: 65:         TRISA = 0x00;
  3880     032E  0185               	clrf	5	;volatile
  3881                           
  3882                           ;lcd.c: 66:     }
  3883     032F  2B47               	goto	l2017
  3884     0330                     l2009:
  3885     0330  3000               	movlw	0
  3886     0331  065F               	xorwf	(_lcd+1)^(0+128),w
  3887     0332  1D03               	skipz
  3888     0333  2B36               	goto	u2125
  3889     0334  3006               	movlw	6
  3890     0335  065E               	xorwf	_lcd^(0+128),w
  3891     0336                     u2125:
  3892     0336  1D03               	skipz
  3893     0337  2B39               	goto	u2121
  3894     0338  2B3A               	goto	u2120
  3895     0339                     u2121:
  3896     0339  2B3C               	goto	l2013
  3897     033A                     u2120:
  3898     033A                     l2011:
  3899                           
  3900                           ;lcd.c: 68:         TRISB = 0x00;
  3901     033A  0186               	clrf	6	;volatile
  3902                           
  3903                           ;lcd.c: 69:     }
  3904     033B  2B47               	goto	l2017
  3905     033C                     l2013:
  3906     033C  3000               	movlw	0
  3907     033D  065F               	xorwf	(_lcd+1)^(0+128),w
  3908     033E  1D03               	skipz
  3909     033F  2B42               	goto	u2135
  3910     0340  3007               	movlw	7
  3911     0341  065E               	xorwf	_lcd^(0+128),w
  3912     0342                     u2135:
  3913     0342  1D03               	skipz
  3914     0343  2B45               	goto	u2131
  3915     0344  2B46               	goto	u2130
  3916     0345                     u2131:
  3917     0345  2BBA               	goto	l186
  3918     0346                     u2130:
  3919     0346                     l2015:
  3920                           
  3921                           ;lcd.c: 71:         TRISC = 0x00;
  3922     0346  0187               	clrf	7	;volatile
  3923     0347                     l2017:	
  3924                           ;lcd.c: 72:     }
  3925                           
  3926                           
  3927                           ;lcd.c: 86:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3928     0347  301A               	movlw	26
  3929     0348  00F9               	movwf	??_LCD_Init+1
  3930     0349  30F8               	movlw	248
  3931     034A  00F8               	movwf	??_LCD_Init
  3932     034B                     u2367:
  3933     034B  0BF8               	decfsz	??_LCD_Init,f
  3934     034C  2B4B               	goto	u2367
  3935     034D  0BF9               	decfsz	??_LCD_Init+1,f
  3936     034E  2B4B               	goto	u2367
  3937     034F  0000               	nop
  3938     0350                     l2019:
  3939                           
  3940                           ;lcd.c: 89:     LCD_Write(0x03);
  3941     0350  3003               	movlw	3
  3942     0351  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  3943     0356                     l2021:
  3944                           
  3945                           ;lcd.c: 90:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3946     0356  3007               	movlw	7
  3947     0357  00F9               	movwf	??_LCD_Init+1
  3948     0358  307D               	movlw	125
  3949     0359  00F8               	movwf	??_LCD_Init
  3950     035A                     u2377:
  3951     035A  0BF8               	decfsz	??_LCD_Init,f
  3952     035B  2B5A               	goto	u2377
  3953     035C  0BF9               	decfsz	??_LCD_Init+1,f
  3954     035D  2B5A               	goto	u2377
  3955                           
  3956                           ;lcd.c: 91:     LCD_Write(0x03);
  3957     035E  3003               	movlw	3
  3958     035F  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  3959     0364                     l2023:
  3960                           
  3961                           ;lcd.c: 92:     _delay((unsigned long)((16)*(4000000/4000.0)));
  3962     0364  3015               	movlw	21
  3963     0365  00F9               	movwf	??_LCD_Init+1
  3964     0366  30C6               	movlw	198
  3965     0367  00F8               	movwf	??_LCD_Init
  3966     0368                     u2387:
  3967     0368  0BF8               	decfsz	??_LCD_Init,f
  3968     0369  2B68               	goto	u2387
  3969     036A  0BF9               	decfsz	??_LCD_Init+1,f
  3970     036B  2B68               	goto	u2387
  3971     036C  0000               	nop
  3972     036D                     l2025:
  3973                           
  3974                           ;lcd.c: 93:     LCD_Write(0x03);
  3975     036D  3003               	movlw	3
  3976     036E  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  3977     0373                     l2027:
  3978                           
  3979                           ;lcd.c: 96:     LCD_Write(0x02);
  3980     0373  3002               	movlw	2
  3981     0374  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  3982     0379                     l2029:
  3983     0379  3002               	movlw	2
  3984     037A  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  3985     037F                     l2031:
  3986     037F  3008               	movlw	8
  3987     0380  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  3988     0385                     l2033:
  3989     0385  3000               	movlw	0
  3990     0386  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  3991     038B                     l2035:
  3992     038B  3006               	movlw	6
  3993     038C  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  3994     0391                     l2037:
  3995     0391  3008               	movlw	8
  3996     0392  1283               	bcf	3,5	;RP0=0, select bank0
  3997     0393  1303               	bcf	3,6	;RP1=0, select bank0
  3998     0394  00A5               	movwf	LCD_Init@cmd
  3999     0395                     l2039:
  4000     0395  1525               	bsf	LCD_Init@cmd,2
  4001     0396                     l2045:
  4002     0396  0825               	movf	LCD_Init@cmd,w
  4003     0397  00F8               	movwf	??_LCD_Init
  4004     0398  3004               	movlw	4
  4005     0399                     u2145:
  4006     0399  1003               	clrc
  4007     039A  0CF8               	rrf	??_LCD_Init,f
  4008     039B  3EFF               	addlw	-1
  4009     039C  1D03               	skipz
  4010     039D  2B99               	goto	u2145
  4011     039E  0878               	movf	??_LCD_Init,w
  4012     039F  390F               	andlw	15
  4013     03A0  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  4014     03A5  1283               	bcf	3,5	;RP0=0, select bank0
  4015     03A6  1303               	bcf	3,6	;RP1=0, select bank0
  4016     03A7  0825               	movf	LCD_Init@cmd,w
  4017     03A8  390F               	andlw	15
  4018     03A9  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  4019     03AE                     l198:	
  4020                           ;lcd.c: 106:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  4021                           
  4022     03AE  3000               	movlw	0
  4023     03AF  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  4024     03B4  3001               	movlw	1
  4025     03B5  120A  118A  265B  120A  118A  	fcall	_LCD_Write
  4026     03BA                     l186:
  4027     03BA  0008               	return
  4028     03BB                     __end_of_LCD_Init:
  4029                           
  4030                           	psect	text20
  4031     065B                     __ptext20:	
  4032 ;; *************** function _LCD_Write *****************
  4033 ;; Defined at:
  4034 ;;		line 42 in file "lcd.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  c               1    wreg     unsigned char 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  c               1    7[COMMON] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      void 
  4041 ;; Registers used:
  4042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4048 ;;      Params:         0       0       0       0       0
  4049 ;;      Locals:         1       0       0       0       0
  4050 ;;      Temps:          2       0       0       0       0
  4051 ;;      Totals:         3       0       0       0       0
  4052 ;;Total ram usage:        3 bytes
  4053 ;; Hardware stack levels used: 1
  4054 ;; Hardware stack levels required when called: 2
  4055 ;; This function calls:
  4056 ;;		_LCD_Out
  4057 ;; This function is called by:
  4058 ;;		_main
  4059 ;;		_LCD_Init
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063     065B                     _LCD_Write:	
  4064                           ;psect for function _LCD_Write
  4065                           
  4066                           
  4067                           ;incstack = 0
  4068                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4069                           ;LCD_Write@c stored from wreg
  4070     065B  00F7               	movwf	LCD_Write@c
  4071     065C                     l1967:
  4072                           
  4073                           ;lcd.c: 44:     *(lcd.PORT) &= ~(1 << lcd.RS);
  4074     065C  1683               	bsf	3,5	;RP0=1, select bank1
  4075     065D  1303               	bcf	3,6	;RP1=0, select bank1
  4076     065E  085E               	movf	_lcd^(0+128),w
  4077     065F  0084               	movwf	4
  4078     0660  1783               	bsf	3,7
  4079     0661  1C5F               	btfss	(_lcd+1)^(0+128),0
  4080     0662  1383               	bcf	3,7
  4081     0663  3001               	movlw	1
  4082     0664  00F5               	movwf	??_LCD_Write
  4083     0665  0860               	movf	(_lcd^(0+128)+2),w
  4084     0666  3907               	andlw	7
  4085     0667  3E01               	addlw	1
  4086     0668  2E6B               	goto	u2014
  4087     0669                     u2015:
  4088     0669  1003               	clrc
  4089     066A  0DF5               	rlf	??_LCD_Write,f
  4090     066B                     u2014:
  4091     066B  3EFF               	addlw	-1
  4092     066C  1D03               	skipz
  4093     066D  2E69               	goto	u2015
  4094     066E  0875               	movf	??_LCD_Write,w
  4095     066F  3AFF               	xorlw	255
  4096     0670  0580               	andwf	0,f
  4097     0671                     l1969:
  4098                           
  4099                           ;lcd.c: 45:     LCD_Out(c);
  4100     0671  0877               	movf	LCD_Write@c,w
  4101     0672  120A  118A  21A3  120A  118A  	fcall	_LCD_Out
  4102     0677                     l1971:
  4103                           
  4104                           ;lcd.c: 47:     *(lcd.PORT) |= 1 << lcd.EN;
  4105     0677  1683               	bsf	3,5	;RP0=1, select bank1
  4106     0678  1303               	bcf	3,6	;RP1=0, select bank1
  4107     0679  085E               	movf	_lcd^(0+128),w
  4108     067A  0084               	movwf	4
  4109     067B  1783               	bsf	3,7
  4110     067C  1C5F               	btfss	(_lcd+1)^(0+128),0
  4111     067D  1383               	bcf	3,7
  4112     067E  3001               	movlw	1
  4113     067F  00F5               	movwf	??_LCD_Write
  4114     0680  0C60               	rrf	(_lcd^(0+128)+2),w
  4115     0681  00F6               	movwf	??_LCD_Write+1
  4116     0682  0CF6               	rrf	??_LCD_Write+1,f
  4117     0683  0C76               	rrf	??_LCD_Write+1,w
  4118     0684  3907               	andlw	7
  4119     0685  3E01               	addlw	1
  4120     0686  2E89               	goto	u2024
  4121     0687                     u2025:
  4122     0687  1003               	clrc
  4123     0688  0DF5               	rlf	??_LCD_Write,f
  4124     0689                     u2024:
  4125     0689  3EFF               	addlw	-1
  4126     068A  1D03               	skipz
  4127     068B  2E87               	goto	u2025
  4128     068C  0875               	movf	??_LCD_Write,w
  4129     068D  0480               	iorwf	0,f
  4130     068E                     l1973:
  4131                           
  4132                           ;lcd.c: 48:     _delay((unsigned long)((4)*(4000000/4000.0)));
  4133     068E  3006               	movlw	6
  4134     068F  00F6               	movwf	??_LCD_Write+1
  4135     0690  3030               	movlw	48
  4136     0691  00F5               	movwf	??_LCD_Write
  4137     0692                     u2397:
  4138     0692  0BF5               	decfsz	??_LCD_Write,f
  4139     0693  2E92               	goto	u2397
  4140     0694  0BF6               	decfsz	??_LCD_Write+1,f
  4141     0695  2E92               	goto	u2397
  4142     0696  0000               	nop
  4143     0697                     l1975:
  4144                           
  4145                           ;lcd.c: 49:     *(lcd.PORT) &= ~(1 << lcd.EN);
  4146     0697  1683               	bsf	3,5	;RP0=1, select bank1
  4147     0698  1303               	bcf	3,6	;RP1=0, select bank1
  4148     0699  085E               	movf	_lcd^(0+128),w
  4149     069A  0084               	movwf	4
  4150     069B  1783               	bsf	3,7
  4151     069C  1C5F               	btfss	(_lcd+1)^(0+128),0
  4152     069D  1383               	bcf	3,7
  4153     069E  3001               	movlw	1
  4154     069F  00F5               	movwf	??_LCD_Write
  4155     06A0  0C60               	rrf	(_lcd^(0+128)+2),w
  4156     06A1  00F6               	movwf	??_LCD_Write+1
  4157     06A2  0CF6               	rrf	??_LCD_Write+1,f
  4158     06A3  0C76               	rrf	??_LCD_Write+1,w
  4159     06A4  3907               	andlw	7
  4160     06A5  3E01               	addlw	1
  4161     06A6  2EA9               	goto	u2034
  4162     06A7                     u2035:
  4163     06A7  1003               	clrc
  4164     06A8  0DF5               	rlf	??_LCD_Write,f
  4165     06A9                     u2034:
  4166     06A9  3EFF               	addlw	-1
  4167     06AA  1D03               	skipz
  4168     06AB  2EA7               	goto	u2035
  4169     06AC  0875               	movf	??_LCD_Write,w
  4170     06AD  3AFF               	xorlw	255
  4171     06AE  0580               	andwf	0,f
  4172     06AF                     l177:
  4173     06AF  0008               	return
  4174     06B0                     __end_of_LCD_Write:
  4175                           
  4176                           	psect	text21
  4177     01A3                     __ptext21:	
  4178 ;; *************** function _LCD_Out *****************
  4179 ;; Defined at:
  4180 ;;		line 10 in file "lcd.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  c               1    wreg     unsigned char 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  c               1    4[COMMON] unsigned char 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4194 ;;      Params:         0       0       0       0       0
  4195 ;;      Locals:         1       0       0       0       0
  4196 ;;      Temps:          2       0       0       0       0
  4197 ;;      Totals:         3       0       0       0       0
  4198 ;;Total ram usage:        3 bytes
  4199 ;; Hardware stack levels used: 1
  4200 ;; Hardware stack levels required when called: 1
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		_LCD_Write
  4205 ;;		_LCD_putc
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209     01A3                     _LCD_Out:	
  4210                           ;psect for function _LCD_Out
  4211                           
  4212                           
  4213                           ;incstack = 0
  4214                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  4215                           ;LCD_Out@c stored from wreg
  4216     01A3  00F4               	movwf	LCD_Out@c
  4217     01A4                     l1891:
  4218                           
  4219                           ;lcd.c: 12:     if ( c & 1 ){
  4220     01A4  1C74               	btfss	LCD_Out@c,0
  4221     01A5  29A7               	goto	u1851
  4222     01A6  29A8               	goto	u1850
  4223     01A7                     u1851:
  4224     01A7  29BD               	goto	l1895
  4225     01A8                     u1850:
  4226     01A8                     l1893:
  4227                           
  4228                           ;lcd.c: 13:         *(lcd.PORT) |= 1 << lcd.D4;
  4229     01A8  1683               	bsf	3,5	;RP0=1, select bank1
  4230     01A9  1303               	bcf	3,6	;RP1=0, select bank1
  4231     01AA  085E               	movf	_lcd^(0+128),w
  4232     01AB  0084               	movwf	4
  4233     01AC  1783               	bsf	3,7
  4234     01AD  1C5F               	btfss	(_lcd+1)^(0+128),0
  4235     01AE  1383               	bcf	3,7
  4236     01AF  3001               	movlw	1
  4237     01B0  00F2               	movwf	??_LCD_Out
  4238     01B1  0861               	movf	(_lcd^(0+128)+3),w
  4239     01B2  3907               	andlw	7
  4240     01B3  3E01               	addlw	1
  4241     01B4  29B7               	goto	u1864
  4242     01B5                     u1865:
  4243     01B5  1003               	clrc
  4244     01B6  0DF2               	rlf	??_LCD_Out,f
  4245     01B7                     u1864:
  4246     01B7  3EFF               	addlw	-1
  4247     01B8  1D03               	skipz
  4248     01B9  29B5               	goto	u1865
  4249     01BA  0872               	movf	??_LCD_Out,w
  4250     01BB  0480               	iorwf	0,f
  4251                           
  4252                           ;lcd.c: 14:     }
  4253     01BC  29D2               	goto	l1897
  4254     01BD                     l1895:
  4255                           
  4256                           ;lcd.c: 16:          *(lcd.PORT) &= ~(1 << lcd.D4);
  4257     01BD  1683               	bsf	3,5	;RP0=1, select bank1
  4258     01BE  1303               	bcf	3,6	;RP1=0, select bank1
  4259     01BF  085E               	movf	_lcd^(0+128),w
  4260     01C0  0084               	movwf	4
  4261     01C1  1783               	bsf	3,7
  4262     01C2  1C5F               	btfss	(_lcd+1)^(0+128),0
  4263     01C3  1383               	bcf	3,7
  4264     01C4  3001               	movlw	1
  4265     01C5  00F2               	movwf	??_LCD_Out
  4266     01C6  0861               	movf	(_lcd^(0+128)+3),w
  4267     01C7  3907               	andlw	7
  4268     01C8  3E01               	addlw	1
  4269     01C9  29CC               	goto	u1874
  4270     01CA                     u1875:
  4271     01CA  1003               	clrc
  4272     01CB  0DF2               	rlf	??_LCD_Out,f
  4273     01CC                     u1874:
  4274     01CC  3EFF               	addlw	-1
  4275     01CD  1D03               	skipz
  4276     01CE  29CA               	goto	u1875
  4277     01CF  0872               	movf	??_LCD_Out,w
  4278     01D0  3AFF               	xorlw	255
  4279     01D1  0580               	andwf	0,f
  4280     01D2                     l1897:
  4281                           
  4282                           ;lcd.c: 19:     if ( c & 2 ) {
  4283     01D2  1CF4               	btfss	LCD_Out@c,1
  4284     01D3  29D5               	goto	u1881
  4285     01D4  29D6               	goto	u1880
  4286     01D5                     u1881:
  4287     01D5  29EC               	goto	l1901
  4288     01D6                     u1880:
  4289     01D6                     l1899:
  4290                           
  4291                           ;lcd.c: 20:         *(lcd.PORT) |= 1 << lcd.D5;
  4292     01D6  085E               	movf	_lcd^(0+128),w
  4293     01D7  0084               	movwf	4
  4294     01D8  1783               	bsf	3,7
  4295     01D9  1C5F               	btfss	(_lcd+1)^(0+128),0
  4296     01DA  1383               	bcf	3,7
  4297     01DB  3001               	movlw	1
  4298     01DC  00F2               	movwf	??_LCD_Out
  4299     01DD  0C61               	rrf	(_lcd^(0+128)+3),w
  4300     01DE  00F3               	movwf	??_LCD_Out+1
  4301     01DF  0CF3               	rrf	??_LCD_Out+1,f
  4302     01E0  0C73               	rrf	??_LCD_Out+1,w
  4303     01E1  3907               	andlw	7
  4304     01E2  3E01               	addlw	1
  4305     01E3  29E6               	goto	u1894
  4306     01E4                     u1895:
  4307     01E4  1003               	clrc
  4308     01E5  0DF2               	rlf	??_LCD_Out,f
  4309     01E6                     u1894:
  4310     01E6  3EFF               	addlw	-1
  4311     01E7  1D03               	skipz
  4312     01E8  29E4               	goto	u1895
  4313     01E9  0872               	movf	??_LCD_Out,w
  4314     01EA  0480               	iorwf	0,f
  4315                           
  4316                           ;lcd.c: 21:     }
  4317     01EB  2A02               	goto	l1903
  4318     01EC                     l1901:
  4319                           
  4320                           ;lcd.c: 23:         *(lcd.PORT) &= ~(1 << lcd.D5);
  4321     01EC  085E               	movf	_lcd^(0+128),w
  4322     01ED  0084               	movwf	4
  4323     01EE  1783               	bsf	3,7
  4324     01EF  1C5F               	btfss	(_lcd+1)^(0+128),0
  4325     01F0  1383               	bcf	3,7
  4326     01F1  3001               	movlw	1
  4327     01F2  00F2               	movwf	??_LCD_Out
  4328     01F3  0C61               	rrf	(_lcd^(0+128)+3),w
  4329     01F4  00F3               	movwf	??_LCD_Out+1
  4330     01F5  0CF3               	rrf	??_LCD_Out+1,f
  4331     01F6  0C73               	rrf	??_LCD_Out+1,w
  4332     01F7  3907               	andlw	7
  4333     01F8  3E01               	addlw	1
  4334     01F9  29FC               	goto	u1904
  4335     01FA                     u1905:
  4336     01FA  1003               	clrc
  4337     01FB  0DF2               	rlf	??_LCD_Out,f
  4338     01FC                     u1904:
  4339     01FC  3EFF               	addlw	-1
  4340     01FD  1D03               	skipz
  4341     01FE  29FA               	goto	u1905
  4342     01FF  0872               	movf	??_LCD_Out,w
  4343     0200  3AFF               	xorlw	255
  4344     0201  0580               	andwf	0,f
  4345     0202                     l1903:
  4346                           
  4347                           ;lcd.c: 26:     if ( c & 4 ) {
  4348     0202  1D74               	btfss	LCD_Out@c,2
  4349     0203  2A05               	goto	u1911
  4350     0204  2A06               	goto	u1910
  4351     0205                     u1911:
  4352     0205  2A19               	goto	l1907
  4353     0206                     u1910:
  4354     0206                     l1905:
  4355                           
  4356                           ;lcd.c: 27:         *(lcd.PORT) |= 1 << lcd.D6;
  4357     0206  085E               	movf	_lcd^(0+128),w
  4358     0207  0084               	movwf	4
  4359     0208  1783               	bsf	3,7
  4360     0209  1C5F               	btfss	(_lcd+1)^(0+128),0
  4361     020A  1383               	bcf	3,7
  4362     020B  3001               	movlw	1
  4363     020C  00F2               	movwf	??_LCD_Out
  4364     020D  0862               	movf	(_lcd^(0+128)+4),w
  4365     020E  3907               	andlw	7
  4366     020F  3E01               	addlw	1
  4367     0210  2A13               	goto	u1924
  4368     0211                     u1925:
  4369     0211  1003               	clrc
  4370     0212  0DF2               	rlf	??_LCD_Out,f
  4371     0213                     u1924:
  4372     0213  3EFF               	addlw	-1
  4373     0214  1D03               	skipz
  4374     0215  2A11               	goto	u1925
  4375     0216  0872               	movf	??_LCD_Out,w
  4376     0217  0480               	iorwf	0,f
  4377                           
  4378                           ;lcd.c: 28:     }
  4379     0218  2A2C               	goto	l1909
  4380     0219                     l1907:
  4381                           
  4382                           ;lcd.c: 30:         *(lcd.PORT) &= ~(1 << lcd.D6);
  4383     0219  085E               	movf	_lcd^(0+128),w
  4384     021A  0084               	movwf	4
  4385     021B  1783               	bsf	3,7
  4386     021C  1C5F               	btfss	(_lcd+1)^(0+128),0
  4387     021D  1383               	bcf	3,7
  4388     021E  3001               	movlw	1
  4389     021F  00F2               	movwf	??_LCD_Out
  4390     0220  0862               	movf	(_lcd^(0+128)+4),w
  4391     0221  3907               	andlw	7
  4392     0222  3E01               	addlw	1
  4393     0223  2A26               	goto	u1934
  4394     0224                     u1935:
  4395     0224  1003               	clrc
  4396     0225  0DF2               	rlf	??_LCD_Out,f
  4397     0226                     u1934:
  4398     0226  3EFF               	addlw	-1
  4399     0227  1D03               	skipz
  4400     0228  2A24               	goto	u1935
  4401     0229  0872               	movf	??_LCD_Out,w
  4402     022A  3AFF               	xorlw	255
  4403     022B  0580               	andwf	0,f
  4404     022C                     l1909:
  4405                           
  4406                           ;lcd.c: 33:     if ( c & 8 ) {
  4407     022C  1DF4               	btfss	LCD_Out@c,3
  4408     022D  2A2F               	goto	u1941
  4409     022E  2A30               	goto	u1940
  4410     022F                     u1941:
  4411     022F  2A46               	goto	l1913
  4412     0230                     u1940:
  4413     0230                     l1911:
  4414                           
  4415                           ;lcd.c: 34:          *(lcd.PORT) |= 1 << lcd.D7;
  4416     0230  085E               	movf	_lcd^(0+128),w
  4417     0231  0084               	movwf	4
  4418     0232  1783               	bsf	3,7
  4419     0233  1C5F               	btfss	(_lcd+1)^(0+128),0
  4420     0234  1383               	bcf	3,7
  4421     0235  3001               	movlw	1
  4422     0236  00F2               	movwf	??_LCD_Out
  4423     0237  0C62               	rrf	(_lcd^(0+128)+4),w
  4424     0238  00F3               	movwf	??_LCD_Out+1
  4425     0239  0CF3               	rrf	??_LCD_Out+1,f
  4426     023A  0C73               	rrf	??_LCD_Out+1,w
  4427     023B  3907               	andlw	7
  4428     023C  3E01               	addlw	1
  4429     023D  2A40               	goto	u1954
  4430     023E                     u1955:
  4431     023E  1003               	clrc
  4432     023F  0DF2               	rlf	??_LCD_Out,f
  4433     0240                     u1954:
  4434     0240  3EFF               	addlw	-1
  4435     0241  1D03               	skipz
  4436     0242  2A3E               	goto	u1955
  4437     0243  0872               	movf	??_LCD_Out,w
  4438     0244  0480               	iorwf	0,f
  4439                           
  4440                           ;lcd.c: 35:     }
  4441     0245  2A5C               	goto	l174
  4442     0246                     l1913:
  4443                           
  4444                           ;lcd.c: 37:          *(lcd.PORT) &= ~(1 << lcd.D7);
  4445     0246  085E               	movf	_lcd^(0+128),w
  4446     0247  0084               	movwf	4
  4447     0248  1783               	bsf	3,7
  4448     0249  1C5F               	btfss	(_lcd+1)^(0+128),0
  4449     024A  1383               	bcf	3,7
  4450     024B  3001               	movlw	1
  4451     024C  00F2               	movwf	??_LCD_Out
  4452     024D  0C62               	rrf	(_lcd^(0+128)+4),w
  4453     024E  00F3               	movwf	??_LCD_Out+1
  4454     024F  0CF3               	rrf	??_LCD_Out+1,f
  4455     0250  0C73               	rrf	??_LCD_Out+1,w
  4456     0251  3907               	andlw	7
  4457     0252  3E01               	addlw	1
  4458     0253  2A56               	goto	u1964
  4459     0254                     u1965:
  4460     0254  1003               	clrc
  4461     0255  0DF2               	rlf	??_LCD_Out,f
  4462     0256                     u1964:
  4463     0256  3EFF               	addlw	-1
  4464     0257  1D03               	skipz
  4465     0258  2A54               	goto	u1965
  4466     0259  0872               	movf	??_LCD_Out,w
  4467     025A  3AFF               	xorlw	255
  4468     025B  0580               	andwf	0,f
  4469     025C                     l174:
  4470     025C  0008               	return
  4471     025D                     __end_of_LCD_Out:
  4472                           
  4473                           	psect	text22
  4474     0F73                     __ptext22:	
  4475 ;; *************** function _ADC_read *****************
  4476 ;; Defined at:
  4477 ;;		line 44 in file "main.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;  channel         1    wreg     unsigned char 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  channel         1    6[COMMON] unsigned char 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  2    2[COMMON] unsigned int 
  4484 ;; Registers used:
  4485 ;;		wreg, status,2, status,0
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4491 ;;      Params:         2       0       0       0       0
  4492 ;;      Locals:         1       0       0       0       0
  4493 ;;      Temps:          2       0       0       0       0
  4494 ;;      Totals:         5       0       0       0       0
  4495 ;;Total ram usage:        5 bytes
  4496 ;; Hardware stack levels used: 1
  4497 ;; Hardware stack levels required when called: 1
  4498 ;; This function calls:
  4499 ;;		Nothing
  4500 ;; This function is called by:
  4501 ;;		_main
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505     0F73                     _ADC_read:	
  4506                           ;psect for function _ADC_read
  4507                           
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4511                           ;ADC_read@channel stored from wreg
  4512     0F73  00F6               	movwf	ADC_read@channel
  4513     0F74                     l1615:
  4514                           
  4515                           ;main.c: 44:             timer++;;main.c: 45:             count = 0;;main.c: 46:        
      +                           }
  4516     0F74  2F75               	nop2	;2 cycle nop
  4517     0F75  2F76               	nop2	;2 cycle nop
  4518     0F76  0000               	nop
  4519     0F77                     l1617:
  4520                           
  4521                           ;main.c: 47: 
  4522     0F77  3083               	movlw	131
  4523     0F78  1283               	bcf	3,5	;RP0=0, select bank0
  4524     0F79  1303               	bcf	3,6	;RP1=0, select bank0
  4525     0F7A  059F               	andwf	31,f	;volatile
  4526                           
  4527                           ;main.c: 48: 
  4528     0F7B  0876               	movf	ADC_read@channel,w	;volatile
  4529     0F7C  00F4               	movwf	??_ADC_read
  4530     0F7D  3001               	movlw	1
  4531     0F7E                     u1485:
  4532     0F7E  1003               	clrc
  4533     0F7F  0DF4               	rlf	??_ADC_read,f
  4534     0F80  3EFF               	addlw	-1
  4535     0F81  1D03               	skipz
  4536     0F82  2F7E               	goto	u1485
  4537     0F83  1003               	clrc
  4538     0F84  0D74               	rlf	??_ADC_read,w
  4539     0F85  049F               	iorwf	31,f	;volatile
  4540     0F86                     l1619:
  4541                           
  4542                           ;main.c: 49:         TMR1H = 0xB;
  4543     0F86  3003               	movlw	3
  4544     0F87  00F5               	movwf	??_ADC_read+1
  4545     0F88  3097               	movlw	151
  4546     0F89  00F4               	movwf	??_ADC_read
  4547     0F8A                     u2407:
  4548     0F8A  0BF4               	decfsz	??_ADC_read,f
  4549     0F8B  2F8A               	goto	u2407
  4550     0F8C  0BF5               	decfsz	??_ADC_read+1,f
  4551     0F8D  2F8A               	goto	u2407
  4552     0F8E  2F8F               	nop2
  4553     0F8F                     l1621:
  4554                           
  4555                           ;main.c: 50:         TMR1L = 0xDC;
  4556     0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  4557     0F90  1303               	bcf	3,6	;RP1=0, select bank0
  4558     0F91  149F               	bsf	31,1	;volatile
  4559     0F92                     l59:	
  4560                           ;main.c: 51: 
  4561                           
  4562     0F92  189F               	btfsc	31,1	;volatile
  4563     0F93  2F95               	goto	u1491
  4564     0F94  2F96               	goto	u1490
  4565     0F95                     u1491:
  4566     0F95  2F92               	goto	l59
  4567     0F96                     u1490:
  4568     0F96                     l1623:
  4569                           
  4570                           ;main.c: 52:         TMR1IF = 0;
  4571     0F96  081E               	movf	30,w	;volatile
  4572     0F97  00F3               	movwf	?_ADC_read+1
  4573     0F98  1683               	bsf	3,5	;RP0=1, select bank1
  4574     0F99  1303               	bcf	3,6	;RP1=0, select bank1
  4575     0F9A  081E               	movf	30,w	;volatile
  4576     0F9B  00F2               	movwf	?_ADC_read
  4577     0F9C                     l62:
  4578     0F9C  0008               	return
  4579     0F9D                     __end_of_ADC_read:
  4580                           
  4581                           	psect	text23
  4582     0EC8                     __ptext23:	
  4583 ;; *************** function _ADC_init *****************
  4584 ;; Defined at:
  4585 ;;		line 37 in file "main.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		status,2
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4599 ;;      Params:         0       0       0       0       0
  4600 ;;      Locals:         0       0       0       0       0
  4601 ;;      Temps:          0       0       0       0       0
  4602 ;;      Totals:         0       0       0       0       0
  4603 ;;Total ram usage:        0 bytes
  4604 ;; Hardware stack levels used: 1
  4605 ;; Hardware stack levels required when called: 1
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_main
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613     0EC8                     _ADC_init:	
  4614                           ;psect for function _ADC_init
  4615                           
  4616     0EC8                     l1607:	
  4617                           ;incstack = 0
  4618                           ; Regs used in _ADC_init: [status,2]
  4619                           
  4620                           
  4621                           ;main.c: 38: {
  4622     0EC8  3003               	movlw	3
  4623     0EC9  1683               	bsf	3,5	;RP0=1, select bank3
  4624     0ECA  1703               	bsf	3,6	;RP1=1, select bank3
  4625     0ECB  0088               	movwf	8	;volatile
  4626     0ECC                     l1609:
  4627                           
  4628                           ;main.c: 39:     if (TMR1IF)
  4629     0ECC  0189               	clrf	9	;volatile
  4630     0ECD                     l1611:
  4631                           
  4632                           ;main.c: 40:     {
  4633     0ECD  3001               	movlw	1
  4634     0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  4635     0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  4636     0ED0  009F               	movwf	31	;volatile
  4637     0ED1                     l1613:
  4638                           
  4639                           ;main.c: 41:         count++;
  4640     0ED1  3080               	movlw	128
  4641     0ED2  1683               	bsf	3,5	;RP0=1, select bank1
  4642     0ED3  1303               	bcf	3,6	;RP1=0, select bank1
  4643     0ED4  009F               	movwf	31	;volatile
  4644     0ED5                     l56:
  4645     0ED5  0008               	return
  4646     0ED6                     __end_of_ADC_init:
  4647                           
  4648                           	psect	text24
  4649     07D3                     __ptext24:	
  4650 ;; *************** function _ICR *****************
  4651 ;; Defined at:
  4652 ;;		line 55 in file "main.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;		None
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;		None
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      void 
  4659 ;; Registers used:
  4660 ;;		wreg, status,2
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4666 ;;      Params:         0       0       0       0       0
  4667 ;;      Locals:         0       0       0       0       0
  4668 ;;      Temps:          2       0       0       0       0
  4669 ;;      Totals:         2       0       0       0       0
  4670 ;;Total ram usage:        2 bytes
  4671 ;; Hardware stack levels used: 1
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		Interrupt level 1
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679     07D3                     _ICR:	
  4680                           ;psect for function _ICR
  4681                           
  4682     07D3                     i1l1757:
  4683                           
  4684                           ;main.c: 57: {
  4685     07D3  1283               	bcf	3,5	;RP0=0, select bank0
  4686     07D4  1303               	bcf	3,6	;RP1=0, select bank0
  4687     07D5  1C0C               	btfss	12,0	;volatile
  4688     07D6  2FD8               	goto	u173_21
  4689     07D7  2FD9               	goto	u173_20
  4690     07D8                     u173_21:
  4691     07D8  2FF9               	goto	i1l69
  4692     07D9                     u173_20:
  4693     07D9                     i1l1759:
  4694                           
  4695                           ;main.c: 58:     TMR1_init();;main.c: 59:     LCD_Init(lcd);
  4696     07D9  3001               	movlw	1
  4697     07DA  1683               	bsf	3,5	;RP0=1, select bank1
  4698     07DB  1303               	bcf	3,6	;RP1=0, select bank1
  4699     07DC  07A0               	addwf	_count^(0+128),f	;volatile
  4700     07DD  1803               	skipnc
  4701     07DE  0AA1               	incf	(_count+1)^(0+128),f	;volatile
  4702     07DF  3000               	movlw	0
  4703     07E0  07A1               	addwf	(_count+1)^(0+128),f	;volatile
  4704                           
  4705                           ;main.c: 60:     char buffer1[10];
  4706     07E1  3000               	movlw	0
  4707     07E2  0221               	subwf	(_count+1)^(0+128),w	;volatile
  4708     07E3  3065               	movlw	101
  4709     07E4  1903               	skipnz
  4710     07E5  0220               	subwf	_count^(0+128),w	;volatile
  4711     07E6  1C03               	skipc
  4712     07E7  2FE9               	goto	u174_21
  4713     07E8  2FEA               	goto	u174_20
  4714     07E9                     u174_21:
  4715     07E9  2FF2               	goto	i1l1765
  4716     07EA                     u174_20:
  4717     07EA                     i1l1761:
  4718                           
  4719                           ;main.c: 61:     ADC_init();;main.c: 62: 
  4720     07EA  3001               	movlw	1
  4721     07EB  07FA               	addwf	_timer,f	;volatile
  4722     07EC  1803               	skipnc
  4723     07ED  0AFB               	incf	_timer+1,f	;volatile
  4724     07EE  3000               	movlw	0
  4725     07EF  07FB               	addwf	_timer+1,f	;volatile
  4726     07F0                     i1l1763:
  4727                           
  4728                           ;main.c: 63:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  4729     07F0  01A0               	clrf	_count^(0+128)	;volatile
  4730     07F1  01A1               	clrf	(_count+1)^(0+128)	;volatile
  4731     07F2                     i1l1765:
  4732                           
  4733                           ;main.c: 67:     LCD_putrs("00:00");
  4734     07F2  300B               	movlw	11
  4735     07F3  1283               	bcf	3,5	;RP0=0, select bank0
  4736     07F4  1303               	bcf	3,6	;RP1=0, select bank0
  4737     07F5  008F               	movwf	15	;volatile
  4738     07F6                     i1l1767:
  4739                           
  4740                           ;main.c: 68: 
  4741     07F6  30DC               	movlw	220
  4742     07F7  008E               	movwf	14	;volatile
  4743     07F8                     i1l1769:
  4744                           
  4745                           ;main.c: 70:     {
  4746     07F8  100C               	bcf	12,0	;volatile
  4747     07F9                     i1l69:
  4748     07F9  0871               	movf	??_ICR+1,w
  4749     07FA  008A               	movwf	10
  4750     07FB  0E70               	swapf	??_ICR,w
  4751     07FC  0083               	movwf	3
  4752     07FD  0EFE               	swapf	btemp,f
  4753     07FE  0E7E               	swapf	btemp,w
  4754     07FF  0009               	retfie
  4755     0800                     __end_of_ICR:
  4756     0002                     ___latbits      equ	2
  4757     007E                     btemp           set	126	;btemp
  4758     007E                     wtemp0          set	126
  4759                           
  4760                           	psect	intentry
  4761     0004                     __pintentry:	
  4762                           ;incstack = 0
  4763 ;; hardware stack exceeded
  4764                           ; Regs used in _ICR: [wreg+status,2]
  4765                           
  4766     0004                     interrupt_function:
  4767     007E                     saved_w         set	btemp
  4768     0004  00FE               	movwf	btemp
  4769     0005  0E03               	swapf	3,w
  4770     0006  00F0               	movwf	??_ICR
  4771     0007  080A               	movf	10,w
  4772     0008  00F1               	movwf	??_ICR+1
  4773     0009  120A  118A  2FD3   	ljmp	_ICR
  4774                           
  4775                           	psect	config
  4776                           
  4777                           ;Config register CONFIG1 @ 0x2007
  4778                           ;	Oscillator Selection bits
  4779                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  4780                           ;	Watchdog Timer Enable bit
  4781                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4782                           ;	Power-up Timer Enable bit
  4783                           ;	PWRTE = OFF, PWRT disabled
  4784                           ;	RE3/MCLR pin function select bit
  4785                           ;	MCLRE = 0x1, unprogrammed default
  4786                           ;	Code Protection bit
  4787                           ;	CP = OFF, Program memory code protection is disabled
  4788                           ;	Data Code Protection bit
  4789                           ;	CPD = OFF, Data memory code protection is disabled
  4790                           ;	Brown Out Reset Selection bits
  4791                           ;	BOREN = ON, BOR enabled
  4792                           ;	Internal External Switchover bit
  4793                           ;	IESO = 0x1, unprogrammed default
  4794                           ;	Fail-Safe Clock Monitor Enabled bit
  4795                           ;	FCMEN = 0x1, unprogrammed default
  4796                           ;	Low Voltage Programming Enable bit
  4797                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4798                           ;	In-Circuit Debugger Mode bit
  4799                           ;	DEBUG = 0x1, unprogrammed default
  4800     2007                     	org	8199
  4801     2007  2FF1               	dw	12273
  4802                           
  4803                           ;Config register CONFIG2 @ 0x2008
  4804                           ;	Brown-out Reset Selection bit
  4805                           ;	BOR4V = 0x1, unprogrammed default
  4806                           ;	Flash Program Memory Self Write Enable bits
  4807                           ;	WRT = OFF, Write protection off
  4808     2008                     	org	8200
  4809     2008  3FFF               	dw	16383

Data Sizes:
    Strings     34
    Constant    0
    Data        5
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     66      71
    BANK1            80     22      67
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    display$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> exec(BANK1[6]), main@buffer1(BANK1[10]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> exec(BANK1[6]), main@buffer1(BANK1[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    lcd$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    LCD_putrs@a	PTR const unsigned char  size(2) Largest target is 12
		 -> main@buffer1(BANK1[10]), STR_1(CODE[6]), STR_2(CODE[12]), 

    LCD_puts@a	PTR unsigned char  size(1) Largest target is 6
		 -> exec(BANK1[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S22$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    S596$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> exec(BANK1[6]), main@buffer1(BANK1[10]), 

    S596$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[6]), STR_4(CODE[10]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> exec(BANK1[6]), main@buffer1(BANK1[10]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[6]), STR_4(CODE[10]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[6]), STR_4(CODE[10]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[6]), STR_4(CODE[10]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_putrs
    _main->_LCD_puts
    _main->___lmul
    _vfpfcnvrt->_read_prec_or_width
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _read_prec_or_width->___wmul
    ___aldiv->___lmul
    _LCD_puts->_LCD_putc
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out

Critical Paths under _ICR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    ___aldiv->___lmul

Critical Paths under _ICR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ICR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ICR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ICR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0    5943
                                              0 BANK1     22    22      0
                           _ADC_init
                           _ADC_read
                           _LCD_Init
                          _LCD_Write
                          _LCD_putrs
                           _LCD_puts
                          _TMR1_init
                            ___aldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    3259
                                             47 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             5     1      4    2928
                                             42 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13     9      4    2701
                                             30 BANK0     12     8      4
                              _fputc
                 _read_prec_or_width
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     5      4    1583
                                             21 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  8     3      5     882
                                              9 COMMON     1     1      0
                                             14 BANK0      7     2      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     5      3     384
                                              6 COMMON     3     0      3
                                              9 BANK0      5     5      0
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                               13     9      4     232
                                              2 COMMON     4     0      4
                                              0 BANK0      9     9      0
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     165
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     168
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2     276
                                              8 COMMON     2     0      2
                                              0 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4      94
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8     142
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     451
                                              5 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR1_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             4     3      1     415
                                              8 COMMON     2     1      1
                                              0 BANK0      2     2      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (1) _LCD_putrs                                            7     5      2     421
                                              8 COMMON     2     0      2
                                              0 BANK0      5     5      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             3     3      0     282
                                              5 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     343
                                              8 COMMON     2     2      0
                                              0 BANK0      6     1      5
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Write                                            3     3      0     235
                                              5 COMMON     3     3      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (3) _LCD_Out                                              3     3      0     188
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             5     3      2      29
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ICR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_read
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   _LCD_puts
     _LCD_putc
   _TMR1_init
   ___aldiv
     ___lmul (ARG)
   ___lmul
   ___lwdiv
   ___lwmod
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _read_prec_or_width
           ___wmul
         _utoa
           ___lwdiv
           ___lwmod
           _pad
             _fputc
             _fputs
               _fputc

 _ICR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80     22      67     83.8%
BITBANK1            80      0       0      0.0%
BANK0               80     66      71     88.8%
BITBANK0            80      0       0      0.0%
COMMON              14     10      12     85.7%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     150      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Jun 19 11:16:24 2025

                         pc 0002                          l53 0EE3                          l62 0F9C  
                        l56 0ED5                          l74 0067                          l59 0F92  
                        fsr 0004         ___wmul@multiplicand 0074                         l202 0585  
                       l300 0F5A                         l214 0790                         l302 0F72  
                       l208 0F4D                         l314 074A                         l174 025C  
                       l177 06AF                         l186 03BA                         l365 046F  
                       l198 03AE                         l375 04F3                         l811 027C  
                       l804 065A                         l580 07D2                         l821 030E  
                       l813 0282                         l590 0FFF                         l840 045A  
                       l851 0003                         l763 0F29                         l828 0F06  
                       l781 06C9                         l848 0FC7                         l784 06F1  
                       l786 0702                         l796 0603                         _GIE 005F  
                       _ICR 07D3                         u900 03E8                         u901 03E7  
                       u910 041A                         u911 0419                         u920 043D  
                       u915 0416                         u940 0F54                         u941 0F53  
                       u880 03C1                         u881 03C0                         u970 0F6E  
                       u890 03C7                         u971 0F6D                         u955 0F5B  
                       u891 03C6                         u980 0799                         u965 0F62  
                       u981 0798                         u995 079D             LCD_Init@display 0020  
                       _lcd 00DE                         _pad 06B0                         fsr0 0004  
                       indf 0000                        ?_ICR 0070             __end_of_LCD_Out 025D  
               main@buffer1 00C8                        l2011 033A                        l2003 030F  
                      l2021 0356                        l2013 033C                        l2005 0322  
                      l2101 047E                        l2031 037F                        l2023 0364  
                      l2015 0346                        l2007 032E                        l2111 049E  
                      l2103 0480                        l2033 0385                        l2025 036D  
                      l2017 0347                        l2009 0330                        l2121 04CC  
                      l2113 04A2                        l2105 0488                        l1401 07C8  
                      l2035 038B                        l2027 0373                        l2019 0350  
                      l2051 0750                        l2123 04D5                        l2115 04AB  
                      l2107 0490                        l1403 07CE                        l1411 0FD1  
                      l2045 0396                        l2037 0391                        l2029 0379  
                      l2053 076C                        l2117 04BD                        l2109 0493  
                      l2125 04DB                        l1421 0FEE                        l1413 0FD8  
                      l2061 0F0F                        l2141 0073                        l2133 0045  
                      l2039 0395                        l2055 0774                        l2071 0F2A  
                      l2127 04E0                        l2119 04CB                        l1423 0FF5  
                      l1415 0FDA                        l1407 0FC8                        l1351 03CE  
                      l2063 0F11                        l2151 008E                        l2135 004A  
                      l2049 074B                        l2073 0F2F                        l2129 04EB  
                      l2081 070D                        l1417 0FDE                        l1409 0FCE  
                      l1425 0FFB                        l1353 03E8                        l1345 03BB  
                      l2065 0F13                        l2057 0F07                        l2161 009D  
                      l2137 0062                        l1611 0ECD                        l2075 0F3A  
                      l2083 0711                        l1371 0F54                        l1419 0FE8  
                      l1355 041A                        l1347 03C1                        l2067 0F20  
                      l2059 0F0B                        l2171 00A9                        l2163 00A3  
                      l2147 007F                        l1613 0ED1                        l1621 0F8F  
                      l2077 0F42                        l1605 0ED6                        l2093 045B  
                      l2085 0728                        l1373 0F61                        l1381 0791  
                      l1349 03C7                        l2181 0138                        l2173 00B5  
                      l2149 0088                        l1607 0EC8                        l1623 0F96  
                      l1615 0F74                        l2095 045E                        l2087 0731  
                      l2079 0703                        l1375 0F68                        l1367 0F4E  
                      l1391 07A5                        l1383 0793                        l2191 014D  
                      l2175 00EF                        l2159 0094                        l1609 0ECC  
                      l1617 0F77                        l2097 0462                        l2089 0742  
                      l1377 0F6E                        l1369 0F50                        l1481 061B  
                      l1393 07A9                        l1385 0799                        l2193 0162  
                      l2185 0141                        l2177 0102                        l1619 0F86  
                      l2099 0473                        l1483 0629                        l1475 0604  
                      l1395 07BA                        l1387 079C                        l2195 0175  
                      l2179 0115                        l1901 01EC                        l1485 0640  
                      l1477 0608                        l1397 07C0                        l1389 07A3  
                      l2197 0198                        l1911 0230                        l1903 0202  
                      l1479 0617                        l1487 0645                        l1399 07C1  
                      l1913 0246                        l1905 0206                        l1489 0656  
                      l1841 0FB2                        l1921 0276                        l1907 0219  
                      l1843 0FBA                        l1851 06C7                        l1931 0292  
                      l1923 027A                        l1915 025D                        l1909 022C  
                      l1837 0F9D                        l1853 06CC                        l1845 06B0  
                      l1861 0586                        l1941 02B0                        l1933 0297  
                      l1925 027D                        l1917 026E                        l1839 0FA2  
                      l1855 06DB                        l1847 06B6                        l1871 05B0  
                      l1863 058A                        l1943 02B5                        l1935 02A6  
                      l1919 0272                        l1857 06E3                        l1849 06C1  
                      l1881 05D9                        l1873 05B3                        l1865 0592  
                      l1945 02C1                        l1937 02AA                        l1929 0285  
                      l1961 02F5                        l1891 01A4                        l1971 0677  
                      l1859 06F7                        l1883 05DE                        l1875 05B9  
                      l1867 0596                        l1955 02E2                        l1947 02CE  
                      l1939 02AB                        l1893 01A8                        l1973 068E  
                      l1981 0518                        l1885 05EB                        l1869 059C  
                      l1877 05CC                        l1949 02D4                        l1957 02ED  
                      ?_pad 002E                        l1895 01BD                        l1975 0697  
                      l1967 065C                        l1991 056D                        l1983 052F  
                      l1879 05D3                        l1887 05F1                        l1897 01D2  
                      l1969 0671                        l1985 0533                        l1977 04F5  
                      l1993 0EE4                        l1899 01D6                        l1987 054B  
                      l1979 0509                        l1995 0EE9                        l1989 0552  
                      l1997 0EF6                        l1999 0F04                        STR_1 0826  
                      STR_2 0810                        STR_3 082C                        STR_4 081C  
                      u1000 07A9                        u1001 07A8                        u1020 07BA  
                      u1100 0FFB                        u1021 07B9                        u1101 0FFA  
                      u1015 07AA                        u1200 0617                        u1040 07CE  
                      u2000 02C1                        u1201 0616                        u1041 07CD  
                      u1025 07B6                        u2001 02C0                        u1210 0656  
                      u1050 0FCE                        u1211 0655                        u1035 07C2  
                      u1051 0FCD                        u2100 0F04                        u2101 0F03  
                      u2014 066B                        u2110 032E                        u1070 0FDE  
                      u2015 0669                        u2111 032D                        u1071 0FDD  
                      u2024 0689                        u2120 033A                        u1080 0FE8  
                      u2025 0687                        u2121 0339                        u2201 071A  
                      u1081 0FE7                        u1065 0FD2                        u2034 06A9  
                      u2130 0346                        u2202 0721                        u2035 06A7  
                      u2131 0345                        u2115 032A                        u2203 0728  
                      u2044 0504                        u2300 04BD                        u2125 0336  
                      u2045 0502                        u2301 04BC                        u1085 0FE4  
                      u2150 075A                        u2230 0742                        u2135 0342  
                      u2055 050C                        u2231 0741                        u2215 072A  
                      u1095 0FEF                        u2064 052A                        u2160 077E  
                      u2320 04DB                        u2240 0462                        u2145 0399  
                      u2065 0528                        u2321 04DA                        u2305 04B9  
                      u2241 0461                        u2225 0732                        u2074 0545  
                      u2170 0790                        u2330 04E0                        u2250 0473  
                      u2075 0543                        u2171 078F                        u2331 04DF  
                      u2315 04CD                        u2251 0472                        u2084 0564  
                      u2180 0F4D                        u2260 0490                        u2085 0562  
                      u2181 0F4C                        u2261 048F                        u2094 057F  
                      u2190 0711                        u2407 0F8A                        u2095 057D  
                      u2191 0710                        u2280 04A2                        u1800 05D3  
                      u2281 04A1                        u1801 05D2                        u1490 0F96  
                      u1810 05D9                        u1491 0F95                        u2347 0531  
                      u2275 0495                        u1811 05D8                        u1820 05DE  
                      u1485 0F7E                        u2357 056B                        u1821 05DD  
                      u1910 0206                        u1750 0FC7                        u1830 05EB  
                      u1911 0205                        u2367 034B                        u2295 04A4  
                      u1751 0FC6                        u1831 05EA                        u1904 01FC  
                      u1760 06B6                        u1840 05F1                        u1905 01FA  
                      u2377 035A                        u1761 06B5                        u1841 05F0  
                      u1850 01A8                        u1770 06C7                        u1851 01A7  
                      u2387 0368                        u1771 06C6                        u1835 05E7  
                      u1940 0230                        u1924 0213                        u1780 06F1  
                      u1941 022F                        u1925 0211                        u2397 0692  
                      u1781 06F0                        u1934 0226                        u1790 06F7  
                      u1935 0224                        u1791 06F6                        u1880 01D6  
                      u1864 01B7                        u1881 01D5                        u1865 01B5  
                      u1785 06ED                        u1954 0240                        u1874 01CC  
                      u1970 026E                        u1955 023E                        u1875 01CA  
                      u1971 026D                        _PEIE 005E                        u1964 0256  
                      u1980 0297                        u1965 0254                        u1981 0296  
                      u1894 01E6                        u1990 02AA                        u1895 01E4  
                      u1991 02A9                        i1l69 07F9                        _dbuf 00A2  
                      _main 0045                        _exec 00C2                        _prec 0064  
                      pad@i 0033                        pad@p 0031                        btemp 007E  
                      _utoa 0586                        start 000C            __end_of_ADC_init 0ED6  
          __end_of_ADC_read 0F9D                 LCD_Init@cmd 0025                       ??_ICR 0070  
                     ??_pad 0079            __end_of_LCD_Init 03BB            __end_of_LCD_putc 0586  
          __end_of_LCD_puts 0F4E             __end_of___aldiv 04F4                       ?_main 0070  
                     _ANSEL 0188                       ?_utoa 0035                       _T1CON 0010  
           __end_of___lwdiv 07D3             __end_of___lwmod 1000                vfpfcnvrt@fmt 0040  
                     _TMR1H 000F                       _TMR1L 000E                       _PORTA 0005  
                     _PORTB 0006                       _PORTC 0007                       _TRISA 0085  
                     _TRISB 0086                       _TRISC 0087         ___lmul@multiplicand 0076  
                     _flags 0066                       _count 00A0         read_prec_or_width@c 0020  
       read_prec_or_width@n 0021                       _fputc 03BB                       _fputs 0F9D  
                     _timer 007A                       pad@fp 002E                       _width 0062  
                     _putch 0003                       pclath 000A                       utoa@d 0037  
                     utoa@i 003C                       utoa@p 0039                       utoa@w 003A  
                     status 0003                       wtemp0 007E             __end_of_sprintf 0F2A  
           __initialization 000F                __end_of_main 01A3                __end_of_utoa 0604  
                    ??_main 007A                      ??_utoa 007A                   ??_LCD_Out 0072  
         __end_of_LCD_Write 06B0  __end_of_read_prec_or_width 065B           __end_of_LCD_putrs 0791  
                    _ADCON0 001F                      _ADCON1 009F                      ?_fputc 0072  
                    ?_fputs 0076                      _ADRESH 001E                      _ADRESL 009E  
                    ?_putch 0070                      _ANSELH 0189                      i1l1761 07EA  
                    i1l1763 07F0                      i1l1765 07F2                      i1l1757 07D3  
                    i1l1767 07F6                      i1l1759 07D9                      i1l1769 07F8  
                    u173_20 07D9                      u173_21 07D8                      u174_20 07EA  
                    u174_21 07E9               vfpfcnvrt@done 0048                      _TMR1IE 0460  
                    _TMR1IF 0060                vfprintf@cfmt 004E                      ___lmul 0703  
                 ??___aldiv 002D                      ___wmul 0F4E           __end_of_TMR1_init 0EE4  
                 ??___lwdiv 0076                   ??___lwmod 0076        read_prec_or_width@ap 0079  
                    pad@buf 0030                      fputc@c 0072                      fputs@c 002B  
                    fputs@i 002C                      fputs@s 0076                      saved_w 007E  
                 ?_ADC_init 0070                   ?_ADC_read 0072                      putch@c 0070  
          __end_of_vfprintf 0F07                      utoa@fp 0035                   ??_sprintf 0055  
   __end_of__initialization 0041                   ?_LCD_Init 0020                   ?_LCD_putc 0070  
                 ?_LCD_puts 0078              __pcstackCOMMON 0070                __pidataBANK1 0EBB  
             __end_of_fputc 045B               __end_of_fputs 0FC8               __end_of_putch 0004  
                 LCD_putc@c 0077                   LCD_puts@a 0078                   LCD_puts@i 0020  
           ADC_read@channel 0076                  ??_ADC_init 0072                  ??_ADC_read 0074  
                   ??_fputc 0020                     ??_fputs 0029                     ??_putch 0072  
                __pbssBANK0 0062                  __pbssBANK1 00A0                  ??_LCD_Init 0078  
                ??_LCD_putc 0075                  ??_LCD_puts 0079                  __pmaintext 0045  
                   ?___lmul 0072                     ?___wmul 0072                  __pintentry 0004  
            ___lmul@product 0021                     _LCD_Out 01A3                  __stringtab 0800  
                   ___aldiv 045B                     ___lwdiv 0791                     ___lwmod 0FC8  
                 ?_vfprintf 004A                     __ptext1 0F07                     __ptext2 0EE4  
                   __ptext3 025D                     __ptext4 0586                     __ptext5 06B0  
                   __ptext6 0F9D                     __ptext7 03BB                     __ptext8 0003  
                   __ptext9 0FC8       read_prec_or_width@fmt 0078            ___aldiv@dividend 0029  
                   _sprintf 0F07                     clrloop0 0EC1                   _LCD_Write 065B  
      end_of_initialization 0041                   _LCD_putrs 074B                     fputc@fp 0074  
                   fputs@fp 0077          _read_prec_or_width 0604           __end_of_vfpfcnvrt 030F  
          ___aldiv@quotient 0030         ?_read_prec_or_width 0078            vfpfcnvrt@convarg 0044  
                ??_vfprintf 007A                   _TMR1_init 0ED6             main@adc_result1 00D2  
      ??_read_prec_or_width 007A                  ?_LCD_Write 0070                  ?_LCD_putrs 0078  
            __end_of___lmul 074B                 vfpfcnvrt@ap 0041                 vfpfcnvrt@cp 0049  
               vfpfcnvrt@fp 003E              __end_of___wmul 0F73                  LCD_Write@c 0077  
                ?_TMR1_init 0070         start_initialization 000F                 __end_of_ICR 0800  
               __end_of_pad 0703                  LCD_putrs@a 0078                  LCD_putrs@i 0023  
               vfprintf@fmt 004C                    ??___lmul 0020                    ??___wmul 0076  
               __pdataBANK1 00DE                    ?_LCD_Out 0070                 __pbssCOMMON 007A  
                 ___latbits 0002               __pcstackBANK0 0020               __pcstackBANK1 00C8  
                  LCD_Out@c 0074                 ??_LCD_Write 0075                 ??_LCD_putrs 0020  
          ___lwdiv@dividend 0074                    ?___aldiv 0025                    ?___lwdiv 0072  
                  ?___lwmod 0072                   __pstrings 0800                 ??_TMR1_init 0072  
                  _ADC_init 0EC8                    _ADC_read 0F73            ___lwdiv@quotient 0076  
                  ?_sprintf 004F             ___aldiv@divisor 0025           interrupt_function 0004  
           ___aldiv@counter 002E                    _LCD_Init 030F              ___wmul@product 0076  
                 clear_ram0 0EC0                    _LCD_putc 04F4                    _LCD_puts 0F2A  
                  _GO_nDONE 00F9                   _vfpfcnvrt 025D                 __stringbase 080F  
         ___wmul@multiplier 0072                   main@volt1 00DC           ___lmul@multiplier 0072  
                vfprintf@ap 004D                  vfprintf@fp 004A                  ?_vfpfcnvrt 003E  
        __end_of__stringtab 0810                  sprintf@fmt 0050                    _main$918 00D8  
                  _main$919 00DA             ___lwdiv@divisor 0072             ___lwdiv@counter 0078  
                  __ptext10 0791                    __ptext11 0604                    __ptext20 065B  
                  __ptext12 0F4E                    __ptext21 01A3                    __ptext13 0703  
                  __ptext22 0F73                    __ptext14 045B                    __ptext23 0EC8  
                  __ptext15 0ED6                    __ptext24 07D3                    __ptext16 0F2A  
                  __ptext17 074B                    __ptext18 04F4                    __ptext19 030F  
                  _vfprintf 0EE4                    main@dec1 00D6                    main@ent1 00D4  
                  intlevel1 0000                   sprintf@ap 0056            ___lwmod@dividend 0074  
                 stringcode 080A                 ??_vfpfcnvrt 0042                    sprintf@f 0057  
                  sprintf@s 004F             ___lwmod@divisor 0072             ___lwmod@counter 0076  
                  stringdir 080A                    stringtab 0800                ___aldiv@sign 002F  
