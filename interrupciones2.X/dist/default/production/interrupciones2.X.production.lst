

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Jun 10 17:56:35 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,space=0,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,space=0,delta=2
    15                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Generated 26/03/2025 GMT
    22                           ; 
    23                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55     0004                     fsr             equ	4
    56     0004                     fsr0            equ	4
    57     0000                     indf            equ	0
    58     0000                     indf0           equ	0
    59     0002                     pc              equ	2
    60     0002                     pcl             equ	2
    61     000A                     pclath          equ	10
    62     0003                     status          equ	3
    63     0000                     INDF            equ	0	;# 
    64     0001                     TMR0            equ	1	;# 
    65     0002                     PCL             equ	2	;# 
    66     0003                     STATUS          equ	3	;# 
    67     0004                     FSR             equ	4	;# 
    68     0005                     PORTA           equ	5	;# 
    69     0006                     PORTB           equ	6	;# 
    70     0007                     PORTC           equ	7	;# 
    71     0008                     PORTD           equ	8	;# 
    72     0009                     PORTE           equ	9	;# 
    73     000A                     PCLATH          equ	10	;# 
    74     000B                     INTCON          equ	11	;# 
    75     000C                     PIR1            equ	12	;# 
    76     000D                     PIR2            equ	13	;# 
    77     000E                     TMR1            equ	14	;# 
    78     000E                     TMR1L           equ	14	;# 
    79     000F                     TMR1H           equ	15	;# 
    80     0010                     T1CON           equ	16	;# 
    81     0011                     TMR2            equ	17	;# 
    82     0012                     T2CON           equ	18	;# 
    83     0013                     SSPBUF          equ	19	;# 
    84     0014                     SSPCON          equ	20	;# 
    85     0015                     CCPR1           equ	21	;# 
    86     0015                     CCPR1L          equ	21	;# 
    87     0016                     CCPR1H          equ	22	;# 
    88     0017                     CCP1CON         equ	23	;# 
    89     0018                     RCSTA           equ	24	;# 
    90     0019                     TXREG           equ	25	;# 
    91     001A                     RCREG           equ	26	;# 
    92     001B                     CCPR2           equ	27	;# 
    93     001B                     CCPR2L          equ	27	;# 
    94     001C                     CCPR2H          equ	28	;# 
    95     001D                     CCP2CON         equ	29	;# 
    96     001E                     ADRESH          equ	30	;# 
    97     001F                     ADCON0          equ	31	;# 
    98     0081                     OPTION_REG      equ	129	;# 
    99     0085                     TRISA           equ	133	;# 
   100     0086                     TRISB           equ	134	;# 
   101     0087                     TRISC           equ	135	;# 
   102     0088                     TRISD           equ	136	;# 
   103     0089                     TRISE           equ	137	;# 
   104     008C                     PIE1            equ	140	;# 
   105     008D                     PIE2            equ	141	;# 
   106     008E                     PCON            equ	142	;# 
   107     008F                     OSCCON          equ	143	;# 
   108     0090                     OSCTUNE         equ	144	;# 
   109     0091                     SSPCON2         equ	145	;# 
   110     0092                     PR2             equ	146	;# 
   111     0093                     SSPADD          equ	147	;# 
   112     0093                     SSPMSK          equ	147	;# 
   113     0093                     MSK             equ	147	;# 
   114     0094                     SSPSTAT         equ	148	;# 
   115     0095                     WPUB            equ	149	;# 
   116     0096                     IOCB            equ	150	;# 
   117     0097                     VRCON           equ	151	;# 
   118     0098                     TXSTA           equ	152	;# 
   119     0099                     SPBRG           equ	153	;# 
   120     009A                     SPBRGH          equ	154	;# 
   121     009B                     PWM1CON         equ	155	;# 
   122     009C                     ECCPAS          equ	156	;# 
   123     009D                     PSTRCON         equ	157	;# 
   124     009E                     ADRESL          equ	158	;# 
   125     009F                     ADCON1          equ	159	;# 
   126     0105                     WDTCON          equ	261	;# 
   127     0107                     CM1CON0         equ	263	;# 
   128     0108                     CM2CON0         equ	264	;# 
   129     0109                     CM2CON1         equ	265	;# 
   130     010C                     EEDATA          equ	268	;# 
   131     010C                     EEDAT           equ	268	;# 
   132     010D                     EEADR           equ	269	;# 
   133     010E                     EEDATH          equ	270	;# 
   134     010F                     EEADRH          equ	271	;# 
   135     0185                     SRCON           equ	389	;# 
   136     0187                     BAUDCTL         equ	391	;# 
   137     0188                     ANSEL           equ	392	;# 
   138     0189                     ANSELH          equ	393	;# 
   139     018C                     EECON1          equ	396	;# 
   140     018D                     EECON2          equ	397	;# 
   141     0000                     INDF            equ	0	;# 
   142     0001                     TMR0            equ	1	;# 
   143     0002                     PCL             equ	2	;# 
   144     0003                     STATUS          equ	3	;# 
   145     0004                     FSR             equ	4	;# 
   146     0005                     PORTA           equ	5	;# 
   147     0006                     PORTB           equ	6	;# 
   148     0007                     PORTC           equ	7	;# 
   149     0008                     PORTD           equ	8	;# 
   150     0009                     PORTE           equ	9	;# 
   151     000A                     PCLATH          equ	10	;# 
   152     000B                     INTCON          equ	11	;# 
   153     000C                     PIR1            equ	12	;# 
   154     000D                     PIR2            equ	13	;# 
   155     000E                     TMR1            equ	14	;# 
   156     000E                     TMR1L           equ	14	;# 
   157     000F                     TMR1H           equ	15	;# 
   158     0010                     T1CON           equ	16	;# 
   159     0011                     TMR2            equ	17	;# 
   160     0012                     T2CON           equ	18	;# 
   161     0013                     SSPBUF          equ	19	;# 
   162     0014                     SSPCON          equ	20	;# 
   163     0015                     CCPR1           equ	21	;# 
   164     0015                     CCPR1L          equ	21	;# 
   165     0016                     CCPR1H          equ	22	;# 
   166     0017                     CCP1CON         equ	23	;# 
   167     0018                     RCSTA           equ	24	;# 
   168     0019                     TXREG           equ	25	;# 
   169     001A                     RCREG           equ	26	;# 
   170     001B                     CCPR2           equ	27	;# 
   171     001B                     CCPR2L          equ	27	;# 
   172     001C                     CCPR2H          equ	28	;# 
   173     001D                     CCP2CON         equ	29	;# 
   174     001E                     ADRESH          equ	30	;# 
   175     001F                     ADCON0          equ	31	;# 
   176     0081                     OPTION_REG      equ	129	;# 
   177     0085                     TRISA           equ	133	;# 
   178     0086                     TRISB           equ	134	;# 
   179     0087                     TRISC           equ	135	;# 
   180     0088                     TRISD           equ	136	;# 
   181     0089                     TRISE           equ	137	;# 
   182     008C                     PIE1            equ	140	;# 
   183     008D                     PIE2            equ	141	;# 
   184     008E                     PCON            equ	142	;# 
   185     008F                     OSCCON          equ	143	;# 
   186     0090                     OSCTUNE         equ	144	;# 
   187     0091                     SSPCON2         equ	145	;# 
   188     0092                     PR2             equ	146	;# 
   189     0093                     SSPADD          equ	147	;# 
   190     0093                     SSPMSK          equ	147	;# 
   191     0093                     MSK             equ	147	;# 
   192     0094                     SSPSTAT         equ	148	;# 
   193     0095                     WPUB            equ	149	;# 
   194     0096                     IOCB            equ	150	;# 
   195     0097                     VRCON           equ	151	;# 
   196     0098                     TXSTA           equ	152	;# 
   197     0099                     SPBRG           equ	153	;# 
   198     009A                     SPBRGH          equ	154	;# 
   199     009B                     PWM1CON         equ	155	;# 
   200     009C                     ECCPAS          equ	156	;# 
   201     009D                     PSTRCON         equ	157	;# 
   202     009E                     ADRESL          equ	158	;# 
   203     009F                     ADCON1          equ	159	;# 
   204     0105                     WDTCON          equ	261	;# 
   205     0107                     CM1CON0         equ	263	;# 
   206     0108                     CM2CON0         equ	264	;# 
   207     0109                     CM2CON1         equ	265	;# 
   208     010C                     EEDATA          equ	268	;# 
   209     010C                     EEDAT           equ	268	;# 
   210     010D                     EEADR           equ	269	;# 
   211     010E                     EEDATH          equ	270	;# 
   212     010F                     EEADRH          equ	271	;# 
   213     0185                     SRCON           equ	389	;# 
   214     0187                     BAUDCTL         equ	391	;# 
   215     0188                     ANSEL           equ	392	;# 
   216     0189                     ANSELH          equ	393	;# 
   217     018C                     EECON1          equ	396	;# 
   218     018D                     EECON2          equ	397	;# 
   219                           
   220                           	psect	idataBANK0
   221     018C                     __pidataBANK0:
   222                           
   223                           ;initializer for _digito
   224     018C  343F               	retlw	63
   225     018D  3406               	retlw	6
   226     018E  345B               	retlw	91
   227     018F  344F               	retlw	79
   228     0190  3466               	retlw	102
   229     0191  346D               	retlw	109
   230     0192  347D               	retlw	125
   231     0193  3407               	retlw	7
   232     0194  347F               	retlw	127
   233     0195  346F               	retlw	111
   234     0007                     _PORTC          set	7
   235     0008                     _PORTD          set	8
   236     0059                     _INTF           set	89
   237     005C                     _INTE           set	92
   238     005F                     _GIE            set	95
   239     0086                     _TRISB          set	134
   240     0088                     _TRISD          set	136
   241     0087                     _TRISC          set	135
   242     0081                     _OPTION_REG     set	129
   243     040E                     _INTEDG         set	1038
   244     0188                     _ANSEL          set	392
   245     0189                     _ANSELH         set	393
   246                           
   247                           	psect	cinit
   248     0011                     start_initialization:	
   249                           ; #config settings
   250                           
   251     0011                     __initialization:
   252                           
   253                           ; Initialize objects allocated to BANK0
   254     0011  1383               	bcf	3,7	;select IRP bank0
   255     0012  302A               	movlw	low (__pdataBANK0+10)
   256     0013  00FD               	movwf	btemp+-1
   257     0014  3001               	movlw	high __pidataBANK0
   258     0015  00FE               	movwf	btemp
   259     0016  308C               	movlw	low __pidataBANK0
   260     0017  00FF               	movwf	btemp+1
   261     0018  3020               	movlw	low __pdataBANK0
   262     0019  0084               	movwf	4
   263     001A  120A  118A  217D  120A  118A  	fcall	init_ram0
   264                           
   265                           ; Clear objects allocated to BANK0
   266     001F  01AA               	clrf	__pbssBANK0& (0+127)
   267     0020  01AB               	clrf	(__pbssBANK0+1)& (0+127)
   268     0021  01AC               	clrf	(__pbssBANK0+2)& (0+127)
   269     0022  01AD               	clrf	(__pbssBANK0+3)& (0+127)
   270                           
   271                           ; Clear objects allocated to COMMON
   272     0023  01FB               	clrf	__pbssCOMMON& (0+127)
   273     0024  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   274     0025                     end_of_initialization:	
   275                           ;End of C runtime variable initialization code
   276                           
   277     0025                     __end_of__initialization:
   278     0025  0183               	clrf	3
   279     0026  120A  118A  2927   	ljmp	_main	;jump to C main() function
   280                           
   281                           	psect	bssCOMMON
   282     007B                     __pbssCOMMON:
   283     007B                     _num:
   284     007B                     	ds	2
   285                           
   286                           	psect	bssBANK0
   287     002A                     __pbssBANK0:
   288     002A                     _aux:
   289     002A                     	ds	2
   290     002C                     _dec:
   291     002C                     	ds	2
   292                           
   293                           	psect	dataBANK0
   294     0020                     __pdataBANK0:
   295     0020                     _digito:
   296     0020                     	ds	10
   297                           
   298                           	psect	inittext
   299     0179                     init_fetch0:	
   300                           ;	Called with low address in FSR and high address in W
   301                           
   302     0179  087E               	movf	btemp,w
   303     017A  008A               	movwf	10
   304     017B  087F               	movf	btemp+1,w
   305     017C  0082               	movwf	2
   306     017D                     init_ram0:	
   307                           ;Called with:
   308                           ;	high address of idata address in btemp 
   309                           ;	low address of idata address in btemp+1 
   310                           ;	low address of data in FSR
   311                           ;	high address + 1 of data in btemp-1
   312                           
   313     017D  120A  118A  2179  120A  118A  	fcall	init_fetch0
   314     0182  0080               	movwf	0
   315     0183  0A84               	incf	4,f
   316     0184  0804               	movf	4,w
   317     0185  067D               	xorwf	btemp+-1,w
   318     0186  1903               	btfsc	3,2
   319     0187  3400               	retlw	0
   320     0188  0AFF               	incf	btemp+1,f
   321     0189  1903               	btfsc	3,2
   322     018A  0AFE               	incf	btemp,f
   323     018B  297D               	goto	init_ram0
   324                           
   325                           	psect	cstackCOMMON
   326     0070                     __pcstackCOMMON:
   327     0070                     ?_math:
   328     0070                     ?_main:	
   329                           ; 1 bytes @ 0x0
   330                           
   331     0070                     ?_ISR:	
   332                           ; 1 bytes @ 0x0
   333                           
   334     0070                     ?___awdiv:	
   335                           ; 1 bytes @ 0x0
   336                           
   337     0070                     ?___awmod:	
   338                           ; 2 bytes @ 0x0
   339                           
   340     0070                     ___awdiv@divisor:	
   341                           ; 2 bytes @ 0x0
   342                           
   343     0070                     ___awmod@divisor:	
   344                           ; 2 bytes @ 0x0
   345                           
   346                           
   347                           ; 2 bytes @ 0x0
   348     0070                     	ds	2
   349     0072                     ___awdiv@dividend:
   350     0072                     ___awmod@dividend:	
   351                           ; 2 bytes @ 0x2
   352                           
   353                           
   354                           ; 2 bytes @ 0x2
   355     0072                     	ds	2
   356     0074                     ___awdiv@counter:
   357     0074                     ___awmod@counter:	
   358                           ; 1 bytes @ 0x4
   359                           
   360     0074                     ??___awdiv:	
   361                           ; 1 bytes @ 0x4
   362                           
   363     0074                     ??___awmod:	
   364                           ; 1 bytes @ 0x4
   365                           
   366                           
   367                           ; 1 bytes @ 0x4
   368     0074                     	ds	1
   369     0075                     ___awdiv@sign:
   370     0075                     ___awmod@sign:	
   371                           ; 1 bytes @ 0x5
   372                           
   373                           
   374                           ; 1 bytes @ 0x5
   375     0075                     	ds	1
   376     0076                     ___awdiv@quotient:
   377                           
   378                           ; 2 bytes @ 0x6
   379     0076                     	ds	2
   380     0078                     ??_math:
   381     0078                     ??_ISR:	
   382                           ; 1 bytes @ 0x8
   383                           
   384                           
   385                           ; 1 bytes @ 0x8
   386     0078                     	ds	3
   387                           
   388                           	psect	cstackBANK0
   389     002E                     __pcstackBANK0:
   390     002E                     ??_main:
   391                           
   392                           ; 1 bytes @ 0x0
   393     002E                     	ds	1
   394                           
   395                           	psect	maintext
   396     0127                     __pmaintext:	
   397 ;;
   398 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   399 ;;
   400 ;; *************** function _main *****************
   401 ;; Defined at:
   402 ;;		line 61 in file "main.c"
   403 ;; Parameters:    Size  Location     Type
   404 ;;		None
   405 ;; Auto vars:     Size  Location     Type
   406 ;;  count           1    0        unsigned char 
   407 ;; Return value:  Size  Location     Type
   408 ;;                  1    wreg      void 
   409 ;; Registers used:
   410 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   411 ;; Tracked objects:
   412 ;;		On entry : B00/0
   413 ;;		On exit  : 0/0
   414 ;;		Unchanged: 0/0
   415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   416 ;;      Params:         0       0       0       0       0
   417 ;;      Locals:         0       0       0       0       0
   418 ;;      Temps:          0       1       0       0       0
   419 ;;      Totals:         0       1       0       0       0
   420 ;;Total ram usage:        1 bytes
   421 ;; Hardware stack levels required when called: 3
   422 ;; This function calls:
   423 ;;		Nothing
   424 ;; This function is called by:
   425 ;;		Startup code after reset
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429     0127                     _main:	
   430                           ;psect for function _main
   431                           
   432     0127                     l824:	
   433                           ;incstack = 0
   434                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0]
   435                           
   436                           
   437                           ;main.c: 63: 
   438     0127  1683               	bsf	3,5	;RP0=1, select bank3
   439     0128  1703               	bsf	3,6	;RP1=1, select bank3
   440     0129  0189               	clrf	9	;volatile
   441                           
   442                           ;main.c: 64:             PORTC = 0b11111011;
   443     012A  0188               	clrf	8	;volatile
   444     012B                     l826:
   445                           
   446                           ;main.c: 67:     }
   447     012B  307F               	movlw	127
   448     012C  1683               	bsf	3,5	;RP0=1, select bank1
   449     012D  1303               	bcf	3,6	;RP1=0, select bank1
   450     012E  0581               	andwf	1,f	;volatile
   451     012F                     l828:
   452                           
   453                           ;main.c: 70: void __attribute__((picinterrupt(("")))) ISR(void){
   454     012F  0187               	clrf	7	;volatile
   455     0130                     l830:
   456                           
   457                           ;main.c: 71:     if(INTF){
   458     0130  0188               	clrf	8	;volatile
   459     0131                     l832:
   460                           
   461                           ;main.c: 72:         GIE = 0;
   462     0131  30FF               	movlw	255
   463     0132  0086               	movwf	6	;volatile
   464     0133                     l834:
   465                           
   466                           ;main.c: 75: 
   467     0133  1283               	bcf	3,5	;RP0=0, select bank0
   468     0134  1303               	bcf	3,6	;RP1=0, select bank0
   469     0135  0188               	clrf	8	;volatile
   470     0136                     l836:
   471                           
   472                           ;main.c: 76:         GIE = 1;
   473     0136  0187               	clrf	7	;volatile
   474     0137                     l838:
   475     0137                     l840:
   476     0137  178B               	bsf	11,7	;volatile
   477     0138                     l842:
   478     0138  160B               	bsf	11,4	;volatile
   479     0139                     l844:
   480     0139  1683               	bsf	3,5	;RP0=1, select bank1
   481     013A  1303               	bcf	3,6	;RP1=0, select bank1
   482     013B  1301               	bcf	1,6	;volatile
   483     013C                     l846:
   484     013C  30F7               	movlw	247
   485     013D  1283               	bcf	3,5	;RP0=0, select bank0
   486     013E  1303               	bcf	3,6	;RP1=0, select bank0
   487     013F  0087               	movwf	7	;volatile
   488     0140                     l848:
   489     0140  082C               	movf	_dec,w
   490     0141  3E20               	addlw	(low (_digito| 0))& (0+255)
   491     0142  0084               	movwf	4
   492     0143  1383               	bcf	3,7	;select IRP bank0
   493     0144  0800               	movf	0,w
   494     0145  0088               	movwf	8	;volatile
   495     0146                     l850:
   496     0146  30C7               	movlw	199
   497     0147  1283               	bcf	3,5	;RP0=0, select bank0
   498     0148  1303               	bcf	3,6	;RP1=0, select bank0
   499     0149  00AE               	movwf	??_main
   500     014A                     u437:
   501     014A  294B               	nop2
   502     014B  0BAE               	decfsz	??_main,f
   503     014C  294A               	goto	u437
   504     014D  294E               	nop2
   505     014E                     l852:
   506     014E  30FB               	movlw	251
   507     014F  1283               	bcf	3,5	;RP0=0, select bank0
   508     0150  1303               	bcf	3,6	;RP1=0, select bank0
   509     0151  0087               	movwf	7	;volatile
   510     0152                     l854:
   511     0152  087B               	movf	_num,w
   512     0153  3E20               	addlw	(low (_digito| 0))& (0+255)
   513     0154  0084               	movwf	4
   514     0155  1383               	bcf	3,7	;select IRP bank0
   515     0156  0800               	movf	0,w
   516     0157  0088               	movwf	8	;volatile
   517     0158                     l856:
   518     0158  30C7               	movlw	199
   519     0159  1283               	bcf	3,5	;RP0=0, select bank0
   520     015A  1303               	bcf	3,6	;RP1=0, select bank0
   521     015B  00AE               	movwf	??_main
   522     015C                     u447:
   523     015C  295D               	nop2
   524     015D  0BAE               	decfsz	??_main,f
   525     015E  295C               	goto	u447
   526     015F  2960               	nop2
   527     0160  293C               	goto	l846
   528     0161  120A  118A  280E   	ljmp	start
   529     0164                     __end_of_main:
   530                           
   531                           	psect	text1
   532     0164                     __ptext1:	
   533 ;; *************** function _ISR *****************
   534 ;; Defined at:
   535 ;;		line 97 in file "main.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;		None
   538 ;; Auto vars:     Size  Location     Type
   539 ;;		None
   540 ;; Return value:  Size  Location     Type
   541 ;;                  1    wreg      void 
   542 ;; Registers used:
   543 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   544 ;; Tracked objects:
   545 ;;		On entry : 0/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   549 ;;      Params:         0       0       0       0       0
   550 ;;      Locals:         0       0       0       0       0
   551 ;;      Temps:          3       0       0       0       0
   552 ;;      Totals:         3       0       0       0       0
   553 ;;Total ram usage:        3 bytes
   554 ;; Hardware stack levels used: 1
   555 ;; Hardware stack levels required when called: 2
   556 ;; This function calls:
   557 ;;		_math
   558 ;; This function is called by:
   559 ;;		Interrupt level 1
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563     0164                     _ISR:	
   564                           ;psect for function _ISR
   565                           
   566     0164                     i1l858:
   567     0164  1C8B               	btfss	11,1	;volatile
   568     0165  2967               	goto	u42_21
   569     0166  2968               	goto	u42_20
   570     0167                     u42_21:
   571     0167  2970               	goto	i1l52
   572     0168                     u42_20:
   573     0168                     i1l860:
   574     0168  138B               	bcf	11,7	;volatile
   575     0169                     i1l862:
   576     0169  120A  118A  20E3  120A  118A  	fcall	_math
   577     016E                     i1l864:
   578     016E  178B               	bsf	11,7	;volatile
   579     016F                     i1l866:
   580     016F  108B               	bcf	11,1	;volatile
   581     0170                     i1l52:
   582     0170  087A               	movf	??_ISR+2,w
   583     0171  00FF               	movwf	btemp+1
   584     0172  0879               	movf	??_ISR+1,w
   585     0173  008A               	movwf	10
   586     0174  0E78               	swapf	??_ISR,w
   587     0175  0083               	movwf	3
   588     0176  0EFE               	swapf	btemp,f
   589     0177  0E7E               	swapf	btemp,w
   590     0178  0009               	retfie
   591     0179                     __end_of_ISR:
   592                           
   593                           	psect	intentry
   594     0004                     __pintentry:	
   595                           ;incstack = 0
   596                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   597                           
   598     0004                     interrupt_function:
   599     007E                     saved_w         set	btemp
   600     0004  00FE               	movwf	btemp
   601     0005  0E03               	swapf	3,w
   602     0006  00F8               	movwf	??_ISR
   603     0007  080A               	movf	10,w
   604     0008  00F9               	movwf	??_ISR+1
   605     0009  087F               	movf	btemp+1,w
   606     000A  00FA               	movwf	??_ISR+2
   607     000B  120A  118A  2964   	ljmp	_ISR
   608                           
   609                           	psect	text2
   610     00E3                     __ptext2:	
   611 ;; *************** function _math *****************
   612 ;; Defined at:
   613 ;;		line 50 in file "main.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;		None
   616 ;; Auto vars:     Size  Location     Type
   617 ;;		None
   618 ;; Return value:  Size  Location     Type
   619 ;;                  1    wreg      void 
   620 ;; Registers used:
   621 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   627 ;;      Params:         0       0       0       0       0
   628 ;;      Locals:         0       0       0       0       0
   629 ;;      Temps:          0       0       0       0       0
   630 ;;      Totals:         0       0       0       0       0
   631 ;;Total ram usage:        0 bytes
   632 ;; Hardware stack levels used: 1
   633 ;; Hardware stack levels required when called: 1
   634 ;; This function calls:
   635 ;;		___awdiv
   636 ;;		___awmod
   637 ;; This function is called by:
   638 ;;		_ISR
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642     00E3                     _math:	
   643                           ;psect for function _math
   644                           
   645     00E3                     i1l814:	
   646                           ;incstack = 0
   647                           ; Regs used in _math: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   648                           
   649                           
   650                           ;main.c: 51:     unsigned char count = 0;
   651     00E3  300A               	movlw	10
   652     00E4  00F0               	movwf	___awmod@divisor
   653     00E5  3000               	movlw	0
   654     00E6  00F1               	movwf	___awmod@divisor+1
   655     00E7  087B               	movf	_num,w
   656     00E8  3E01               	addlw	1
   657     00E9  00F2               	movwf	___awmod@dividend
   658     00EA  087C               	movf	_num+1,w
   659     00EB  1803               	skipnc
   660     00EC  3E01               	addlw	1
   661     00ED  3E00               	addlw	0
   662     00EE  00F3               	movwf	___awmod@dividend+1
   663     00EF  120A  118A  208C  120A  118A  	fcall	___awmod
   664     00F4  0871               	movf	?___awmod+1,w
   665     00F5  00FC               	movwf	_num+1
   666     00F6  0870               	movf	?___awmod,w
   667     00F7  00FB               	movwf	_num
   668     00F8                     i1l816:
   669                           
   670                           ;main.c: 52: 
   671     00F8  3001               	movlw	1
   672     00F9  1283               	bcf	3,5	;RP0=0, select bank0
   673     00FA  1303               	bcf	3,6	;RP1=0, select bank0
   674     00FB  07AA               	addwf	_aux,f
   675     00FC  1803               	skipnc
   676     00FD  0AAB               	incf	_aux+1,f
   677     00FE  3000               	movlw	0
   678     00FF  07AB               	addwf	_aux+1,f
   679     0100                     i1l818:
   680                           
   681                           ;main.c: 54:     GIE = 1;
   682     0100  300A               	movlw	10
   683     0101  00F0               	movwf	___awdiv@divisor
   684     0102  3000               	movlw	0
   685     0103  00F1               	movwf	___awdiv@divisor+1
   686     0104  082B               	movf	_aux+1,w
   687     0105  00F3               	movwf	___awdiv@dividend+1
   688     0106  082A               	movf	_aux,w
   689     0107  00F2               	movwf	___awdiv@dividend
   690     0108  120A  118A  2029  120A  118A  	fcall	___awdiv
   691     010D  0871               	movf	?___awdiv+1,w
   692     010E  1283               	bcf	3,5	;RP0=0, select bank0
   693     010F  1303               	bcf	3,6	;RP1=0, select bank0
   694     0110  00AD               	movwf	_dec+1
   695     0111  0870               	movf	?___awdiv,w
   696     0112  00AC               	movwf	_dec
   697     0113                     i1l820:
   698                           
   699                           ;main.c: 55:     INTE = 1;
   700     0113  082D               	movf	_dec+1,w
   701     0114  3A80               	xorlw	128
   702     0115  00FF               	movwf	btemp+1
   703     0116  3080               	movlw	128
   704     0117  027F               	subwf	btemp+1,w
   705     0118  1D03               	skipz
   706     0119  291C               	goto	u41_25
   707     011A  300A               	movlw	10
   708     011B  022C               	subwf	_dec,w
   709     011C                     u41_25:
   710     011C  1C03               	skipc
   711     011D  291F               	goto	u41_21
   712     011E  2920               	goto	u41_20
   713     011F                     u41_21:
   714     011F  2926               	goto	i1l38
   715     0120                     u41_20:
   716     0120                     i1l822:
   717                           
   718                           ;main.c: 56:     INTEDG = 0;
   719     0120  1283               	bcf	3,5	;RP0=0, select bank0
   720     0121  1303               	bcf	3,6	;RP1=0, select bank0
   721     0122  01AA               	clrf	_aux
   722     0123  01AB               	clrf	_aux+1
   723                           
   724                           ;main.c: 57:     while(1){
   725     0124  01AC               	clrf	_dec
   726     0125  01AD               	clrf	_dec+1
   727     0126                     i1l38:
   728     0126  0008               	return
   729     0127                     __end_of_math:
   730                           
   731                           	psect	text3
   732     008C                     __ptext3:	
   733 ;; *************** function ___awmod *****************
   734 ;; Defined at:
   735 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  divisor         2    0[COMMON] int 
   738 ;;  dividend        2    2[COMMON] int 
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  sign            1    5[COMMON] unsigned char 
   741 ;;  counter         1    4[COMMON] unsigned char 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  2    0[COMMON] int 
   744 ;; Registers used:
   745 ;;		wreg, status,2, status,0
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   751 ;;      Params:         4       0       0       0       0
   752 ;;      Locals:         2       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0
   754 ;;      Totals:         6       0       0       0       0
   755 ;;Total ram usage:        6 bytes
   756 ;; Hardware stack levels used: 1
   757 ;; This function calls:
   758 ;;		Nothing
   759 ;; This function is called by:
   760 ;;		_math
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764     008C                     ___awmod:	
   765                           ;psect for function ___awmod
   766                           
   767     008C                     i1l776:	
   768                           ;incstack = 0
   769                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   770                           
   771     008C  01F5               	clrf	___awmod@sign
   772     008D                     i1l778:
   773     008D  1FF3               	btfss	___awmod@dividend+1,7
   774     008E  2890               	goto	u32_21
   775     008F  2891               	goto	u32_20
   776     0090                     u32_21:
   777     0090  2898               	goto	i1l784
   778     0091                     u32_20:
   779     0091                     i1l780:
   780     0091  09F2               	comf	___awmod@dividend,f
   781     0092  09F3               	comf	___awmod@dividend+1,f
   782     0093  0AF2               	incf	___awmod@dividend,f
   783     0094  1903               	skipnz
   784     0095  0AF3               	incf	___awmod@dividend+1,f
   785     0096                     i1l782:
   786     0096  3001               	movlw	1
   787     0097  00F5               	movwf	___awmod@sign
   788     0098                     i1l784:
   789     0098  1FF1               	btfss	___awmod@divisor+1,7
   790     0099  289B               	goto	u33_21
   791     009A  289C               	goto	u33_20
   792     009B                     u33_21:
   793     009B  28A1               	goto	i1l788
   794     009C                     u33_20:
   795     009C                     i1l786:
   796     009C  09F0               	comf	___awmod@divisor,f
   797     009D  09F1               	comf	___awmod@divisor+1,f
   798     009E  0AF0               	incf	___awmod@divisor,f
   799     009F  1903               	skipnz
   800     00A0  0AF1               	incf	___awmod@divisor+1,f
   801     00A1                     i1l788:
   802     00A1  0870               	movf	___awmod@divisor,w
   803     00A2  0471               	iorwf	___awmod@divisor+1,w
   804     00A3  1903               	btfsc	3,2
   805     00A4  28A6               	goto	u34_21
   806     00A5  28A7               	goto	u34_20
   807     00A6                     u34_21:
   808     00A6  28D4               	goto	i1l806
   809     00A7                     u34_20:
   810     00A7                     i1l790:
   811     00A7  3001               	movlw	1
   812     00A8  00F4               	movwf	___awmod@counter
   813     00A9  28B3               	goto	i1l796
   814     00AA                     i1l792:
   815     00AA  3001               	movlw	1
   816     00AB                     u35_25:
   817     00AB  1003               	clrc
   818     00AC  0DF0               	rlf	___awmod@divisor,f
   819     00AD  0DF1               	rlf	___awmod@divisor+1,f
   820     00AE  3EFF               	addlw	-1
   821     00AF  1D03               	skipz
   822     00B0  28AB               	goto	u35_25
   823     00B1                     i1l794:
   824     00B1  3001               	movlw	1
   825     00B2  07F4               	addwf	___awmod@counter,f
   826     00B3                     i1l796:
   827     00B3  1FF1               	btfss	___awmod@divisor+1,7
   828     00B4  28B6               	goto	u36_21
   829     00B5  28B7               	goto	u36_20
   830     00B6                     u36_21:
   831     00B6  28AA               	goto	i1l792
   832     00B7                     u36_20:
   833     00B7                     i1l798:
   834     00B7  0871               	movf	___awmod@divisor+1,w
   835     00B8  0273               	subwf	___awmod@dividend+1,w
   836     00B9  1D03               	skipz
   837     00BA  28BD               	goto	u37_25
   838     00BB  0870               	movf	___awmod@divisor,w
   839     00BC  0272               	subwf	___awmod@dividend,w
   840     00BD                     u37_25:
   841     00BD  1C03               	skipc
   842     00BE  28C0               	goto	u37_21
   843     00BF  28C1               	goto	u37_20
   844     00C0                     u37_21:
   845     00C0  28C7               	goto	i1l802
   846     00C1                     u37_20:
   847     00C1                     i1l800:
   848     00C1  0870               	movf	___awmod@divisor,w
   849     00C2  02F2               	subwf	___awmod@dividend,f
   850     00C3  0871               	movf	___awmod@divisor+1,w
   851     00C4  1C03               	skipc
   852     00C5  03F3               	decf	___awmod@dividend+1,f
   853     00C6  02F3               	subwf	___awmod@dividend+1,f
   854     00C7                     i1l802:
   855     00C7  3001               	movlw	1
   856     00C8                     u38_25:
   857     00C8  1003               	clrc
   858     00C9  0CF1               	rrf	___awmod@divisor+1,f
   859     00CA  0CF0               	rrf	___awmod@divisor,f
   860     00CB  3EFF               	addlw	-1
   861     00CC  1D03               	skipz
   862     00CD  28C8               	goto	u38_25
   863     00CE                     i1l804:
   864     00CE  3001               	movlw	1
   865     00CF  02F4               	subwf	___awmod@counter,f
   866     00D0  1D03               	btfss	3,2
   867     00D1  28D3               	goto	u39_21
   868     00D2  28D4               	goto	u39_20
   869     00D3                     u39_21:
   870     00D3  28B7               	goto	i1l798
   871     00D4                     u39_20:
   872     00D4                     i1l806:
   873     00D4  0875               	movf	___awmod@sign,w
   874     00D5  1903               	btfsc	3,2
   875     00D6  28D8               	goto	u40_21
   876     00D7  28D9               	goto	u40_20
   877     00D8                     u40_21:
   878     00D8  28DE               	goto	i1l810
   879     00D9                     u40_20:
   880     00D9                     i1l808:
   881     00D9  09F2               	comf	___awmod@dividend,f
   882     00DA  09F3               	comf	___awmod@dividend+1,f
   883     00DB  0AF2               	incf	___awmod@dividend,f
   884     00DC  1903               	skipnz
   885     00DD  0AF3               	incf	___awmod@dividend+1,f
   886     00DE                     i1l810:
   887     00DE  0873               	movf	___awmod@dividend+1,w
   888     00DF  00F1               	movwf	?___awmod+1
   889     00E0  0872               	movf	___awmod@dividend,w
   890     00E1  00F0               	movwf	?___awmod
   891     00E2                     i1l304:
   892     00E2  0008               	return
   893     00E3                     __end_of___awmod:
   894                           
   895                           	psect	text4
   896     0029                     __ptext4:	
   897 ;; *************** function ___awdiv *****************
   898 ;; Defined at:
   899 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;  divisor         2    0[COMMON] int 
   902 ;;  dividend        2    2[COMMON] int 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  quotient        2    6[COMMON] int 
   905 ;;  sign            1    5[COMMON] unsigned char 
   906 ;;  counter         1    4[COMMON] unsigned char 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  2    0[COMMON] int 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   916 ;;      Params:         4       0       0       0       0
   917 ;;      Locals:         4       0       0       0       0
   918 ;;      Temps:          0       0       0       0       0
   919 ;;      Totals:         8       0       0       0       0
   920 ;;Total ram usage:        8 bytes
   921 ;; Hardware stack levels used: 1
   922 ;; This function calls:
   923 ;;		Nothing
   924 ;; This function is called by:
   925 ;;		_math
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929     0029                     ___awdiv:	
   930                           ;psect for function ___awdiv
   931                           
   932     0029                     i1l732:	
   933                           ;incstack = 0
   934                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   935                           
   936     0029  01F5               	clrf	___awdiv@sign
   937     002A                     i1l734:
   938     002A  1FF1               	btfss	___awdiv@divisor+1,7
   939     002B  282D               	goto	u22_21
   940     002C  282E               	goto	u22_20
   941     002D                     u22_21:
   942     002D  2835               	goto	i1l740
   943     002E                     u22_20:
   944     002E                     i1l736:
   945     002E  09F0               	comf	___awdiv@divisor,f
   946     002F  09F1               	comf	___awdiv@divisor+1,f
   947     0030  0AF0               	incf	___awdiv@divisor,f
   948     0031  1903               	skipnz
   949     0032  0AF1               	incf	___awdiv@divisor+1,f
   950     0033                     i1l738:
   951     0033  3001               	movlw	1
   952     0034  00F5               	movwf	___awdiv@sign
   953     0035                     i1l740:
   954     0035  1FF3               	btfss	___awdiv@dividend+1,7
   955     0036  2838               	goto	u23_21
   956     0037  2839               	goto	u23_20
   957     0038                     u23_21:
   958     0038  2840               	goto	i1l746
   959     0039                     u23_20:
   960     0039                     i1l742:
   961     0039  09F2               	comf	___awdiv@dividend,f
   962     003A  09F3               	comf	___awdiv@dividend+1,f
   963     003B  0AF2               	incf	___awdiv@dividend,f
   964     003C  1903               	skipnz
   965     003D  0AF3               	incf	___awdiv@dividend+1,f
   966     003E                     i1l744:
   967     003E  3001               	movlw	1
   968     003F  06F5               	xorwf	___awdiv@sign,f
   969     0040                     i1l746:
   970     0040  01F6               	clrf	___awdiv@quotient
   971     0041  01F7               	clrf	___awdiv@quotient+1
   972     0042                     i1l748:
   973     0042  0870               	movf	___awdiv@divisor,w
   974     0043  0471               	iorwf	___awdiv@divisor+1,w
   975     0044  1903               	btfsc	3,2
   976     0045  2847               	goto	u24_21
   977     0046  2848               	goto	u24_20
   978     0047                     u24_21:
   979     0047  287D               	goto	i1l768
   980     0048                     u24_20:
   981     0048                     i1l750:
   982     0048  3001               	movlw	1
   983     0049  00F4               	movwf	___awdiv@counter
   984     004A  2854               	goto	i1l756
   985     004B                     i1l752:
   986     004B  3001               	movlw	1
   987     004C                     u25_25:
   988     004C  1003               	clrc
   989     004D  0DF0               	rlf	___awdiv@divisor,f
   990     004E  0DF1               	rlf	___awdiv@divisor+1,f
   991     004F  3EFF               	addlw	-1
   992     0050  1D03               	skipz
   993     0051  284C               	goto	u25_25
   994     0052                     i1l754:
   995     0052  3001               	movlw	1
   996     0053  07F4               	addwf	___awdiv@counter,f
   997     0054                     i1l756:
   998     0054  1FF1               	btfss	___awdiv@divisor+1,7
   999     0055  2857               	goto	u26_21
  1000     0056  2858               	goto	u26_20
  1001     0057                     u26_21:
  1002     0057  284B               	goto	i1l752
  1003     0058                     u26_20:
  1004     0058                     i1l758:
  1005     0058  3001               	movlw	1
  1006     0059                     u27_25:
  1007     0059  1003               	clrc
  1008     005A  0DF6               	rlf	___awdiv@quotient,f
  1009     005B  0DF7               	rlf	___awdiv@quotient+1,f
  1010     005C  3EFF               	addlw	-1
  1011     005D  1D03               	skipz
  1012     005E  2859               	goto	u27_25
  1013     005F  0871               	movf	___awdiv@divisor+1,w
  1014     0060  0273               	subwf	___awdiv@dividend+1,w
  1015     0061  1D03               	skipz
  1016     0062  2865               	goto	u28_25
  1017     0063  0870               	movf	___awdiv@divisor,w
  1018     0064  0272               	subwf	___awdiv@dividend,w
  1019     0065                     u28_25:
  1020     0065  1C03               	skipc
  1021     0066  2868               	goto	u28_21
  1022     0067  2869               	goto	u28_20
  1023     0068                     u28_21:
  1024     0068  2870               	goto	i1l764
  1025     0069                     u28_20:
  1026     0069                     i1l760:
  1027     0069  0870               	movf	___awdiv@divisor,w
  1028     006A  02F2               	subwf	___awdiv@dividend,f
  1029     006B  0871               	movf	___awdiv@divisor+1,w
  1030     006C  1C03               	skipc
  1031     006D  03F3               	decf	___awdiv@dividend+1,f
  1032     006E  02F3               	subwf	___awdiv@dividend+1,f
  1033     006F                     i1l762:
  1034     006F  1476               	bsf	___awdiv@quotient,0
  1035     0070                     i1l764:
  1036     0070  3001               	movlw	1
  1037     0071                     u29_25:
  1038     0071  1003               	clrc
  1039     0072  0CF1               	rrf	___awdiv@divisor+1,f
  1040     0073  0CF0               	rrf	___awdiv@divisor,f
  1041     0074  3EFF               	addlw	-1
  1042     0075  1D03               	skipz
  1043     0076  2871               	goto	u29_25
  1044     0077                     i1l766:
  1045     0077  3001               	movlw	1
  1046     0078  02F4               	subwf	___awdiv@counter,f
  1047     0079  1D03               	btfss	3,2
  1048     007A  287C               	goto	u30_21
  1049     007B  287D               	goto	u30_20
  1050     007C                     u30_21:
  1051     007C  2858               	goto	i1l758
  1052     007D                     u30_20:
  1053     007D                     i1l768:
  1054     007D  0875               	movf	___awdiv@sign,w
  1055     007E  1903               	btfsc	3,2
  1056     007F  2881               	goto	u31_21
  1057     0080  2882               	goto	u31_20
  1058     0081                     u31_21:
  1059     0081  2887               	goto	i1l772
  1060     0082                     u31_20:
  1061     0082                     i1l770:
  1062     0082  09F6               	comf	___awdiv@quotient,f
  1063     0083  09F7               	comf	___awdiv@quotient+1,f
  1064     0084  0AF6               	incf	___awdiv@quotient,f
  1065     0085  1903               	skipnz
  1066     0086  0AF7               	incf	___awdiv@quotient+1,f
  1067     0087                     i1l772:
  1068     0087  0877               	movf	___awdiv@quotient+1,w
  1069     0088  00F1               	movwf	?___awdiv+1
  1070     0089  0876               	movf	___awdiv@quotient,w
  1071     008A  00F0               	movwf	?___awdiv
  1072     008B                     i1l291:
  1073     008B  0008               	return
  1074     008C                     __end_of___awdiv:
  1075     0002                     ___latbits      equ	2
  1076     007E                     btemp           set	126	;btemp
  1077     007E                     wtemp0          set	126
  1078                           
  1079                           	psect	config
  1080                           
  1081                           ;Config register CONFIG1 @ 0x2007
  1082                           ;	Oscillator Selection bits
  1083                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  1084                           ;	Watchdog Timer Enable bit
  1085                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1086                           ;	Power-up Timer Enable bit
  1087                           ;	PWRTE = OFF, PWRT disabled
  1088                           ;	RE3/MCLR pin function select bit
  1089                           ;	MCLRE = 0x1, unprogrammed default
  1090                           ;	Code Protection bit
  1091                           ;	CP = OFF, Program memory code protection is disabled
  1092                           ;	Data Code Protection bit
  1093                           ;	CPD = OFF, Data memory code protection is disabled
  1094                           ;	Brown Out Reset Selection bits
  1095                           ;	BOREN = ON, BOR enabled
  1096                           ;	Internal External Switchover bit
  1097                           ;	IESO = 0x1, unprogrammed default
  1098                           ;	Fail-Safe Clock Monitor Enabled bit
  1099                           ;	FCMEN = 0x1, unprogrammed default
  1100                           ;	Low Voltage Programming Enable bit
  1101                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1102                           ;	In-Circuit Debugger Mode bit
  1103                           ;	DEBUG = 0x1, unprogrammed default
  1104     2007                     	org	8199
  1105     2007  2FF1               	dw	12273
  1106                           
  1107                           ;Config register CONFIG2 @ 0x2008
  1108                           ;	Brown-out Reset Selection bit
  1109                           ;	BOR4V = 0x1, unprogrammed default
  1110                           ;	Flash Program Memory Self Write Enable bits
  1111                           ;	WRT = OFF, Write protection off
  1112     2008                     	org	8200
  1113     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80      1      15
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _math->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR                                                  3     3      0     600
                                              8 COMMON     3     3      0
                               _math
 ---------------------------------------------------------------------------------
 (2) _math                                                 0     0      0     600
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     302
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)
   _math
     ___awdiv
     ___awmod

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      1      15     18.8%
BITBANK0            80      0       0      0.0%
COMMON              14     11      13     92.9%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      28      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Jun 10 17:56:35 2025

                      pc 0002             ___awdiv@sign 0075                       fsr 0004  
                    l830 0130                      l840 0137                      l832 0131  
                    l824 0127                      l850 0146                      l842 0138  
                    l834 0133                      l826 012B                      l852 014E  
                    l844 0139                      l836 0136                      l828 012F  
                    l854 0152                      l846 013C                      l838 0137  
                    l856 0158                      l848 0140                      _GIE 005F  
                    _ISR 0164                      u437 014A                      u447 015C  
                    _dec 002C                      _aux 002A                      _num 007B  
                    fsr0 0004                      indf 0000             ___awmod@sign 0075  
                   ?_ISR 0070                     _INTE 005C                     _INTF 0059  
                   i1l52 0170                     i1l38 0126                     _main 0127  
                   _math 00E3                     btemp 007E                     start 000E  
                  ??_ISR 0078                    ?_main 0070                    ?_math 0070  
        __end_of___awdiv 008C          __end_of___awmod 00E3                    _ANSEL 0188  
        ___awdiv@divisor 0070                    i1l304 00E2                    i1l291 008B  
                  i1l800 00C1                    i1l810 00DE                    i1l802 00C7  
                  i1l740 0035                    i1l732 0029                    i1l804 00CE  
                  i1l820 0113                    i1l750 0048                    i1l742 0039  
                  i1l734 002A                    i1l806 00D4                    i1l822 0120  
                  i1l814 00E3                    i1l760 0069                    i1l752 004B  
                  i1l744 003E                    i1l736 002E                    i1l808 00D9  
                  i1l816 00F8                    i1l770 0082                    i1l762 006F  
                  i1l754 0052                    i1l746 0040                    i1l738 0033  
                  i1l818 0100                    i1l772 0087                    i1l764 0070  
                  i1l756 0054                    i1l748 0042                    i1l780 0091  
                  i1l860 0168                    i1l766 0077                    i1l758 0058  
                  i1l790 00A7                    i1l782 0096                    i1l862 0169  
                  i1l768 007D                    i1l792 00AA                    i1l784 0098  
                  i1l776 008C                    i1l864 016E                    i1l794 00B1  
                  i1l786 009C                    i1l778 008D                    i1l866 016F  
                  i1l858 0164                    i1l796 00B3                    i1l788 00A1  
                  i1l798 00B7          ___awdiv@counter 0074                    u30_20 007D  
                  u22_20 002E                    u30_21 007C                    u22_21 002D  
                  u31_20 0082                    u23_20 0039                    u31_21 0081  
                  u23_21 0038                    u24_20 0048                    u40_20 00D9  
                  u32_20 0091                    u24_21 0047                    u40_21 00D8  
                  u32_21 0090                    u33_20 009C                    u41_20 0120  
                  u33_21 009B                    u41_21 011F                    u25_25 004C  
                  u41_25 011C                    u26_20 0058                    u34_20 00A7  
                  u42_20 0168                    u26_21 0057                    u34_21 00A6  
                  u42_21 0167                    _PORTC 0007                    _PORTD 0008  
                  u27_25 0059                    u35_25 00AB                    u28_20 0069  
                  u36_20 00B7                    u28_21 0068                    u36_21 00B6  
                  u28_25 0065                    u37_20 00C1                    u37_21 00C0  
                  u29_25 0071                    u37_25 00BD                    u38_25 00C8  
                  u39_20 00D4                    u39_21 00D3                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0011  
           __end_of_main 0164             __end_of_math 0127                   ??_main 002E  
                 ??_math 0078         ___awdiv@dividend 0072                   _ANSELH 0189  
                 _INTEDG 040E                ??___awdiv 0074                ??___awmod 0074  
                 _digito 0020         ___awdiv@quotient 0076          ___awmod@divisor 0070  
        ___awmod@counter 0074                   saved_w 007E  __end_of__initialization 0025  
         __pcstackCOMMON 0070             __pidataBANK0 018C               __pbssBANK0 002A  
             __pmaintext 0127               __pintentry 0004                  ___awdiv 0029  
                ___awmod 008C                  __ptext1 0164                  __ptext2 00E3  
                __ptext3 008C                  __ptext4 0029         ___awmod@dividend 0072  
   end_of_initialization 0025      start_initialization 0011              __end_of_ISR 0179  
             init_fetch0 0179              __pdataBANK0 0020              __pbssCOMMON 007B  
              ___latbits 0002            __pcstackBANK0 002E                 ?___awdiv 0070  
               ?___awmod 0070        interrupt_function 0004                 init_ram0 017D  
               intlevel1 0000               _OPTION_REG 0081  
