

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Jun 24 15:40:35 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=1
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 26/03/2025 GMT
    18                           ; 
    19                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     0008                     PORTD           equ	8	;# 
    68     0009                     PORTE           equ	9	;# 
    69     000A                     PCLATH          equ	10	;# 
    70     000B                     INTCON          equ	11	;# 
    71     000C                     PIR1            equ	12	;# 
    72     000D                     PIR2            equ	13	;# 
    73     000E                     TMR1            equ	14	;# 
    74     000E                     TMR1L           equ	14	;# 
    75     000F                     TMR1H           equ	15	;# 
    76     0010                     T1CON           equ	16	;# 
    77     0011                     TMR2            equ	17	;# 
    78     0012                     T2CON           equ	18	;# 
    79     0013                     SSPBUF          equ	19	;# 
    80     0014                     SSPCON          equ	20	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001B                     CCPR2           equ	27	;# 
    89     001B                     CCPR2L          equ	27	;# 
    90     001C                     CCPR2H          equ	28	;# 
    91     001D                     CCP2CON         equ	29	;# 
    92     001E                     ADRESH          equ	30	;# 
    93     001F                     ADCON0          equ	31	;# 
    94     0081                     OPTION_REG      equ	129	;# 
    95     0085                     TRISA           equ	133	;# 
    96     0086                     TRISB           equ	134	;# 
    97     0087                     TRISC           equ	135	;# 
    98     0088                     TRISD           equ	136	;# 
    99     0089                     TRISE           equ	137	;# 
   100     008C                     PIE1            equ	140	;# 
   101     008D                     PIE2            equ	141	;# 
   102     008E                     PCON            equ	142	;# 
   103     008F                     OSCCON          equ	143	;# 
   104     0090                     OSCTUNE         equ	144	;# 
   105     0091                     SSPCON2         equ	145	;# 
   106     0092                     PR2             equ	146	;# 
   107     0093                     SSPADD          equ	147	;# 
   108     0093                     SSPMSK          equ	147	;# 
   109     0093                     MSK             equ	147	;# 
   110     0094                     SSPSTAT         equ	148	;# 
   111     0095                     WPUB            equ	149	;# 
   112     0096                     IOCB            equ	150	;# 
   113     0097                     VRCON           equ	151	;# 
   114     0098                     TXSTA           equ	152	;# 
   115     0099                     SPBRG           equ	153	;# 
   116     009A                     SPBRGH          equ	154	;# 
   117     009B                     PWM1CON         equ	155	;# 
   118     009C                     ECCPAS          equ	156	;# 
   119     009D                     PSTRCON         equ	157	;# 
   120     009E                     ADRESL          equ	158	;# 
   121     009F                     ADCON1          equ	159	;# 
   122     0105                     WDTCON          equ	261	;# 
   123     0107                     CM1CON0         equ	263	;# 
   124     0108                     CM2CON0         equ	264	;# 
   125     0109                     CM2CON1         equ	265	;# 
   126     010C                     EEDATA          equ	268	;# 
   127     010C                     EEDAT           equ	268	;# 
   128     010D                     EEADR           equ	269	;# 
   129     010E                     EEDATH          equ	270	;# 
   130     010F                     EEADRH          equ	271	;# 
   131     0185                     SRCON           equ	389	;# 
   132     0187                     BAUDCTL         equ	391	;# 
   133     0188                     ANSEL           equ	392	;# 
   134     0189                     ANSELH          equ	393	;# 
   135     018C                     EECON1          equ	396	;# 
   136     018D                     EECON2          equ	397	;# 
   137     0000                     INDF            equ	0	;# 
   138     0001                     TMR0            equ	1	;# 
   139     0002                     PCL             equ	2	;# 
   140     0003                     STATUS          equ	3	;# 
   141     0004                     FSR             equ	4	;# 
   142     0005                     PORTA           equ	5	;# 
   143     0006                     PORTB           equ	6	;# 
   144     0007                     PORTC           equ	7	;# 
   145     0008                     PORTD           equ	8	;# 
   146     0009                     PORTE           equ	9	;# 
   147     000A                     PCLATH          equ	10	;# 
   148     000B                     INTCON          equ	11	;# 
   149     000C                     PIR1            equ	12	;# 
   150     000D                     PIR2            equ	13	;# 
   151     000E                     TMR1            equ	14	;# 
   152     000E                     TMR1L           equ	14	;# 
   153     000F                     TMR1H           equ	15	;# 
   154     0010                     T1CON           equ	16	;# 
   155     0011                     TMR2            equ	17	;# 
   156     0012                     T2CON           equ	18	;# 
   157     0013                     SSPBUF          equ	19	;# 
   158     0014                     SSPCON          equ	20	;# 
   159     0015                     CCPR1           equ	21	;# 
   160     0015                     CCPR1L          equ	21	;# 
   161     0016                     CCPR1H          equ	22	;# 
   162     0017                     CCP1CON         equ	23	;# 
   163     0018                     RCSTA           equ	24	;# 
   164     0019                     TXREG           equ	25	;# 
   165     001A                     RCREG           equ	26	;# 
   166     001B                     CCPR2           equ	27	;# 
   167     001B                     CCPR2L          equ	27	;# 
   168     001C                     CCPR2H          equ	28	;# 
   169     001D                     CCP2CON         equ	29	;# 
   170     001E                     ADRESH          equ	30	;# 
   171     001F                     ADCON0          equ	31	;# 
   172     0081                     OPTION_REG      equ	129	;# 
   173     0085                     TRISA           equ	133	;# 
   174     0086                     TRISB           equ	134	;# 
   175     0087                     TRISC           equ	135	;# 
   176     0088                     TRISD           equ	136	;# 
   177     0089                     TRISE           equ	137	;# 
   178     008C                     PIE1            equ	140	;# 
   179     008D                     PIE2            equ	141	;# 
   180     008E                     PCON            equ	142	;# 
   181     008F                     OSCCON          equ	143	;# 
   182     0090                     OSCTUNE         equ	144	;# 
   183     0091                     SSPCON2         equ	145	;# 
   184     0092                     PR2             equ	146	;# 
   185     0093                     SSPADD          equ	147	;# 
   186     0093                     SSPMSK          equ	147	;# 
   187     0093                     MSK             equ	147	;# 
   188     0094                     SSPSTAT         equ	148	;# 
   189     0095                     WPUB            equ	149	;# 
   190     0096                     IOCB            equ	150	;# 
   191     0097                     VRCON           equ	151	;# 
   192     0098                     TXSTA           equ	152	;# 
   193     0099                     SPBRG           equ	153	;# 
   194     009A                     SPBRGH          equ	154	;# 
   195     009B                     PWM1CON         equ	155	;# 
   196     009C                     ECCPAS          equ	156	;# 
   197     009D                     PSTRCON         equ	157	;# 
   198     009E                     ADRESL          equ	158	;# 
   199     009F                     ADCON1          equ	159	;# 
   200     0105                     WDTCON          equ	261	;# 
   201     0107                     CM1CON0         equ	263	;# 
   202     0108                     CM2CON0         equ	264	;# 
   203     0109                     CM2CON1         equ	265	;# 
   204     010C                     EEDATA          equ	268	;# 
   205     010C                     EEDAT           equ	268	;# 
   206     010D                     EEADR           equ	269	;# 
   207     010E                     EEDATH          equ	270	;# 
   208     010F                     EEADRH          equ	271	;# 
   209     0185                     SRCON           equ	389	;# 
   210     0187                     BAUDCTL         equ	391	;# 
   211     0188                     ANSEL           equ	392	;# 
   212     0189                     ANSELH          equ	393	;# 
   213     018C                     EECON1          equ	396	;# 
   214     018D                     EECON2          equ	397	;# 
   215     0015                     _CCPR1L         set	21
   216     001E                     _ADRESH         set	30
   217     001F                     _ADCON0         set	31
   218     0012                     _T2CONbits      set	18
   219     0017                     _CCP1CONbits    set	23
   220     00F9                     _GO_nDONE       set	249
   221     0087                     _TRISCbits      set	135
   222     009E                     _ADRESL         set	158
   223     009F                     _ADCON1         set	159
   224     0092                     _PR2            set	146
   225     0188                     _ANSEL          set	392
   226                           
   227                           	psect	cinit
   228     07FC                     start_initialization:	
   229                           ; #config settings
   230                           
   231     07FC                     __initialization:
   232     07FC                     end_of_initialization:	
   233                           ;End of C runtime variable initialization code
   234                           
   235     07FC                     __end_of__initialization:
   236     07FC  0183               	clrf	3
   237     07FD  120A  118A  2FAF   	ljmp	_main	;jump to C main() function
   238                           
   239                           	psect	cstackCOMMON
   240     0070                     __pcstackCOMMON:
   241     0070                     ?_PWM_init:
   242     0070                     ?_ADC_initialize:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ?_PWM_val:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?_main:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ?_ADC_read:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ?___wmul:	
   255                           ; 2 bytes @ 0x0
   256                           
   257     0070                     PWM_val@intensidad:	
   258                           ; 2 bytes @ 0x0
   259                           
   260     0070                     ___wmul@multiplier:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ??_PWM_init:	
   264                           ; 2 bytes @ 0x0
   265                           
   266     0070                     ??_ADC_initialize:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ??_PWM_val:	
   270                           ; 1 bytes @ 0x0
   271                           
   272                           
   273                           ; 1 bytes @ 0x0
   274     0070                     	ds	2
   275     0072                     ___wmul@multiplicand:
   276     0072                     ??_ADC_read:	
   277                           ; 2 bytes @ 0x2
   278                           
   279                           
   280                           ; 1 bytes @ 0x2
   281     0072                     	ds	2
   282     0074                     ___wmul@product:
   283     0074                     ??___wmul:	
   284                           ; 2 bytes @ 0x4
   285                           
   286                           
   287                           ; 1 bytes @ 0x4
   288     0074                     	ds	2
   289     0076                     ?___lwdiv:
   290     0076                     ___lwdiv@divisor:	
   291                           ; 2 bytes @ 0x6
   292                           
   293                           
   294                           ; 2 bytes @ 0x6
   295     0076                     	ds	2
   296     0078                     ___lwdiv@dividend:
   297                           
   298                           ; 2 bytes @ 0x8
   299     0078                     	ds	2
   300     007A                     ___lwdiv@quotient:
   301     007A                     ??___lwdiv:	
   302                           ; 2 bytes @ 0xA
   303                           
   304                           
   305                           ; 1 bytes @ 0xA
   306     007A                     	ds	2
   307     007C                     ___lwdiv@counter:
   308                           
   309                           ; 1 bytes @ 0xC
   310     007C                     	ds	1
   311                           
   312                           	psect	cstackBANK0
   313     0020                     __pcstackBANK0:
   314     0020                     ??_main:
   315                           
   316                           ; 1 bytes @ 0x0
   317     0020                     	ds	2
   318     0022                     main@adc_result:
   319                           
   320                           ; 2 bytes @ 0x2
   321     0022                     	ds	2
   322     0024                     main@rotation:
   323                           
   324                           ; 2 bytes @ 0x4
   325     0024                     	ds	2
   326                           
   327                           	psect	maintext
   328     07AF                     __pmaintext:	
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 51 in file "main.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;  rotation        2    4[BANK0 ] unsigned int 
   339 ;;  adc_result      2    2[BANK0 ] unsigned int 
   340 ;; Return value:  Size  Location     Type
   341 ;;                  1    wreg      void 
   342 ;; Registers used:
   343 ;;		wreg, status,2, status,0, pclath, cstack
   344 ;; Tracked objects:
   345 ;;		On entry : B00/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   349 ;;      Params:         0       0       0       0       0
   350 ;;      Locals:         0       4       0       0       0
   351 ;;      Temps:          0       2       0       0       0
   352 ;;      Totals:         0       6       0       0       0
   353 ;;Total ram usage:        6 bytes
   354 ;; Hardware stack levels required when called: 1
   355 ;; This function calls:
   356 ;;		_ADC_initialize
   357 ;;		_ADC_read
   358 ;;		_PWM_init
   359 ;;		_PWM_val
   360 ;;		___lwdiv
   361 ;;		___wmul
   362 ;; This function is called by:
   363 ;;		Startup code after reset
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367     07AF                     _main:	
   368                           ;psect for function _main
   369                           
   370     07AF                     l717:	
   371                           ;incstack = 0
   372                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   373                           
   374                           
   375                           ;main.c: 53: }
   376     07AF  1683               	bsf	3,5	;RP0=1, select bank1
   377     07B0  1303               	bcf	3,6	;RP1=0, select bank1
   378     07B1  1107               	bcf	7,2	;volatile
   379     07B2                     l719:
   380     07B2  120A  118A  2727  120A  118A  	fcall	_PWM_init
   381     07B7                     l721:
   382     07B7  120A  118A  271A  120A  118A  	fcall	_ADC_initialize
   383     07BC                     l723:
   384     07BC  120A  118A  2737  120A  118A  	fcall	_ADC_read
   385     07C1  0871               	movf	?_ADC_read+1,w
   386     07C2  1283               	bcf	3,5	;RP0=0, select bank0
   387     07C3  1303               	bcf	3,6	;RP1=0, select bank0
   388     07C4  00A3               	movwf	main@adc_result+1
   389     07C5  0870               	movf	?_ADC_read,w
   390     07C6  00A2               	movwf	main@adc_result
   391     07C7                     l725:
   392     07C7  30FF               	movlw	255
   393     07C8  00F6               	movwf	___lwdiv@divisor
   394     07C9  3003               	movlw	3
   395     07CA  00F7               	movwf	___lwdiv@divisor+1
   396     07CB  0823               	movf	main@adc_result+1,w
   397     07CC  00F1               	movwf	___wmul@multiplier+1
   398     07CD  0822               	movf	main@adc_result,w
   399     07CE  00F0               	movwf	___wmul@multiplier
   400     07CF  30FF               	movlw	255
   401     07D0  00F2               	movwf	___wmul@multiplicand
   402     07D1  3000               	movlw	0
   403     07D2  00F3               	movwf	___wmul@multiplicand+1
   404     07D3  120A  118A  2748  120A  118A  	fcall	___wmul
   405     07D8  0871               	movf	?___wmul+1,w
   406     07D9  00F9               	movwf	___lwdiv@dividend+1
   407     07DA  0870               	movf	?___wmul,w
   408     07DB  00F8               	movwf	___lwdiv@dividend
   409     07DC  120A  118A  276D  120A  118A  	fcall	___lwdiv
   410     07E1  0877               	movf	?___lwdiv+1,w
   411     07E2  1283               	bcf	3,5	;RP0=0, select bank0
   412     07E3  1303               	bcf	3,6	;RP1=0, select bank0
   413     07E4  00A5               	movwf	main@rotation+1
   414     07E5  0876               	movf	?___lwdiv,w
   415     07E6  00A4               	movwf	main@rotation
   416     07E7                     l727:
   417     07E7  0824               	movf	main@rotation,w
   418     07E8  120A  118A  2714  120A  118A  	fcall	_PWM_val
   419     07ED                     l729:
   420     07ED  301A               	movlw	26
   421     07EE  1283               	bcf	3,5	;RP0=0, select bank0
   422     07EF  1303               	bcf	3,6	;RP1=0, select bank0
   423     07F0  00A1               	movwf	??_main+1
   424     07F1  30F7               	movlw	247
   425     07F2  00A0               	movwf	??_main
   426     07F3                     u257:
   427     07F3  0BA0               	decfsz	??_main,f
   428     07F4  2FF3               	goto	u257
   429     07F5  0BA1               	decfsz	??_main+1,f
   430     07F6  2FF3               	goto	u257
   431     07F7  2FF8               	nop2
   432     07F8  2FBC               	goto	l723
   433     07F9  120A  118A  2800   	ljmp	start
   434     07FC                     __end_of_main:
   435                           
   436                           	psect	text1
   437     0748                     __ptext1:	
   438 ;; *************** function ___wmul *****************
   439 ;; Defined at:
   440 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;  multiplier      2    0[COMMON] unsigned int 
   443 ;;  multiplicand    2    2[COMMON] unsigned int 
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  product         2    4[COMMON] unsigned int 
   446 ;; Return value:  Size  Location     Type
   447 ;;                  2    0[COMMON] unsigned int 
   448 ;; Registers used:
   449 ;;		wreg, status,2, status,0
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   455 ;;      Params:         4       0       0       0       0
   456 ;;      Locals:         2       0       0       0       0
   457 ;;      Temps:          0       0       0       0       0
   458 ;;      Totals:         6       0       0       0       0
   459 ;;Total ram usage:        6 bytes
   460 ;; Hardware stack levels used: 1
   461 ;; This function calls:
   462 ;;		Nothing
   463 ;; This function is called by:
   464 ;;		_main
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468     0748                     ___wmul:	
   469                           ;psect for function ___wmul
   470                           
   471     0748                     l677:	
   472                           ;incstack = 0
   473                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   474                           
   475     0748  01F4               	clrf	___wmul@product
   476     0749  01F5               	clrf	___wmul@product+1
   477     074A                     l679:
   478     074A  1C70               	btfss	___wmul@multiplier,0
   479     074B  2F4D               	goto	u141
   480     074C  2F4E               	goto	u140
   481     074D                     u141:
   482     074D  2F54               	goto	l133
   483     074E                     u140:
   484     074E                     l681:
   485     074E  0872               	movf	___wmul@multiplicand,w
   486     074F  07F4               	addwf	___wmul@product,f
   487     0750  1803               	skipnc
   488     0751  0AF5               	incf	___wmul@product+1,f
   489     0752  0873               	movf	___wmul@multiplicand+1,w
   490     0753  07F5               	addwf	___wmul@product+1,f
   491     0754                     l133:
   492     0754  3001               	movlw	1
   493     0755                     u155:
   494     0755  1003               	clrc
   495     0756  0DF2               	rlf	___wmul@multiplicand,f
   496     0757  0DF3               	rlf	___wmul@multiplicand+1,f
   497     0758  3EFF               	addlw	-1
   498     0759  1D03               	skipz
   499     075A  2F55               	goto	u155
   500     075B                     l683:
   501     075B  3001               	movlw	1
   502     075C                     u165:
   503     075C  1003               	clrc
   504     075D  0CF1               	rrf	___wmul@multiplier+1,f
   505     075E  0CF0               	rrf	___wmul@multiplier,f
   506     075F  3EFF               	addlw	-1
   507     0760  1D03               	skipz
   508     0761  2F5C               	goto	u165
   509     0762                     l685:
   510     0762  0870               	movf	___wmul@multiplier,w
   511     0763  0471               	iorwf	___wmul@multiplier+1,w
   512     0764  1D03               	btfss	3,2
   513     0765  2F67               	goto	u171
   514     0766  2F68               	goto	u170
   515     0767                     u171:
   516     0767  2F4A               	goto	l679
   517     0768                     u170:
   518     0768                     l687:
   519     0768  0875               	movf	___wmul@product+1,w
   520     0769  00F1               	movwf	?___wmul+1
   521     076A  0874               	movf	___wmul@product,w
   522     076B  00F0               	movwf	?___wmul
   523     076C                     l135:
   524     076C  0008               	return
   525     076D                     __end_of___wmul:
   526                           
   527                           	psect	text2
   528     076D                     __ptext2:	
   529 ;; *************** function ___lwdiv *****************
   530 ;; Defined at:
   531 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;  divisor         2    6[COMMON] unsigned int 
   534 ;;  dividend        2    8[COMMON] unsigned int 
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  quotient        2   10[COMMON] unsigned int 
   537 ;;  counter         1   12[COMMON] unsigned char 
   538 ;; Return value:  Size  Location     Type
   539 ;;                  2    6[COMMON] unsigned int 
   540 ;; Registers used:
   541 ;;		wreg, status,2, status,0
   542 ;; Tracked objects:
   543 ;;		On entry : 0/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   547 ;;      Params:         4       0       0       0       0
   548 ;;      Locals:         3       0       0       0       0
   549 ;;      Temps:          0       0       0       0       0
   550 ;;      Totals:         7       0       0       0       0
   551 ;;Total ram usage:        7 bytes
   552 ;; Hardware stack levels used: 1
   553 ;; This function calls:
   554 ;;		Nothing
   555 ;; This function is called by:
   556 ;;		_main
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560     076D                     ___lwdiv:	
   561                           ;psect for function ___lwdiv
   562                           
   563     076D                     l691:	
   564                           ;incstack = 0
   565                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   566                           
   567     076D  01FA               	clrf	___lwdiv@quotient
   568     076E  01FB               	clrf	___lwdiv@quotient+1
   569     076F                     l693:
   570     076F  0876               	movf	___lwdiv@divisor,w
   571     0770  0477               	iorwf	___lwdiv@divisor+1,w
   572     0771  1903               	btfsc	3,2
   573     0772  2F74               	goto	u181
   574     0773  2F75               	goto	u180
   575     0774                     u181:
   576     0774  2FAA               	goto	l713
   577     0775                     u180:
   578     0775                     l695:
   579     0775  3001               	movlw	1
   580     0776  00FC               	movwf	___lwdiv@counter
   581     0777  2F81               	goto	l701
   582     0778                     l697:
   583     0778  3001               	movlw	1
   584     0779                     u195:
   585     0779  1003               	clrc
   586     077A  0DF6               	rlf	___lwdiv@divisor,f
   587     077B  0DF7               	rlf	___lwdiv@divisor+1,f
   588     077C  3EFF               	addlw	-1
   589     077D  1D03               	skipz
   590     077E  2F79               	goto	u195
   591     077F                     l699:
   592     077F  3001               	movlw	1
   593     0780  07FC               	addwf	___lwdiv@counter,f
   594     0781                     l701:
   595     0781  1FF7               	btfss	___lwdiv@divisor+1,7
   596     0782  2F84               	goto	u201
   597     0783  2F85               	goto	u200
   598     0784                     u201:
   599     0784  2F78               	goto	l697
   600     0785                     u200:
   601     0785                     l703:
   602     0785  3001               	movlw	1
   603     0786                     u215:
   604     0786  1003               	clrc
   605     0787  0DFA               	rlf	___lwdiv@quotient,f
   606     0788  0DFB               	rlf	___lwdiv@quotient+1,f
   607     0789  3EFF               	addlw	-1
   608     078A  1D03               	skipz
   609     078B  2F86               	goto	u215
   610     078C  0877               	movf	___lwdiv@divisor+1,w
   611     078D  0279               	subwf	___lwdiv@dividend+1,w
   612     078E  1D03               	skipz
   613     078F  2F92               	goto	u225
   614     0790  0876               	movf	___lwdiv@divisor,w
   615     0791  0278               	subwf	___lwdiv@dividend,w
   616     0792                     u225:
   617     0792  1C03               	skipc
   618     0793  2F95               	goto	u221
   619     0794  2F96               	goto	u220
   620     0795                     u221:
   621     0795  2F9D               	goto	l709
   622     0796                     u220:
   623     0796                     l705:
   624     0796  0876               	movf	___lwdiv@divisor,w
   625     0797  02F8               	subwf	___lwdiv@dividend,f
   626     0798  0877               	movf	___lwdiv@divisor+1,w
   627     0799  1C03               	skipc
   628     079A  03F9               	decf	___lwdiv@dividend+1,f
   629     079B  02F9               	subwf	___lwdiv@dividend+1,f
   630     079C                     l707:
   631     079C  147A               	bsf	___lwdiv@quotient,0
   632     079D                     l709:
   633     079D  3001               	movlw	1
   634     079E                     u235:
   635     079E  1003               	clrc
   636     079F  0CF7               	rrf	___lwdiv@divisor+1,f
   637     07A0  0CF6               	rrf	___lwdiv@divisor,f
   638     07A1  3EFF               	addlw	-1
   639     07A2  1D03               	skipz
   640     07A3  2F9E               	goto	u235
   641     07A4                     l711:
   642     07A4  3001               	movlw	1
   643     07A5  02FC               	subwf	___lwdiv@counter,f
   644     07A6  1D03               	btfss	3,2
   645     07A7  2FA9               	goto	u241
   646     07A8  2FAA               	goto	u240
   647     07A9                     u241:
   648     07A9  2F85               	goto	l703
   649     07AA                     u240:
   650     07AA                     l713:
   651     07AA  087B               	movf	___lwdiv@quotient+1,w
   652     07AB  00F7               	movwf	?___lwdiv+1
   653     07AC  087A               	movf	___lwdiv@quotient,w
   654     07AD  00F6               	movwf	?___lwdiv
   655     07AE                     l413:
   656     07AE  0008               	return
   657     07AF                     __end_of___lwdiv:
   658                           
   659                           	psect	text3
   660     0714                     __ptext3:	
   661 ;; *************** function _PWM_val *****************
   662 ;; Defined at:
   663 ;;		line 46 in file "main.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;  intensidad      1    wreg     unsigned char 
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  intensidad      1    0[COMMON] unsigned char 
   668 ;; Return value:  Size  Location     Type
   669 ;;                  1    wreg      void 
   670 ;; Registers used:
   671 ;;		wreg
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   677 ;;      Params:         0       0       0       0       0
   678 ;;      Locals:         1       0       0       0       0
   679 ;;      Temps:          0       0       0       0       0
   680 ;;      Totals:         1       0       0       0       0
   681 ;;Total ram usage:        1 bytes
   682 ;; Hardware stack levels used: 1
   683 ;; This function calls:
   684 ;;		Nothing
   685 ;; This function is called by:
   686 ;;		_main
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690     0714                     _PWM_val:	
   691                           ;psect for function _PWM_val
   692                           
   693                           
   694                           ;incstack = 0
   695                           ; Regs used in _PWM_val: [wreg]
   696                           ;PWM_val@intensidad stored from wreg
   697     0714  00F0               	movwf	PWM_val@intensidad
   698     0715                     l675:
   699                           
   700                           ;main.c: 46:         unsigned int adc_result = ADC_read();;main.c: 47: ;main.c: 48:     
      +                              unsigned int rotation = ((adc_result * 255) / 1023);
   701     0715  0870               	movf	PWM_val@intensidad,w
   702     0716  1283               	bcf	3,5	;RP0=0, select bank0
   703     0717  1303               	bcf	3,6	;RP1=0, select bank0
   704     0718  0095               	movwf	21	;volatile
   705     0719                     l39:
   706     0719  0008               	return
   707     071A                     __end_of_PWM_val:
   708                           
   709                           	psect	text4
   710     0727                     __ptext4:	
   711 ;; *************** function _PWM_init *****************
   712 ;; Defined at:
   713 ;;		line 15 in file "main.c"
   714 ;; Parameters:    Size  Location     Type
   715 ;;		None
   716 ;; Auto vars:     Size  Location     Type
   717 ;;		None
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg, status,2, status,0
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   727 ;;      Params:         0       0       0       0       0
   728 ;;      Locals:         0       0       0       0       0
   729 ;;      Temps:          0       0       0       0       0
   730 ;;      Totals:         0       0       0       0       0
   731 ;;Total ram usage:        0 bytes
   732 ;; Hardware stack levels used: 1
   733 ;; This function calls:
   734 ;;		Nothing
   735 ;; This function is called by:
   736 ;;		_main
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740     0727                     _PWM_init:	
   741                           ;psect for function _PWM_init
   742                           
   743     0727                     l661:	
   744                           ;incstack = 0
   745                           ; Regs used in _PWM_init: [wreg+status,2+status,0]
   746                           
   747                           
   748                           ;main.c: 17: 
   749     0727  1283               	bcf	3,5	;RP0=0, select bank0
   750     0728  1303               	bcf	3,6	;RP1=0, select bank0
   751     0729  0817               	movf	23,w	;volatile
   752     072A  39F0               	andlw	-16
   753     072B  380C               	iorlw	12
   754     072C  0097               	movwf	23	;volatile
   755                           
   756                           ;main.c: 18: void ADC_initialize()
   757     072D  303F               	movlw	-193
   758     072E  0597               	andwf	23,f	;volatile
   759                           
   760                           ;main.c: 21:     ADCON0 = 0x81;
   761     072F  3003               	movlw	3
   762     0730  0492               	iorwf	18,f	;volatile
   763     0731                     l663:
   764                           
   765                           ;main.c: 22:     ADCON1 = 0x80;
   766     0731  1512               	bsf	18,2	;volatile
   767     0732                     l665:
   768                           
   769                           ;main.c: 24: 
   770     0732  30FF               	movlw	255
   771     0733  1683               	bsf	3,5	;RP0=1, select bank1
   772     0734  1303               	bcf	3,6	;RP1=0, select bank1
   773     0735  0092               	movwf	18	;volatile
   774     0736                     l27:
   775     0736  0008               	return
   776     0737                     __end_of_PWM_init:
   777                           
   778                           	psect	text5
   779     0737                     __ptext5:	
   780 ;; *************** function _ADC_read *****************
   781 ;; Defined at:
   782 ;;		line 38 in file "main.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;		None
   787 ;; Return value:  Size  Location     Type
   788 ;;                  2    0[COMMON] unsigned int 
   789 ;; Registers used:
   790 ;;		wreg
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   796 ;;      Params:         2       0       0       0       0
   797 ;;      Locals:         0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0
   799 ;;      Totals:         2       0       0       0       0
   800 ;;Total ram usage:        2 bytes
   801 ;; Hardware stack levels used: 1
   802 ;; This function calls:
   803 ;;		Nothing
   804 ;; This function is called by:
   805 ;;		_main
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809     0737                     _ADC_read:	
   810                           ;psect for function _ADC_read
   811                           
   812     0737                     l669:	
   813                           ;incstack = 0
   814                           ; Regs used in _ADC_read: [wreg]
   815                           
   816                           
   817                           ;main.c: 40:     TRISCbits.TRISC2 = 0;
   818     0737  2F38               	nop2	;2 cycle nop
   819     0738  2F39               	nop2	;2 cycle nop
   820     0739  0000               	nop
   821                           
   822                           ;main.c: 41:     PWM_init();
   823     073A  1283               	bcf	3,5	;RP0=0, select bank0
   824     073B  1303               	bcf	3,6	;RP1=0, select bank0
   825     073C  149F               	bsf	31,1	;volatile
   826     073D                     l33:	
   827                           ;main.c: 42:     ADC_initialize();
   828                           
   829     073D  189F               	btfsc	31,1	;volatile
   830     073E  2F40               	goto	u131
   831     073F  2F41               	goto	u130
   832     0740                     u131:
   833     0740  2F3D               	goto	l33
   834     0741                     u130:
   835     0741                     l671:
   836                           
   837                           ;main.c: 43: 
   838     0741  081E               	movf	30,w	;volatile
   839     0742  00F1               	movwf	?_ADC_read+1
   840     0743  1683               	bsf	3,5	;RP0=1, select bank1
   841     0744  1303               	bcf	3,6	;RP1=0, select bank1
   842     0745  081E               	movf	30,w	;volatile
   843     0746  00F0               	movwf	?_ADC_read
   844     0747                     l36:
   845     0747  0008               	return
   846     0748                     __end_of_ADC_read:
   847                           
   848                           	psect	text6
   849     071A                     __ptext6:	
   850 ;; *************** function _ADC_initialize *****************
   851 ;; Defined at:
   852 ;;		line 31 in file "main.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;		None
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		None
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   866 ;;      Params:         0       0       0       0       0
   867 ;;      Locals:         0       0       0       0       0
   868 ;;      Temps:          0       0       0       0       0
   869 ;;      Totals:         0       0       0       0       0
   870 ;;Total ram usage:        0 bytes
   871 ;; Hardware stack levels used: 1
   872 ;; This function calls:
   873 ;;		Nothing
   874 ;; This function is called by:
   875 ;;		_main
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879     071A                     _ADC_initialize:	
   880                           ;psect for function _ADC_initialize
   881                           
   882     071A                     l667:	
   883                           ;incstack = 0
   884                           ; Regs used in _ADC_initialize: []
   885                           
   886                           
   887                           ;main.c: 33: void PWM_val(unsigned char intensidad)
   888     071A  3001               	movlw	1
   889     071B  1683               	bsf	3,5	;RP0=1, select bank3
   890     071C  1703               	bsf	3,6	;RP1=1, select bank3
   891     071D  0088               	movwf	8	;volatile
   892                           
   893                           ;main.c: 34: {
   894     071E  3081               	movlw	129
   895     071F  1283               	bcf	3,5	;RP0=0, select bank0
   896     0720  1303               	bcf	3,6	;RP1=0, select bank0
   897     0721  009F               	movwf	31	;volatile
   898                           
   899                           ;main.c: 35:     CCPR1L = intensidad;
   900     0722  3080               	movlw	128
   901     0723  1683               	bsf	3,5	;RP0=1, select bank1
   902     0724  1303               	bcf	3,6	;RP1=0, select bank1
   903     0725  009F               	movwf	31	;volatile
   904     0726                     l30:
   905     0726  0008               	return
   906     0727                     __end_of_ADC_initialize:
   907     0002                     ___latbits      equ	2
   908     007E                     btemp           set	126	;btemp
   909     007E                     wtemp0          set	126
   910                           
   911                           	psect	config
   912                           
   913                           ;Config register CONFIG1 @ 0x2007
   914                           ;	Oscillator Selection bits
   915                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
   916                           ;	Watchdog Timer Enable bit
   917                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   918                           ;	Power-up Timer Enable bit
   919                           ;	PWRTE = OFF, PWRT disabled
   920                           ;	RE3/MCLR pin function select bit
   921                           ;	MCLRE = 0x1, unprogrammed default
   922                           ;	Code Protection bit
   923                           ;	CP = OFF, Program memory code protection is disabled
   924                           ;	Data Code Protection bit
   925                           ;	CPD = OFF, Data memory code protection is disabled
   926                           ;	Brown Out Reset Selection bits
   927                           ;	BOREN = ON, BOR enabled
   928                           ;	Internal External Switchover bit
   929                           ;	IESO = 0x1, unprogrammed default
   930                           ;	Fail-Safe Clock Monitor Enabled bit
   931                           ;	FCMEN = 0x1, unprogrammed default
   932                           ;	Low Voltage Programming Enable bit
   933                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   934                           ;	In-Circuit Debugger Mode bit
   935                           ;	DEBUG = 0x1, unprogrammed default
   936     2007                     	org	8199
   937     2007  2FF1               	dw	12273
   938                           
   939                           ;Config register CONFIG2 @ 0x2008
   940                           ;	Brown-out Reset Selection bit
   941                           ;	BOR4V = 0x1, unprogrammed default
   942                           ;	Flash Program Memory Self Write Enable bits
   943                           ;	WRT = OFF, Write protection off
   944     2008                     	org	8200
   945     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      6       6
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     333
                                              0 BANK0      6     6      0
                     _ADC_initialize
                           _ADC_read
                           _PWM_init
                            _PWM_val
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     164
                                              6 COMMON     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM_val                                              1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWM_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC_initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_initialize
   _ADC_read
   _PWM_init
   _PWM_val
   ___lwdiv
     ___wmul (ARG)
   ___wmul

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     13      13     92.9%
BANK0               80      6       6      7.5%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      19      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Jun 24 15:40:35 2025

                     l30 0726                       l33 073D                       l27 0736  
                     l36 0747                       l39 0719      ___wmul@multiplicand 0072  
                    l133 0754                      l135 076C                      l413 07AE  
                    l701 0781                      l711 07A4                      l703 0785  
                    l705 0796                      l713 07AA                      l721 07B7  
                    l707 079C                      l723 07BC                      l661 0727  
                    l709 079D                      l725 07C7                      l717 07AF  
                    l671 0741                      l663 0731                      l727 07E7  
                    l719 07B2                      l665 0732                      l681 074E  
                    l729 07ED                      l667 071A                      l675 0715  
                    l691 076D                      l683 075B                      l669 0737  
                    l693 076F                      l685 0762                      l677 0748  
                    l695 0775                      l687 0768                      l679 074A  
                    l697 0778                      l699 077F                      u200 0785  
                    u201 0784                      u130 0741                      u131 0740  
                    u220 0796                      u140 074E                      u221 0795  
                    u141 074D                      u215 0786                      u240 07AA  
                    u241 07A9                      u225 0792                      u170 0768  
                    u235 079E                      u171 0767                      u155 0755  
                    u180 0775                      u181 0774                      u165 075C  
                    _PR2 0092                      u257 07F3                      u195 0779  
                   _main 07AF                     btemp 007E          __end_of_PWM_val 071A  
                   start 0000         __end_of_ADC_read 0748                    ?_main 0070  
                  _ANSEL 0188          __end_of___lwdiv 07AF         __end_of_PWM_init 0737  
           main@rotation 0024                    status 0003                    wtemp0 007E  
        __initialization 07FC             __end_of_main 07FC        PWM_val@intensidad 0070  
                 ??_main 0020                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                   _CCPR1L 0015  
              ??_PWM_val 0070         ??_ADC_initialize 0070                   ___wmul 0748  
              ??___lwdiv 007A                ?_ADC_read 0070           main@adc_result 0022  
__end_of__initialization 07FC           __pcstackCOMMON 0070                ?_PWM_init 0070  
             ??_ADC_read 0072               __pmaintext 07AF                  ?___wmul 0070  
             ??_PWM_init 0070                  _PWM_val 0714                  ___lwdiv 076D  
                __ptext1 0748                  __ptext2 076D                  __ptext3 0714  
                __ptext4 0727                  __ptext5 0737                  __ptext6 071A  
              _T2CONbits 0012     end_of_initialization 07FC                _TRISCbits 0087  
            _CCP1CONbits 0017           __end_of___wmul 076D      start_initialization 07FC  
               ??___wmul 0074                ___latbits 0002            __pcstackBANK0 0020  
               ?_PWM_val 0070         ___lwdiv@dividend 0078                 ?___lwdiv 0076  
               _ADC_read 0737         ___lwdiv@quotient 007A           ___wmul@product 0074  
               _GO_nDONE 00F9        ___wmul@multiplier 0070                 _PWM_init 0727  
         _ADC_initialize 071A          ___lwdiv@divisor 0076          ___lwdiv@counter 007C  
 __end_of_ADC_initialize 0727          ?_ADC_initialize 0070  
