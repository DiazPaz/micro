

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Jun 24 17:25:04 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=1
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 26/03/2025 GMT
    18                           ; 
    19                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     0008                     PORTD           equ	8	;# 
    68     0009                     PORTE           equ	9	;# 
    69     000A                     PCLATH          equ	10	;# 
    70     000B                     INTCON          equ	11	;# 
    71     000C                     PIR1            equ	12	;# 
    72     000D                     PIR2            equ	13	;# 
    73     000E                     TMR1            equ	14	;# 
    74     000E                     TMR1L           equ	14	;# 
    75     000F                     TMR1H           equ	15	;# 
    76     0010                     T1CON           equ	16	;# 
    77     0011                     TMR2            equ	17	;# 
    78     0012                     T2CON           equ	18	;# 
    79     0013                     SSPBUF          equ	19	;# 
    80     0014                     SSPCON          equ	20	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001B                     CCPR2           equ	27	;# 
    89     001B                     CCPR2L          equ	27	;# 
    90     001C                     CCPR2H          equ	28	;# 
    91     001D                     CCP2CON         equ	29	;# 
    92     001E                     ADRESH          equ	30	;# 
    93     001F                     ADCON0          equ	31	;# 
    94     0081                     OPTION_REG      equ	129	;# 
    95     0085                     TRISA           equ	133	;# 
    96     0086                     TRISB           equ	134	;# 
    97     0087                     TRISC           equ	135	;# 
    98     0088                     TRISD           equ	136	;# 
    99     0089                     TRISE           equ	137	;# 
   100     008C                     PIE1            equ	140	;# 
   101     008D                     PIE2            equ	141	;# 
   102     008E                     PCON            equ	142	;# 
   103     008F                     OSCCON          equ	143	;# 
   104     0090                     OSCTUNE         equ	144	;# 
   105     0091                     SSPCON2         equ	145	;# 
   106     0092                     PR2             equ	146	;# 
   107     0093                     SSPADD          equ	147	;# 
   108     0093                     SSPMSK          equ	147	;# 
   109     0093                     MSK             equ	147	;# 
   110     0094                     SSPSTAT         equ	148	;# 
   111     0095                     WPUB            equ	149	;# 
   112     0096                     IOCB            equ	150	;# 
   113     0097                     VRCON           equ	151	;# 
   114     0098                     TXSTA           equ	152	;# 
   115     0099                     SPBRG           equ	153	;# 
   116     009A                     SPBRGH          equ	154	;# 
   117     009B                     PWM1CON         equ	155	;# 
   118     009C                     ECCPAS          equ	156	;# 
   119     009D                     PSTRCON         equ	157	;# 
   120     009E                     ADRESL          equ	158	;# 
   121     009F                     ADCON1          equ	159	;# 
   122     0105                     WDTCON          equ	261	;# 
   123     0107                     CM1CON0         equ	263	;# 
   124     0108                     CM2CON0         equ	264	;# 
   125     0109                     CM2CON1         equ	265	;# 
   126     010C                     EEDATA          equ	268	;# 
   127     010C                     EEDAT           equ	268	;# 
   128     010D                     EEADR           equ	269	;# 
   129     010E                     EEDATH          equ	270	;# 
   130     010F                     EEADRH          equ	271	;# 
   131     0185                     SRCON           equ	389	;# 
   132     0187                     BAUDCTL         equ	391	;# 
   133     0188                     ANSEL           equ	392	;# 
   134     0189                     ANSELH          equ	393	;# 
   135     018C                     EECON1          equ	396	;# 
   136     018D                     EECON2          equ	397	;# 
   137     0000                     INDF            equ	0	;# 
   138     0001                     TMR0            equ	1	;# 
   139     0002                     PCL             equ	2	;# 
   140     0003                     STATUS          equ	3	;# 
   141     0004                     FSR             equ	4	;# 
   142     0005                     PORTA           equ	5	;# 
   143     0006                     PORTB           equ	6	;# 
   144     0007                     PORTC           equ	7	;# 
   145     0008                     PORTD           equ	8	;# 
   146     0009                     PORTE           equ	9	;# 
   147     000A                     PCLATH          equ	10	;# 
   148     000B                     INTCON          equ	11	;# 
   149     000C                     PIR1            equ	12	;# 
   150     000D                     PIR2            equ	13	;# 
   151     000E                     TMR1            equ	14	;# 
   152     000E                     TMR1L           equ	14	;# 
   153     000F                     TMR1H           equ	15	;# 
   154     0010                     T1CON           equ	16	;# 
   155     0011                     TMR2            equ	17	;# 
   156     0012                     T2CON           equ	18	;# 
   157     0013                     SSPBUF          equ	19	;# 
   158     0014                     SSPCON          equ	20	;# 
   159     0015                     CCPR1           equ	21	;# 
   160     0015                     CCPR1L          equ	21	;# 
   161     0016                     CCPR1H          equ	22	;# 
   162     0017                     CCP1CON         equ	23	;# 
   163     0018                     RCSTA           equ	24	;# 
   164     0019                     TXREG           equ	25	;# 
   165     001A                     RCREG           equ	26	;# 
   166     001B                     CCPR2           equ	27	;# 
   167     001B                     CCPR2L          equ	27	;# 
   168     001C                     CCPR2H          equ	28	;# 
   169     001D                     CCP2CON         equ	29	;# 
   170     001E                     ADRESH          equ	30	;# 
   171     001F                     ADCON0          equ	31	;# 
   172     0081                     OPTION_REG      equ	129	;# 
   173     0085                     TRISA           equ	133	;# 
   174     0086                     TRISB           equ	134	;# 
   175     0087                     TRISC           equ	135	;# 
   176     0088                     TRISD           equ	136	;# 
   177     0089                     TRISE           equ	137	;# 
   178     008C                     PIE1            equ	140	;# 
   179     008D                     PIE2            equ	141	;# 
   180     008E                     PCON            equ	142	;# 
   181     008F                     OSCCON          equ	143	;# 
   182     0090                     OSCTUNE         equ	144	;# 
   183     0091                     SSPCON2         equ	145	;# 
   184     0092                     PR2             equ	146	;# 
   185     0093                     SSPADD          equ	147	;# 
   186     0093                     SSPMSK          equ	147	;# 
   187     0093                     MSK             equ	147	;# 
   188     0094                     SSPSTAT         equ	148	;# 
   189     0095                     WPUB            equ	149	;# 
   190     0096                     IOCB            equ	150	;# 
   191     0097                     VRCON           equ	151	;# 
   192     0098                     TXSTA           equ	152	;# 
   193     0099                     SPBRG           equ	153	;# 
   194     009A                     SPBRGH          equ	154	;# 
   195     009B                     PWM1CON         equ	155	;# 
   196     009C                     ECCPAS          equ	156	;# 
   197     009D                     PSTRCON         equ	157	;# 
   198     009E                     ADRESL          equ	158	;# 
   199     009F                     ADCON1          equ	159	;# 
   200     0105                     WDTCON          equ	261	;# 
   201     0107                     CM1CON0         equ	263	;# 
   202     0108                     CM2CON0         equ	264	;# 
   203     0109                     CM2CON1         equ	265	;# 
   204     010C                     EEDATA          equ	268	;# 
   205     010C                     EEDAT           equ	268	;# 
   206     010D                     EEADR           equ	269	;# 
   207     010E                     EEDATH          equ	270	;# 
   208     010F                     EEADRH          equ	271	;# 
   209     0185                     SRCON           equ	389	;# 
   210     0187                     BAUDCTL         equ	391	;# 
   211     0188                     ANSEL           equ	392	;# 
   212     0189                     ANSELH          equ	393	;# 
   213     018C                     EECON1          equ	396	;# 
   214     018D                     EECON2          equ	397	;# 
   215     0015                     _CCPR1L         set	21
   216     001E                     _ADRESH         set	30
   217     001F                     _ADCON0         set	31
   218     0012                     _T2CONbits      set	18
   219     0017                     _CCP1CONbits    set	23
   220     00F9                     _GO_nDONE       set	249
   221     0087                     _TRISCbits      set	135
   222     009E                     _ADRESL         set	158
   223     009F                     _ADCON1         set	159
   224     0092                     _PR2            set	146
   225     008F                     _OSCCONbits     set	143
   226     0188                     _ANSEL          set	392
   227                           
   228                           	psect	cinit
   229     07FC                     start_initialization:	
   230                           ; #config settings
   231                           
   232     07FC                     __initialization:
   233     07FC                     end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236     07FC                     __end_of__initialization:
   237     07FC  0183               	clrf	3
   238     07FD  120A  118A  2FB6   	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	cstackCOMMON
   241     0070                     __pcstackCOMMON:
   242     0070                     ?_PWM_init:
   243     0070                     ?_ADC_initialize:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ?_PWM_val:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ?_main:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_ADC_read:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ?___wmul:	
   256                           ; 2 bytes @ 0x0
   257                           
   258     0070                     PWM_val@intensidad:	
   259                           ; 2 bytes @ 0x0
   260                           
   261     0070                     ___wmul@multiplier:	
   262                           ; 1 bytes @ 0x0
   263                           
   264     0070                     ??_PWM_init:	
   265                           ; 2 bytes @ 0x0
   266                           
   267     0070                     ??_ADC_initialize:	
   268                           ; 1 bytes @ 0x0
   269                           
   270     0070                     ??_PWM_val:	
   271                           ; 1 bytes @ 0x0
   272                           
   273                           
   274                           ; 1 bytes @ 0x0
   275     0070                     	ds	2
   276     0072                     ___wmul@multiplicand:
   277     0072                     ??_ADC_read:	
   278                           ; 2 bytes @ 0x2
   279                           
   280                           
   281                           ; 1 bytes @ 0x2
   282     0072                     	ds	2
   283     0074                     ___wmul@product:
   284     0074                     ??___wmul:	
   285                           ; 2 bytes @ 0x4
   286                           
   287                           
   288                           ; 1 bytes @ 0x4
   289     0074                     	ds	2
   290     0076                     ?___lwdiv:
   291     0076                     ___lwdiv@divisor:	
   292                           ; 2 bytes @ 0x6
   293                           
   294                           
   295                           ; 2 bytes @ 0x6
   296     0076                     	ds	2
   297     0078                     ___lwdiv@dividend:
   298                           
   299                           ; 2 bytes @ 0x8
   300     0078                     	ds	2
   301     007A                     ___lwdiv@quotient:
   302     007A                     ??___lwdiv:	
   303                           ; 2 bytes @ 0xA
   304                           
   305                           
   306                           ; 1 bytes @ 0xA
   307     007A                     	ds	2
   308     007C                     ___lwdiv@counter:
   309                           
   310                           ; 1 bytes @ 0xC
   311     007C                     	ds	1
   312     007D                     ??_main:
   313                           
   314                           	psect	cstackBANK0
   315     0020                     __pcstackBANK0:	
   316                           ; 1 bytes @ 0xD
   317                           
   318     0020                     main@adc_result:
   319                           
   320                           ; 2 bytes @ 0x0
   321     0020                     	ds	2
   322     0022                     main@rotation:
   323                           
   324                           ; 2 bytes @ 0x2
   325     0022                     	ds	2
   326                           
   327                           	psect	maintext
   328     07B6                     __pmaintext:	
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 54 in file "main.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;  rotation        2    2[BANK0 ] unsigned int 
   339 ;;  adc_result      2    0[BANK0 ] unsigned int 
   340 ;; Return value:  Size  Location     Type
   341 ;;                  1    wreg      void 
   342 ;; Registers used:
   343 ;;		wreg, status,2, status,0, pclath, cstack
   344 ;; Tracked objects:
   345 ;;		On entry : B00/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   349 ;;      Params:         0       0       0       0       0
   350 ;;      Locals:         0       4       0       0       0
   351 ;;      Temps:          0       0       0       0       0
   352 ;;      Totals:         0       4       0       0       0
   353 ;;Total ram usage:        4 bytes
   354 ;; Hardware stack levels required when called: 1
   355 ;; This function calls:
   356 ;;		_ADC_initialize
   357 ;;		_ADC_read
   358 ;;		_PWM_init
   359 ;;		_PWM_val
   360 ;;		___lwdiv
   361 ;;		___wmul
   362 ;; This function is called by:
   363 ;;		Startup code after reset
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367     07B6                     _main:	
   368                           ;psect for function _main
   369                           
   370     07B6                     l721:	
   371                           ;incstack = 0
   372                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   373                           
   374                           
   375                           ;main.c: 56: }
   376     07B6  1683               	bsf	3,5	;RP0=1, select bank1
   377     07B7  1303               	bcf	3,6	;RP1=0, select bank1
   378     07B8  1107               	bcf	7,2	;volatile
   379     07B9                     l723:
   380     07B9  120A  118A  2738  120A  118A  	fcall	_PWM_init
   381     07BE                     l725:
   382     07BE  120A  118A  271D  120A  118A  	fcall	_ADC_initialize
   383     07C3                     l727:
   384     07C3  120A  118A  272A  120A  118A  	fcall	_ADC_read
   385     07C8  0871               	movf	?_ADC_read+1,w
   386     07C9  1283               	bcf	3,5	;RP0=0, select bank0
   387     07CA  1303               	bcf	3,6	;RP1=0, select bank0
   388     07CB  00A1               	movwf	main@adc_result+1
   389     07CC  0870               	movf	?_ADC_read,w
   390     07CD  00A0               	movwf	main@adc_result
   391     07CE                     l729:
   392     07CE  30FF               	movlw	255
   393     07CF  00F6               	movwf	___lwdiv@divisor
   394     07D0  3003               	movlw	3
   395     07D1  00F7               	movwf	___lwdiv@divisor+1
   396     07D2  0821               	movf	main@adc_result+1,w
   397     07D3  00F1               	movwf	___wmul@multiplier+1
   398     07D4  0820               	movf	main@adc_result,w
   399     07D5  00F0               	movwf	___wmul@multiplier
   400     07D6  3011               	movlw	17
   401     07D7  00F2               	movwf	___wmul@multiplicand
   402     07D8  3000               	movlw	0
   403     07D9  00F3               	movwf	___wmul@multiplicand+1
   404     07DA  120A  118A  274F  120A  118A  	fcall	___wmul
   405     07DF  0871               	movf	?___wmul+1,w
   406     07E0  00F9               	movwf	___lwdiv@dividend+1
   407     07E1  0870               	movf	?___wmul,w
   408     07E2  00F8               	movwf	___lwdiv@dividend
   409     07E3  120A  118A  2774  120A  118A  	fcall	___lwdiv
   410     07E8  0876               	movf	?___lwdiv,w
   411     07E9  3E03               	addlw	3
   412     07EA  1283               	bcf	3,5	;RP0=0, select bank0
   413     07EB  1303               	bcf	3,6	;RP1=0, select bank0
   414     07EC  00A2               	movwf	main@rotation
   415     07ED  0877               	movf	?___lwdiv+1,w
   416     07EE  1803               	skipnc
   417     07EF  3E01               	addlw	1
   418     07F0  3E00               	addlw	0
   419     07F1  00A3               	movwf	main@rotation+1
   420     07F2                     l731:
   421     07F2  0822               	movf	main@rotation,w
   422     07F3  120A  118A  2717  120A  118A  	fcall	_PWM_val
   423     07F8  2FC3               	goto	l727
   424     07F9  120A  118A  2800   	ljmp	start
   425     07FC                     __end_of_main:
   426                           
   427                           	psect	text1
   428     074F                     __ptext1:	
   429 ;; *************** function ___wmul *****************
   430 ;; Defined at:
   431 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;  multiplier      2    0[COMMON] unsigned int 
   434 ;;  multiplicand    2    2[COMMON] unsigned int 
   435 ;; Auto vars:     Size  Location     Type
   436 ;;  product         2    4[COMMON] unsigned int 
   437 ;; Return value:  Size  Location     Type
   438 ;;                  2    0[COMMON] unsigned int 
   439 ;; Registers used:
   440 ;;		wreg, status,2, status,0
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   446 ;;      Params:         4       0       0       0       0
   447 ;;      Locals:         2       0       0       0       0
   448 ;;      Temps:          0       0       0       0       0
   449 ;;      Totals:         6       0       0       0       0
   450 ;;Total ram usage:        6 bytes
   451 ;; Hardware stack levels used: 1
   452 ;; This function calls:
   453 ;;		Nothing
   454 ;; This function is called by:
   455 ;;		_main
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459     074F                     ___wmul:	
   460                           ;psect for function ___wmul
   461                           
   462     074F                     l681:	
   463                           ;incstack = 0
   464                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   465                           
   466     074F  01F4               	clrf	___wmul@product
   467     0750  01F5               	clrf	___wmul@product+1
   468     0751                     l683:
   469     0751  1C70               	btfss	___wmul@multiplier,0
   470     0752  2F54               	goto	u141
   471     0753  2F55               	goto	u140
   472     0754                     u141:
   473     0754  2F5B               	goto	l135
   474     0755                     u140:
   475     0755                     l685:
   476     0755  0872               	movf	___wmul@multiplicand,w
   477     0756  07F4               	addwf	___wmul@product,f
   478     0757  1803               	skipnc
   479     0758  0AF5               	incf	___wmul@product+1,f
   480     0759  0873               	movf	___wmul@multiplicand+1,w
   481     075A  07F5               	addwf	___wmul@product+1,f
   482     075B                     l135:
   483     075B  3001               	movlw	1
   484     075C                     u155:
   485     075C  1003               	clrc
   486     075D  0DF2               	rlf	___wmul@multiplicand,f
   487     075E  0DF3               	rlf	___wmul@multiplicand+1,f
   488     075F  3EFF               	addlw	-1
   489     0760  1D03               	skipz
   490     0761  2F5C               	goto	u155
   491     0762                     l687:
   492     0762  3001               	movlw	1
   493     0763                     u165:
   494     0763  1003               	clrc
   495     0764  0CF1               	rrf	___wmul@multiplier+1,f
   496     0765  0CF0               	rrf	___wmul@multiplier,f
   497     0766  3EFF               	addlw	-1
   498     0767  1D03               	skipz
   499     0768  2F63               	goto	u165
   500     0769                     l689:
   501     0769  0870               	movf	___wmul@multiplier,w
   502     076A  0471               	iorwf	___wmul@multiplier+1,w
   503     076B  1D03               	btfss	3,2
   504     076C  2F6E               	goto	u171
   505     076D  2F6F               	goto	u170
   506     076E                     u171:
   507     076E  2F51               	goto	l683
   508     076F                     u170:
   509     076F                     l691:
   510     076F  0875               	movf	___wmul@product+1,w
   511     0770  00F1               	movwf	?___wmul+1
   512     0771  0874               	movf	___wmul@product,w
   513     0772  00F0               	movwf	?___wmul
   514     0773                     l137:
   515     0773  0008               	return
   516     0774                     __end_of___wmul:
   517                           
   518                           	psect	text2
   519     0774                     __ptext2:	
   520 ;; *************** function ___lwdiv *****************
   521 ;; Defined at:
   522 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;  divisor         2    6[COMMON] unsigned int 
   525 ;;  dividend        2    8[COMMON] unsigned int 
   526 ;; Auto vars:     Size  Location     Type
   527 ;;  quotient        2   10[COMMON] unsigned int 
   528 ;;  counter         1   12[COMMON] unsigned char 
   529 ;; Return value:  Size  Location     Type
   530 ;;                  2    6[COMMON] unsigned int 
   531 ;; Registers used:
   532 ;;		wreg, status,2, status,0
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   538 ;;      Params:         4       0       0       0       0
   539 ;;      Locals:         3       0       0       0       0
   540 ;;      Temps:          0       0       0       0       0
   541 ;;      Totals:         7       0       0       0       0
   542 ;;Total ram usage:        7 bytes
   543 ;; Hardware stack levels used: 1
   544 ;; This function calls:
   545 ;;		Nothing
   546 ;; This function is called by:
   547 ;;		_main
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551     0774                     ___lwdiv:	
   552                           ;psect for function ___lwdiv
   553                           
   554     0774                     l695:	
   555                           ;incstack = 0
   556                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   557                           
   558     0774  01FA               	clrf	___lwdiv@quotient
   559     0775  01FB               	clrf	___lwdiv@quotient+1
   560     0776                     l697:
   561     0776  0876               	movf	___lwdiv@divisor,w
   562     0777  0477               	iorwf	___lwdiv@divisor+1,w
   563     0778  1903               	btfsc	3,2
   564     0779  2F7B               	goto	u181
   565     077A  2F7C               	goto	u180
   566     077B                     u181:
   567     077B  2FB1               	goto	l717
   568     077C                     u180:
   569     077C                     l699:
   570     077C  3001               	movlw	1
   571     077D  00FC               	movwf	___lwdiv@counter
   572     077E  2F88               	goto	l705
   573     077F                     l701:
   574     077F  3001               	movlw	1
   575     0780                     u195:
   576     0780  1003               	clrc
   577     0781  0DF6               	rlf	___lwdiv@divisor,f
   578     0782  0DF7               	rlf	___lwdiv@divisor+1,f
   579     0783  3EFF               	addlw	-1
   580     0784  1D03               	skipz
   581     0785  2F80               	goto	u195
   582     0786                     l703:
   583     0786  3001               	movlw	1
   584     0787  07FC               	addwf	___lwdiv@counter,f
   585     0788                     l705:
   586     0788  1FF7               	btfss	___lwdiv@divisor+1,7
   587     0789  2F8B               	goto	u201
   588     078A  2F8C               	goto	u200
   589     078B                     u201:
   590     078B  2F7F               	goto	l701
   591     078C                     u200:
   592     078C                     l707:
   593     078C  3001               	movlw	1
   594     078D                     u215:
   595     078D  1003               	clrc
   596     078E  0DFA               	rlf	___lwdiv@quotient,f
   597     078F  0DFB               	rlf	___lwdiv@quotient+1,f
   598     0790  3EFF               	addlw	-1
   599     0791  1D03               	skipz
   600     0792  2F8D               	goto	u215
   601     0793  0877               	movf	___lwdiv@divisor+1,w
   602     0794  0279               	subwf	___lwdiv@dividend+1,w
   603     0795  1D03               	skipz
   604     0796  2F99               	goto	u225
   605     0797  0876               	movf	___lwdiv@divisor,w
   606     0798  0278               	subwf	___lwdiv@dividend,w
   607     0799                     u225:
   608     0799  1C03               	skipc
   609     079A  2F9C               	goto	u221
   610     079B  2F9D               	goto	u220
   611     079C                     u221:
   612     079C  2FA4               	goto	l713
   613     079D                     u220:
   614     079D                     l709:
   615     079D  0876               	movf	___lwdiv@divisor,w
   616     079E  02F8               	subwf	___lwdiv@dividend,f
   617     079F  0877               	movf	___lwdiv@divisor+1,w
   618     07A0  1C03               	skipc
   619     07A1  03F9               	decf	___lwdiv@dividend+1,f
   620     07A2  02F9               	subwf	___lwdiv@dividend+1,f
   621     07A3                     l711:
   622     07A3  147A               	bsf	___lwdiv@quotient,0
   623     07A4                     l713:
   624     07A4  3001               	movlw	1
   625     07A5                     u235:
   626     07A5  1003               	clrc
   627     07A6  0CF7               	rrf	___lwdiv@divisor+1,f
   628     07A7  0CF6               	rrf	___lwdiv@divisor,f
   629     07A8  3EFF               	addlw	-1
   630     07A9  1D03               	skipz
   631     07AA  2FA5               	goto	u235
   632     07AB                     l715:
   633     07AB  3001               	movlw	1
   634     07AC  02FC               	subwf	___lwdiv@counter,f
   635     07AD  1D03               	btfss	3,2
   636     07AE  2FB0               	goto	u241
   637     07AF  2FB1               	goto	u240
   638     07B0                     u241:
   639     07B0  2F8C               	goto	l707
   640     07B1                     u240:
   641     07B1                     l717:
   642     07B1  087B               	movf	___lwdiv@quotient+1,w
   643     07B2  00F7               	movwf	?___lwdiv+1
   644     07B3  087A               	movf	___lwdiv@quotient,w
   645     07B4  00F6               	movwf	?___lwdiv
   646     07B5                     l415:
   647     07B5  0008               	return
   648     07B6                     __end_of___lwdiv:
   649                           
   650                           	psect	text3
   651     0717                     __ptext3:	
   652 ;; *************** function _PWM_val *****************
   653 ;; Defined at:
   654 ;;		line 49 in file "main.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;  intensidad      1    wreg     unsigned char 
   657 ;; Auto vars:     Size  Location     Type
   658 ;;  intensidad      1    0[COMMON] unsigned char 
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   668 ;;      Params:         0       0       0       0       0
   669 ;;      Locals:         1       0       0       0       0
   670 ;;      Temps:          0       0       0       0       0
   671 ;;      Totals:         1       0       0       0       0
   672 ;;Total ram usage:        1 bytes
   673 ;; Hardware stack levels used: 1
   674 ;; This function calls:
   675 ;;		Nothing
   676 ;; This function is called by:
   677 ;;		_main
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681     0717                     _PWM_val:	
   682                           ;psect for function _PWM_val
   683                           
   684                           
   685                           ;incstack = 0
   686                           ; Regs used in _PWM_val: [wreg]
   687                           ;PWM_val@intensidad stored from wreg
   688     0717  00F0               	movwf	PWM_val@intensidad
   689     0718                     l679:
   690                           
   691                           ;main.c: 49:         unsigned int adc_result = ADC_read();;main.c: 50: ;main.c: 51: 
   692     0718  0870               	movf	PWM_val@intensidad,w
   693     0719  1283               	bcf	3,5	;RP0=0, select bank0
   694     071A  1303               	bcf	3,6	;RP1=0, select bank0
   695     071B  0095               	movwf	21	;volatile
   696     071C                     l41:
   697     071C  0008               	return
   698     071D                     __end_of_PWM_val:
   699                           
   700                           	psect	text4
   701     0738                     __ptext4:	
   702 ;; *************** function _PWM_init *****************
   703 ;; Defined at:
   704 ;;		line 15 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;		None
   709 ;; Return value:  Size  Location     Type
   710 ;;                  1    wreg      void 
   711 ;; Registers used:
   712 ;;		wreg, status,2, status,0
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   718 ;;      Params:         0       0       0       0       0
   719 ;;      Locals:         0       0       0       0       0
   720 ;;      Temps:          0       0       0       0       0
   721 ;;      Totals:         0       0       0       0       0
   722 ;;Total ram usage:        0 bytes
   723 ;; Hardware stack levels used: 1
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731     0738                     _PWM_init:	
   732                           ;psect for function _PWM_init
   733                           
   734     0738                     l663:	
   735                           ;incstack = 0
   736                           ; Regs used in _PWM_init: [wreg+status,2+status,0]
   737                           
   738                           
   739                           ;main.c: 17: 
   740     0738  1683               	bsf	3,5	;RP0=1, select bank1
   741     0739  1303               	bcf	3,6	;RP1=0, select bank1
   742     073A  140F               	bsf	15,0	;volatile
   743     073B                     l665:
   744                           
   745                           ;main.c: 18: 
   746     073B  080F               	movf	15,w	;volatile
   747     073C  398F               	andlw	-113
   748     073D  3830               	iorlw	48
   749     073E  008F               	movwf	15	;volatile
   750                           
   751                           ;main.c: 20: 
   752     073F  1283               	bcf	3,5	;RP0=0, select bank0
   753     0740  1303               	bcf	3,6	;RP1=0, select bank0
   754     0741  0817               	movf	23,w	;volatile
   755     0742  39F0               	andlw	-16
   756     0743  380C               	iorlw	12
   757     0744  0097               	movwf	23	;volatile
   758                           
   759                           ;main.c: 21: void ADC_initialize()
   760     0745  303F               	movlw	-193
   761     0746  0597               	andwf	23,f	;volatile
   762                           
   763                           ;main.c: 24:     ADCON0 = 0x81;
   764     0747  3003               	movlw	3
   765     0748  0492               	iorwf	18,f	;volatile
   766     0749                     l667:
   767                           
   768                           ;main.c: 25:     ADCON1 = 0x80;
   769     0749  1512               	bsf	18,2	;volatile
   770     074A                     l669:
   771                           
   772                           ;main.c: 27: 
   773     074A  309B               	movlw	155
   774     074B  1683               	bsf	3,5	;RP0=1, select bank1
   775     074C  1303               	bcf	3,6	;RP1=0, select bank1
   776     074D  0092               	movwf	18	;volatile
   777     074E                     l29:
   778     074E  0008               	return
   779     074F                     __end_of_PWM_init:
   780                           
   781                           	psect	text5
   782     072A                     __ptext5:	
   783 ;; *************** function _ADC_read *****************
   784 ;; Defined at:
   785 ;;		line 41 in file "main.c"
   786 ;; Parameters:    Size  Location     Type
   787 ;;		None
   788 ;; Auto vars:     Size  Location     Type
   789 ;;		None
   790 ;; Return value:  Size  Location     Type
   791 ;;                  2    0[COMMON] unsigned int 
   792 ;; Registers used:
   793 ;;		wreg
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   799 ;;      Params:         2       0       0       0       0
   800 ;;      Locals:         0       0       0       0       0
   801 ;;      Temps:          0       0       0       0       0
   802 ;;      Totals:         2       0       0       0       0
   803 ;;Total ram usage:        2 bytes
   804 ;; Hardware stack levels used: 1
   805 ;; This function calls:
   806 ;;		Nothing
   807 ;; This function is called by:
   808 ;;		_main
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812     072A                     _ADC_read:	
   813                           ;psect for function _ADC_read
   814                           
   815     072A                     l673:	
   816                           ;incstack = 0
   817                           ; Regs used in _ADC_read: [wreg]
   818                           
   819                           
   820                           ;main.c: 43:     TRISCbits.TRISC2 = 0;
   821                           ;main.c: 44:     PWM_init();
   822     072A  1283               	bcf	3,5	;RP0=0, select bank0
   823     072B  1303               	bcf	3,6	;RP1=0, select bank0
   824     072C  149F               	bsf	31,1	;volatile
   825     072D                     l35:	
   826                           ;main.c: 45:     ADC_initialize();
   827                           
   828     072D  189F               	btfsc	31,1	;volatile
   829     072E  2F30               	goto	u131
   830     072F  2F31               	goto	u130
   831     0730                     u131:
   832     0730  2F2D               	goto	l35
   833     0731                     u130:
   834     0731                     l675:
   835                           
   836                           ;main.c: 46: 
   837     0731  081E               	movf	30,w	;volatile
   838     0732  00F1               	movwf	?_ADC_read+1
   839     0733  1683               	bsf	3,5	;RP0=1, select bank1
   840     0734  1303               	bcf	3,6	;RP1=0, select bank1
   841     0735  081E               	movf	30,w	;volatile
   842     0736  00F0               	movwf	?_ADC_read
   843     0737                     l38:
   844     0737  0008               	return
   845     0738                     __end_of_ADC_read:
   846                           
   847                           	psect	text6
   848     071D                     __ptext6:	
   849 ;; *************** function _ADC_initialize *****************
   850 ;; Defined at:
   851 ;;		line 34 in file "main.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		None
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   865 ;;      Params:         0       0       0       0       0
   866 ;;      Locals:         0       0       0       0       0
   867 ;;      Temps:          0       0       0       0       0
   868 ;;      Totals:         0       0       0       0       0
   869 ;;Total ram usage:        0 bytes
   870 ;; Hardware stack levels used: 1
   871 ;; This function calls:
   872 ;;		Nothing
   873 ;; This function is called by:
   874 ;;		_main
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878     071D                     _ADC_initialize:	
   879                           ;psect for function _ADC_initialize
   880                           
   881     071D                     l671:	
   882                           ;incstack = 0
   883                           ; Regs used in _ADC_initialize: []
   884                           
   885                           
   886                           ;main.c: 36: void PWM_val(unsigned char intensidad)
   887     071D  3001               	movlw	1
   888     071E  1683               	bsf	3,5	;RP0=1, select bank3
   889     071F  1703               	bsf	3,6	;RP1=1, select bank3
   890     0720  0088               	movwf	8	;volatile
   891                           
   892                           ;main.c: 37: {
   893     0721  3081               	movlw	129
   894     0722  1283               	bcf	3,5	;RP0=0, select bank0
   895     0723  1303               	bcf	3,6	;RP1=0, select bank0
   896     0724  009F               	movwf	31	;volatile
   897                           
   898                           ;main.c: 38:     CCPR1L = intensidad;
   899     0725  3080               	movlw	128
   900     0726  1683               	bsf	3,5	;RP0=1, select bank1
   901     0727  1303               	bcf	3,6	;RP1=0, select bank1
   902     0728  009F               	movwf	31	;volatile
   903     0729                     l32:
   904     0729  0008               	return
   905     072A                     __end_of_ADC_initialize:
   906     0002                     ___latbits      equ	2
   907     007E                     btemp           set	126	;btemp
   908     007E                     wtemp0          set	126
   909                           
   910                           	psect	config
   911                           
   912                           ;Config register CONFIG1 @ 0x2007
   913                           ;	Oscillator Selection bits
   914                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
   915                           ;	Watchdog Timer Enable bit
   916                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   917                           ;	Power-up Timer Enable bit
   918                           ;	PWRTE = OFF, PWRT disabled
   919                           ;	RE3/MCLR pin function select bit
   920                           ;	MCLRE = 0x1, unprogrammed default
   921                           ;	Code Protection bit
   922                           ;	CP = OFF, Program memory code protection is disabled
   923                           ;	Data Code Protection bit
   924                           ;	CPD = OFF, Data memory code protection is disabled
   925                           ;	Brown Out Reset Selection bits
   926                           ;	BOREN = ON, BOR enabled
   927                           ;	Internal External Switchover bit
   928                           ;	IESO = 0x1, unprogrammed default
   929                           ;	Fail-Safe Clock Monitor Enabled bit
   930                           ;	FCMEN = 0x1, unprogrammed default
   931                           ;	Low Voltage Programming Enable bit
   932                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   933                           ;	In-Circuit Debugger Mode bit
   934                           ;	DEBUG = 0x1, unprogrammed default
   935     2007                     	org	8199
   936     2007  2FF1               	dw	12273
   937                           
   938                           ;Config register CONFIG2 @ 0x2008
   939                           ;	Brown-out Reset Selection bit
   940                           ;	BOR4V = 0x1, unprogrammed default
   941                           ;	Flash Program Memory Self Write Enable bits
   942                           ;	WRT = OFF, Write protection off
   943     2008                     	org	8200
   944     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     333
                                              0 BANK0      4     4      0
                     _ADC_initialize
                           _ADC_read
                           _PWM_init
                            _PWM_val
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     164
                                              6 COMMON     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM_val                                              1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWM_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC_initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_initialize
   _ADC_read
   _PWM_init
   _PWM_val
   ___lwdiv
     ___wmul (ARG)
   ___wmul

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     13      13     92.9%
BANK0               80      4       4      5.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      17      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Jun 24 17:25:04 2025

                     l32 0729                       l41 071C                       l35 072D  
                     l29 074E                       l38 0737      ___wmul@multiplicand 0072  
                    l135 075B                      l137 0773                      l415 07B5  
                    l701 077F                      l711 07A3                      l703 0786  
                    l713 07A4                      l705 0788                      l721 07B6  
                    l715 07AB                      l707 078C                      l731 07F2  
                    l723 07B9                      l709 079D                      l717 07B1  
                    l725 07BE                      l671 071D                      l663 0738  
                    l727 07C3                      l673 072A                      l665 073B  
                    l681 074F                      l729 07CE                      l675 0731  
                    l667 0749                      l691 076F                      l683 0751  
                    l669 074A                      l685 0755                      l679 0718  
                    l695 0774                      l687 0762                      l697 0776  
                    l689 0769                      l699 077C                      u200 078C  
                    u201 078B                      u130 0731                      u131 0730  
                    u220 079D                      u140 0755                      u221 079C  
                    u141 0754                      u215 078D                      u240 07B1  
                    u241 07B0                      u225 0799                      u170 076F  
                    u235 07A5                      u171 076E                      u155 075C  
                    u180 077C                      u181 077B                      u165 0763  
                    _PR2 0092                      u195 0780                     _main 07B6  
                   btemp 007E          __end_of_PWM_val 071D                     start 0000  
       __end_of_ADC_read 0738                    ?_main 0070                    _ANSEL 0188  
        __end_of___lwdiv 07B6         __end_of_PWM_init 074F             main@rotation 0022  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07FC        PWM_val@intensidad 0070                   ??_main 007D  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E                   _CCPR1L 0015                ??_PWM_val 0070  
       ??_ADC_initialize 0070                   ___wmul 074F                ??___lwdiv 007A  
              ?_ADC_read 0070           main@adc_result 0020  __end_of__initialization 07FC  
         __pcstackCOMMON 0070                ?_PWM_init 0070               ??_ADC_read 0072  
             __pmaintext 07B6                  ?___wmul 0070               ??_PWM_init 0070  
                _PWM_val 0717                  ___lwdiv 0774                  __ptext1 074F  
                __ptext2 0774                  __ptext3 0717                  __ptext4 0738  
                __ptext5 072A                  __ptext6 071D                _T2CONbits 0012  
   end_of_initialization 07FC                _TRISCbits 0087              _CCP1CONbits 0017  
         __end_of___wmul 0774      start_initialization 07FC                 ??___wmul 0074  
              ___latbits 0002            __pcstackBANK0 0020                 ?_PWM_val 0070  
       ___lwdiv@dividend 0078                 ?___lwdiv 0076                 _ADC_read 072A  
       ___lwdiv@quotient 007A           ___wmul@product 0074                 _GO_nDONE 00F9  
      ___wmul@multiplier 0070                 _PWM_init 0738           _ADC_initialize 071D  
        ___lwdiv@divisor 0076          ___lwdiv@counter 007C   __end_of_ADC_initialize 072A  
             _OSCCONbits 008F          ?_ADC_initialize 0070  
