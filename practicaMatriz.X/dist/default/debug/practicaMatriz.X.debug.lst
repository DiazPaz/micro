

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Jun 04 17:11:58 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14     0000                     
    15                           ; Generated 12/10/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0004                     fsr             equ	4
    50     0004                     fsr0            equ	4
    51     0000                     indf            equ	0
    52     0000                     indf0           equ	0
    53     0002                     pc              equ	2
    54     0002                     pcl             equ	2
    55     000A                     pclath          equ	10
    56     0003                     status          equ	3
    57     0000                     INDF            equ	0	;# 
    58     0001                     TMR0            equ	1	;# 
    59     0002                     PCL             equ	2	;# 
    60     0003                     STATUS          equ	3	;# 
    61     0004                     FSR             equ	4	;# 
    62     0005                     PORTA           equ	5	;# 
    63     0006                     PORTB           equ	6	;# 
    64     0007                     PORTC           equ	7	;# 
    65     0008                     PORTD           equ	8	;# 
    66     0009                     PORTE           equ	9	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     000C                     PIR1            equ	12	;# 
    70     000D                     PIR2            equ	13	;# 
    71     000E                     TMR1            equ	14	;# 
    72     000E                     TMR1L           equ	14	;# 
    73     000F                     TMR1H           equ	15	;# 
    74     0010                     T1CON           equ	16	;# 
    75     0011                     TMR2            equ	17	;# 
    76     0012                     T2CON           equ	18	;# 
    77     0013                     SSPBUF          equ	19	;# 
    78     0014                     SSPCON          equ	20	;# 
    79     0015                     CCPR1           equ	21	;# 
    80     0015                     CCPR1L          equ	21	;# 
    81     0016                     CCPR1H          equ	22	;# 
    82     0017                     CCP1CON         equ	23	;# 
    83     0018                     RCSTA           equ	24	;# 
    84     0019                     TXREG           equ	25	;# 
    85     001A                     RCREG           equ	26	;# 
    86     001B                     CCPR2           equ	27	;# 
    87     001B                     CCPR2L          equ	27	;# 
    88     001C                     CCPR2H          equ	28	;# 
    89     001D                     CCP2CON         equ	29	;# 
    90     001E                     ADRESH          equ	30	;# 
    91     001F                     ADCON0          equ	31	;# 
    92     0081                     OPTION_REG      equ	129	;# 
    93     0085                     TRISA           equ	133	;# 
    94     0086                     TRISB           equ	134	;# 
    95     0087                     TRISC           equ	135	;# 
    96     0088                     TRISD           equ	136	;# 
    97     0089                     TRISE           equ	137	;# 
    98     008C                     PIE1            equ	140	;# 
    99     008D                     PIE2            equ	141	;# 
   100     008E                     PCON            equ	142	;# 
   101     008F                     OSCCON          equ	143	;# 
   102     0090                     OSCTUNE         equ	144	;# 
   103     0091                     SSPCON2         equ	145	;# 
   104     0092                     PR2             equ	146	;# 
   105     0093                     SSPADD          equ	147	;# 
   106     0093                     SSPMSK          equ	147	;# 
   107     0093                     MSK             equ	147	;# 
   108     0094                     SSPSTAT         equ	148	;# 
   109     0095                     WPUB            equ	149	;# 
   110     0096                     IOCB            equ	150	;# 
   111     0097                     VRCON           equ	151	;# 
   112     0098                     TXSTA           equ	152	;# 
   113     0099                     SPBRG           equ	153	;# 
   114     009A                     SPBRGH          equ	154	;# 
   115     009B                     PWM1CON         equ	155	;# 
   116     009C                     ECCPAS          equ	156	;# 
   117     009D                     PSTRCON         equ	157	;# 
   118     009E                     ADRESL          equ	158	;# 
   119     009F                     ADCON1          equ	159	;# 
   120     0105                     WDTCON          equ	261	;# 
   121     0107                     CM1CON0         equ	263	;# 
   122     0108                     CM2CON0         equ	264	;# 
   123     0109                     CM2CON1         equ	265	;# 
   124     010C                     EEDATA          equ	268	;# 
   125     010C                     EEDAT           equ	268	;# 
   126     010D                     EEADR           equ	269	;# 
   127     010E                     EEDATH          equ	270	;# 
   128     010F                     EEADRH          equ	271	;# 
   129     0185                     SRCON           equ	389	;# 
   130     0187                     BAUDCTL         equ	391	;# 
   131     0188                     ANSEL           equ	392	;# 
   132     0189                     ANSELH          equ	393	;# 
   133     018C                     EECON1          equ	396	;# 
   134     018D                     EECON2          equ	397	;# 
   135     0000                     INDF            equ	0	;# 
   136     0001                     TMR0            equ	1	;# 
   137     0002                     PCL             equ	2	;# 
   138     0003                     STATUS          equ	3	;# 
   139     0004                     FSR             equ	4	;# 
   140     0005                     PORTA           equ	5	;# 
   141     0006                     PORTB           equ	6	;# 
   142     0007                     PORTC           equ	7	;# 
   143     0008                     PORTD           equ	8	;# 
   144     0009                     PORTE           equ	9	;# 
   145     000A                     PCLATH          equ	10	;# 
   146     000B                     INTCON          equ	11	;# 
   147     000C                     PIR1            equ	12	;# 
   148     000D                     PIR2            equ	13	;# 
   149     000E                     TMR1            equ	14	;# 
   150     000E                     TMR1L           equ	14	;# 
   151     000F                     TMR1H           equ	15	;# 
   152     0010                     T1CON           equ	16	;# 
   153     0011                     TMR2            equ	17	;# 
   154     0012                     T2CON           equ	18	;# 
   155     0013                     SSPBUF          equ	19	;# 
   156     0014                     SSPCON          equ	20	;# 
   157     0015                     CCPR1           equ	21	;# 
   158     0015                     CCPR1L          equ	21	;# 
   159     0016                     CCPR1H          equ	22	;# 
   160     0017                     CCP1CON         equ	23	;# 
   161     0018                     RCSTA           equ	24	;# 
   162     0019                     TXREG           equ	25	;# 
   163     001A                     RCREG           equ	26	;# 
   164     001B                     CCPR2           equ	27	;# 
   165     001B                     CCPR2L          equ	27	;# 
   166     001C                     CCPR2H          equ	28	;# 
   167     001D                     CCP2CON         equ	29	;# 
   168     001E                     ADRESH          equ	30	;# 
   169     001F                     ADCON0          equ	31	;# 
   170     0081                     OPTION_REG      equ	129	;# 
   171     0085                     TRISA           equ	133	;# 
   172     0086                     TRISB           equ	134	;# 
   173     0087                     TRISC           equ	135	;# 
   174     0088                     TRISD           equ	136	;# 
   175     0089                     TRISE           equ	137	;# 
   176     008C                     PIE1            equ	140	;# 
   177     008D                     PIE2            equ	141	;# 
   178     008E                     PCON            equ	142	;# 
   179     008F                     OSCCON          equ	143	;# 
   180     0090                     OSCTUNE         equ	144	;# 
   181     0091                     SSPCON2         equ	145	;# 
   182     0092                     PR2             equ	146	;# 
   183     0093                     SSPADD          equ	147	;# 
   184     0093                     SSPMSK          equ	147	;# 
   185     0093                     MSK             equ	147	;# 
   186     0094                     SSPSTAT         equ	148	;# 
   187     0095                     WPUB            equ	149	;# 
   188     0096                     IOCB            equ	150	;# 
   189     0097                     VRCON           equ	151	;# 
   190     0098                     TXSTA           equ	152	;# 
   191     0099                     SPBRG           equ	153	;# 
   192     009A                     SPBRGH          equ	154	;# 
   193     009B                     PWM1CON         equ	155	;# 
   194     009C                     ECCPAS          equ	156	;# 
   195     009D                     PSTRCON         equ	157	;# 
   196     009E                     ADRESL          equ	158	;# 
   197     009F                     ADCON1          equ	159	;# 
   198     0105                     WDTCON          equ	261	;# 
   199     0107                     CM1CON0         equ	263	;# 
   200     0108                     CM2CON0         equ	264	;# 
   201     0109                     CM2CON1         equ	265	;# 
   202     010C                     EEDATA          equ	268	;# 
   203     010C                     EEDAT           equ	268	;# 
   204     010D                     EEADR           equ	269	;# 
   205     010E                     EEDATH          equ	270	;# 
   206     010F                     EEADRH          equ	271	;# 
   207     0185                     SRCON           equ	389	;# 
   208     0187                     BAUDCTL         equ	391	;# 
   209     0188                     ANSEL           equ	392	;# 
   210     0189                     ANSELH          equ	393	;# 
   211     018C                     EECON1          equ	396	;# 
   212     018D                     EECON2          equ	397	;# 
   213                           
   214                           	psect	idataBANK0
   215     0730                     __pidataBANK0:
   216                           
   217                           ;initializer for _patrones1
   218     0730  3410               	retlw	16
   219     0731  3428               	retlw	40
   220     0732  3428               	retlw	40
   221     0733  3428               	retlw	40
   222     0734  3428               	retlw	40
   223     0735  347C               	retlw	124
   224     0736  3454               	retlw	84
   225     0737  347C               	retlw	124
   226     0008                     _PORTD          set	8
   227     0006                     _PORTB          set	6
   228     0088                     _TRISD          set	136
   229     0086                     _TRISB          set	134
   230                           
   231                           	psect	cinit
   232     07E6                     start_initialization:	
   233                           ; #config settings
   234                           
   235     07E6                     __initialization:
   236                           
   237                           ; Initialize objects allocated to BANK0
   238     07E6  1383               	bcf	3,7	;select IRP bank0
   239     07E7  3030               	movlw	low (__pdataBANK0+8)
   240     07E8  00FD               	movwf	btemp+-1
   241     07E9  3007               	movlw	high __pidataBANK0
   242     07EA  00FE               	movwf	btemp
   243     07EB  3030               	movlw	low __pidataBANK0
   244     07EC  00FF               	movwf	btemp+1
   245     07ED  3028               	movlw	low __pdataBANK0
   246     07EE  0084               	movwf	4
   247     07EF  120A  118A  273C  120A  118A  	fcall	init_ram0
   248                           
   249                           ; Clear objects allocated to BANK0
   250     07F4  01A0               	clrf	__pbssBANK0& (0+127)
   251     07F5  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   252     07F6  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   253     07F7  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   254     07F8  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   255     07F9  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   256     07FA  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   257     07FB  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   258     07FC                     end_of_initialization:	
   259                           ;End of C runtime variable initialization code
   260                           
   261     07FC                     __end_of__initialization:
   262     07FC  0183               	clrf	3
   263     07FD  120A  118A  2F8B   	ljmp	_main	;jump to C main() function
   264                           
   265                           	psect	bssBANK0
   266     0020                     __pbssBANK0:
   267     0020                     _buffer:
   268     0020                     	ds	8
   269                           
   270                           	psect	dataBANK0
   271     0028                     __pdataBANK0:
   272     0028                     _patrones1:
   273     0028                     	ds	8
   274                           
   275                           	psect	inittext
   276     0738                     init_fetch0:	
   277                           ;	Called with low address in FSR and high address in W
   278                           
   279     0738  087E               	movf	btemp,w
   280     0739  008A               	movwf	10
   281     073A  087F               	movf	btemp+1,w
   282     073B  0082               	movwf	2
   283     073C                     init_ram0:	
   284                           ;Called with:
   285                           ;	high address of idata address in btemp 
   286                           ;	low address of idata address in btemp+1 
   287                           ;	low address of data in FSR
   288                           ;	high address + 1 of data in btemp-1
   289                           
   290     073C  120A  118A  2738  120A  118A  	fcall	init_fetch0
   291     0741  0080               	movwf	0
   292     0742  0A84               	incf	4,f
   293     0743  0804               	movf	4,w
   294     0744  067D               	xorwf	btemp+-1,w
   295     0745  1903               	btfsc	3,2
   296     0746  3400               	retlw	0
   297     0747  0AFF               	incf	btemp+1,f
   298     0748  1903               	btfsc	3,2
   299     0749  0AFE               	incf	btemp,f
   300     074A  2F3C               	goto	init_ram0
   301                           
   302                           	psect	cstackCOMMON
   303     0070                     __pcstackCOMMON:
   304     0070                     ?_rotar90:
   305     0070                     ?_main:	
   306                           ; 1 bytes @ 0x0
   307                           
   308     0070                     rotar90@src:	
   309                           ; 1 bytes @ 0x0
   310                           
   311                           
   312                           ; 1 bytes @ 0x0
   313     0070                     	ds	1
   314     0071                     rotar90@dst:
   315                           
   316                           ; 1 bytes @ 0x1
   317     0071                     	ds	1
   318     0072                     ??_rotar90:
   319                           
   320                           ; 1 bytes @ 0x2
   321     0072                     	ds	2
   322     0074                     rotar90@j:
   323                           
   324                           ; 1 bytes @ 0x4
   325     0074                     	ds	1
   326     0075                     rotar90@i:
   327                           
   328                           ; 1 bytes @ 0x5
   329     0075                     	ds	1
   330     0076                     ??_main:
   331                           
   332                           ; 1 bytes @ 0x6
   333     0076                     	ds	1
   334     0077                     main@aux:
   335                           
   336                           ; 2 bytes @ 0x7
   337     0077                     	ds	2
   338     0079                     main@i:
   339                           
   340                           ; 1 bytes @ 0x9
   341     0079                     	ds	1
   342     007A                     main@i_47:
   343                           
   344                           ; 1 bytes @ 0xA
   345     007A                     	ds	1
   346                           
   347                           	psect	maintext
   348     078B                     __pmaintext:	
   349 ;;
   350 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   351 ;;
   352 ;; *************** function _main *****************
   353 ;; Defined at:
   354 ;;		line 47 in file "main.c"
   355 ;; Parameters:    Size  Location     Type
   356 ;;		None
   357 ;; Auto vars:     Size  Location     Type
   358 ;;  i               1    9[COMMON] unsigned char 
   359 ;;  i               1   10[COMMON] unsigned char 
   360 ;;  aux             2    7[COMMON] unsigned int 
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   365 ;; Tracked objects:
   366 ;;		On entry : B00/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   370 ;;      Params:         0       0       0       0       0
   371 ;;      Locals:         4       0       0       0       0
   372 ;;      Temps:          1       0       0       0       0
   373 ;;      Totals:         5       0       0       0       0
   374 ;;Total ram usage:        5 bytes
   375 ;; Hardware stack levels required when called: 1
   376 ;; This function calls:
   377 ;;		_rotar90
   378 ;; This function is called by:
   379 ;;		Startup code after reset
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383     078B                     _main:	
   384                           ;psect for function _main
   385                           
   386     078B                     l670:	
   387                           ;incstack = 0
   388                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   389                           
   390     078B  1683               	bsf	3,5	;RP0=1, select bank1
   391     078C  1303               	bcf	3,6	;RP1=0, select bank1
   392     078D  0186               	clrf	6	;volatile
   393     078E  0188               	clrf	8	;volatile
   394     078F                     l27:
   395     078F  01F7               	clrf	main@aux
   396     0790  01F8               	clrf	main@aux+1
   397     0791                     l676:
   398     0791  01F9               	clrf	main@i
   399     0792                     l678:
   400     0792  3008               	movlw	8
   401     0793  0279               	subwf	main@i,w
   402     0794  1C03               	skipc
   403     0795  2F97               	goto	u151
   404     0796  2F98               	goto	u150
   405     0797                     u151:
   406     0797  2F99               	goto	l682
   407     0798                     u150:
   408     0798  2FB6               	goto	l692
   409     0799                     l682:
   410     0799  3001               	movlw	1
   411     079A  00F6               	movwf	??_main
   412     079B  0A79               	incf	main@i,w
   413     079C  2F9F               	goto	u164
   414     079D                     u165:
   415     079D  1003               	clrc
   416     079E  0DF6               	rlf	??_main,f
   417     079F                     u164:
   418     079F  3EFF               	addlw	-1
   419     07A0  1D03               	skipz
   420     07A1  2F9D               	goto	u165
   421     07A2  0876               	movf	??_main,w
   422     07A3  1283               	bcf	3,5	;RP0=0, select bank0
   423     07A4  1303               	bcf	3,6	;RP1=0, select bank0
   424     07A5  0086               	movwf	6	;volatile
   425     07A6                     l684:
   426     07A6  0879               	movf	main@i,w
   427     07A7  3E28               	addlw	(low (_patrones1| 0))& (0+255)
   428     07A8  0084               	movwf	4
   429     07A9  1383               	bcf	3,7	;select IRP bank0
   430     07AA  0900               	comf	0,w
   431     07AB  0088               	movwf	8	;volatile
   432     07AC                     l686:
   433     07AC  30C7               	movlw	199
   434     07AD  00F6               	movwf	??_main
   435     07AE                     u197:
   436     07AE  2FAF               	nop2
   437     07AF  0BF6               	decfsz	??_main,f
   438     07B0  2FAE               	goto	u197
   439     07B1  2FB2               	nop2
   440     07B2  2FB3               	nop2
   441     07B3                     l688:
   442     07B3  3001               	movlw	1
   443     07B4  07F9               	addwf	main@i,f
   444     07B5  2F92               	goto	l678
   445     07B6                     l692:
   446     07B6  3001               	movlw	1
   447     07B7  07F7               	addwf	main@aux,f
   448     07B8  1803               	skipnc
   449     07B9  0AF8               	incf	main@aux+1,f
   450     07BA  3000               	movlw	0
   451     07BB  07F8               	addwf	main@aux+1,f
   452     07BC  3000               	movlw	0
   453     07BD  0278               	subwf	main@aux+1,w
   454     07BE  3064               	movlw	100
   455     07BF  1903               	skipnz
   456     07C0  0277               	subwf	main@aux,w
   457     07C1  1C03               	skipc
   458     07C2  2FC4               	goto	u171
   459     07C3  2FC5               	goto	u170
   460     07C4                     u171:
   461     07C4  2F91               	goto	l676
   462     07C5                     u170:
   463     07C5                     l694:
   464     07C5  3028               	movlw	(low (_patrones1| 0))& (0+255)
   465     07C6  00F0               	movwf	rotar90@src
   466     07C7  3020               	movlw	(low (_buffer| 0))& (0+255)
   467     07C8  00F1               	movwf	rotar90@dst
   468     07C9  120A  118A  274B  120A  118A  	fcall	_rotar90
   469     07CE                     l696:
   470     07CE  01FA               	clrf	main@i_47
   471     07CF                     l702:
   472     07CF  087A               	movf	main@i_47,w
   473     07D0  3E20               	addlw	(low (_buffer| 0))& (0+255)
   474     07D1  0084               	movwf	4
   475     07D2  1383               	bcf	3,7	;select IRP bank0
   476     07D3  0800               	movf	0,w
   477     07D4  00FF               	movwf	btemp+1
   478     07D5  087A               	movf	main@i_47,w
   479     07D6  3E28               	addlw	(low (_patrones1| 0))& (0+255)
   480     07D7  0084               	movwf	4
   481     07D8  087F               	movf	btemp+1,w
   482     07D9  0080               	movwf	0
   483     07DA                     l704:
   484     07DA  3001               	movlw	1
   485     07DB  07FA               	addwf	main@i_47,f
   486     07DC                     l706:
   487     07DC  3008               	movlw	8
   488     07DD  027A               	subwf	main@i_47,w
   489     07DE  1C03               	skipc
   490     07DF  2FE1               	goto	u181
   491     07E0  2FE2               	goto	u180
   492     07E1                     u181:
   493     07E1  2FCF               	goto	l702
   494     07E2                     u180:
   495     07E2  2F8F               	goto	l27
   496     07E3  120A  118A  2800   	ljmp	start
   497     07E6                     __end_of_main:
   498                           
   499                           	psect	text1
   500     074B                     __ptext1:	
   501 ;; *************** function _rotar90 *****************
   502 ;; Defined at:
   503 ;;		line 36 in file "main.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;  src             1    0[COMMON] PTR unsigned char 
   506 ;;		 -> patrones1(8), 
   507 ;;  dst             1    1[COMMON] PTR unsigned char 
   508 ;;		 -> buffer(8), 
   509 ;; Auto vars:     Size  Location     Type
   510 ;;  j               1    4[COMMON] unsigned char 
   511 ;;  i               1    5[COMMON] unsigned char 
   512 ;; Return value:  Size  Location     Type
   513 ;;                  1    wreg      void 
   514 ;; Registers used:
   515 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   521 ;;      Params:         2       0       0       0       0
   522 ;;      Locals:         2       0       0       0       0
   523 ;;      Temps:          2       0       0       0       0
   524 ;;      Totals:         6       0       0       0       0
   525 ;;Total ram usage:        6 bytes
   526 ;; Hardware stack levels used: 1
   527 ;; This function calls:
   528 ;;		Nothing
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534     074B                     _rotar90:	
   535                           ;psect for function _rotar90
   536                           
   537     074B                     l644:	
   538                           ;incstack = 0
   539                           ; Regs used in _rotar90: [wreg-fsr0h+status,2+status,0]
   540                           
   541                           
   542                           ;main.c: 37:         }
   543     074B  01F5               	clrf	rotar90@i
   544     074C                     l650:
   545                           
   546                           ;main.c: 38: 
   547     074C  0875               	movf	rotar90@i,w
   548     074D  0771               	addwf	rotar90@dst,w
   549     074E  00F2               	movwf	??_rotar90
   550     074F  0872               	movf	??_rotar90,w
   551     0750  0084               	movwf	4
   552     0751  1383               	bcf	3,7	;select IRP bank0
   553     0752  0180               	clrf	0
   554     0753                     l652:
   555                           
   556                           ;main.c: 39: 
   557     0753  01F4               	clrf	rotar90@j
   558     0754                     l658:
   559                           
   560                           ;main.c: 40:         rotar90(patrones1, buffer);
   561     0754  0874               	movf	rotar90@j,w
   562     0755  0770               	addwf	rotar90@src,w
   563     0756  00F2               	movwf	??_rotar90
   564     0757  0872               	movf	??_rotar90,w
   565     0758  0084               	movwf	4
   566     0759  3001               	movlw	1
   567     075A  00F3               	movwf	??_rotar90+1
   568     075B  0A75               	incf	rotar90@i,w
   569     075C  2F5F               	goto	u104
   570     075D                     u105:
   571     075D  1003               	clrc
   572     075E  0DF3               	rlf	??_rotar90+1,f
   573     075F                     u104:
   574     075F  3EFF               	addlw	-1
   575     0760  1D03               	skipz
   576     0761  2F5D               	goto	u105
   577     0762  0873               	movf	??_rotar90+1,w
   578     0763  0500               	andwf	0,w
   579     0764  1903               	btfsc	3,2
   580     0765  2F67               	goto	u111
   581     0766  2F68               	goto	u110
   582     0767                     u111:
   583     0767  2F7A               	goto	l662
   584     0768                     u110:
   585     0768                     l660:
   586                           
   587                           ;main.c: 41: 
   588     0768  0875               	movf	rotar90@i,w
   589     0769  0771               	addwf	rotar90@dst,w
   590     076A  00F2               	movwf	??_rotar90
   591     076B  0872               	movf	??_rotar90,w
   592     076C  0084               	movwf	4
   593     076D  3001               	movlw	1
   594     076E  00F3               	movwf	??_rotar90+1
   595     076F  0874               	movf	rotar90@j,w
   596     0770  3C07               	sublw	7
   597     0771  3E01               	addlw	1
   598     0772  2F75               	goto	u124
   599     0773                     u125:
   600     0773  1003               	clrc
   601     0774  0DF3               	rlf	??_rotar90+1,f
   602     0775                     u124:
   603     0775  3EFF               	addlw	-1
   604     0776  1D03               	skipz
   605     0777  2F73               	goto	u125
   606     0778  0873               	movf	??_rotar90+1,w
   607     0779  0480               	iorwf	0,f
   608     077A                     l662:
   609                           
   610                           ;main.c: 43:         for(unsigned char i = 0; i < 8; i++) {
   611     077A  3001               	movlw	1
   612     077B  07F4               	addwf	rotar90@j,f
   613     077C                     l664:
   614     077C  3008               	movlw	8
   615     077D  0274               	subwf	rotar90@j,w
   616     077E  1C03               	skipc
   617     077F  2F81               	goto	u131
   618     0780  2F82               	goto	u130
   619     0781                     u131:
   620     0781  2F54               	goto	l658
   621     0782                     u130:
   622     0782                     l666:
   623                           
   624                           ;main.c: 44:             patrones1[i] = buffer[i];
   625     0782  3001               	movlw	1
   626     0783  07F5               	addwf	rotar90@i,f
   627     0784                     l668:
   628     0784  3008               	movlw	8
   629     0785  0275               	subwf	rotar90@i,w
   630     0786  1C03               	skipc
   631     0787  2F89               	goto	u141
   632     0788  2F8A               	goto	u140
   633     0789                     u141:
   634     0789  2F4C               	goto	l650
   635     078A                     u140:
   636     078A                     l22:
   637     078A  0008               	return
   638     078B                     __end_of_rotar90:
   639     0002                     ___latbits      equ	2
   640     007E                     btemp           set	126	;btemp
   641     007E                     wtemp0          set	126
   642                           
   643                           	psect	config
   644                           
   645                           ;Config register CONFIG1 @ 0x2007
   646                           ;	Oscillator Selection bits
   647                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
   648                           ;	Watchdog Timer Enable bit
   649                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   650                           ;	Power-up Timer Enable bit
   651                           ;	PWRTE = OFF, PWRT disabled
   652                           ;	RE3/MCLR pin function select bit
   653                           ;	MCLRE = 0x1, unprogrammed default
   654                           ;	Code Protection bit
   655                           ;	CP = OFF, Program memory code protection is disabled
   656                           ;	Data Code Protection bit
   657                           ;	CPD = OFF, Data memory code protection is disabled
   658                           ;	Brown Out Reset Selection bits
   659                           ;	BOREN = ON, BOR enabled
   660                           ;	Internal External Switchover bit
   661                           ;	IESO = 0x1, unprogrammed default
   662                           ;	Fail-Safe Clock Monitor Enabled bit
   663                           ;	FCMEN = 0x1, unprogrammed default
   664                           ;	Low Voltage Programming Enable bit
   665                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   666                           ;	In-Circuit Debugger Mode bit
   667                           ;	DEBUG = 0x1, unprogrammed default
   668     2007                     	org	8199
   669     2007  2FF1               	dw	12273
   670                           
   671                           ;Config register CONFIG2 @ 0x2008
   672                           ;	Brown-out Reset Selection bit
   673                           ;	BOR4V = 0x1, unprogrammed default
   674                           ;	Flash Program Memory Self Write Enable bits
   675                           ;	WRT = OFF, Write protection off
   676     2008                     	org	8200
   677     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      0      16
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    rotar90@dst	PTR unsigned char  size(1) Largest target is 8
		 -> buffer(BANK0[8]), 

    rotar90@src	PTR unsigned char  size(1) Largest target is 8
		 -> patrones1(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->_rotar90

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     496
                                              6 COMMON     5     5      0
                            _rotar90
 ---------------------------------------------------------------------------------
 (1) _rotar90                                              6     4      2     270
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _rotar90

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      0      16     20.0%
BITBANK0            80      0       0      0.0%
COMMON              14     11      11     78.6%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      27      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Jun 04 17:11:58 2025

                      pc 0002                       l22 078A                       l27 078F  
                     fsr 0004                      l702 07CF                      l704 07DA  
                    l650 074C                      l706 07DC                      l660 0768  
                    l652 0753                      l644 074B                      l662 077A  
                    l670 078B                      l664 077C                      l666 0782  
                    l658 0754                      l682 0799                      l668 0784  
                    l684 07A6                      l692 07B6                      l676 0791  
                    l694 07C5                      l686 07AC                      l678 0792  
                    l696 07CE                      l688 07B3                      u110 0768  
                    u111 0767                      u104 075F                      u105 075D  
                    u130 0782                      u131 0781                      u140 078A  
                    u124 0775                      u141 0789                      u125 0773  
                    u150 0798                      u151 0797                      u170 07C5  
                    u171 07C4                      u180 07E2                      u164 079F  
                    u181 07E1                      u165 079D                      u197 07AE  
                    fsr0 0004                      indf 0000                     _main 078B  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _PORTB 0006                    _PORTD 0008                    _TRISB 0086  
                  _TRISD 0088                    main@i 0079                    pclath 000A  
        __end_of_rotar90 078B                    status 0003                    wtemp0 007E  
        __initialization 07E6             __end_of_main 07E6                   ??_main 0076  
                 _buffer 0020                ??_rotar90 0072  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 0730               __pbssBANK0 0020  
             __pmaintext 078B                  __ptext1 074B                  _rotar90 074B  
                main@aux 0077     end_of_initialization 07FC      start_initialization 07E6  
             init_fetch0 0738              __pdataBANK0 0028                ___latbits 0002  
               ?_rotar90 0070                _patrones1 0028               rotar90@dst 0071  
             rotar90@src 0070                 main@i_47 007A                 init_ram0 073C  
               rotar90@i 0075                 rotar90@j 0074  
